//!! generated by clutz.
// Generated from pubsub/typedpubsub.js
declare namespace ಠ_ಠ.clutz.goog.pubsub {
  /**
   * This object is a temporary shim that provides goog.pubsub.TopicId support
   * for goog.pubsub.PubSub.  See b/12477087 for more info.
   */
  class TypedPubSub extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_pubsub_TypedPubSub : any;
    /**
     * This object is a temporary shim that provides goog.pubsub.TopicId support
     * for goog.pubsub.PubSub.  See b/12477087 for more info.
     * @param opt_async Enable asynchronous behavior.  Recommended for new code.  See notes on `goog.pubsub.PubSub.publish`.
     */
    constructor (opt_async ? : boolean ) ;
    pubSub_ : any ;
    /**
     * See `goog.pubsub.PubSub.clear`.
     * @param opt_topic Topic to clear (all topics if unspecified).
     */
    clear < PAYLOAD = any > (opt_topic ? : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > ) : void ;
    /**
     * See `goog.pubsub.PubSub.getCount`.
     * @param opt_topic The topic (all topics if unspecified).
     */
    getCount < PAYLOAD = any > (opt_topic ? : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > ) : number ;
    /**
     * See `goog.pubsub.PubSub.publish`.
     * @param topic Topic to publish to.
     * @param payload Payload passed to each subscription function.
     */
    publish < PAYLOAD = any > (topic : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > , payload : PAYLOAD ) : boolean ;
    /**
     * See `goog.pubsub.PubSub.subscribe`.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribe < PAYLOAD = any , CONTEXT = any > (topic : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > , fn : (this : CONTEXT , a : PAYLOAD ) => any , opt_context ? : CONTEXT ) : number ;
    /**
     * See `goog.pubsub.PubSub.subscribeOnce`.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked once and then unsubscribed when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribeOnce < PAYLOAD = any , CONTEXT = any > (topic : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > , fn : (this : CONTEXT , a : PAYLOAD ) => any , opt_context ? : CONTEXT ) : number ;
    /**
     * See `goog.pubsub.PubSub.unsubscribe`.
     * @param topic Topic to unsubscribe from.
     * @param fn Function to unsubscribe.
     * @param opt_context Object in whose context the function was to be called (the global scope if none).
     */
    unsubscribe < PAYLOAD = any , CONTEXT = any > (topic : ಠ_ಠ.clutz.goog.pubsub.TopicId < PAYLOAD > , fn : (this : CONTEXT , a : PAYLOAD ) => any , opt_context ? : CONTEXT ) : boolean ;
    /**
     * See `goog.pubsub.PubSub.unsubscribeByKey`.
     * @param key Subscription key.
     */
    unsubscribeByKey (key : number ) : boolean ;
  }
}
declare module 'goog:goog.pubsub.TypedPubSub' {
  import TypedPubSub = ಠ_ಠ.clutz.goog.pubsub.TypedPubSub;
  export default TypedPubSub;
}
