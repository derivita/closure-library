//!! generated by clutz.
// Generated from pubsub/topicid.js
declare namespace ಠ_ಠ.clutz.goog.pubsub {
  /**
   * A templated class that is used to register `goog.pubsub.PubSub`
   * subscribers.
   *
   * Typical usage for a publisher:
   * <code>
   * /** @type {!goog.pubsub.TopicId<!zorg.State>}
   * zorg.TopicId.STATE_CHANGE = new goog.pubsub.TopicId(
   * goog.events.getUniqueId('state-change'));
   *
   * // Compiler enforces that these types are correct.
   * pubSub.publish(zorg.TopicId.STATE_CHANGE, zorg.State.STARTED);
   * </code>
   *
   * Typical usage for a subscriber:
   * <code>
   * // Compiler enforces the callback parameter type.
   * pubSub.subscribe(zorg.TopicId.STATE_CHANGE, function(state) {
   * if (state == zorg.State.STARTED) {
   * // Handle STARTED state.
   * }
   * });
   * </code>
   */
  class TopicId < PAYLOAD = any > {
    private noStructuralTyping_goog_pubsub_TopicId : any;
    /**
     * A templated class that is used to register `goog.pubsub.PubSub`
     * subscribers.
     *
     * Typical usage for a publisher:
     * <code>
     * /** @type {!goog.pubsub.TopicId<!zorg.State>}
     * zorg.TopicId.STATE_CHANGE = new goog.pubsub.TopicId(
     * goog.events.getUniqueId('state-change'));
     *
     * // Compiler enforces that these types are correct.
     * pubSub.publish(zorg.TopicId.STATE_CHANGE, zorg.State.STARTED);
     * </code>
     *
     * Typical usage for a subscriber:
     * <code>
     * // Compiler enforces the callback parameter type.
     * pubSub.subscribe(zorg.TopicId.STATE_CHANGE, function(state) {
     * if (state == zorg.State.STARTED) {
     * // Handle STARTED state.
     * }
     * });
     * </code>
     */
    constructor (topicId : string ) ;
    toString ( ) : any ;
  }
}
declare module 'goog:goog.pubsub.TopicId' {
  import TopicId = ಠ_ಠ.clutz.goog.pubsub.TopicId;
  export default TopicId;
}
