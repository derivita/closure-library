//!! generated by clutz.
// Generated from locale/timezonedetection.js
declare namespace ಠ_ಠ.clutz.goog.locale.timeZoneDetection {
  /**
   * Whether to include the fingerprint algorithm so it can be used as a fallback.
   * Without this, the code may be stripped for modern browsers that can be
   * assumed to support the native API.
   */
  let INCLUDE_FINGERPRINT_DETECTION : boolean ;
  /**
   * Whether to use the native API for time zone detection (if the runtime
   * supports it). You might turn this off if a downstream system can't handle a
   * user's timezone as reported by the browser.
   */
  let USE_NATIVE_TIMEZONE_DETECTION : boolean ;
  /**
   * Detects browser's time zone setting. If user's country is known, a better
   * time zone choice could be guessed. Note that in many browsers this is
   * available natively as `new Intl.DateTimeFormat().resolvedOptions().timeZone`.
   * @param opt_country Two-letter ISO 3166 country code.
   * @param opt_date Date for calculating the fingerprint. Defaults to the current date.
   */
  function detectTimeZone (opt_country ? : string , opt_date ? : GlobalDate | null ) : string ;
  /**
   * Calculates time zone fingerprint by poking time zone offsets for 13
   * preselected time points.
   * See {@link goog.locale.timeZoneDetection.TZ_POKE_POINTS_}
   * @param date Date for calculating the fingerprint.
   */
  function getFingerprint (date : GlobalDate | null ) : number ;
  /**
   * Returns an array of time zones that are consistent with user's platform
   * setting. If user's country is given, only the time zone for that country is
   * returned.
   * @param opt_country 2 letter ISO 3166 country code. Helps in making a better guess for user's time zone.
   * @param opt_date Date for retrieving timezone list. Defaults to the current date.
   */
  function getTimeZoneList (opt_country ? : string , opt_date ? : GlobalDate | null ) : string [] ;
  /**
   * Allows disabling the use of native APIs so that the fingerprinting algorithm
   * can be tested.
   */
  function useNativeTimezoneDetectionForTesting (useNative : boolean ) : void ;
}
declare module 'goog:goog.locale.timeZoneDetection' {
  import timeZoneDetection = ಠ_ಠ.clutz.goog.locale.timeZoneDetection;
  export = timeZoneDetection;
}
