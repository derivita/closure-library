//!! generated by clutz.
// Generated from locale/locale.js
declare namespace ಠ_ಠ.clutz.goog.locale {
  /**
   * Enum of resources that can be registered.
   */
  /**
   * Enum of resources that can be registered.
   */
  enum Resource {
    DATE_TIME_CONSTANTS = 'DateTimeConstants' ,
    LOCAL_NAME_CONSTANTS = 'LocaleNameConstants' ,
    NUMBER_FORMAT_CONSTANTS = 'NumberFormatConstants' ,
    TIME_ZONE_ALL_LONG_NAMES = 'TimeZoneAllLongNames' ,
    TIME_ZONE_CONSTANTS = 'TimeZoneConstants' ,
    TIME_ZONE_SELECTED_IDS = 'TimeZoneSelectedIds' ,
    TIME_ZONE_SELECTED_LONG_NAMES = 'TimeZoneSelectedLongNames' ,
    TIME_ZONE_SELECTED_SHORT_NAMES = 'TimeZoneSelectedShortNames' ,
  }
  let activeLocale_ : any ;
  /**
   * Returns the language-subtag of the given language code.
   * @param languageCode Language code to extract language subtag from.
   */
  function getLanguageSubTag (languageCode : string ) : string ;
  /**
   * Retrieve the current locale
   */
  function getLocale ( ) : string ;
  /**
   * Returns the localized country name for the provided language code in the
   * current or provided locale symbols set.
   *
   * This method depends on `goog.locale.LocaleNameConstants__<locale>` available
   * from http://go/js_locale_data. User of this method has to add dependency to
   * this.
   * @param languageCode Language code to lookup the country name for.
   * @param opt_localeSymbols If omitted the current locale symbol set is used.
   */
  function getLocalizedCountryName (languageCode : string , opt_localeSymbols ? : GlobalObject | null ) : string ;
  /**
   * Returns the localized language name for the provided language code in
   * the current or provided locale symbols set.
   *
   * This method depends on `goog.locale.LocaleNameConstants__<locale>` available
   * from http://go/js_locale_data. User of this method has to add dependency to
   * this.
   * @param languageCode Language code to lookup the language name for.
   * @param opt_localeSymbols locale symbol set if given.
   */
  function getLocalizedLanguageName (languageCode : string , opt_localeSymbols ? : GlobalObject | null ) : string ;
  /**
   * Returns the localized country name for the provided language code in the
   * current or provided locale symbols set.
   *
   * This method depends on `goog.locale.LocaleNameConstants__<locale>` available
   * from http://go/js_locale_data. User of this method has to add dependency to
   * this.
   * @param regionCode Two character country code or three digit region code to look up the country name for.
   * @param opt_localeSymbols If omitted the current locale symbol set is used.
   */
  function getLocalizedRegionNameFromRegionCode (regionCode : string , opt_localeSymbols ? : GlobalObject | null ) : string ;
  /**
   * Returns the country name of the provided language code in its native
   * language.
   *
   * This method depends on goog.locale.nativeNameConstants available from
   * nativenameconstants.js. User of this method has to add dependency to this.
   * @param countryCode Code to lookup the country name for.
   */
  function getNativeCountryName (countryCode : string ) : string ;
  /**
   * Returns the language name of the provided language code in its native
   * language.
   *
   * This method depends on goog.locale.nativeNameConstants available from
   * nativenameconstants.js. User of this method has to add dependency to this.
   * @param languageCode Language code to lookup the language name for.
   */
  function getNativeLanguageName (languageCode : string ) : string ;
  /**
   * Returns the region-sub-tag of the given language code.
   * @param languageCode Language code to extract region subtag from.
   */
  function getRegionSubTag (languageCode : string ) : string ;
  /**
   * Retrieve specified resource for certain locale.
   * @param resourceName String that represents the type of resource.
   * @param opt_locale Locale ID, if not given, current locale will be assumed.
   */
  function getResource (resourceName : string , opt_locale ? : string ) : GlobalObject | null | undefined ;
  /**
   * Retrieve specified resource for certain locale with fallback. For example,
   * request of 'zh_CN' will be resolved in following order: zh_CN, zh, en.
   * If none of the above succeeds, of if the resource as indicated by
   * resourceName does not exist at all, undefined will be returned.
   * @param resourceName String that represents the type of resource.
   * @param opt_locale locale ID, if not given, current locale will be assumed.
   */
  function getResourceWithFallback (resourceName : string , opt_locale ? : string ) : GlobalObject | null | undefined ;
  /**
   * Returns the script subtag of the locale with the first alphabet in uppercase
   * and the rest 3 characters in lower case.
   * @param languageCode Language Code to extract script subtag from.
   */
  function getScriptSubTag (languageCode : string ) : string ;
  /**
   * Returns the variant-sub-tag of the given language code.
   * @param languageCode Language code to extract variant subtag from.
   */
  function getVariantSubTag (languageCode : string ) : string ;
  /**
   * Returns true if the required resource has already been registered.
   * @param resourceName String that represents the type of resource.
   * @param localeName Locale ID.
   */
  function isResourceRegistered (resourceName : string , localeName : string ) : boolean ;
  /**
   * Registers the LocaleNameConstants constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerLocaleNameConstants (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Register a resource object for certain locale.
   * @param dataObj The resource object being registered.
   * @param resourceName String that represents the type of resource.
   * @param localeName Locale ID.
   */
  function registerResource (dataObj : GlobalObject | null , resourceName : string , localeName : string ) : void ;
  /**
   * Registers the TimeZoneAllLongNames constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneAllLongNames (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Registers the timezone constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneConstants (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedIds constants object for a given locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedIds (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedLongNames constants object for a given locale
   * name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedLongNames (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Registers the TimeZoneSelectedShortNames constants object for a given
   * locale name.
   * @param dataObj The resource object.
   * @param localeName Locale ID.
   */
  function registerTimeZoneSelectedShortNames (dataObj : GlobalObject | null , localeName : string ) : void ;
  /**
   * Set current locale to the specified one.
   * @param localeName Locale name string. We are following the usage in CLDR, but can make a few compromise for existing name compatibility.
   */
  function setLocale (localeName : string ) : void ;
}
declare module 'goog:goog.locale' {
  import locale = ಠ_ಠ.clutz.goog.locale;
  export = locale;
}
