//!! generated by clutz.
// Generated from structs/stringset.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Creates a set of strings.
   */
  class StringSet {
    private noStructuralTyping_goog_structs_StringSet : any;
    /**
     * Creates a set of strings.
     * @param opt_elements Elements to add to the set. The non-string items will be converted to strings, so 15 and '15' will mean the same.
     */
    constructor (opt_elements ? : any [] ) ;
    /**
     * Returns an iterator that iterates over the elements in the set.
     * NOTE: creating the iterator copies the whole set so use {@link #forEach} when
     * possible.
     * @param opt_keys Ignored for sets.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Adds a single element to the set.
     * @param element The element to add. It will be converted to string.
     */
    add (element : any ) : void ;
    /**
     * Adds a the elements of an array to this set.
     * @param arr The array to add the elements of.
     */
    addArray (arr : any [] ) : void ;
    /**
     * Adds a the elements of a set to this set.
     * @param stringSet The set to add the elements of.
     */
    addSet (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : void ;
    clear ( ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.structs.StringSet ;
    /**
     * Tells if the set contains the given element.
     * @param element The element to check.
     */
    contains (element : any ) : boolean ;
    /**
     * Tells if the set contains all elements of the array.
     * @param arr The elements to check.
     */
    containsArray (arr : any [] ) : boolean ;
    /**
     * Removes a single element from the set.
     * @param element The element to remove.
     */
    delete (element : any ) : boolean ;
    /**
     * Tells if this set has the same elements as the given set.
     * @param stringSet The other set.
     */
    equals (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : boolean ;
    /**
     * Calls a function for each element in the set.
     * @param f The function to call for every element. It takes the element, undefined (because sets have no notion of keys), and the set.
     * @param opt_obj The object to be used as the value of 'this' within `f`.
     */
    forEach (f : (a : string , b : undefined , c : ಠ_ಠ.clutz.goog.structs.StringSet ) => any , opt_obj ? : GlobalObject | null ) : void ;
    /**
     * Counts the number of elements in the set in linear time.
     * MOE:begin_strip
     * NOTE: getCount is always called at most once per set instance in google3.
     * MOE:end_strip
     * If this usage pattern won't change, the linear getCount implementation is
     * better, because
     * <li>populating a set and getting the number of elements in it takes the same
     * amount of time as keeping a count_ member up to date and getting its value;
     * <li>if getCount is not called, adding and removing elements have no overhead.
     */
    getCount ( ) : number ;
    /**
     * Calculates the difference of two sets.
     * @param stringSet The set to subtract from this set.
     */
    getDifference (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : ಠ_ಠ.clutz.goog.structs.StringSet ;
    /**
     * Calculates the intersection of this set with another set.
     * @param stringSet The set to take the intersection with.
     */
    getIntersection (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : ಠ_ಠ.clutz.goog.structs.StringSet ;
    /**
     * Calculates the symmetric difference of two sets.
     * @param stringSet The other set.
     */
    getSymmetricDifference (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : ಠ_ಠ.clutz.goog.structs.StringSet ;
    /**
     * Calculates the union of this set and another set.
     * @param stringSet The set to take the union with.
     */
    getUnion (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : ಠ_ಠ.clutz.goog.structs.StringSet ;
    getValues ( ) : string [] ;
    /**
     * Tells if the set contains the given element.
     * @param element The element to check.
     */
    has (element : any ) : boolean ;
    /**
     * Tells if this set and the given set are disjoint.
     * @param stringSet The other set.
     */
    isDisjoint (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : boolean ;
    isEmpty ( ) : boolean ;
    /**
     * Tells if this set is the subset of the given set.
     * @param stringSet The other set.
     */
    isSubsetOf (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : boolean ;
    /**
     * Tells if this set is the superset of the given set.
     * @param stringSet The other set.
     */
    isSupersetOf (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : boolean ;
    /**
     * Removes a single element from the set.
     * @param element The element to remove.
     */
    remove (element : any ) : boolean ;
    /**
     * Removes all elements of the given array from this set.
     * @param arr The elements to remove.
     */
    removeArray (arr : any [] ) : void ;
    /**
     * Removes all elements of the given set from this set.
     * @param stringSet The set of elements to remove.
     */
    removeSet (stringSet : ಠ_ಠ.clutz.goog.structs.StringSet ) : void ;
    values ( ) : string [] ;
  }
}
declare module 'goog:goog.structs.StringSet' {
  import StringSet = ಠ_ಠ.clutz.goog.structs.StringSet;
  export default StringSet;
}
