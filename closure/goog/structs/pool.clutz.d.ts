//!! generated by clutz.
// Generated from structs/pool.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * A generic pool class. If min is greater than max, an error is thrown.
   */
  class Pool < T = any > extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_structs_Pool : any;
    /**
     * A generic pool class. If min is greater than max, an error is thrown.
     * @param opt_minCount Min. number of objects (Default: 0).
     * @param opt_maxCount Max. number of objects (Default: 10).
     */
    constructor (opt_minCount ? : number , opt_maxCount ? : number ) ;
    /**
     * The minimum delay between objects being made available, in milliseconds. If
     * this is 0, no minimum delay is enforced.
     */
    protected delay : number ;
    /**
     * The time of the last object being made available, in milliseconds since the
     * epoch (i.e., the result of Date#toTime). If this is null, no access has
     * occurred yet.
     */
    protected lastAccess : number | null ;
    /**
     * Adds an object to the collection of objects that are free. If the object can
     * not be added, then it is disposed.
     * @param obj The object to add to collection of free objects.
     */
    addFreeObject (obj : T ) : void ;
    adjustForMinMax ( ) : void ;
    /**
     * Returns true if the given object is in the pool.
     * @param obj The object to check the pool for.
     */
    contains (obj : T ) : boolean ;
    /**
     * Should be overridden by sub-classes to return an instance of the object type
     * that is expected in the pool.
     */
    createObject ( ) : T ;
    /**
     * Disposes of the pool and all objects currently held in the pool.
     */
    protected disposeInternal ( ) : void ;
    /**
     * Should be overridden to dispose of an object. Default implementation is to
     * remove all its members, which should render it useless. Calls the object's
     * `dispose()` method, if available.
     * @param obj The object to dispose.
     */
    disposeObject (obj : T ) : void ;
    /**
     * Returns the number of objects currently in the pool.
     */
    getCount ( ) : number ;
    /**
     * Returns the number of objects currently free in the pool.
     */
    getFreeCount ( ) : number ;
    /**
     * Returns the number of objects currently in use in the pool.
     */
    getInUseCount ( ) : number ;
    getObject ( ) : T | undefined ;
    /**
     * Determines if the pool contains no objects.
     */
    isEmpty ( ) : boolean ;
    /**
     * Should be overridden to determine whether an object has become unusable and
     * should not be returned by getObject(). Calls the object's
     * `canBeReused()`  method, if available.
     * @param obj The object to test.
     */
    objectCanBeReused (obj : T ) : boolean ;
    /**
     * Returns an object to the pool of available objects so that it can be reused.
     * @param obj The object to return to the pool of free objects.
     */
    releaseObject (obj : T ) : boolean ;
    /**
     * Sets the minimum delay between objects being returned by getObject, in
     * milliseconds. This defaults to zero, meaning that no minimum delay is
     * enforced and objects may be used as soon as they're available.
     * @param delay The minimum delay, in milliseconds.
     */
    setDelay (delay : number ) : void ;
    /**
     * Sets the maximum count of the pool.
     * If max is less than the min count of the pool, an error is thrown.
     * @param max The maximum count of the pool.
     */
    setMaximumCount (max : number ) : void ;
    /**
     * Sets the minimum count of the pool.
     * If min is greater than the max count of the pool, an error is thrown.
     * @param min The minimum count of the pool.
     */
    setMinimumCount (min : number ) : void ;
  }
}
declare module 'goog:goog.structs.Pool' {
  import Pool = ಠ_ಠ.clutz.goog.structs.Pool;
  export default Pool;
}
