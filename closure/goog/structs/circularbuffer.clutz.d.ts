//!! generated by clutz.
// Generated from structs/circularbuffer.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Class for CircularBuffer.
   */
  class CircularBuffer < T = any > {
    private noStructuralTyping_goog_structs_CircularBuffer : any;
    /**
     * Class for CircularBuffer.
     * @param opt_maxSize The maximum size of the buffer.
     */
    constructor (opt_maxSize ? : number ) ;
    /**
     * Adds an item to the buffer. May remove the oldest item if the buffer is at
     * max size.
     * @param item The item to add.
     */
    add (item : T ) : T | undefined ;
    clear ( ) : void ;
    /**
     * Whether the buffer contains the key/index.
     * @param key The key/index to check for.
     */
    containsKey (key : number ) : boolean ;
    /**
     * Whether the buffer contains the given value.
     * @param value The value to check for.
     */
    containsValue (value : T ) : boolean ;
    /**
     * Returns the item at the specified index.
     * @param index The index of the item. The index of an item can change after calls to `add()` if the buffer is at maximum size.
     */
    get (index : number ) : T ;
    /**
     * Returns the current number of items in the buffer.
     */
    getCount ( ) : number ;
    getKeys ( ) : number [] ;
    /**
     * Returns the last item inserted into the buffer.
     */
    getLast ( ) : T | null ;
    /**
     * Returns the newest values in the buffer up to `count`.
     * @param maxCount The maximum number of values to get. Should be a positive number.
     */
    getNewestValues (maxCount : number ) : T [] ;
    getValues ( ) : T [] ;
    isEmpty ( ) : boolean ;
    /**
     * Sets the item at the specified index.
     * @param index The index of the item. The index of an item can change after calls to `add()` if the buffer is at maximum size.
     * @param item The item to add.
     */
    set (index : number , item : T ) : void ;
  }
}
declare module 'goog:goog.structs.CircularBuffer' {
  import CircularBuffer = ಠ_ಠ.clutz.goog.structs.CircularBuffer;
  export default CircularBuffer;
}
