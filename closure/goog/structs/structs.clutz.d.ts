//!! generated by clutz.
// Generated from structs/structs.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Removes all the elements from the collection.
   * @param col The collection-like object.
   */
  function clear (col : GlobalObject | null ) : void ;
  /**
   * Whether the collection contains the given value. This is O(n) and uses
   * equals (==) to test the existence.
   * @param col The collection-like object.
   * @param val The value to check for.
   */
  function contains (col : GlobalObject | null , val : any ) : boolean ;
  /**
   * Calls f for each value in a collection. If all calls return true this return
   * true this returns true. If any returns false this returns false at this point
   * and does not continue to check the remaining values.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within `f`.
   */
  function every < T = any , S = any > (col : S , f : (this : T , a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : boolean ;
  /**
   * Calls a function for every value in the collection. When a call returns true,
   * adds the value to a new collection (Array is returned by default).
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a Boolean. If the return value is true the value is added to the result collection. If it is false the value is not included.
   * @param opt_obj The object to be used as the value of 'this' within `f`.
   */
  function filter < T = any , S = any > (col : S , f : (this : T , a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : GlobalObject ;
  /**
   * Calls a function for each value in a collection. The function takes
   * three arguments; the value, the key and the collection.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and the return value is irrelevant.
   * @param opt_obj The object to be used as the value of 'this' within `f`.
   */
  function forEach < T = any , S = any > (col : S , f : (this : T , a : any , b : any , c : S ) => any , opt_obj ? : T ) : void ;
  /**
   * Returns the number of values in the collection-like object.
   * @param col The collection-like object.
   */
  function getCount (col : GlobalObject | null ) : number ;
  /**
   * Returns the keys of the collection. Some collections have no notion of
   * keys/indexes and this function will return undefined in those cases.
   * @param col The collection-like object.
   */
  function getKeys (col : GlobalObject | null ) : any [] | undefined ;
  /**
   * Returns the values of the collection-like object.
   * @param col The collection-like object.
   */
  function getValues (col : GlobalObject | null ) : any [] ;
  /**
   * Whether the collection is empty.
   * @param col The collection-like object.
   */
  function isEmpty (col : GlobalObject | null ) : boolean ;
  /**
   * Calls a function for every value in the collection and adds the result into a
   * new collection (defaults to creating a new Array).
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return something. The result will be used as the value in the new collection.
   * @param opt_obj The object to be used as the value of 'this' within `f`.
   */
  function map < T = any , S = any , V = any > (col : S , f : (this : T , a : any , b : any , c : S ) => V , opt_obj ? : T ) : { [ /* warning: coerced from ? */ key: string ]: V } | V [] ;
  /**
   * Calls f for each value in a collection. If any call returns true this returns
   * true (without checking the rest). If all returns false this returns false.
   * @param col The collection-like object.
   * @param f The function to call for every value. This function takes 3 arguments (the value, the key or undefined if the collection has no notion of keys, and the collection) and should return a boolean.
   * @param opt_obj The object to be used as the value of 'this' within `f`.
   */
  function some < T = any , S = any > (col : S , f : (this : T , a : any , b : any , c : S ) => boolean , opt_obj ? : T ) : boolean ;
}
declare module 'goog:goog.structs' {
  import structs = ಠ_ಠ.clutz.goog.structs;
  export = structs;
}
