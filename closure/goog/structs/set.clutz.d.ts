//!! generated by clutz.
// Generated from structs/set.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * A set that can contain both primitives and objects.  Adding and removing
   * elements is O(1).  Primitives are treated as identical if they have the same
   * type and convert to the same string.  Objects are treated as identical only
   * if they are references to the same object.  WARNING: A goog.structs.Set can
   * contain both 1 and (new Number(1)), because they are not the same.  WARNING:
   * Adding (new Number(1)) twice will yield two distinct elements, because they
   * are two different objects.  WARNING: Any object that is added to a
   * goog.structs.Set will be modified!  Because goog.getUid() is used to
   * identify objects, every object in the set will be mutated.
   */
  class Set < T = any > implements ಠ_ಠ.clutz.goog.structs.Collection < T > , Iterable < T > {
    private noStructuralTyping_goog_structs_Set : any;
    /**
     * A set that can contain both primitives and objects.  Adding and removing
     * elements is O(1).  Primitives are treated as identical if they have the same
     * type and convert to the same string.  Objects are treated as identical only
     * if they are references to the same object.  WARNING: A goog.structs.Set can
     * contain both 1 and (new Number(1)), because they are not the same.  WARNING:
     * Adding (new Number(1)) twice will yield two distinct elements, because they
     * are two different objects.  WARNING: Any object that is added to a
     * goog.structs.Set will be modified!  Because goog.getUid() is used to
     * identify objects, every object in the set will be mutated.
     * @param opt_values Initial values to start with.
     */
    constructor (opt_values ? : T [] | null | { [ /* warning: coerced from ? */ key: string ]: T } ) ;
    map_ : any ;
    /**
     * The number of items in this set.
     */
    size : number ;
    /**
     * Returns an iterator that iterates over the elements in this set.
     * @param opt_keys This argument is ignored.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Add a primitive or an object to the set.
     * @param element The primitive or object to add.
     */
    add (element : T ) : void ;
    /**
     * Adds all the values in the given collection to this set.
     * @param col A collection containing the elements to add.
     */
    addAll (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : void ;
    clear ( ) : void ;
    /**
     * Creates a shallow clone of this set.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.Set < T > ;
    /**
     * Tests whether this set contains the given element.
     * @param element The primitive or object to test for.
     */
    contains (element : T ) : boolean ;
    /**
     * Tests whether this set contains all the values in a given collection.
     * Repeated elements in the collection are ignored, e.g.  (new
     * goog.structs.Set([1, 2])).containsAll([1, 1]) is True.
     * @param col A collection-like object.
     */
    containsAll (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | GlobalObject ) : boolean ;
    /**
     * Removes the given element from this set.
     * @param element The primitive or object to remove.
     */
    delete (element : T ) : boolean ;
    /**
     * Finds all values that are present in this set and not in the given
     * collection.
     * @param col A collection.
     */
    difference (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : ಠ_ಠ.clutz.goog.structs.Set < any > ;
    /**
     * Tests whether the given collection consists of the same elements as this set,
     * regardless of order, without repetition.  Primitives are treated as equal if
     * they have the same type and convert to the same string; objects are treated
     * as equal if they are references to the same object.  This operation is O(n).
     * @param col A collection.
     */
    equals (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | GlobalObject ) : boolean ;
    getCount ( ) : number ;
    /**
     * Returns an array containing all the elements in this set.
     */
    getValues ( ) : T [] ;
    /**
     * Tests whether this set contains the given element.
     * @param element The primitive or object to test for.
     */
    has (element : T ) : boolean ;
    /**
     * Finds all values that are present in both this set and the given collection.
     * @param col A collection.
     */
    intersection < S = any > (col : S [] | null | { [ /* warning: coerced from ? */ key: string ]: S } ) : ಠ_ಠ.clutz.goog.structs.Set < T | S > ;
    /**
     * Tests whether this set is empty.
     */
    isEmpty ( ) : boolean ;
    /**
     * Tests whether the given collection contains all the elements in this set.
     * Primitives are treated as equal if they have the same type and convert to the
     * same string; objects are treated as equal if they are references to the same
     * object.  This operation is O(n).
     * @param col A collection.
     */
    isSubsetOf (col : ಠ_ಠ.clutz.goog.structs.Collection < T > | null | GlobalObject ) : boolean ;
    /**
     * Removes the given element from this set.
     * @param element The primitive or object to remove.
     */
    remove (element : T ) : boolean ;
    /**
     * Removes all values in the given collection from this set.
     * @param col A collection containing the elements to remove.
     */
    removeAll (col : T [] | null | ಠ_ಠ.clutz.goog.structs.Collection < T > | { [ /* warning: coerced from ? */ key: string ]: T } ) : void ;
    values ( ) : IterableIterator < T > ;
  }
}
declare module 'goog:goog.structs.Set' {
  import Set = ಠ_ಠ.clutz.goog.structs.Set;
  export default Set;
}
