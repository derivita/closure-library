//!! generated by clutz.
// Generated from structs/quadtree.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Constructs a new quad tree.
   */
  class QuadTree {
    private noStructuralTyping_goog_structs_QuadTree : any;
    /**
     * Constructs a new quad tree.
     * @param minX Minimum x-value that can be held in tree.
     * @param minY Minimum y-value that can be held in tree.
     * @param maxX Maximum x-value that can be held in tree.
     * @param maxY Maximum y-value that can be held in tree.
     */
    constructor (minX : number , minY : number , maxX : number , maxY : number ) ;
    clear ( ) : void ;
    /**
     * Clones the quad-tree and returns the new instance.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.QuadTree ;
    /**
     * Returns true if the point at (x, y) exists in the tree.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     */
    contains (x : number , y : number ) : boolean ;
    /**
     * Traverses the tree and calls a function on each node.
     * @param fn The function to call for every value. This function takes 3 arguments (the value, the coordinate, and the tree itself) and the return value is irrelevant.
     * @param opt_obj The object to be used as the value of 'this' within {@ code fn}.
     */
    forEach (fn : (a : any , b : ಠ_ಠ.clutz.goog.math.Coordinate | null , c : ಠ_ಠ.clutz.goog.structs.QuadTree | null ) => any , opt_obj ? : GlobalObject | null ) : void ;
    /**
     * Gets the value of the point at (x, y) or null if the point is empty.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     * @param opt_default The default value to return if the node doesn't exist.
     */
    get (x : number , y : number , opt_default ? : any ) : any ;
    getCount ( ) : number ;
    /**
     * Returns an array containing the coordinates of each point stored in the tree.
     */
    getKeys ( ) : ( ಠ_ಠ.clutz.goog.math.Coordinate | null ) [] ;
    /**
     * Returns a reference to the tree's root node.  Callers shouldn't modify nodes,
     * directly.  This is a convenience for visualization and debugging purposes.
     */
    getRootNode ( ) : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
    /**
     * Returns an array containing all values stored within the tree.
     */
    getValues ( ) : ( GlobalObject | null ) [] ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a point from (x, y) if it exists.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     */
    remove (x : number , y : number ) : any ;
    /**
     * Sets the value of an (x, y) point within the quad-tree.
     * @param x The x-coordinate.
     * @param y The y-coordinate.
     * @param value The value associated with the point.
     */
    set (x : number , y : number , value : any ) : void ;
  }
}
// Generated from structs/quadtree.js
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
  /**
   * Enumeration of node types.
   */
  enum NodeType {
    EMPTY = 0.0 ,
    LEAF = 1.0 ,
    POINTER = 2.0 ,
  }
}
declare module 'goog:goog.structs.QuadTree' {
  import QuadTree = ಠ_ಠ.clutz.goog.structs.QuadTree;
  export default QuadTree;
}
// Generated from structs/quadtree.js
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
  /**
   * Constructs a new quad tree node.
   */
  class Node {
    private noStructuralTyping_goog_structs_QuadTree_Node : any;
    /**
     * Constructs a new quad tree node.
     * @param x X-coordiate of node.
     * @param y Y-coordinate of node.
     * @param w Width of node.
     * @param h Height of node.
     * @param opt_parent Optional parent node.
     */
    constructor (x : number , y : number , w : number , h : number , opt_parent ? : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ) ;
    /**
     * The height of the node.
     */
    h : number ;
    /**
     * The parent node.
     */
    parent : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
    /**
     * The width of the node.
     */
    w : number ;
    /**
     * The x-coordinate of the node.
     */
    x : number ;
    /**
     * The y-coordinate of the node.
     */
    y : number ;
    /**
     * The child node in the North-East quadrant.
     */
    ne : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
    /**
     * The node's type.
     */
    nodeType : ಠ_ಠ.clutz.goog.structs.QuadTree.NodeType ;
    /**
     * The child node in the North-West quadrant.
     */
    nw : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
    /**
     * The point for the node, if it is a leaf node.
     */
    point : ಠ_ಠ.clutz.goog.structs.QuadTree.Point | null ;
    /**
     * The child node in the South-East quadrant.
     */
    se : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
    /**
     * The child node in the South-West quadrant.
     */
    sw : ಠ_ಠ.clutz.goog.structs.QuadTree.Node | null ;
  }
}
declare module 'goog:goog.structs.QuadTree.Node' {
  import Node = ಠ_ಠ.clutz.goog.structs.QuadTree.Node;
  export default Node;
}
// Generated from structs/quadtree.js
declare namespace ಠ_ಠ.clutz.goog.structs.QuadTree {
  /**
   * Creates a new point object.
   */
  class Point {
    private noStructuralTyping_goog_structs_QuadTree_Point : any;
    /**
     * Creates a new point object.
     * @param x The x-coordinate of the point.
     * @param y The y-coordinate of the point.
     * @param opt_value Optional value associated with the point.
     */
    constructor (x : number , y : number , opt_value ? : any ) ;
    /**
     * Optional value associated with the point.
     */
    value : any ;
    /**
     * The x-coordinate for the point.
     */
    x : number ;
    /**
     * The y-coordinate for the point.
     */
    y : number ;
  }
}
declare module 'goog:goog.structs.QuadTree.Point' {
  import Point = ಠ_ಠ.clutz.goog.structs.QuadTree.Point;
  export default Point;
}
