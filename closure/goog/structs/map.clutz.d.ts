//!! generated by clutz.
// Generated from structs/map.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Class for Hash Map datastructure.
   */
  class Map < K = any , V = any > {
    private noStructuralTyping_goog_structs_Map : any;
    /**
     * Class for Hash Map datastructure.
     * @param opt_map Map or Object to initialize the map with.
     * @param var_args If 2 or more arguments are present then they will be used as key-value pairs.
     */
    constructor (opt_map ? : any ,  ...var_args : any [] ) ;
    /**
     * The number of key value pairs in the map.
     */
    size : number ;
    /**
     * Returns an iterator that iterates over the values or the keys in the map.
     * This throws an exception if the map was mutated since the iterator was
     * created.
     * @param opt_keys True to iterate over the keys. False to iterate over the values.  The default value is false.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Adds multiple key-value pairs from another goog.structs.Map or Object.
     * @param map Object containing the data to add.
     */
    addAll (map : GlobalObject | null ) : void ;
    clear ( ) : void ;
    /**
     * Clones a map and returns a new map.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    /**
     * Whether the map contains the given key.
     * @param key The key to check for.
     */
    containsKey (key : any ) : boolean ;
    /**
     * Whether the map contains the given value. This is O(n).
     * @param val The value to check for.
     */
    containsValue (val : V ) : boolean ;
    /**
     * Removes a key-value pair based on the key. This is O(logN) amortized due
     * to updating the keys array whenever the count becomes half the size of
     * the keys in the keys array.
     * @param key The key to remove.
     */
    delete (key : any ) : boolean ;
    entries (): IterableIterator<[ K , V ]>;
    /**
     * Whether this map is equal to the argument map.
     * @param otherMap The map against which to test equality.
     * @param opt_equalityFn Optional equality function to test equality of values. If not specified, this will test whether the values contained in each map are identical objects.
     */
    equals (otherMap : ಠ_ಠ.clutz.goog.structs.Map < any , any > | null , opt_equalityFn ? : (a : V , b : V ) => boolean ) : boolean ;
    /**
     * Calls the given function on each entry in the map.
     * @param opt_obj The value of "this" inside f.
     */
    forEach < T = any > (f : (this : T , a : V , b : K , c : ಠ_ಠ.clutz.goog.structs.Map < K , V > | null ) => any , opt_obj ? : T ) : void ;
    /**
     * Returns the value for the given key.  If the key is not found and the default
     * value is not given this will return `undefined`.
     * @param key The key to get the value for.
     * @param opt_val The value to return if no item is found for the given key, defaults to undefined.
     */
    get < DEFAULT = any > (key : any , opt_val ? : DEFAULT ) : V | DEFAULT ;
    getCount ( ) : number ;
    /**
     * Returns an iterator that iterates over the keys in the map.  Removal of keys
     * while iterating might have undesired side effects.
     */
    getKeyIterator ( ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Returns the keys of the map.
     */
    getKeys ( ) : string [] ;
    /**
     * Returns an iterator that iterates over the values in the map.  Removal of
     * keys while iterating might have undesired side effects.
     */
    getValueIterator ( ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Returns the values of the map.
     */
    getValues ( ) : V [] ;
    /**
     * Whether the map contains the given key.
     * @param key The key to check for.
     */
    has (key : any ) : boolean ;
    isEmpty ( ) : boolean ;
    keys ( ) : IterableIterator < K > ;
    /**
     * Removes a key-value pair based on the key. This is O(logN) amortized due to
     * updating the keys array whenever the count becomes half the size of the keys
     * in the keys array.
     * @param key The key to remove.
     */
    remove (key : any ) : boolean ;
    /**
     * Adds a key-value pair to the map.
     * @param key The key.
     * @param value The value to add.
     */
    set (key : any , value : V ) : void ;
    toObject ( ) : GlobalObject ;
    /**
     * Returns a new map in which all the keys and values are interchanged
     * (keys become values and values become keys). If multiple keys map to the
     * same value, the chosen transposed value is implementation-dependent.
     *
     * It acts very similarly to {goog.object.transpose(Object)}.
     */
    transpose ( ) : ಠ_ಠ.clutz.goog.structs.Map < any , any > ;
    values ( ) : IterableIterator < V > ;
    /**
     * Default equality test for values.
     * @param a The first value.
     * @param b The second value.
     */
    static defaultEquals (a : any , b : any ) : boolean ;
  }
}
declare module 'goog:goog.structs.Map' {
  import Map = ಠ_ಠ.clutz.goog.structs.Map;
  export default Map;
}
