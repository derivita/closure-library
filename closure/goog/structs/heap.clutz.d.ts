//!! generated by clutz.
// Generated from structs/heap.js
declare namespace ಠ_ಠ.clutz.goog.structs {
  /**
   * Class for a Heap datastructure.
   */
  class Heap < K = any , V = any > {
    private noStructuralTyping_goog_structs_Heap : any;
    /**
     * Class for a Heap datastructure.
     * @param opt_heap Optional goog.structs.Heap or Object to initialize heap with.
     */
    constructor (opt_heap ? : null | GlobalObject ) ;
    clear ( ) : void ;
    /**
     * Clones a heap and returns a new heap
     */
    clone ( ) : ಠ_ಠ.clutz.goog.structs.Heap < any , any > ;
    /**
     * Whether the heap contains the given key.
     * @param key The key to check for.
     */
    containsKey (key : K ) : boolean ;
    /**
     * Whether the heap contains the given value.
     * @param val The value to check for.
     */
    containsValue (val : V ) : boolean ;
    /**
     * The number of key-value pairs in the map
     */
    getCount ( ) : number ;
    /**
     * Gets the keys of the heap.
     */
    getKeys ( ) : K [] ;
    /**
     * Gets the values of the heap.
     */
    getValues ( ) : V [] ;
    /**
     * Insert the given value into the heap with the given key.
     * @param key The key.
     * @param value The value.
     */
    insert (key : K , value : V ) : void ;
    /**
     * Adds multiple key-value pairs from another goog.structs.Heap or Object
     * @param heap Object containing the data to add.
     */
    insertAll (heap : null | GlobalObject ) : void ;
    /**
     * Returns true if this heap contains no elements.
     */
    isEmpty ( ) : boolean ;
    /**
     * Retrieves but does not remove the root value of this heap.
     */
    peek ( ) : V ;
    /**
     * Retrieves but does not remove the key of the root node of this heap.
     */
    peekKey ( ) : K ;
    /**
     * Retrieves and removes the root value of this heap.
     */
    remove ( ) : V ;
  }
}
declare module 'goog:goog.structs.Heap' {
  import Heap = ಠ_ಠ.clutz.goog.structs.Heap;
  export default Heap;
}
