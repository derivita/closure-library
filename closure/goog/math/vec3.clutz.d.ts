//!! generated by clutz.
// Generated from math/vec3.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for a three-dimensional vector object and assorted functions useful for
   * manipulation.
   *
   * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in to any
   * function that requires a Coordinate.
   */
  class Vec3 extends ಠ_ಠ.clutz.goog.math.Coordinate3 {
    private noStructuralTyping_goog_math_Vec3 : any;
    /**
     * Class for a three-dimensional vector object and assorted functions useful for
     * manipulation.
     *
     * Inherits from goog.math.Coordinate3 so that a Vec3 may be passed in to any
     * function that requires a Coordinate.
     * @param x The x value for the vector.
     * @param y The y value for the vector.
     * @param z The z value for the vector.
     */
    constructor (x : number , y : number , z : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Z-value
     */
    z : number ;
    /**
     * Adds another vector to this vector in-place.
     * @param b The vector to add.
     */
    add (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Creates a new copy of this Vec3.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Compares this vector with another for equality.
     * @param b The other vector.
     */
    equals (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : boolean ;
    /**
     * Reverses the sign of the vector. Equivalent to scaling the vector by -1.
     */
    invert ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the magnitude of the vector measured from the origin.
     */
    magnitude ( ) : number ;
    /**
     * Normalizes the current vector to have a magnitude of 1.
     */
    normalize ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Scales the current vector by a constant.
     * @param s The scale factor.
     */
    scale (s : number ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the squared magnitude of the vector measured from the origin.
     * NOTE(brenneman): Leaving out the square root is not a significant
     * optimization in JavaScript.
     */
    squaredMagnitude ( ) : number ;
    /**
     * Subtracts another vector from this vector in-place.
     * @param b The vector to subtract.
     */
    subtract (b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the cross-product of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static cross (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the difference of two vectors as a new Vec3.
     * @param a The first vector.
     * @param b The second vector.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Returns the dot-product of two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static dot (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Compares vectors for equality.
     * @param a The first vector.
     * @param b The second vector.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : boolean ;
    /**
     * Returns a new Vec3 object from a given coordinate.
     * @param a The coordinate.
     */
    static fromCoordinate3 (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns a new Vec3 that is the linear interpolant between vectors a and b at
     * scale-value x.
     * @param a Vector a.
     * @param b Vector b.
     * @param x The proportion between a and b.
     */
    static lerp (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null , x : number ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Generates a random vector inside the unit sphere.
     */
    static random ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Generates a random unit vector.
     *
     * http://mathworld.wolfram.com/SpherePointPicking.html
     * Using (6), (7), and (8) to generate coordinates.
     */
    static randomUnit ( ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns a new Vec3 that is a copy of the vector a, but rescaled by a factor s
     * in all dimensions.
     * @param a Vector a.
     * @param s Scale factor.
     */
    static rescaled (a : ಠ_ಠ.clutz.goog.math.Vec3 , s : number ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
    /**
     * Returns the squared distance between two vectors.
     * @param a The first vector.
     * @param b The second vector.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : number ;
    /**
     * Returns the sum of two vectors as a new Vec3.
     * @param a The first vector.
     * @param b The second vector.
     */
    static sum (a : ಠ_ಠ.clutz.goog.math.Vec3 | null , b : ಠ_ಠ.clutz.goog.math.Vec3 | null ) : ಠ_ಠ.clutz.goog.math.Vec3 ;
  }
}
declare module 'goog:goog.math.Vec3' {
  import Vec3 = ಠ_ಠ.clutz.goog.math.Vec3;
  export default Vec3;
}
