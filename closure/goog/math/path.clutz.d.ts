//!! generated by clutz.
// Generated from math/path.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Creates a path object. A path is a sequence of segments and may be open or
   * closed. Path uses the EVEN-ODD fill rule for determining the interior of the
   * path. A path must start with a moveTo command.
   *
   * A "simple" path does not contain any arcs and may be transformed using
   * the `transform` method.
   */
  class Path {
    private noStructuralTyping_goog_math_Path : any;
    /**
     * Appends another path to the end of this path.
     * @param path The path to append.
     */
    appendPath (path : ಠ_ಠ.clutz.goog.math.Path ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to draw an arc centered at the point {@code (cx, cy)}
     * with radius `rx` along the x-axis and `ry` along the y-axis from
     * `startAngle` through `extent` degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     * @param cx X coordinate of center of ellipse.
     * @param cy Y coordinate of center of ellipse.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     * @param connect If true, the starting point of the arc is connected to the current point.
     */
    arc (cx : number , cy : number , rx : number , ry : number , fromAngle : number , extent : number , connect : boolean ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to draw an arc starting at the path's current point,
     * with radius `rx` along the x-axis and `ry` along the y-axis from
     * `startAngle` through `extent` degrees. Positive rotation is in
     * the direction from positive x-axis to positive y-axis.
     *
     * This method makes the path non-simple.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcTo (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Same as `arcTo`, but approximates the arc using bezier curves.
     * .* As a result, this method does not affect the simplified status of this path.
     * The algorithm is adapted from `java.awt.geom.ArcIterator`.
     * @param rx Radius of ellipse on x axis.
     * @param ry Radius of ellipse on y axis.
     * @param fromAngle Starting angle measured in degrees from the positive x-axis.
     * @param extent The span of the arc in degrees.
     */
    arcToAsCurves (rx : number , ry : number , fromAngle : number , extent : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Clears the path.
     */
    clear ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a path command to close the path by connecting the
     * last point to the first point.
     */
    close ( ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Creates a transformed copy of this path. The path is simplified
     * {@see #createSimplifiedPath} prior to transformation.
     * @param tx The transformation to perform.
     */
    createTransformedPath (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing cubic Bezier curves. Each curve is
     * specified using 3 points (6 coordinates) - two control points and the end
     * point of the curve.
     * @param var_args The coordinates specifying each curve in sets of 6 points: {@code [x1, y1]} the first control point, {@code [x2, y2]} the second control point and {@code [x, y]} the end point.
     */
    curveTo ( ...var_args : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing cubic Bezier curves. Each curve is
     * specified using 3 points (6 coordinates) - two control points and the end
     * point of the curve.
     * @param coordinates The coordinates specifying each curve in sets of 6 points: {@code [x1, y1]} the first control point, {@code [x2, y2]} the second control point and {@code [x, y]} the end point.
     */
    curveToFromArray (coordinates : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Iterates over the path calling the supplied callback once for each path
     * segment. The arguments to the callback function are the segment type and
     * an array of its arguments.
     *
     * The `LINETO` and `CURVETO` arrays can contain multiple
     * segments of the same type. The number of segments is the length of the
     * array divided by the segment length (2 for lines, 6 for  curves).
     *
     * As a convenience the `ARCTO` segment also includes the end point as the
     * last two arguments: {@code rx, ry, fromAngle, extent, x, y}.
     * @param callback The function to call with each path segment.
     */
    forEachSegment (callback : (a : ಠ_ಠ.clutz.goog.math.Path.Segment , b : number [] ) => any ) : void ;
    /**
     * Returns the coordinates most recently added to the end of the path.
     */
    getCurrentPoint ( ) : number [] | null ;
    /**
     * Returns an array of all arguments for the segments of this path object, in
     * order. The returned array is a copy; modifications are not reflected in the
     * Path object.
     */
    getSegmentArgs ( ) : number [] ;
    /**
     * Returns an array of the number of times each segment type repeats in this
     * path, in order. The returned array is a copy; modifications are not reflected
     * in the Path object.
     */
    getSegmentCounts ( ) : number [] ;
    /**
     * Returns an array of the segment types in this path, in the order of their
     * appearance. Adjacent segments of the same type are collapsed into a single
     * entry in the array. The returned array is a copy; modifications are not
     * reflected in the Path object.
     */
    getSegmentTypes ( ) : number [] ;
    isEmpty ( ) : boolean ;
    /**
     * Returns true if this path contains no arcs. Simplified paths can be
     * created using `createSimplifiedPath`.
     */
    isSimple ( ) : boolean ;
    /**
     * Adds points to the path by drawing a straight line to each point.
     * @param var_args The coordinates of each destination point as x, y value pairs.
     */
    lineTo ( ...var_args : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds points to the path by drawing a straight line to each point.
     * @param coordinates The coordinates of each destination point as x, y value pairs.
     */
    lineToFromArray (coordinates : number [] ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Adds a point to the path by moving to the specified point. Repeated moveTo
     * commands are collapsed into a single moveTo.
     * @param x X coordinate of destination point.
     * @param y Y coordinate of destination point.
     */
    moveTo (x : number , y : number ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Transforms the path. Only simple paths are transformable. Attempting
     * to transform a non-simple path will throw an error.
     * @param tx The transformation to perform.
     */
    transform (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Creates a copy of the given path, replacing `arcTo` with
     * `arcToAsCurves`. The resulting path is simplified and can
     * be transformed.
     * @param src The path to simplify.
     */
    static createSimplifiedPath (src : ಠ_ಠ.clutz.goog.math.Path ) : ಠ_ಠ.clutz.goog.math.Path ;
    /**
     * Returns the number of points for a segment type.
     * @param segment The segment type.
     */
    static getSegmentCount (segment : number ) : number ;
  }
}
declare module 'goog:goog.math.Path' {
  import Path = ಠ_ಠ.clutz.goog.math.Path;
  export default Path;
}
// Generated from math/path.js
declare namespace ಠ_ಠ.clutz.goog.math.Path {
  /**
   * Path segment types.
   */
  /**
   * Path segment types.
   */
  enum Segment {
    ARCTO = 3.0 ,
    CLOSE = 4.0 ,
    CURVETO = 2.0 ,
    LINETO = 1.0 ,
    MOVETO = 0.0 ,
  }
}
declare module 'goog:goog.math.Path.Segment' {
  import Segment = ಠ_ಠ.clutz.goog.math.Path.Segment;
  export default Segment;
}
