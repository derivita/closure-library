//!! generated by clutz.
// Generated from math/integer.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Constructs a two's-complement integer an array containing bits of the
   * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
   * lowest-order bits in the first piece), and the sign of -1 or 0.
   *
   * See the from* functions below for other convenient ways of constructing
   * Integers.
   *
   * The internal representation of an integer is an array of 32-bit signed
   * pieces, along with a sign (0 or -1) that indicates the contents of all the
   * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are
   * the size of integers on which JavaScript performs bit-operations.  For
   * operations like addition and multiplication, we split each number into 16-bit
   * pieces, which can easily be multiplied within JavaScript's floating-point
   * representation without overflow or change in sign.
   */
  class Integer {
    private noStructuralTyping_goog_math_Integer : any;
    /**
     * Constructs a two's-complement integer an array containing bits of the
     * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
     * lowest-order bits in the first piece), and the sign of -1 or 0.
     *
     * See the from* functions below for other convenient ways of constructing
     * Integers.
     *
     * The internal representation of an integer is an array of 32-bit signed
     * pieces, along with a sign (0 or -1) that indicates the contents of all the
     * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are
     * the size of integers on which JavaScript performs bit-operations.  For
     * operations like addition and multiplication, we split each number into 16-bit
     * pieces, which can easily be multiplied within JavaScript's floating-point
     * representation without overflow or change in sign.
     * @param bits Array containing the bits of the number.
     * @param sign The sign of the number: -1 for negative and 0 positive.
     */
    constructor (bits : number [] | null , sign : number ) ;
    abs ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the sum of this and the given Integer.
     * @param other The Integer to add to this.
     */
    add (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the bitwise-AND of this Integer and the given one.
     * @param other The Integer to AND with this.
     */
    and (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Compares this Integer with the given one.
     * @param other Integer to compare against.
     */
    compare (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : number ;
    /**
     * Returns this Integer divided by the given one.
     * @param other The Integer to divide this by.
     */
    divide (other : ಠ_ಠ.clutz.goog.math.Integer ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns this Integer divided by the given one, as well as the remainder of
     * that division.
     * @param other The Integer to divide this by.
     */
    divideAndRemainder (other : ಠ_ಠ.clutz.goog.math.Integer ) : ಠ_ಠ.clutz.goog.math.Integer.DivisionResult ;
    equals (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns the index-th 32-bit (signed) piece of the Integer according to
     * little-endian order (i.e., index 0 contains the smallest bits).
     * @param index The index in question.
     */
    getBits (index : number ) : number ;
    /**
     * Returns the index-th 32-bit piece as an unsigned number.
     * @param index The index in question.
     */
    getBitsUnsigned (index : number ) : number ;
    getSign ( ) : number ;
    greaterThan (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    greaterThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    isNegative ( ) : boolean ;
    isOdd ( ) : boolean ;
    isZero ( ) : boolean ;
    lessThan (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    lessThanOrEqual (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns this Integer modulo the given one.
     * @param other The Integer by which to mod.
     */
    modulo (other : ಠ_ಠ.clutz.goog.math.Integer ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the product of this and the given Integer.
     * @param other The Integer to multiply against this.
     */
    multiply (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    negate ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    not ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    notEquals (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : boolean ;
    /**
     * Returns the bitwise-OR of this Integer and the given one.
     * @param other The Integer to OR with this.
     */
    or (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns this value with bits shifted to the left by the given amount.
     * @param numBits The number of bits by which to shift.
     */
    shiftLeft (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns this value with bits shifted to the right by the given amount.
     * @param numBits The number of bits by which to shift.
     */
    shiftRight (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an integer with only the first numBits bits of this value, sign
     * extended from the final bit.
     * @param numBits The number of bits by which to shift.
     */
    shorten (numBits : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the difference of this and the given Integer.
     * @param other The Integer to subtract from this.
     */
    subtract (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns the value, assuming it is a 32-bit integer.
     */
    toInt ( ) : number ;
    toNumber ( ) : number ;
    toString (opt_radix ? : number ) : string ;
    /**
     * Returns the bitwise-XOR of this Integer and the given one.
     * @param other The Integer to XOR with this.
     */
    xor (other : ಠ_ಠ.clutz.goog.math.Integer | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    static ONE : ಠ_ಠ.clutz.goog.math.Integer ;
    static ZERO : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns a Integer representing the value that comes by concatenating the
     * given entries, each is assumed to be 32 signed bits, given in little-endian
     * order (lowest order bits in the lowest index), and sign-extending the highest
     * order 32-bit value.
     * @param bits The bits of the number, in 32-bit signed pieces, in little-endian order.
     */
    static fromBits (bits : number [] | null ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representing the given (32-bit) integer value.
     * @param value A 32-bit integer value.
     */
    static fromInt (value : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representing the given value, provided that it is a finite
     * number.  Otherwise, zero is returned.
     * @param value The value in question.
     */
    static fromNumber (value : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
    /**
     * Returns an Integer representation of the given string, written using the
     * given radix.
     * @param str The textual representation of the Integer.
     * @param opt_radix The radix in which the text is written.
     */
    static fromString (str : string , opt_radix ? : number ) : ಠ_ಠ.clutz.goog.math.Integer ;
  }
}
// Generated from math/integer.js
declare namespace ಠ_ಠ.clutz.goog.math.Integer {
  class DivisionResult {
    private noStructuralTyping_goog_math_Integer_DivisionResult : any;
    /**
     * A struct for holding the quotient and remainder of a division.
     */
    constructor (quotient : ಠ_ಠ.clutz.goog.math.Integer , remainder : ಠ_ಠ.clutz.goog.math.Integer ) ;
    quotient : ಠ_ಠ.clutz.goog.math.Integer ;
    remainder : ಠ_ಠ.clutz.goog.math.Integer ;
  }
}
declare module 'goog:goog.math.Integer' {
  import Integer = ಠ_ಠ.clutz.goog.math.Integer;
  export default Integer;
}
