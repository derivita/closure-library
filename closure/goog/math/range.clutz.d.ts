//!! generated by clutz.
// Generated from math/range.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * A number range.
   */
  class Range {
    private noStructuralTyping_goog_math_Range : any;
    /**
     * A number range.
     * @param a One end of the range.
     * @param b The other end of the range.
     */
    constructor (a : number , b : number ) ;
    /**
     * The highest value in the range.
     */
    end : number ;
    /**
     * The lowest value in the range.
     */
    start : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Range ;
    getLength ( ) : number ;
    /**
     * Extends this range to include the given point.
     */
    includePoint (point : number ) : void ;
    /**
     * Extends this range to include the given range.
     */
    includeRange (range : ಠ_ಠ.clutz.goog.math.Range ) : void ;
    /**
     * Returns a string representing the range.
     */
    toString ( ) : string ;
    /**
     * Given two ranges on the same dimension, this returns a range that covers
     * both ranges.
     * @param a A Range.
     * @param b A Range.
     */
    static boundingRange (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.Range ;
    /**
     * Given two ranges, returns true if the first range completely overlaps the
     * second.
     * @param a The first Range.
     * @param b The second Range.
     */
    static contains (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Given a range and a point, returns true if the range contains the point.
     * @param range The range.
     * @param p The point.
     */
    static containsPoint (range : ಠ_ಠ.clutz.goog.math.Range | null , p : number ) : boolean ;
    /**
     * Compares ranges for equality.
     * @param a A Range.
     * @param b A Range.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Creates a goog.math.Range from an array of two numbers.
     */
    static fromPair (pair : number [] ) : ಠ_ಠ.clutz.goog.math.Range ;
    /**
     * Given two ranges on the same dimension, determines whether they intersect.
     * @param a A Range.
     * @param b A Range.
     */
    static hasIntersection (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Given two ranges on the same dimension, this method returns the intersection
     * of those ranges.
     * @param a A Range.
     * @param b A Range.
     */
    static intersection (a : ಠ_ಠ.clutz.goog.math.Range | null , b : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.Range | null ;
  }
}
declare module 'goog:goog.math.Range' {
  import Range = ಠ_ಠ.clutz.goog.math.Range;
  export default Range;
}
