//!! generated by clutz.
// Generated from math/coordinate3.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing coordinates and positions in 3 dimensions.
   */
  class Coordinate3 {
    private noStructuralTyping_goog_math_Coordinate3 : any;
    /**
     * Class for representing coordinates and positions in 3 dimensions.
     * @param opt_x X coordinate, defaults to 0.
     * @param opt_y Y coordinate, defaults to 0.
     * @param opt_z Z coordinate, defaults to 0.
     */
    constructor (opt_x ? : number , opt_y ? : number , opt_z ? : number ) ;
    /**
     * X-value
     */
    x : number ;
    /**
     * Y-value
     */
    y : number ;
    /**
     * Z-value
     */
    z : number ;
    /**
     * Returns a new copy of the coordinate.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the contents of this coordinate as a 3 value Array.
     */
    toArray ( ) : number [] ;
    /**
     * Returns a nice string representing the coordinate.
     */
    toString ( ) : string ;
    /**
     * Returns the difference between two coordinates as a new
     * goog.math.Coordinate3.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the distance between two coordinates.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static distance (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : number ;
    /**
     * Compares coordinates for equality.
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : boolean ;
    /**
     * Converts a three element array into a Coordinate3 object.  If the value
     * passed in is not an array, not array-like, or not of the right length, an
     * error is thrown.
     * @param a Array of numbers to become a coordinate.
     */
    static fromArray (a : number [] | null ) : ಠ_ಠ.clutz.goog.math.Coordinate3 ;
    /**
     * Returns the squared distance between two coordinates. Squared distances can
     * be used for comparisons when the actual value is not required.
     *
     * Performance note: eliminating the square root is an optimization often used
     * in lower-level languages, but the speed difference is not nearly as
     * pronounced in JavaScript (only a few percent.)
     * @param a A Coordinate3.
     * @param b A Coordinate3.
     */
    static squaredDistance (a : ಠ_ಠ.clutz.goog.math.Coordinate3 | null , b : ಠ_ಠ.clutz.goog.math.Coordinate3 | null ) : number ;
  }
}
declare module 'goog:goog.math.Coordinate3' {
  import Coordinate3 = ಠ_ಠ.clutz.goog.math.Coordinate3;
  export default Coordinate3;
}
