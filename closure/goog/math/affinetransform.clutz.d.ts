//!! generated by clutz.
// Generated from math/affinetransform.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Creates a 2D affine transform. An affine transform performs a linear
   * mapping from 2D coordinates to other 2D coordinates that preserves the
   * "straightness" and "parallelness" of lines.
   *
   * Such a coordinate transformation can be represented by a 3 row by 3 column
   * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
   * coordinates (x,y) into destination coordinates (x',y') by considering them
   * to be a column vector and multiplying the coordinate vector by the matrix
   * according to the following process:
   * <pre>
   * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
   * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
   * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
   * </pre>
   *
   * This class is optimized for speed and minimizes calculations based on its
   * knowledge of the underlying matrix (as opposed to say simply performing
   * matrix multiplication).
   */
  class AffineTransform {
    private noStructuralTyping_goog_math_AffineTransform : any;
    /**
     * Creates a 2D affine transform. An affine transform performs a linear
     * mapping from 2D coordinates to other 2D coordinates that preserves the
     * "straightness" and "parallelness" of lines.
     *
     * Such a coordinate transformation can be represented by a 3 row by 3 column
     * matrix with an implied last row of [ 0 0 1 ]. This matrix transforms source
     * coordinates (x,y) into destination coordinates (x',y') by considering them
     * to be a column vector and multiplying the coordinate vector by the matrix
     * according to the following process:
     * <pre>
     * [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]
     * [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]
     * [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]
     * </pre>
     *
     * This class is optimized for speed and minimizes calculations based on its
     * knowledge of the underlying matrix (as opposed to say simply performing
     * matrix multiplication).
     * @param opt_m00 The m00 coordinate of the transform.
     * @param opt_m10 The m10 coordinate of the transform.
     * @param opt_m01 The m01 coordinate of the transform.
     * @param opt_m11 The m11 coordinate of the transform.
     * @param opt_m02 The m02 coordinate of the transform.
     * @param opt_m12 The m12 coordinate of the transform.
     */
    constructor (opt_m00 ? : number , opt_m10 ? : number , opt_m01 ? : number , opt_m11 ? : number , opt_m02 ? : number , opt_m12 ? : number ) ;
    m00_ : number ;
    m01_ : number ;
    m02_ : number ;
    m10_ : number ;
    m11_ : number ;
    m12_ : number ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates an affine transform to this transform.
     * @param tx The transform to concatenate.
     */
    concatenate (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to be identical to the given transform.
     * @param tx The transform to copy.
     */
    copyFrom (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    createInverse ( ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Compares two affine transforms for equality.
     * @param tx The other affine transform.
     */
    equals (tx : ಠ_ಠ.clutz.goog.math.AffineTransform | null ) : boolean ;
    getDeterminant ( ) : number ;
    getScaleX ( ) : number ;
    getScaleY ( ) : number ;
    getShearX ( ) : number ;
    getShearY ( ) : number ;
    getTranslateX ( ) : number ;
    getTranslateY ( ) : number ;
    isIdentity ( ) : boolean ;
    /**
     * Returns whether the transform is invertible. A transform is not invertible
     * if the determinant is 0 or any value is non-finite or NaN.
     */
    isInvertible ( ) : boolean ;
    /**
     * Pre-concatenates an affine transform to this transform.
     * @param tx The transform to preconcatenate.
     */
    preConcatenate (tx : ಠ_ಠ.clutz.goog.math.AffineTransform ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a rotation transformation around an
     * anchor point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    preRotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a scaling transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [sx  0 0] [m00 m01 m02]
     * [ 0 sy 0] [m10 m11 m12]
     * [ 0  0 1] [  0   0   1]
     * </pre>
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    preScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a shear transformation.
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [  1 shx 0] [m00 m01 m02]
     * [shy   1 0] [m10 m11 m12]
     * [  0   0 1] [  0   0   1]
     * </pre>
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    preShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Pre-concatenates this transform with a translate transformation,
     * i.e. calculates the following matrix product:
     *
     * <pre>
     * [1 0 dx] [m00 m01 m02]
     * [0 1 dy] [m10 m11 m12]
     * [0 0  1] [  0   0   1]
     * </pre>
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    preTranslate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a rotation transformation around an anchor
     * point.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    rotate (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    scale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    setToRotation (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    setToScale (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    setToShear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    setToTranslation (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Sets this transform to the matrix specified by the 6 values.
     * @param m00 The m00 coordinate of the transform.
     * @param m10 The m10 coordinate of the transform.
     * @param m01 The m01 coordinate of the transform.
     * @param m11 The m11 coordinate of the transform.
     * @param m02 The m02 coordinate of the transform.
     * @param m12 The m12 coordinate of the transform.
     */
    setTransform (m00 : number , m10 : number , m01 : number , m11 : number , m02 : number , m12 : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Concatenates this transform with a shear transformation.
     * @param shx The x shear factor.
     * @param shy The y shear factor.
     */
    shear (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    toString ( ) : string ;
    /**
     * Transforms an array of coordinates by this transform and stores the result
     * into a destination array.
     * @param src The array containing the source points as x, y value pairs.
     * @param srcOff The offset to the first point to be transformed.
     * @param dst The array into which to store the transformed point pairs.
     * @param dstOff The offset of the location of the first transformed point in the destination array.
     * @param numPts The number of points to transform.
     */
    transform (src : number [] , srcOff : number , dst : number [] , dstOff : number , numPts : number ) : void ;
    /**
     * Concatenates this transform with a translate transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    translate (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a rotation transformation.
     * @param theta The angle of rotation measured in radians.
     * @param x The x coordinate of the anchor point.
     * @param y The y coordinate of the anchor point.
     */
    static getRotateInstance (theta : number , x : number , y : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a scaling transformation.
     * @param sx The x-axis scaling factor.
     * @param sy The y-axis scaling factor.
     */
    static getScaleInstance (sx : number , sy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a shearing transformation.
     * @param shx The x-axis shear factor.
     * @param shy The y-axis shear factor.
     */
    static getShearInstance (shx : number , shy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
    /**
     * Creates a transform representing a translation transformation.
     * @param dx The distance to translate in the x direction.
     * @param dy The distance to translate in the y direction.
     */
    static getTranslateInstance (dx : number , dy : number ) : ಠ_ಠ.clutz.goog.math.AffineTransform ;
  }
}
declare module 'goog:goog.math.AffineTransform' {
  import AffineTransform = ಠ_ಠ.clutz.goog.math.AffineTransform;
  export default AffineTransform;
}
