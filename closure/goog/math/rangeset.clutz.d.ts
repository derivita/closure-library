//!! generated by clutz.
// Generated from math/rangeset.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Constructs a new RangeSet, which can store numeric ranges.
   *
   * Ranges are treated as half-closed: that is, they are exclusive of their end
   * value [start, end).
   *
   * New ranges added to the set which overlap the values in one or more existing
   * ranges will be merged.
   */
  class RangeSet implements Iterable < ಠ_ಠ.clutz.goog.math.Range > {
    private noStructuralTyping_goog_math_RangeSet : any;
    /**
     * Returns an iterator that iterates over the ranges in the RangeSet.
     * @param opt_keys Ignored for RangeSets.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.iter.Iterator ;
    /**
     * Adds a range to the set. If the new range overlaps existing values, those
     * ranges will be merged.
     * @param a The range to add.
     */
    add (a : ಠ_ಠ.clutz.goog.math.Range | null ) : void ;
    clear ( ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    /**
     * Determines whether a given range is in the set. Only succeeds if the entire
     * range is available.
     * @param a The query range.
     */
    contains (a : ಠ_ಠ.clutz.goog.math.Range | null ) : boolean ;
    /**
     * Determines whether a given value is set in the RangeSet.
     * @param value The value to test.
     */
    containsValue (value : number ) : boolean ;
    coveredLength ( ) : number ;
    /**
     * Subtracts the ranges of another set from this one, returning the result
     * as a new RangeSet.
     * @param set The RangeSet to subtract.
     */
    difference (set : ಠ_ಠ.clutz.goog.math.RangeSet ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    getBounds ( ) : ಠ_ಠ.clutz.goog.math.Range | null ;
    /**
     * Intersects this RangeSet with another.
     * @param set The RangeSet to intersect with.
     */
    intersection (set : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    /**
     * Creates an inverted slice of this set over the input range.
     * @param range The range to copy into the slice.
     */
    inverse (range : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a range of values from the set.
     * @param a The range to remove.
     */
    remove (a : ಠ_ಠ.clutz.goog.math.Range | null ) : void ;
    /**
     * Creates a subset of this set over the input range.
     * @param range The range to copy into the slice.
     */
    slice (range : ಠ_ಠ.clutz.goog.math.Range | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    toString ( ) : string ;
    /**
     * Returns the union of this RangeSet with another.
     * @param set Another RangeSet.
     */
    union (set : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : ಠ_ಠ.clutz.goog.math.RangeSet ;
    /**
     * Compares two sets for equality.
     * @param a A range set.
     * @param b A range set.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.RangeSet | null , b : ಠ_ಠ.clutz.goog.math.RangeSet | null ) : boolean ;
  }
}
declare module 'goog:goog.math.RangeSet' {
  import RangeSet = ಠ_ಠ.clutz.goog.math.RangeSet;
  export default RangeSet;
}
