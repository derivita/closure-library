//!! generated by clutz.
// Generated from math/rect.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing rectangular regions.
   */
  class Rect implements ಠ_ಠ.clutz.goog.math.IRect {
    private noStructuralTyping_goog_math_Rect : any;
    /**
     * Class for representing rectangular regions.
     * @param x Left.
     * @param y Top.
     * @param w Width.
     * @param h Height.
     */
    constructor (x : number , y : number , w : number , h : number ) ;
    height : number ;
    left : number ;
    top : number ;
    width : number ;
    /**
     * Expand this rectangle to also include the area of the given rectangle.
     * @param rect The other rectangle.
     */
    boundingRect (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : void ;
    /**
     * Rounds the fields to the next larger integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Tests whether this rectangle entirely contains another rectangle or
     * coordinate.
     * @param another The rectangle or coordinate to test for containment.
     */
    contains (another : ಠ_ಠ.clutz.goog.math.IRect | null | ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
    /**
     * Computes the difference regions between this rectangle and `rect`. The
     * return value is an array of 0 to 4 rectangles defining the remaining regions
     * of this rectangle after the other has been subtracted.
     * @param rect A Rectangle.
     */
    difference (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect [] ;
    distance (point : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Rounds the fields to the next smaller integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    getBottomRight ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getCenter ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    getTopLeft ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Computes the intersection of this rectangle and the rectangle parameter.  If
     * there is no intersection, returns false and leaves this rectangle as is.
     * @param rect A Rectangle.
     */
    intersection (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Returns whether a rectangle intersects this rectangle.
     * @param rect A rectangle.
     */
    intersects (rect : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Rounds the fields to nearest integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Scales this rectangle by the given scale factors. The left and width values
     * are scaled by `sx` and the top and height values are scaled by
     * `opt_sy`.  If `opt_sy` is not given, then all fields are scaled
     * by `sx`.
     * @param sx The scale factor to use for the x dimension.
     * @param opt_sy The scale factor to use for the y dimension.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Rect ;
    squaredDistance (point : ಠ_ಠ.clutz.goog.math.Coordinate ) : number ;
    /**
     * Returns a new Box object with the same position and dimensions as this
     * rectangle.
     */
    toBox ( ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Returns a nice string representing size and dimensions of rectangle.
     */
    toString ( ) : string ;
    /**
     * Translates this rectangle by the given offsets. If a
     * `goog.math.Coordinate` is given, then the left and top values are
     * translated by the coordinate's x and y values. Otherwise, left and top are
     * translated by `tx` and `opt_ty` respectively.
     * @param tx The value to translate left by or the the coordinate to translate this rect by.
     * @param opt_ty The value to translate top by.
     */
    translate (tx : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_ty ? : number ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Returns a new rectangle which completely contains both input rectangles.
     * @param a A rectangle.
     * @param b A rectangle.
     */
    static boundingRect (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * Creates a new Rect object with the same position and dimensions as a given
     * Box.  Note that this is only the inverse of toBox if left/top are defined.
     * @param box A box.
     */
    static createFromBox (box : ಠ_ಠ.clutz.goog.math.Box | null ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Creates a new Rect object with the position and size given.
     * @param position The top-left coordinate of the Rect
     * @param size The size of the Rect
     */
    static createFromPositionAndSize (position : ಠ_ಠ.clutz.goog.math.Coordinate , size : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Rect ;
    /**
     * Computes the difference regions between two rectangles. The return value is
     * an array of 0 to 4 rectangles defining the remaining regions of the first
     * rectangle after the second has been subtracted.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static difference (a : ಠ_ಠ.clutz.goog.math.Rect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect [] ;
    /**
     * Compares rectangles for equality.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
    /**
     * Returns the intersection of two rectangles. Two rectangles intersect if they
     * touch at all, for example, two zero width and height rectangles would
     * intersect if they had the same top and left.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static intersection (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * Returns whether two rectangles intersect. Two rectangles intersect if they
     * touch at all, for example, two zero width and height rectangles would
     * intersect if they had the same top and left.
     * @param a A Rectangle.
     * @param b A Rectangle.
     */
    static intersects (a : ಠ_ಠ.clutz.goog.math.IRect | null , b : ಠ_ಠ.clutz.goog.math.IRect | null ) : boolean ;
  }
}
declare module 'goog:goog.math.Rect' {
  import Rect = ಠ_ಠ.clutz.goog.math.Rect;
  export default Rect;
}
