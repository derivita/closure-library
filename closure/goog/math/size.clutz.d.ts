//!! generated by clutz.
// Generated from math/size.js
declare namespace ಠ_ಠ.clutz.goog.math {
  /**
   * Class for representing sizes consisting of a width and height. Undefined
   * width and height support is deprecated and results in compiler warning.
   */
  class Size {
    private noStructuralTyping_goog_math_Size : any;
    /**
     * Class for representing sizes consisting of a width and height. Undefined
     * width and height support is deprecated and results in compiler warning.
     * @param width Width.
     * @param height Height.
     */
    constructor (width : number , height : number ) ;
    /**
     * Height
     */
    height : number ;
    /**
     * Width
     */
    width : number ;
    area ( ) : number ;
    aspectRatio ( ) : number ;
    /**
     * Clamps the width and height parameters upward to integer values.
     */
    ceil ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    clone ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    fitsInside (target : ಠ_ಠ.clutz.goog.math.Size ) : boolean ;
    /**
     * Clamps the width and height parameters downward to integer values.
     */
    floor ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    getLongest ( ) : number ;
    getShortest ( ) : number ;
    isEmpty ( ) : boolean ;
    perimeter ( ) : number ;
    /**
     * Rounds the width and height parameters to integer values.
     */
    round ( ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Scales this size by the given scale factors. The width and height are scaled
     * by `sx` and `opt_sy` respectively.  If `opt_sy` is not
     * given, then `sx` is used for both the width and height.
     * @param sx The scale factor to use for the width.
     * @param opt_sy The scale factor to use for the height.
     */
    scale (sx : number , opt_sy ? : number ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Uniformly scales the size to perfectly cover the dimensions of a given size.
     * If the size is already larger than the target, it will be scaled down to the
     * minimum size at which it still covers the entire target. The original aspect
     * ratio will be preserved.
     *
     * This function assumes that both Sizes contain strictly positive dimensions.
     * @param target The target size.
     */
    scaleToCover (target : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Uniformly scales the size to fit inside the dimensions of a given size. The
     * original aspect ratio will be preserved.
     *
     * This function assumes that both Sizes contain strictly positive dimensions.
     * @param target The target size.
     */
    scaleToFit (target : ಠ_ಠ.clutz.goog.math.Size ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Returns a nice string representing size.
     */
    toString ( ) : string ;
    /**
     * Compares sizes for equality.
     * @param a A Size.
     * @param b A Size.
     */
    static equals (a : ಠ_ಠ.clutz.goog.math.Size | null , b : ಠ_ಠ.clutz.goog.math.Size | null ) : boolean ;
  }
}
declare module 'goog:goog.math.Size' {
  import Size = ಠ_ಠ.clutz.goog.math.Size;
  export default Size;
}
