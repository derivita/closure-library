//!! generated by clutz.
// Generated from tweak/tweak.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * Creates and registers a group of BooleanSettings that are all set by a
   * single query parameter. A call to goog.tweak.endBooleanGroup() must be used
   * to close this group. Only goog.tweak.registerBoolean() calls are allowed with
   * the beginBooleanGroup()/endBooleanGroup().
   * @param id The unique ID for the setting.
   * @param description A description of what the setting does.
   * @param opt_configParams Extra configuration parameters.
   */
  function beginBooleanGroup (id : string , description : string , opt_configParams ? : GlobalObject ) : void ;
  /**
   * Stops adding boolean entries to the active boolean group.
   */
  function endBooleanGroup ( ) : void ;
  /**
   * Returns the value of the boolean setting with the given ID.
   * @param id The unique string that identifies this entry.
   */
  function getBoolean (id : string ) : boolean ;
  /**
   * Returns the value of the numeric setting with the given ID.
   * @param id The unique string that identifies this entry.
   */
  function getNumber (id : string ) : number ;
  /**
   * Returns/creates the registry singleton.
   */
  function getRegistry ( ) : ಠ_ಠ.clutz.goog.tweak.Registry ;
  /**
   * Returns the value of the string setting with the given ID,
   * @param id The unique string that identifies this entry.
   */
  function getString (id : string ) : string ;
  /**
   * Creates and registers a BooleanSetting.
   * @param id The unique ID for the setting.
   * @param description A description of what the setting does.
   * @param opt_defaultValue The default value for the setting.
   * @param opt_configParams Extra configuration parameters.
   */
  function registerBoolean (id : string , description : string , opt_defaultValue ? : boolean , opt_configParams ? : GlobalObject ) : void ;
  /**
   * Creates and registers a ButtonAction.
   * @param id The unique ID for the setting.
   * @param description A description of what the action does.
   * @param callback Function to call when the button is clicked.
   * @param opt_label The button text (instead of the ID).
   */
  function registerButton (id : string , description : string , callback : Function , opt_label ? : string ) : void ;
  /**
   * Creates and registers a NumericSetting.
   * @param id The unique ID for the setting.
   * @param description A description of what the setting does.
   * @param opt_defaultValue The default value for the setting.
   * @param opt_configParams Extra configuration parameters.
   */
  function registerNumber (id : string , description : string , opt_defaultValue ? : number , opt_configParams ? : GlobalObject ) : void ;
  /**
   * Creates and registers a StringSetting.
   * @param id The unique ID for the setting.
   * @param description A description of what the setting does.
   * @param opt_defaultValue The default value for the setting.
   * @param opt_configParams Extra configuration parameters.
   */
  function registerString (id : string , description : string , opt_defaultValue ? : string , opt_configParams ? : GlobalObject ) : void ;
}
declare module 'goog:goog.tweak' {
  import tweak = ಠ_ಠ.clutz.goog.tweak;
  export = tweak;
}
// Generated from tweak/tweak.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * Type for configParams.
   * TODO(agrieve): Remove |Object when optional fields in struct types are
   * implemented.
   */
  type ConfigParams = GlobalObject ;
}
declare module 'goog:goog.tweak.ConfigParams' {
  import ConfigParams = ಠ_ಠ.clutz.goog.tweak.ConfigParams;
  export default ConfigParams;
}
