//!! generated by clutz.
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * Base class for all Registry entries.
   */
  class BaseEntry {
    private noStructuralTyping_goog_tweak_BaseEntry : any;
    /**
     * Base class for all Registry entries.
     * @param id The ID for the entry. Must contain only letters, numbers, underscores and periods.
     * @param description A description of what the entry does.
     */
    constructor (id : string , description : string ) ;
    /**
     * A description of what this entry does.
     */
    description : string ;
    /**
     * A descriptive label for the entry.
     */
    label : string ;
    /**
     * Adds a callback that should be called when the setting has changed (or when
     * an action has been clicked).
     * @param callback The callback to add.
     */
    addCallback (callback : Function ) : void ;
    fireCallbacks ( ) : void ;
    getId ( ) : string ;
    /**
     * Returns whether a restart is required for changes to the setting to take
     * effect.
     */
    isRestartRequired ( ) : boolean ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    /**
     * Removes a callback that was added by addCallback.
     * @param callback The callback to add.
     */
    removeCallback (callback : Function ) : void ;
    /**
     * Sets whether a restart is required for changes to the setting to take
     * effect.
     * @param value The new value.
     */
    setRestartRequired (value : boolean ) : void ;
  }
}
declare module 'goog:goog.tweak.BaseEntry' {
  import BaseEntry = ಠ_ಠ.clutz.goog.tweak.BaseEntry;
  export default BaseEntry;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * Base class for all settings that wrap primitive values.
   */
  class BasePrimitiveSetting extends ಠ_ಠ.clutz.goog.tweak.BaseSetting {
    private noStructuralTyping_goog_tweak_BasePrimitiveSetting : any;
    /**
     * Base class for all settings that wrap primitive values.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     * @param defaultValue The default value for this setting.
     */
    constructor (id : string , description : string , defaultValue : any ) ;
    /**
     * Returns the query param encoded representation of the setting's value.
     */
    protected encodeNewValue ( ) : string ;
    /**
     * Returns the default value for this setting.
     */
    getDefaultValue ( ) : any ;
    /**
     * Returns the value of the setting to use once "Apply Tweaks" is clicked.
     */
    getNewValue ( ) : any ;
    getNewValueEncoded ( ) : string | null ;
    /**
     * If the setting has the restartRequired option, then returns its initial
     * value. Otherwise, returns its current value.
     */
    getValue ( ) : any ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    /**
     * Sets the default value for the tweak.
     * @param value The new value.
     */
    setDefaultValue (value ? : any ) : void ;
    /**
     * Sets the value of the setting. If the setting has the restartRequired
     * option, then the value will not be changed until the "Apply Tweaks" button
     * is clicked. If it does not have the option, the value will be update
     * immediately and all registered callbacks will be called.
     * @param value The value.
     */
    setValue (value ? : any ) : void ;
  }
}
declare module 'goog:goog.tweak.BasePrimitiveSetting' {
  import BasePrimitiveSetting = ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting;
  export default BasePrimitiveSetting;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * Base class for all tweak entries that are settings. Settings are entries
   * that are associated with a query parameter.
   */
  class BaseSetting extends ಠ_ಠ.clutz.goog.tweak.BaseEntry {
    private noStructuralTyping_goog_tweak_BaseSetting : any;
    /**
     * Base class for all tweak entries that are settings. Settings are entries
     * that are associated with a query parameter.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     */
    constructor (id : string , description : string ) ;
    /**
     * The value of this setting's query parameter.
     */
    protected initialQueryParamValue ? : string ;
    /**
     * Asserts that this tweak has not been initialized yet.
     * @param funcName Function name to use in the assertion message.
     */
    protected assertNotInitialized (funcName : string ) : void ;
    /**
     * Applies the default value or query param value if this is the first time
     * that the function has been called.
     */
    protected ensureInitialized ( ) : void ;
    /**
     * Returns the value to be used in the query parameter for this tweak.
     */
    getNewValueEncoded ( ) : string | null ;
    /**
     * Returns the name of the query parameter used for this setting.
     */
    getParamName ( ) : string | null ;
    /**
     * Sets the value of the entry based on the value of the query parameter. Once
     * this is called, configuration settings (associated query parameter, token,
     * etc) may not be changed.
     * @param value The part of the query param for this setting after the '='. Null if it is not present.
     */
    protected initialize (a : string | null ) : any ;
    /**
     * Returns whether the setting is currently being initialized.
     */
    protected isInitializing ( ) : boolean ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    /**
     * Sets the initial query parameter value for this setting. May not be called
     * after the setting has been initialized.
     * @param value The initial query parameter value for this setting.
     */
    setInitialQueryParamValue (value : string ) : void ;
    /**
     * Sets the name of the query parameter used for this setting. If null is
     * passed the setting will not appear in the top-level query string.
     * @param value The new value.
     */
    setParamName (value : string | null ) : void ;
  }
}
declare module 'goog:goog.tweak.BaseSetting' {
  import BaseSetting = ಠ_ಠ.clutz.goog.tweak.BaseSetting;
  export default BaseSetting;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * A registry setting that contains a group of boolean subfield, where all
   * entries modify the same query parameter. For example:
   * ?foo=setting1,-setting2
   */
  class BooleanGroup extends ಠ_ಠ.clutz.goog.tweak.BaseSetting {
    private noStructuralTyping_goog_tweak_BooleanGroup : any;
    /**
     * A registry setting that contains a group of boolean subfield, where all
     * entries modify the same query parameter. For example:
     * ?foo=setting1,-setting2
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     */
    constructor (id : string , description : string ) ;
    /**
     * Adds the given BooleanSetting to the group.
     * @param boolEntry The entry.
     */
    addChild (boolEntry : ಠ_ಠ.clutz.goog.tweak.BooleanInGroupSetting | null ) : void ;
    /**
     * Returns the map of token->boolean settings.
     */
    getChildEntries ( ) : { [ /* warning: coerced from ? */ key: string ]: ಠ_ಠ.clutz.goog.tweak.BooleanSetting } ;
    getNewValueEncoded ( ) : string | null ;
    protected initialize (value : string | null ) : any ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
  }
}
declare module 'goog:goog.tweak.BooleanGroup' {
  import BooleanGroup = ಠ_ಠ.clutz.goog.tweak.BooleanGroup;
  export default BooleanGroup;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * An entry in a BooleanGroup.
   */
  class BooleanInGroupSetting extends ಠ_ಠ.clutz.goog.tweak.BooleanSetting {
    private noStructuralTyping_goog_tweak_BooleanInGroupSetting : any;
    /**
     * An entry in a BooleanGroup.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     * @param group The group that this entry belongs to.
     */
    constructor (id : string , description : string , group : ಠ_ಠ.clutz.goog.tweak.BooleanGroup ) ;
    /**
     * Returns the BooleanGroup that this setting belongs to.
     */
    getGroup ( ) : ಠ_ಠ.clutz.goog.tweak.BooleanGroup ;
    /**
     * Returns the token to use in the query parameter.
     */
    getToken ( ) : string ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    setParamName (value : string | null ) : void ;
    /**
     * Sets the token to use in the query parameter.
     * @param value The value.
     */
    setToken (value : string ) : void ;
  }
}
declare module 'goog:goog.tweak.BooleanInGroupSetting' {
  import BooleanInGroupSetting = ಠ_ಠ.clutz.goog.tweak.BooleanInGroupSetting;
  export default BooleanInGroupSetting;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * A registry setting that can be either true of false.
   */
  class BooleanSetting extends ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting {
    private noStructuralTyping_goog_tweak_BooleanSetting : any;
    /**
     * A registry setting that can be either true of false.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     */
    constructor (id : string , description : string ) ;
    protected encodeNewValue ( ) : string ;
    getDefaultValue ( ) : boolean ;
    getNewValue ( ) : boolean ;
    getValue ( ) : boolean ;
    protected initialize (value : string | null ) : any ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    setDefaultValue (a : boolean ) : void ;
    setValue (a : boolean ) : void ;
  }
}
declare module 'goog:goog.tweak.BooleanSetting' {
  import BooleanSetting = ಠ_ಠ.clutz.goog.tweak.BooleanSetting;
  export default BooleanSetting;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * A registry action (a button).
   */
  class ButtonAction extends ಠ_ಠ.clutz.goog.tweak.BaseEntry {
    private noStructuralTyping_goog_tweak_ButtonAction : any;
    /**
     * A registry action (a button).
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     * @param callback Function to call when the button is clicked.
     */
    constructor (id : string , description : string , callback : Function ) ;
  }
}
declare module 'goog:goog.tweak.ButtonAction' {
  import ButtonAction = ಠ_ಠ.clutz.goog.tweak.ButtonAction;
  export default ButtonAction;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * A registry setting for numeric values.
   */
  class NumericSetting extends ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting {
    private noStructuralTyping_goog_tweak_NumericSetting : any;
    /**
     * A registry setting for numeric values.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     */
    constructor (id : string , description : string ) ;
    /**
     * Valid values for the setting.
     */
    validValues_ ? : number [] | null ;
    protected encodeNewValue ( ) : string ;
    getDefaultValue ( ) : number ;
    getNewValue ( ) : number ;
    /**
     * Returns the valid values for the setting.
     */
    getValidValues ( ) : number [] | null | undefined ;
    getValue ( ) : number ;
    protected initialize (value : string | null ) : any ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    setDefaultValue (a : number ) : void ;
    /**
     * Sets the valid values for the setting.
     * @param values Valid values.
     */
    setValidValues (values : number [] | null | undefined ) : void ;
    setValue (a : number ) : void ;
  }
}
declare module 'goog:goog.tweak.NumericSetting' {
  import NumericSetting = ಠ_ಠ.clutz.goog.tweak.NumericSetting;
  export default NumericSetting;
}
// Generated from tweak/entries.js
declare namespace ಠ_ಠ.clutz.goog.tweak {
  /**
   * A registry setting for string values.
   */
  class StringSetting extends ಠ_ಠ.clutz.goog.tweak.BasePrimitiveSetting {
    private noStructuralTyping_goog_tweak_StringSetting : any;
    /**
     * A registry setting for string values.
     * @param id The ID for the setting.
     * @param description A description of what the setting does.
     */
    constructor (id : string , description : string ) ;
    /**
     * Valid values for the setting.
     */
    validValues_ ? : string [] | null ;
    protected encodeNewValue ( ) : string ;
    getDefaultValue ( ) : string ;
    getNewValue ( ) : string ;
    /**
     * Returns the valid values for the setting.
     */
    getValidValues ( ) : string [] | null | undefined ;
    getValue ( ) : string ;
    protected initialize (value : string | null ) : any ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    setDefaultValue (a : string ) : void ;
    /**
     * Sets the valid values for the setting.
     * @param values Valid values.
     */
    setValidValues (values : string [] | null | undefined ) : void ;
    setValue (a : string ) : void ;
  }
}
declare module 'goog:goog.tweak.StringSetting' {
  import StringSetting = ಠ_ಠ.clutz.goog.tweak.StringSetting;
  export default StringSetting;
}
