//!! generated by clutz.
// Generated from proto2/objectserializer.js
declare namespace ಠ_ಠ.clutz.goog.proto2 {
  /**
   * ObjectSerializer, a serializer which turns Messages into simplified
   * ECMAScript objects.
   */
  class ObjectSerializer extends ಠ_ಠ.clutz.goog.proto2.Serializer {
    private noStructuralTyping_goog_proto2_ObjectSerializer : any;
    /**
     * ObjectSerializer, a serializer which turns Messages into simplified
     * ECMAScript objects.
     * @param opt_keyOption If specified, which key option to use when serializing/deserializing.
     * @param opt_serializeBooleanAsNumber If specified and true, the serializer will convert boolean values to 0/1 representation.
     * @param opt_ignoreUnknownFields If specified and true, the serializer will ignore unknown fields in the JSON payload instead of returning an error.
     */
    constructor (opt_keyOption ? : ಠ_ಠ.clutz.goog.proto2.ObjectSerializer.KeyOption , opt_serializeBooleanAsNumber ? : boolean , opt_ignoreUnknownFields ? : boolean ) ;
    ignoreUnknownFields_ ? : boolean ;
    keyOption_ ? : ಠ_ಠ.clutz.goog.proto2.ObjectSerializer.KeyOption ;
    serializeBooleanAsNumber_ ? : boolean ;
    /**
     * Deserializes a message from an object and places the
     * data in the message.
     * @param message The message in which to place the information.
     * @param data The data of the message.
     */
    deserializeTo (message : ಠ_ಠ.clutz.goog.proto2.Message | null , data : any ) : void ;
    getDeserializedValue (field ? : any , value ? : any ) : any ;
    getSerializedValue (field ? : any , value ? : any ) : any ;
    /**
     * Serializes a message to an object.
     * @param message The message to be serialized.
     */
    serialize (message : ಠ_ಠ.clutz.goog.proto2.Message | null ) : GlobalObject ;
  }
}
// Generated from proto2/objectserializer.js
declare namespace ಠ_ಠ.clutz.goog.proto2.ObjectSerializer {
  /**
   * An enumeration of the options for how to emit the keys in
   * the generated simplified object.
   *
   * For serialization, the option specifies the keys to use in the serialized
   * object.
   *
   * For deserialization, the option specifies which keys are allowed; an object
   * serialized by TAG may be deserialized by TAG or by NAME or by
   * CAMEL_CASE_NAME, but an object serialized by NAME cannot be deserialized by
   * TAG.  An object serialized with any option can be deserialized by
   * CAMEL_CASE_NAME.
   */
  enum KeyOption {
    CAMEL_CASE_NAME = 2.0 ,
    NAME = 1.0 ,
    TAG = 0.0 ,
  }
}
declare module 'goog:goog.proto2.ObjectSerializer' {
  import ObjectSerializer = ಠ_ಠ.clutz.goog.proto2.ObjectSerializer;
  export default ObjectSerializer;
}
