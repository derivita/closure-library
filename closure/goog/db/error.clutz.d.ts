//!! generated by clutz.
// Generated from db/error.js
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * A database error. Since the stack trace can be unhelpful in an asynchronous
   * context, the error provides a message about where it was produced.
   */
  class Error extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_db_Error : any;
    /**
     * A database error. Since the stack trace can be unhelpful in an asynchronous
     * context, the error provides a message about where it was produced.
     * @param error The DOMError instance returned by the browser for Chrome22+, or an error code for previous versions.
     * @param context A description of where the error occurred.
     * @param opt_message Additional message.
     */
    constructor (error : number | DOMError | ಠ_ಠ.clutz.goog.db.Error.DOMErrorLike , context : string , opt_message ? : string ) ;
    /**
     * The code for this error.
     */
    code : number ;
    getName ( ) : string ;
    /**
     * Constructs an goog.db.Error instance from an DOMException. This abstraction
     * is necessary to provide backwards compatibility with Chrome21.
     * @param ex The exception that was thrown.
     * @param message The error message to add to err if it's wrapped.
     */
    static fromException (ex : DOMError | DOMException , message : string ) : ಠ_ಠ.clutz.goog.db.Error ;
    /**
     * Constructs an goog.db.Error instance from an IDBRequest. This abstraction is
     * necessary to provide backwards compatibility with Chrome21.
     * @param request The request that failed.
     * @param message The error message to add to err if it's wrapped.
     */
    static fromRequest (request : IDBRequest , message : string ) : ಠ_ಠ.clutz.goog.db.Error ;
    /**
     * Translates an error name to an error code. This is purely kept for backwards
     * compatibility with Chrome21.
     * @param name The name of the erorr.
     */
    static getCode (name : string | undefined ) : number ;
    /**
     * Translates an error code into a more useful message.
     * @param code Error code.
     */
    static getMessage (code : number ) : string ;
    /**
     * Converts an error code used by the old spec, to an error name used by the
     * latest spec.
     * @param code The error code to convert.
     */
    static getName (code : number ) : ಠ_ಠ.clutz.goog.db.Error.ErrorName ;
  }
}
// Generated from db/error.js
declare namespace ಠ_ಠ.clutz.goog.db.Error {
  interface DOMErrorLike {
    name ? : string ;
  }
  /**
   * Error codes for database errors.
   */
  enum ErrorCode {
    ABORT_ERR ,
    CONSTRAINT_ERR ,
    DATA_ERR ,
    INVALID_ACCESS_ERR ,
    INVALID_STATE_ERR ,
    NON_TRANSIENT_ERR ,
    NOT_ALLOWED_ERR ,
    NOT_FOUND_ERR ,
    QUOTA_ERR ,
    READ_ONLY_ERR ,
    TIMEOUT_ERR ,
    TRANSACTION_INACTIVE_ERR ,
    UNKNOWN_ERR ,
  }
  /**
   * Names of all possible errors as returned from the browser.
   */
  enum ErrorName {
    ABORT_ERR = 'AbortError' ,
    CONSTRAINT_ERR = 'ConstraintError' ,
    DATA_CLONE_ERR = 'DataCloneError' ,
    DATA_ERR = 'DataError' ,
    INVALID_ACCESS_ERR = 'InvalidAccessError' ,
    INVALID_STATE_ERR = 'InvalidStateError' ,
    NOT_FOUND_ERR = 'NotFoundError' ,
    QUOTA_EXCEEDED_ERR = 'QuotaExceededError' ,
    READ_ONLY_ERR = 'ReadOnlyError' ,
    SYNTAX_ERROR = 'SyntaxError' ,
    TIMEOUT_ERR = 'TimeoutError' ,
    TRANSACTION_INACTIVE_ERR = 'TransactionInactiveError' ,
    UNKNOWN_ERR = 'UnknownError' ,
    VERSION_ERR = 'VersionError' ,
  }
  class VersionChangeBlockedError extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_db_Error_VersionChangeBlockedError : any;
    /**
     * A specific kind of database error. If a Version Change is unable to proceed
     * due to other open database connections, it will block and this error will be
     * thrown.
     */
    constructor ( ) ;
  }
}
declare module 'goog:goog.db.Error' {
  import Error = ಠ_ಠ.clutz.goog.db.Error;
  export default Error;
}
