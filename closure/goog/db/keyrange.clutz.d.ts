//!! generated by clutz.
// Generated from db/keyrange.js
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates a new IDBKeyRange wrapper object. Should not be created directly,
   * instead use one of the static factory methods. For example:
   */
  class KeyRange {
    private noStructuralTyping_goog_db_KeyRange : any;
    /**
     * Creates a new IDBKeyRange wrapper object. Should not be created directly,
     * instead use one of the static factory methods. For example:
     * @param range Underlying IDBKeyRange object.
     */
    constructor (range : IDBKeyRange ) ;
    /**
     * Returns underlying key range object. This is used in ObjectStore's openCursor
     * and count methods.
     */
    range ( ) : IDBKeyRange ;
    /**
     * Creates a key range with upper and lower bounds.
     * @param lower The value of the lower bound.
     * @param upper The value of the upper bound.
     * @param opt_lowerOpen If true, the range excludes the lower bound value.
     * @param opt_upperOpen If true, the range excludes the upper bound value.
     */
    static bound (lower : ಠ_ಠ.clutz.IDBKeyType | null , upper : ಠ_ಠ.clutz.IDBKeyType | null , opt_lowerOpen ? : boolean , opt_upperOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a key range with a lower bound only, finishes at the last record.
     * @param lower The value of the lower bound.
     * @param opt_lowerOpen If true, the range excludes the lower bound value.
     */
    static lowerBound (lower : ಠ_ಠ.clutz.IDBKeyType | null , opt_lowerOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a new key range for a single value.
     * @param key The single value in the range.
     */
    static only (key : ಠ_ಠ.clutz.IDBKeyType | null ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
    /**
     * Creates a key range with a upper bound only, starts at the first record.
     * @param upper The value of the upper bound.
     * @param opt_upperOpen If true, the range excludes the upper bound value.
     */
    static upperBound (upper : ಠ_ಠ.clutz.IDBKeyType | null , opt_upperOpen ? : boolean ) : ಠ_ಠ.clutz.goog.db.KeyRange ;
  }
}
declare module 'goog:goog.db.KeyRange' {
  import KeyRange = ಠ_ಠ.clutz.goog.db.KeyRange;
  export default KeyRange;
}
