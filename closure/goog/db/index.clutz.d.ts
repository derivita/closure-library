//!! generated by clutz.
// Generated from db/index.js
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates an IDBIndex wrapper object. Indexes are associated with object
   * stores and provide methods for looking up objects based on their non-key
   * properties. Should not be created directly, access through the object store
   * it belongs to.
   */
  class Index {
    private noStructuralTyping_goog_db_Index : any;
    /**
     * Creates an IDBIndex wrapper object. Indexes are associated with object
     * stores and provide methods for looking up objects based on their non-key
     * properties. Should not be created directly, access through the object store
     * it belongs to.
     * @param index Underlying IDBIndex object.
     */
    constructor (index : IDBIndex ) ;
    /**
     * Fetches a single object from the object store. Even if there are multiple
     * objects that match the given key, this method will get only one of them.
     * @param key Key to look up in the index.
     */
    get (key : ಠ_ಠ.clutz.IDBKeyType ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Returns the values matching `opt_key` up to `opt_count`.
     *
     * If `obt_key` is a `KeyRange`, returns all keys in that range. If it is
     * `undefined`, returns all known keys.
     * @param opt_key Key or KeyRange to look up in the index.
     * @param opt_count The number records to return
     */
    getAll (opt_key ? : ಠ_ಠ.clutz.IDBKeyType | ಠ_ಠ.clutz.goog.db.KeyRange , opt_count ? : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Returns the keys matching `opt_key` up to `opt_count`.
     *
     * If `obt_key` is a `KeyRange`, returns all keys in that range. If it is
     * `undefined`, returns all known keys.
     * @param opt_key Key or KeyRange to look up in the index.
     * @param opt_count The number records to return
     */
    getAllKeys (opt_key ? : ಠ_ಠ.clutz.IDBKeyType | ಠ_ಠ.clutz.goog.db.KeyRange , opt_count ? : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Looks up a single object from the object store and gives back the key that
     * it's listed under in the object store. Even if there are multiple records
     * that match the given key, this method returns the first.
     * @param key Key to look up in the index.
     */
    getKey (key : ಠ_ಠ.clutz.IDBKeyType ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    getKeyPath ( ) : any ;
    getName ( ) : string ;
    isUnique ( ) : boolean ;
    /**
     * Opens a cursor over the specified key range. Returns a cursor object which is
     * able to iterate over the given range.
     *
     * Example usage:
     *
     * <code>
     * var cursor = index.openCursor(goog.db.KeyRange.bound('a', 'c'));
     *
     * var key = goog.events.listen(
     * cursor, goog.db.Cursor.EventType.NEW_DATA,
     * function() {
     * // Do something with data.
     * cursor.next();
     * });
     *
     * goog.events.listenOnce(
     * cursor, goog.db.Cursor.EventType.COMPLETE,
     * function() {
     * // Clean up listener, and perform a finishing operation on the data.
     * goog.events.unlistenByKey(key);
     * });
     * </code>
     * @param opt_range The key range. If undefined iterates over the whole object store.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    openCursor (opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : ಠ_ಠ.clutz.goog.db.Cursor ;
  }
}
declare module 'goog:goog.db.Index' {
  import Index = ಠ_ಠ.clutz.goog.db.Index;
  export default Index;
}
