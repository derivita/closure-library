//!! generated by clutz.
// Generated from db/cursor.js
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates a new IDBCursor wrapper object. Should not be created directly,
   * access cursor through object store.
   */
  class Cursor extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_db_Cursor : any;
    /**
     * Creates a new IDBCursor wrapper object. Should not be created directly,
     * access cursor through object store.
     */
    constructor ( ) ;
    getKey ( ) : ಠ_ಠ.clutz.IDBKeyType | null ;
    getValue ( ) : any ;
    /**
     * Advances the cursor to the next position along its direction. When new data
     * is available, the NEW_DATA event will be fired. If the cursor has reached the
     * end of the range it will fire the COMPLETE event. If opt_key is specified it
     * will advance to the key it matches in its direction.
     *
     * This wraps the native #continue method on the underlying object.
     * @param opt_key The optional key to advance to.
     */
    next (opt_key ? : ಠ_ಠ.clutz.IDBKeyType | null ) : void ;
    /**
     * Deletes the value at the cursor's position, without changing the cursor's
     * position. Once the value is deleted, the cursor's value is set to null.
     */
    remove ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Updates the value at the current position of the cursor in the object store.
     * If the cursor points to a value that has just been deleted, a new value is
     * created.
     * @param value The value to be stored.
     */
    update (value : any ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Opens a value cursor from IDBObjectStore or IDBIndex over the specified key
     * range. Returns a cursor object which is able to iterate over the given range.
     * @param source Data source to open cursor.
     * @param opt_range The key range. If undefined iterates over the whole data source.
     * @param opt_direction The direction. If undefined moves in a forward direction with duplicates.
     */
    static openCursor (source : IDBObjectStore | IDBIndex , opt_range ? : ಠ_ಠ.clutz.goog.db.KeyRange , opt_direction ? : ಠ_ಠ.clutz.goog.db.Cursor.Direction ) : ಠ_ಠ.clutz.goog.db.Cursor ;
  }
}
// Generated from db/cursor.js
declare namespace ಠ_ಠ.clutz.goog.db.Cursor {
  /**
   * Possible cursor directions.
   */
  enum Direction {
    NEXT = 'next' ,
    NEXT_NO_DUPLICATE = 'nextunique' ,
    PREV = 'prev' ,
    PREV_NO_DUPLICATE = 'prevunique' ,
  }
  /**
   * Event types that the cursor can dispatch. COMPLETE events are dispatched when
   * a cursor is depleted of values, a NEW_DATA event if there is new data
   * available, and ERROR if an error occurred.
   */
  enum EventType {
    COMPLETE = 'c' ,
    ERROR = 'e' ,
    NEW_DATA = 'n' ,
  }
}
declare module 'goog:goog.db.Cursor' {
  import Cursor = ಠ_ಠ.clutz.goog.db.Cursor;
  export default Cursor;
}
