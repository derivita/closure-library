//!! generated by clutz.
// Generated from db/indexeddb.js
declare namespace ಠ_ಠ.clutz.goog.db {
  /**
   * Creates an IDBDatabase wrapper object. The database object has methods for
   * setting the version to change the structure of the database and for creating
   * transactions to get or modify the stored records. Should not be created
   * directly, call {@link goog.db.openDatabase} to set up the connection.
   */
  class IndexedDb extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_db_IndexedDb : any;
    /**
     * Creates an IDBDatabase wrapper object. The database object has methods for
     * setting the version to change the structure of the database and for creating
     * transactions to get or modify the stored records. Should not be created
     * directly, call {@link goog.db.openDatabase} to set up the connection.
     * @param db Underlying IndexedDB database object.
     */
    constructor (db : IDBDatabase ) ;
    close ( ) : void ;
    /**
     * Creates an object store in this database. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name for the new object store.
     * @param opt_params Options object. The available options are: keyPath, which is a string and determines what object attribute to use as the key when storing objects in this object store; and autoIncrement, which is a boolean, which defaults to false and determines whether the object store should automatically generate keys for stored objects. If keyPath is not provided and autoIncrement is false, then all insert operations must provide a key as a parameter.
     */
    createObjectStore (name : string , opt_params ? : IDBObjectStoreParameters ) : ಠ_ಠ.clutz.goog.db.ObjectStore ;
    /**
     * Creates a new transaction.
     * @param storeNames A list of strings that contains the transaction's scope, the object stores that this transaction can operate on.
     * @param opt_mode The mode of the transaction. If not present, the default is READ_ONLY.
     */
    createTransaction (storeNames : string [] , opt_mode ? : ಠ_ಠ.clutz.goog.db.Transaction.TransactionMode | null ) : ಠ_ಠ.clutz.goog.db.Transaction ;
    /**
     * Deletes an object store. Can only be called inside a
     * {@link goog.db.UpgradeNeededCallback}.
     * @param name Name of the object store to delete.
     */
    deleteObjectStore (name : string ) : void ;
    disposeInternal ( ) : void ;
    getName ( ) : string ;
    getObjectStoreNames ( ) : DOMStringList ;
    getVersion ( ) : number ;
    isOpen ( ) : boolean ;
  }
}
// Generated from db/indexeddb.js
declare namespace ಠ_ಠ.clutz.goog.db.IndexedDb {
  /**
   * Event types fired by a database.
   */
  enum EventType {
    ABORT = 'abort' ,
    CLOSE = 'close' ,
    ERROR = 'error' ,
    VERSION_CHANGE = 'versionchange' ,
  }
  class VersionChangeEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_db_IndexedDb_VersionChangeEvent : any;
    /**
     * Event representing a (possibly attempted) change in the database structure.
     *
     * At time of writing, no Chrome versions support oldVersion or newVersion. See
     * http://crbug.com/153122.
     * @param oldVersion The previous version of the database.
     * @param newVersion The version the database is being or has been updated to.
     */
    constructor (oldVersion : number , newVersion : number ) ;
    /**
     * The version the database is being or has been updated to.
     */
    newVersion : number ;
    /**
     * The previous version of the database.
     */
    oldVersion : number ;
  }
}
declare module 'goog:goog.db.IndexedDb' {
  import IndexedDb = ಠ_ಠ.clutz.goog.db.IndexedDb;
  export default IndexedDb;
}
