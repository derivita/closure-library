//!! generated by clutz.
// Generated from base.js
declare namespace goog {
  let ASSUME_ES_MODULES_TRANSPILED : boolean ;
  let DEBUG : boolean ;
  /**
   * True if the debug loader enabled and used.
   */
  let DEPENDENCIES_ENABLED : boolean ;
  let DISALLOW_TEST_ONLY_CODE : boolean ;
  /**
   * A debug loader is responsible for downloading and executing javascript
   * files in an unbundled, uncompiled environment.
   *
   * This can be custimized via the setDependencyFactory method, or by
   * CLOSURE_IMPORT_SCRIPT/CLOSURE_LOAD_FILE_SYNC.
   */
  class DebugLoader_ {
    private noStructuralTyping_goog_DebugLoader_ : any;
    addDependency (relPath : string , provides : string [] | undefined , requires : string [] , opt_loadFlags ? : boolean | { [ /* warning: coerced from ? */ key: string ]: string } ) : void ;
    bootstrap (namespaces : string [] , callback : ( ) => void ) : void ;
    loadClosureDeps ( ) : void ;
    /**
     * Notifies the debug loader when a dependency has been requested.
     * @param absPathOrId Path of the dependency or goog id.
     */
    requested (absPathOrId : string , opt_force ? : boolean ) : void ;
    /**
     * Sets the dependency factory, which can be used to create custom
     * goog.Dependency implementations to control how dependencies are loaded.
     */
    setDependencyFactory (factory : goog.DependencyFactory ) : void ;
  }
  /**
   * Basic super class for all dependencies Closure Library can load.
   *
   * This default implementation is designed to load untranspiled, non-module
   * scripts in a web broswer.
   *
   * For transpiled non-goog.module files {@see goog.TranspiledDependency}.
   * For goog.modules see {@see goog.GoogModuleDependency}.
   * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.
   */
  class Dependency {
    private noStructuralTyping_goog_Dependency : any;
    /**
     * Basic super class for all dependencies Closure Library can load.
     *
     * This default implementation is designed to load untranspiled, non-module
     * scripts in a web broswer.
     *
     * For transpiled non-goog.module files {@see goog.TranspiledDependency}.
     * For goog.modules see {@see goog.GoogModuleDependency}.
     * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.
     * @param path Absolute path of this script.
     * @param relativePath Path of this script relative to goog.basePath.
     * @param provides goog.provided or goog.module symbols in this file.
     * @param requires goog symbols or relative paths to Closure this depends on.
     */
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } ) ;
    loadFlags : { [ key: string ]: string } ;
    path : string ;
    provides : string [] ;
    relativePath : string ;
    requires : string [] ;
    getPathName ( ) : string ;
    /**
     * Starts loading this dependency. This dependency can pause loading if it
     * needs to and resume it later via the controller interface.
     *
     * When this is loaded it should call controller.loaded(). Note that this will
     * end up calling the loaded method of this dependency; there is no need to
     * call it explicitly.
     */
    load (controller : goog.LoadController ) : void ;
    loaded ( ) : void ;
    onLoad (callback : ( ) => any ) : void ;
  }
  /**
   * Creates goog.Dependency instances for the debug loader to load.
   *
   * Should be overridden to have the debug loader use custom subclasses of
   * goog.Dependency.
   */
  class DependencyFactory {
    private noStructuralTyping_goog_DependencyFactory : any;
    /**
     * Creates goog.Dependency instances for the debug loader to load.
     *
     * Should be overridden to have the debug loader use custom subclasses of
     * goog.Dependency.
     */
    constructor (transpiler : goog.Transpiler ) ;
    protected transpiler : goog.Transpiler ;
    createDependency (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } , needsTranspile : boolean ) : goog.Dependency ;
  }
  let ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING : boolean ;
  let ENABLE_DEBUG_LOADER : boolean ;
  class Es6ModuleDependency extends goog.Dependency {
    private noStructuralTyping_goog_Es6ModuleDependency : any;
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } ) ;
    load (controller : goog.LoadController ) : void ;
  }
  let FEATURESET_YEAR : number ;
  /**
   * A goog.module, transpiled or not. Will always perform some minimal
   * transformation even when not transpiled to wrap in a goog.loadModule
   * statement.
   */
  class GoogModuleDependency extends goog.TransformedDependency {
    private noStructuralTyping_goog_GoogModuleDependency : any;
    /**
     * A goog.module, transpiled or not. Will always perform some minimal
     * transformation even when not transpiled to wrap in a goog.loadModule
     * statement.
     * @param path Absolute path of this script.
     * @param relativePath Path of this script relative to goog.basePath.
     * @param provides goog.provided or goog.module symbols in this file.
     * @param requires goog symbols or relative paths to Closure this depends on.
     */
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } , needsTranspile : boolean , transpiler : goog.Transpiler ) ;
    transform (contents : string ) : string ;
  }
  let LOAD_MODULE_USING_EVAL : boolean ;
  let LOCALE : string ;
  /**
   * Interface for goog.Dependency implementations to have some control over
   * loading of dependencies.
   */
  interface LoadController {
    areDepsLoaded ( ) : boolean ;
    clearModuleState ( ) : void ;
    /**
     * Registers a callback to call once the dependency is actually requested
     * via goog.require + all of the immediate dependencies have been loaded or
     * all other files have been loaded. Allows for lazy loading until
     * require'd without pausing dependency loading, which is needed on old IE.
     */
    defer (callback : Function ) : void ;
    loaded ( ) : void ;
    pause ( ) : void ;
    /**
     * List of dependencies on which load has been called but which have not
     * called loaded on their controller. This includes the current dependency.
     */
    pending ( ) : goog.Dependency [] ;
    /**
     * Registers an object as an ES6 module's exports so that goog.modules may
     * require it by path.
     * @param path Full path of the module.
     * @param opt_closureNamespace Closure namespace to associate with this module.
     */
    registerEs6ModuleExports (path : string , exports : any , opt_closureNamespace ? : string ) : void ;
    resume ( ) : void ;
    /**
     * Sets the current module state.
     * @param type Type of module.
     */
    setModuleState (type : goog.ModuleType ) : void ;
  }
  /**
   * Types of modules the debug loader can load.
   */
  /**
   * Types of modules the debug loader can load.
   */
  enum ModuleType {
    ES6 = 'es6' ,
    GOOG = 'goog' ,
  }
  /**
   * An ES6 module dependency that was transpiled to a jscomp module outside
   * of the debug loader, e.g. server side.
   */
  class PreTranspiledEs6ModuleDependency extends goog.TransformedDependency {
    private noStructuralTyping_goog_PreTranspiledEs6ModuleDependency : any;
    /**
     * An ES6 module dependency that was transpiled to a jscomp module outside
     * of the debug loader, e.g. server side.
     * @param path Absolute path of this script.
     * @param relativePath Path of this script relative to goog.basePath.
     * @param provides goog.provided or goog.module symbols in this file.
     * @param requires goog symbols or relative paths to Closure this depends on.
     */
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } ) ;
    transform (contents : string ) : string ;
  }
  let SEAL_MODULE_EXPORTS : boolean ;
  let TRANSPILE : string ;
  let TRANSPILER : string ;
  let TRANSPILE_TO_LANGUAGE : string ;
  let TRUSTED_SITE : boolean ;
  let TRUSTED_TYPES_POLICY_NAME : string ;
  /**
   * Superclass of any dependency that needs to be loaded into memory,
   * transformed, and then eval'd (goog.modules and transpiled files).
   */
  abstract class TransformedDependency extends goog.Dependency {
    private noStructuralTyping_goog_TransformedDependency : any;
    /**
     * Superclass of any dependency that needs to be loaded into memory,
     * transformed, and then eval'd (goog.modules and transpiled files).
     * @param path Absolute path of this script.
     * @param relativePath Path of this script relative to goog.basePath.
     * @param provides goog.provided or goog.module symbols in this file.
     * @param requires goog symbols or relative paths to Closure this depends on.
     */
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } ) ;
    load (controller : goog.LoadController ) : void ;
    abstract transform (contents : string ) : string ;
  }
  /**
   * Any non-goog.module dependency which needs to be transpiled before eval.
   */
  class TranspiledDependency extends goog.TransformedDependency {
    private noStructuralTyping_goog_TranspiledDependency : any;
    /**
     * Any non-goog.module dependency which needs to be transpiled before eval.
     * @param path Absolute path of this script.
     * @param relativePath Path of this script relative to goog.basePath.
     * @param provides goog.provided or goog.module symbols in this file.
     * @param requires goog symbols or relative paths to Closure this depends on.
     */
    constructor (path : string , relativePath : string , provides : string [] , requires : string [] , loadFlags : { [ key: string ]: string } , transpiler : goog.Transpiler ) ;
    protected transpiler : goog.Transpiler ;
    transform (contents : string ) : string ;
  }
  class Transpiler {
    private noStructuralTyping_goog_Transpiler : any;
    /**
     * Determines whether the given language needs to be transpiled.
     */
    needsTranspile (lang : string , module : string | undefined ) : boolean ;
    /**
     * Lazily retrieves the transpiler and applies it to the source.
     * @param code JS code.
     * @param path Path to the code.
     */
    transpile (code : string , path : string ) : string ;
  }
  /**
   * When defining a class Foo with an abstract method bar(), you can do:
   * Foo.prototype.bar = goog.abstractMethod
   *
   * Now if a subclass of Foo fails to override bar(), an error will be thrown
   * when bar() is invoked.
   */
  function abstractMethod ( ...a : any [] ) : any ;
  /**
   * Adds a dependency from a file to the files it requires.
   * @param relPath The path to the js file.
   * @param provides An array of strings with the names of the objects this file provides.
   * @param requires An array of strings with the names of the objects this file requires.
   * @param opt_loadFlags Parameters indicating how the file must be loaded.  The boolean 'true' is equivalent to {'module': 'goog'} for backwards-compatibility.  Valid properties and values include {'module': 'goog'} and {'lang': 'es6'}.
   */
  function addDependency (relPath : string , provides : string [] , requires : string [] , opt_loadFlags ? : boolean | { [ /* warning: coerced from ? */ key: string ]: string } ) : void ;
  /**
   * Adds a `getInstance` static method that always returns the same
   * instance object.
   * @param ctor The constructor for the class to add the static method to.
   */
  function addSingletonGetter (ctor : Function ) : void ;
  /**
   * Path for included scripts.
   */
  let basePath : string ;
  /**
   * Partially applies this function to a particular 'this object' and zero or
   * more arguments. The result is a new function with some arguments of the first
   * function pre-filled and the value of this 'pre-specified'.
   *
   * Remaining arguments specified at call-time are appended to the pre-specified
   * ones.
   *
   * Also see: {@link #partial}.
   *
   * Usage:
   * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
   * barMethBound('arg3', 'arg4');</pre>
   * @param fn A function to partially apply.
   * @param selfObj Specifies the object which this should point to when the function is run.
   * @param var_args Additional arguments that are partially applied to the function.
   */
  function bind < T = any > (fn : ( (this : T ,  ...a : any [] ) => any ) | null , selfObj : T ,  ...var_args : any [] ) : Function ;
  /**
   * Bootstraps the given namespaces and calls the callback once they are
   * available either via goog.require. This is a replacement for using
   * `goog.require` to bootstrap Closure JavaScript. Previously a `goog.require`
   * in an HTML file would guarantee that the require'd namespace was available
   * in the next immediate script tag. With ES6 modules this no longer a
   * guarantee.
   * @param callback Function to call once all the namespaces have loaded. Always called asynchronously.
   */
  function bootstrap (namespaces : string [] , callback : ( ) => any ) : void ;
  /**
   * Clones a value. The input may be an Object, Array, or basic type. Objects and
   * arrays will be cloned recursively.
   *
   * WARNINGS:
   * <code>goog.cloneObject</code> does not detect reference loops. Objects that
   * refer to themselves will cause infinite recursion.
   *
   * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
   * UIDs created by <code>getUid</code> into cloned results.
   * @param obj The value to clone.
   */
  function cloneObject (obj : any ) : any ;
  /**
   * Creates Trusted Types policy if Trusted Types are supported by the browser.
   * The policy just blesses any string as a Trusted Type. It is not visibility
   * restricted because anyone can also call trustedTypes.createPolicy directly.
   * However, the allowed names should be restricted by a HTTP header and the
   * reference to the created policy should be visibility restricted.
   */
  function createTrustedTypesPolicy (name : string ) : TrustedTypePolicy | null ;
  /**
   * Associates an ES6 module with a Closure module ID so that is available via
   * goog.require. The associated ID  acts like a goog.module ID - it does not
   * create any global names, it is merely available via goog.require /
   * goog.module.get / goog.forwardDeclare / goog.requireType. goog.require and
   * goog.module.get will return the entire module as if it was import *'d. This
   * allows Closure files to reference ES6 modules for the sake of migration.
   */
  function declareModuleId (namespace : string ) : void ;
  /**
   * Defines a named value. In uncompiled mode, the value is retrieved from
   * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
   * has the property specified, and otherwise used the defined defaultValue.
   * When compiled the default can be overridden using the compiler options or the
   * value set in the CLOSURE_DEFINES object. Returns the defined value so that it
   * can be used safely in modules. Note that the value type MUST be either
   * boolean, number, or string.
   * @param name The distinguished name to provide.
   */
  function define < T = any > (name : string , defaultValue : T ) : T ;
  /**
   * Creates a restricted form of a Closure "class":
   * - from the compiler's perspective, the instance returned from the
   * constructor is sealed (no new properties may be added).  This enables
   * better checks.
   * - the compiler will rewrite this definition to a form that is optimal
   * for type checking and optimization (initially this will be a more
   * traditional form).
   * @param superClass The superclass, Object or null.
   * @param def An object literal describing the class.  It may have the following properties: "constructor": the constructor function "statics": an object literal containing methods to add to the constructor as "static" methods or a function that will receive the constructor function as its only parameter to which static properties can be added. all other properties are added to the prototype.
   */
  function defineClass (superClass : Function | null , def : ಠ_ಠ.clutz.goog.defineClass.ClassDescriptor ) : Function ;
  /**
   * Exports a property unobfuscated into the object's namespace.
   * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
   * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
   * @param object Object whose static property is being exported.
   * @param publicName Unobfuscated name to export.
   * @param symbol Object the name should point to.
   */
  function exportProperty (object : ಠ_ಠ.clutz.GlobalObject | null , publicName : string , symbol : any ) : void ;
  /**
   * Exposes an unobfuscated global namespace path for the given object.
   * Note that fields of the exported object *will* be obfuscated, unless they are
   * exported in turn via this function or goog.exportProperty.
   *
   * Also handy for making public items that are defined in anonymous closures.
   *
   * ex. goog.exportSymbol('public.path.Foo', Foo);
   *
   * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
   * public.path.Foo.staticFunction();
   *
   * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
   * Foo.prototype.myMethod);
   * new public.path.Foo().myMethod();
   * @param publicPath Unobfuscated name to export.
   * @param object Object the name should point to.
   * @param objectToExportTo The object to add the path to; default is goog.global.
   */
  function exportSymbol (publicPath : string , object : any , objectToExportTo ? : ಠ_ಠ.clutz.GlobalObject | null ) : void ;
  /**
   * Forward declares a symbol. This is an indication to the compiler that the
   * symbol may be used in the source yet is not required and may not be provided
   * in compilation.
   *
   * The most common usage of forward declaration is code that takes a type as a
   * function parameter but does not need to require it. By forward declaring
   * instead of requiring, no hard dependency is made, and (if not required
   * elsewhere) the namespace may never be required and thus, not be pulled
   * into the JavaScript binary. If it is required elsewhere, it will be type
   * checked as normal.
   *
   * Before using goog.forwardDeclare, please read the documentation at
   * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to
   * understand the options and tradeoffs when working with forward declarations.
   * @param name The namespace to forward declare in the form of "goog.package.part".
   */
  function forwardDeclare (name : string ) : void ;
  /**
   * Handles strings that are intended to be used as CSS class names.
   *
   * This function works in tandem with @see goog.setCssNameMapping.
   *
   * Without any mapping set, the arguments are simple joined with a hyphen and
   * passed through unaltered.
   *
   * When there is a mapping, there are two possible styles in which these
   * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
   * of the passed in css name is rewritten according to the map. In the BY_WHOLE
   * style, the full css name is looked up in the map directly. If a rewrite is
   * not specified by the map, the compiler will output a warning.
   *
   * When the mapping is passed to the compiler, it will replace calls to
   * goog.getCssName with the strings from the mapping, e.g.
   * var x = goog.getCssName('foo');
   * var y = goog.getCssName(this.baseClass, 'active');
   * becomes:
   * var x = 'foo';
   * var y = this.baseClass + '-active';
   *
   * If one argument is passed it will be processed, if two are passed only the
   * modifier will be processed, as it is assumed the first argument was generated
   * as a result of calling goog.getCssName.
   * @param className The class name.
   * @param opt_modifier A modifier to be appended to the class name.
   */
  function getCssName (className : string , opt_modifier ? : string ) : string ;
  /**
   * This method is intended to be used for bookkeeping purposes.  We would
   * like to distinguish uses of goog.LOCALE used for code stripping purposes
   * and uses of goog.LOCALE for other uses (such as URL parameters).
   *
   * This allows us to ban direct uses of goog.LOCALE and to ensure that all
   * code has been transformed to our new localization build scheme.
   */
  function getLocale ( ) : string ;
  /**
   * Gets a localized message.
   *
   * This function is a compiler primitive. If you give the compiler a localized
   * message bundle, it will replace the string at compile-time with a localized
   * version, and expand goog.getMsg call to a concatenated string.
   *
   * Messages must be initialized in the form:
   * <code>
   * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
   * </code>
   *
   * This function produces a string which should be treated as plain text. Use
   * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
   * produce SafeHtml.
   * @param str Translatable string, places holders in the form {$foo}.
   * @param opt_values Maps place holder name to value.
   * @param opt_options Options: html: Escape '<' in str to '&lt;'. Used by Closure Templates where the generated code size and performance is critical which is why {@link goog.html.SafeHtmlFormatter} is not used. The value must be literal true or false. unescapeHtmlEntities: Unescape common html entities: &gt;, &lt;, &apos;, &quot; and &amp;. Used for messages not in HTML context, such as with `textContent` property.
   */
  function getMsg (str : string , opt_values ? : { [ key: string ]: string } | null , opt_options ? : { html ? : boolean , unescapeHtmlEntities ? : boolean } ) : string ;
  /**
   * Gets a localized message. If the message does not have a translation, gives a
   * fallback message.
   *
   * This is useful when introducing a new message that has not yet been
   * translated into all languages.
   *
   * This function is a compiler primitive. Must be used in the form:
   * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
   * where MSG_A and MSG_B were initialized with goog.getMsg.
   * @param a The preferred message.
   * @param b The fallback message.
   */
  function getMsgWithFallback (a : string , b : string ) : string ;
  /**
   * Returns an object based on its fully qualified external name.  The object
   * is not found if null or undefined.  If you are using a compilation pass that
   * renames property names beware that using this function will not find renamed
   * properties.
   * @param name The fully qualified name.
   * @param opt_obj The object within which to look; default is |goog.global|.
   */
  function getObjectByName (name : string , opt_obj ? : ಠ_ಠ.clutz.GlobalObject | null ) : any ;
  /**
   * Gets a unique ID for an object. This mutates the object so that further calls
   * with the same object as a parameter returns the same value. The unique ID is
   * guaranteed to be unique across the current session amongst objects that are
   * passed into `getUid`. There is no guarantee that the ID is unique or
   * consistent across sessions. It is unsafe to generate unique ID for function
   * prototypes.
   * @param obj The object to get the unique ID for.
   */
  function getUid (obj : ಠ_ಠ.clutz.GlobalObject | null ) : number ;
  /**
   * Reference to the global object.
   * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-global-object
   *
   * More info on this implementation here:
   * https://docs.google.com/document/d/1NAeW4Wk7I7FV0Y2tcUFvQdGMc89k2vdgSXInw8_nvCI/edit
   */
  let global : any ;
  /**
   * Evals JavaScript in the global scope.
   *
   * Throws an exception if neither execScript or eval is defined.
   * @param script JavaScript string.
   */
  function globalEval (script : string | TrustedScript ) : void ;
  /**
   * Whether the given object is already assigned a unique ID.
   *
   * This does not modify the object.
   * @param obj The object to check.
   */
  function hasUid (obj : ಠ_ಠ.clutz.GlobalObject ) : boolean ;
  /**
   * Inherit the prototype methods from one constructor into another.
   *
   * Usage:
   * <pre>
   * function ParentClass(a, b) { }
   * ParentClass.prototype.foo = function(a) { };
   *
   * function ChildClass(a, b, c) {
   * ChildClass.base(this, 'constructor', a, b);
   * }
   * goog.inherits(ChildClass, ParentClass);
   *
   * var child = new ChildClass('a', 'b', 'see');
   * child.foo(); // This works.
   * </pre>
   * @param childCtor Child class.
   * @param parentCtor Parent class.
   */
  function inherits (childCtor : Function , parentCtor : Function ) : void ;
  /**
   * Returns true if the object looks like an array. To qualify as array like
   * the value needs to be either a NodeList or an object with a Number length
   * property. Note that for this function neither strings nor functions are
   * considered "array-like".
   * @param val Variable to test.
   */
  function isArrayLike (val ? : any ) : boolean ;
  /**
   * Returns true if the object looks like a Date. To qualify as Date-like the
   * value needs to be an object and have a getFullYear() function.
   * @param val Variable to test.
   */
  function isDateLike (val ? : any ) : boolean ;
  /**
   * Returns true if the specified value is an object.  This includes arrays and
   * functions.
   * @param val Variable to test.
   */
  function isObject (val ? : any ) : boolean ;
  /**
   * Loads the Closure Dependency file.
   *
   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base
   * loaded, setDependencyFactory called, and then this called. i.e. allows
   * custom loading of the deps file.
   */
  function loadClosureDeps ( ) : void ;
  function loadModule (moduleDef : ( (a ? : any ) => any ) | string ) : void ;
  /**
   * Copies all the members of a source object to a target object. This method
   * does not work on all browsers for all objects that contain keys such as
   * toString or hasOwnProperty. Use goog.object.extend for this purpose.
   *
   * NOTE: Some have advocated for the use of goog.mixin to setup classes
   * with multiple inheritence (traits, mixins, etc).  However, as it simply
   * uses "for in", this is not compatible with ES6 classes whose methods are
   * non-enumerable.  Changing this, would break cases where non-enumerable
   * properties are not expected.
   * @param target Target.
   * @param source Source.
   */
  function mixin (target : ಠ_ಠ.clutz.GlobalObject | null , source : ಠ_ಠ.clutz.GlobalObject | null ) : void ;
  /**
   * Defines a module in Closure.
   *
   * Marks that this file must be loaded as a module and claims the namespace.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * goog.module() has three requirements:
   * - goog.module may not be used in the same file as goog.provide.
   * - goog.module must be the first statement in the file.
   * - only one goog.module is allowed per file.
   *
   * When a goog.module annotated file is loaded, it is enclosed in
   * a strict function closure. This means that:
   * - any variables declared in a goog.module file are private to the file
   * (not global), though the compiler is expected to inline the module.
   * - The code must obey all the rules of "strict" JavaScript.
   * - the file will be marked as "use strict"
   *
   * NOTE: unlike goog.provide, goog.module does not declare any symbols by
   * itself. If declared symbols are desired, use
   * goog.module.declareLegacyNamespace().
   *
   *
   * See the public goog.module proposal: http://goo.gl/Va1hin
   * @param name Namespace provided by this file in the form "goog.package.part", is expected but not required.
   */
  function module (name : string ) : void ;
  function now ( ) : number ;
  /**
   * Null function used for default values of callbacks, etc.
   */
  function nullFunction ( ) : void ;
  /**
   * Like goog.bind(), except that a 'this object' is not required. Useful when
   * the target function is already bound.
   *
   * Usage:
   * var g = goog.partial(f, arg1, arg2);
   * g(arg3, arg4);
   * @param fn A function to partially apply.
   * @param var_args Additional arguments that are partially applied to fn.
   */
  function partial (fn : Function | null ,  ...var_args : any [] ) : Function ;
  /**
   * Defines a namespace in Closure.
   *
   * A namespace may only be defined once in a codebase. It may be defined using
   * goog.provide() or goog.module().
   *
   * The presence of one or more goog.provide() calls in a file indicates
   * that the file defines the given objects/namespaces.
   * Provided symbols must not be null or undefined.
   *
   * In addition, goog.provide() creates the object stubs for a namespace
   * (for example, goog.provide("goog.foo.bar") will create the object
   * goog.foo.bar if it does not already exist).
   *
   * Build tools also scan for provide/require/module statements
   * to discern dependencies, build dependency files (see deps.js), etc.
   * @param name Namespace provided by this file in the form "goog.package.part". deprecated Use goog.module (see b/159289405)
   */
  function provide (name : string ) : void ;
  /**
   * Removes the unique ID from an object. This is useful if the object was
   * previously mutated using `goog.getUid` in which case the mutation is
   * undone.
   * @param obj The object to remove the unique ID field from.
   */
  function removeUid (obj : ಠ_ಠ.clutz.GlobalObject | null ) : void ;
  function require (name : string ) : ಠ_ಠ.clutz.ClosureSymbolNotGoogProvided;
  /**
   * Requires a symbol for its type information. This is an indication to the
   * compiler that the symbol may appear in type annotations, yet it is not
   * referenced at runtime.
   *
   * When called within a goog.module or ES6 module file, the return value may be
   * assigned to or destructured into a variable, but it may not be otherwise used
   * in code outside of a type annotation.
   *
   * Note that all calls to goog.requireType will be stripped by the compiler.
   * @param namespace Namespace (as was given in goog.provide, goog.module, or goog.declareModuleId) in the form "goog.package.part".
   */
  function requireType (namespace : string ) : any ;
  /**
   * Allow for aliasing within scope functions.  This function exists for
   * uncompiled code - in compiled code the calls will be inlined and the aliases
   * applied.  In uncompiled code the function is simply run since the aliases as
   * written are valid JavaScript.
   * @param fn Function to call.  This function can contain aliases to namespaces (e.g. "var dom = goog.dom") or classes (e.g. "var Timer = goog.Timer").
   */
  function scope (fn : ( ) => any ) : void ;
  /**
   * Sets the map to check when returning a value from goog.getCssName(). Example:
   * <pre>
   * goog.setCssNameMapping({
   * "goog": "a",
   * "disabled": "b",
   * });
   *
   * var x = goog.getCssName('goog');
   * // The following evaluates to: "a a-b".
   * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
   * </pre>
   * When declared as a map of string literals to string literals, the JSCompiler
   * will replace all calls to goog.getCssName() using the supplied map if the
   * --process_closure_primitives flag is set.
   * @param mapping A map of strings to strings where keys are possible arguments to goog.getCssName() and values are the corresponding values that should be returned.
   * @param opt_style The style of css name mapping. There are two valid options: 'BY_PART', and 'BY_WHOLE'.
   */
  function setCssNameMapping (mapping : ಠ_ಠ.clutz.GlobalObject , opt_style ? : string ) : void ;
  /**
   * Sets the dependency factory, which can be used to create custom
   * goog.Dependency implementations to control how dependencies are loaded.
   *
   * Note: if you wish to call this function and provide your own implemnetation
   * it is a wise idea to set CLOSURE_NO_DEPS to true, otherwise the dependency
   * file and all of its goog.addDependency calls will use the default factory.
   * You can call goog.loadClosureDeps to load the Closure dependency file
   * later, after your factory is injected.
   */
  function setDependencyFactory (factory : goog.DependencyFactory ) : void ;
  /**
   * Marks that the current file should only be used for testing, and never for
   * live code in production.
   *
   * In the case of unit tests, the message may optionally be an exact namespace
   * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
   * provide (if not explicitly defined in the code).
   * @param opt_message Optional message to add to the error that's raised when used in production code.
   */
  function setTestOnly (opt_message ? : string ) : void ;
  /**
   * This is a "fixed" version of the typeof operator.  It differs from the typeof
   * operator in such a way that null returns 'null' and arrays return 'array'.
   * @param value The value to get the type of.
   */
  function typeOf (value ? : any ) : string ;
}
// Generated from base.js
declare namespace ಠ_ಠ.clutz.goog.defineClass {
  type ClassDescriptor = { constructor ? : Function , statics ? : ಠ_ಠ.clutz.GlobalObject | null } ;
}
// Generated from unknown file
declare namespace ಠ_ಠ.clutz.goog.global {
  //!! Intended to visit type alias 'goog.global.Array but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Date but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Error but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Float32Array but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Function but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Infinity but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.JSCompiler_renameProperty but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.JSON but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Map but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Math but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Number but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Object but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Promise but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.RangeError but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Reflect but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.RegExp but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Set but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.String but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.Symbol but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.TypeError but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.WeakMap but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.eval but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.global but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.isChrome87 but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.isNaN but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.parseFloat but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.parseInt but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.self but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.undefined but type not found in Closure type registry.
  //!! Intended to visit type alias 'goog.global.window but type not found in Closure type registry.
}
