//!! generated by clutz.
// Generated from vec/mat4f.js
declare namespace ಠ_ಠ.clutz.goog.vec.mat4f {
  /**
   * Performs a per-component addition of the matrix mat0 and mat1, storing
   * the result into resultMat.
   * @param mat0 The first addend.
   * @param mat1 The second addend.
   * @param resultMat The matrix to receive the results (may be either mat0 or mat1).
   */
  function addMat (mat0 : ಠ_ಠ.clutz.goog.vec.Float32 , mat1 : ಠ_ಠ.clutz.goog.vec.Float32 , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a mat4f with all elements initialized to zero.
   */
  function create ( ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a mat4f identity matrix.
   */
  function createIdentity ( ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Computes the determinant of the matrix.
   * @param mat The matrix to compute the matrix for.
   */
  function determinant (mat : ಠ_ಠ.clutz.goog.vec.Float32 ) : number ;
  /**
   * Returns true if the components of mat0 are equal to the components of mat1.
   * @param mat0 The first matrix.
   * @param mat1 The second matrix.
   */
  function equals (mat0 : ಠ_ಠ.clutz.goog.vec.Float32 , mat1 : ಠ_ಠ.clutz.goog.vec.Float32 ) : boolean ;
  /**
   * Retrieves the specified column from the matrix into the given vector.
   * @param mat The matrix supplying the values.
   * @param column The column to get the values from.
   * @param vec The vector of elements to receive the column.
   */
  function getColumn (mat : ಠ_ಠ.clutz.goog.vec.Float32 , column : number , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.vec4f.Type ;
  /**
   * Retrieves the column values from the given matrix into the given vectors.
   * @param mat The matrix supplying the columns.
   * @param vec0 The vector to receive column 0.
   * @param vec1 The vector to receive column 1.
   * @param vec2 The vector to receive column 2.
   * @param vec3 The vector to receive column 3.
   */
  function getColumns (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec0 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec1 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec2 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec3 : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : void ;
  /**
   * Gets the diagonal values of the matrix into the given vector.
   * @param mat The matrix containing the values.
   * @param vec The vector to receive the values.
   * @param opt_diagonal Which diagonal to get. A value of 0 selects the main diagonal, a positive number selects a super diagonal and a negative number selects a sub diagonal.
   */
  function getDiagonal (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type , opt_diagonal ? : number ) : ಠ_ಠ.clutz.goog.vec.vec4f.Type ;
  /**
   * Retrieves the element at the requested row and column.
   * @param mat The matrix containing the value to retrieve.
   * @param row The row index.
   * @param column The column index.
   */
  function getElement (mat : ಠ_ಠ.clutz.goog.vec.Float32 , row : number , column : number ) : number ;
  /**
   * Retrieves the row values into the given vector.
   * @param mat The matrix supplying the values.
   * @param row The index of the row supplying the values.
   * @param vec The vector to receive the row.
   */
  function getRow (mat : ಠ_ಠ.clutz.goog.vec.Float32 , row : number , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.vec4f.Type ;
  /**
   * Retrieves the rows of the matrix into the supplied vectors.
   * @param mat The matrix to supply the values.
   * @param vec0 The vector to receive row 0.
   * @param vec1 The vector to receive row 1.
   * @param vec2 The vector to receive row 2.
   * @param vec3 The vector to receive row 3.
   */
  function getRows (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec0 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec1 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec2 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec3 : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : void ;
  /**
   * Retrieves the translation component of the transformation matrix.
   * @param mat The transformation matrix.
   * @param translation The vector for storing the result.
   */
  function getTranslation (mat : ಠ_ಠ.clutz.goog.vec.Float32 , translation : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.vec3f.Type ;
  /**
   * Computes the inverse of mat storing the result into resultMat. If the
   * inverse is defined, this function returns true, false otherwise.
   * @param mat The matrix to invert.
   * @param resultMat The matrix to receive the result (may be mat).
   */
  function invert (mat : ಠ_ಠ.clutz.goog.vec.Float32 , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : boolean ;
  /**
   * Makes the given 4x4 matrix a rotation matrix given Euler angles using
   * the ZXZ convention.
   * Given the euler angles [theta1, theta2, theta3], the rotation is defined as
   * rotation = rotation_z(theta1) * rotation_x(theta2) * rotation_z(theta3),
   * with theta1 in [0, 2 * pi], theta2 in [0, pi] and theta3 in [0, 2 * pi].
   * rotation_x(theta) means rotation around the X axis of theta radians,
   * @param mat The matrix.
   * @param theta1 The angle of rotation around the Z axis in radians.
   * @param theta2 The angle of rotation around the X axis in radians.
   * @param theta3 The angle of rotation around the Z axis in radians.
   */
  function makeEulerZXZ (mat : ಠ_ಠ.clutz.goog.vec.Float32 , theta1 : number , theta2 : number , theta3 : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a perspective projection matrix.
   * @param mat The matrix.
   * @param left The coordinate of the left clipping plane.
   * @param right The coordinate of the right clipping plane.
   * @param bottom The coordinate of the bottom clipping plane.
   * @param top The coordinate of the top clipping plane.
   * @param near The distance to the near clipping plane.
   * @param far The distance to the far clipping plane.
   */
  function makeFrustum (mat : ಠ_ಠ.clutz.goog.vec.Float32 , left : number , right : number , bottom : number , top : number , near : number , far : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix the identity matrix.
   * @param mat The matrix.
   */
  function makeIdentity (mat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a modelview matrix of a camera so that
   * the camera is 'looking at' the given center point.
   *
   * Note that unlike most other goog.vec functions where we inline
   * everything, this function does not inline various goog.vec
   * functions.  This makes the code more readable, but somewhat
   * less efficient.
   * @param mat The matrix.
   * @param eyePt The position of the eye point (camera origin).
   * @param centerPt The point to aim the camera at.
   * @param worldUpVec The vector that identifies the up direction for the camera.
   */
  function makeLookAt (mat : ಠ_ಠ.clutz.goog.vec.Float32 , eyePt : ಠ_ಠ.clutz.goog.vec.vec3f.Type , centerPt : ಠ_ಠ.clutz.goog.vec.vec3f.Type , worldUpVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix an orthographic projection matrix.
   * @param mat The matrix.
   * @param left The coordinate of the left clipping plane.
   * @param right The coordinate of the right clipping plane.
   * @param bottom The coordinate of the bottom clipping plane.
   * @param top The coordinate of the top clipping plane.
   * @param near The distance to the near clipping plane.
   * @param far The distance to the far clipping plane.
   */
  function makeOrtho (mat : ಠ_ಠ.clutz.goog.vec.Float32 , left : number , right : number , bottom : number , top : number , near : number , far : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix  perspective projection matrix given a
   * field of view and aspect ratio.
   * @param mat The matrix.
   * @param fovy The field of view along the y (vertical) axis in radians.
   * @param aspect The x (width) to y (height) aspect ratio.
   * @param near The distance to the near clipping plane.
   * @param far The distance to the far clipping plane.
   */
  function makePerspective (mat : ಠ_ಠ.clutz.goog.vec.Float32 , fovy : number , aspect : number , near : number , far : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a rotation matrix with the given rotation
   * angle about the axis defined by the vector (ax, ay, az).
   * @param mat The matrix.
   * @param angle The rotation angle in radians.
   * @param ax The x component of the rotation axis.
   * @param ay The y component of the rotation axis.
   * @param az The z component of the rotation axis.
   */
  function makeRotate (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number , ax : number , ay : number , az : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a rotation matrix with the given rotation
   * angle about the X axis.
   * @param mat The matrix.
   * @param angle The rotation angle in radians.
   */
  function makeRotateX (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a rotation matrix with the given rotation
   * angle about the Y axis.
   * @param mat The matrix.
   * @param angle The rotation angle in radians.
   */
  function makeRotateY (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a rotation matrix with the given rotation
   * angle about the Z axis.
   * @param mat The matrix.
   * @param angle The rotation angle in radians.
   */
  function makeRotateZ (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a matrix from a quaternion rotation and vector translation.
   *
   * This is a specialization of makeRotationTranslationScaleOrigin.
   *
   * This is equivalent to, but faster than:
   * goog.vec.mat4f.makeIdentity(m);
   * goog.vec.mat4f.translate(m, tx, ty, tz);
   * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
   * and:
   * goog.vec.Quaternion.toRotationMatrix4(rotation, mat);
   * mat[12] = translation[0];
   * mat[13] = translation[1];
   * mat[14] = translation[2];
   * See http://jsperf.com/goog-vec-makerotationtranslation2 .
   * @param mat The matrix.
   * @param rotation The quaternion rotation. Note: this quaternion is assumed to already be normalized.
   * @param translation The vector translation.
   */
  function makeRotationTranslation (mat : ಠ_ಠ.clutz.goog.vec.Float32 , rotation : ಠ_ಠ.clutz.goog.vec.Quaternion.AnyType , translation : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a matrix from a quaternion rotation, vector translation, and
   * vector scale.
   *
   * This is a specialization of makeRotationTranslationScaleOrigin.
   *
   * This is equivalent to, but faster than:
   * goog.vec.mat4f.makeIdentity(m);
   * goog.vec.mat4f.translate(m, tx, ty, tz);
   * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
   * goog.vec.mat4f.scale(m, sx, sy, sz);
   * @param mat The matrix.
   * @param rotation The quaternion rotation. Note: this quaternion is assumed to already be normalized.
   * @param translation The vector translation.
   * @param scale The vector scale.
   */
  function makeRotationTranslationScale (mat : ಠ_ಠ.clutz.goog.vec.Float32 , rotation : ಠ_ಠ.clutz.goog.vec.Quaternion.AnyType , translation : ಠ_ಠ.clutz.goog.vec.vec3f.Type , scale : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a matrix from a quaternion rotation, vector translation, and
   * vector scale, rotating and scaling about the given origin.
   *
   * This is equivalent to, but faster than:
   * goog.vec.mat4f.makeIdentity(m);
   * goog.vec.mat4f.translate(m, tx, ty, tz);
   * goog.vec.mat4f.translate(m, ox, oy, oz);
   * goog.vec.mat4f.rotate(m, theta, rx, ry, rz);
   * goog.vec.mat4f.scale(m, sx, sy, sz);
   * goog.vec.mat4f.translate(m, -ox, -oy, -oz);
   * See http://jsperf.com/glmatrix-matrix-variant-test/3 for performance
   * results of a similar function in the glmatrix library.
   * @param mat The matrix.
   * @param rotation The quaternion rotation. Note: this quaternion is assumed to already be normalized.
   * @param translation The vector translation.
   * @param scale The vector scale.
   * @param origin The origin about which to scale and rotate.
   */
  function makeRotationTranslationScaleOrigin (mat : ಠ_ಠ.clutz.goog.vec.Float32 , rotation : ಠ_ಠ.clutz.goog.vec.Quaternion.AnyType , translation : ಠ_ಠ.clutz.goog.vec.vec3f.Type , scale : ಠ_ಠ.clutz.goog.vec.vec3f.Type , origin : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix as a scale matrix with x, y and z scale factors.
   * @param mat The matrix.
   * @param x The scale along the x axis.
   * @param y The scale along the y axis.
   * @param z The scale along the z axis.
   */
  function makeScale (mat : ಠ_ಠ.clutz.goog.vec.Float32 , x : number , y : number , z : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix a translation matrix with x, y and z
   * translation factors.
   * @param mat The matrix.
   * @param x The translation along the x axis.
   * @param y The translation along the y axis.
   * @param z The translation along the z axis.
   */
  function makeTranslate (mat : ಠ_ಠ.clutz.goog.vec.Float32 , x : number , y : number , z : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Makes the given 4x4 matrix the zero matrix.
   * @param mat The matrix.
   */
  function makeZero (mat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
   * storing the result into resultMat.
   * @param mat0 The first (left hand) matrix.
   * @param mat1 The second (right hand) matrix.
   * @param resultMat The matrix to receive the results (may be either mat0 or mat1).
   */
  function multMat (mat0 : ಠ_ಠ.clutz.goog.vec.Float32 , mat1 : ಠ_ಠ.clutz.goog.vec.Float32 , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Multiplies matrix mat with the given scalar, storing the result
   * into resultMat.
   * @param mat The matrix.
   * @param scalar The scalar value to multiply to each element of mat.
   * @param resultMat The matrix to receive the results (may be mat).
   */
  function multScalar (mat : ಠ_ಠ.clutz.goog.vec.Float32 , scalar : number , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Transforms the given vector with the given matrix storing the resulting,
   * transformed vector into resultVec. The input vector is multiplied against the
   * upper 3x4 matrix omitting the projective component.
   * @param mat The matrix supplying the transformation.
   * @param vec The 3 element vector to transform.
   * @param resultVec The 3 element vector to receive the results (may be vec).
   */
  function multVec3 (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec3f.Type , resultVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.vec3f.Type ;
  /**
   * Transforms the given vector with the given matrix storing the resulting,
   * transformed vector into resultVec. The input vector is multiplied against the
   * upper 3x3 matrix omitting the projective component and translation
   * components.
   * @param mat The matrix supplying the transformation.
   * @param vec The 3 element vector to transform.
   * @param resultVec The 3 element vector to receive the results (may be vec).
   */
  function multVec3NoTranslate (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec3f.Type , resultVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.vec3f.Type ;
  /**
   * Transforms the given vector with the given matrix storing the resulting,
   * transformed vector into resultVec. The input vector is multiplied against the
   * full 4x4 matrix with the homogeneous divide applied to reduce the 4 element
   * vector to a 3 element vector.
   * @param mat The matrix supplying the transformation.
   * @param vec The 3 element vector to transform.
   * @param resultVec The 3 element vector to receive the results (may be vec).
   */
  function multVec3Projective (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec3f.Type , resultVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : ಠ_ಠ.clutz.goog.vec.vec3f.Type ;
  /**
   * Transforms the given vector with the given matrix storing the resulting,
   * transformed vector into resultVec.
   * @param mat The matrix supplying the transformation.
   * @param vec The vector to transform.
   * @param resultVec The vector to receive the results (may be vec).
   */
  function multVec4 (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type , resultVec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.vec4f.Type ;
  /**
   * Rotate the given matrix by angle about the x,y,z axis.  Equivalent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeRotate(goog.vec.mat4f.create(), angle, x, y, z),
   * mat);
   * @param mat The matrix.
   * @param angle The angle in radians.
   * @param x The x component of the rotation axis.
   * @param y The y component of the rotation axis.
   * @param z The z component of the rotation axis.
   */
  function rotate (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number , x : number , y : number , z : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Rotate the given matrix by angle about the x axis.  Equivalent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeRotateX(goog.vec.mat4f.create(), angle),
   * mat);
   * @param mat The matrix.
   * @param angle The angle in radians.
   */
  function rotateX (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Rotate the given matrix by angle about the y axis.  Equivalent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeRotateY(goog.vec.mat4f.create(), angle),
   * mat);
   * @param mat The matrix.
   * @param angle The angle in radians.
   */
  function rotateY (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Rotate the given matrix by angle about the z axis.  Equivalent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeRotateZ(goog.vec.mat4f.create(), angle),
   * mat);
   * @param mat The matrix.
   * @param angle The angle in radians.
   */
  function rotateZ (mat : ಠ_ಠ.clutz.goog.vec.Float32 , angle : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Scales the given matrix by x,y,z.  Equivalent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeScale(goog.vec.mat4f.create(), x, y, z),
   * mat);
   * @param mat The matrix.
   * @param x The x scale factor.
   * @param y The y scale factor.
   * @param z The z scale factor.
   */
  function scale (mat : ಠ_ಠ.clutz.goog.vec.Float32 , x : number , y : number , z : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the specified column with the value from the supplied vector.
   * @param mat The matrix to receive the values.
   * @param column The column index to set the values on.
   * @param vec The vector of elements for the column.
   */
  function setColumn (mat : ಠ_ಠ.clutz.goog.vec.Float32 , column : number , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the specified column with the supplied values.
   * @param mat The matrix to receive the values.
   * @param column The column index to set the values on.
   * @param v0 The value for row 0.
   * @param v1 The value for row 1.
   * @param v2 The value for row 2.
   * @param v3 The value for row 3.
   */
  function setColumnValues (mat : ಠ_ಠ.clutz.goog.vec.Float32 , column : number , v0 : number , v1 : number , v2 : number , v3 : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the columns of the matrix from the given vectors.
   * @param mat The matrix to receive the values.
   * @param vec0 The values for column 0.
   * @param vec1 The values for column 1.
   * @param vec2 The values for column 2.
   * @param vec3 The values for column 3.
   */
  function setColumns (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec0 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec1 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec2 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec3 : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the diagonal values of the matrix from the given vector.
   * @param mat The matrix to receive the values.
   * @param vec The vector containing the values.
   */
  function setDiagonal (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the diagonal values of the matrix from the given values.
   * @param mat The matrix to receive the values.
   * @param v00 The values for (0, 0).
   * @param v11 The values for (1, 1).
   * @param v22 The values for (2, 2).
   * @param v33 The values for (3, 3).
   */
  function setDiagonalValues (mat : ಠ_ಠ.clutz.goog.vec.Float32 , v00 : number , v11 : number , v22 : number , v33 : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the element at the requested row and column.
   * @param mat The matrix containing the value to retrieve.
   * @param row The row index.
   * @param column The column index.
   * @param value The value to set at the requested row, column.
   */
  function setElement (mat : ಠ_ಠ.clutz.goog.vec.Float32 , row : number , column : number , value : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Initializes mat4f mat from Array src.
   * @param mat The destination matrix.
   * @param src The source matrix.
   */
  function setFromArray (mat : ಠ_ಠ.clutz.goog.vec.Float32 , src : number [] | null ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Initializes mat4f mat from mat4d src (typed as a Float64Array to
   * avoid circular goog.requires).
   * @param mat The destination matrix.
   * @param src The source matrix.
   */
  function setFromMat4d (mat : ಠ_ಠ.clutz.goog.vec.Float32 , src : GlobalFloat64Array | null ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Initializes mat4f mat from mat4f src.
   * @param mat The destination matrix.
   * @param src The source matrix.
   */
  function setFromMat4f (mat : ಠ_ಠ.clutz.goog.vec.Float32 , src : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Initializes the matrix from the set of values. Note the values supplied are
   * in column major order.
   * @param mat The matrix to receive the values.
   * @param v00 The values at (0, 0).
   * @param v10 The values at (1, 0).
   * @param v20 The values at (2, 0).
   * @param v30 The values at (3, 0).
   * @param v01 The values at (0, 1).
   * @param v11 The values at (1, 1).
   * @param v21 The values at (2, 1).
   * @param v31 The values at (3, 1).
   * @param v02 The values at (0, 2).
   * @param v12 The values at (1, 2).
   * @param v22 The values at (2, 2).
   * @param v32 The values at (3, 2).
   * @param v03 The values at (0, 3).
   * @param v13 The values at (1, 3).
   * @param v23 The values at (2, 3).
   * @param v33 The values at (3, 3).
   */
  function setFromValues (mat : ಠ_ಠ.clutz.goog.vec.Float32 , v00 : number , v10 : number , v20 : number , v30 : number , v01 : number , v11 : number , v21 : number , v31 : number , v02 : number , v12 : number , v22 : number , v32 : number , v03 : number , v13 : number , v23 : number , v33 : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the row values from the supplied vector.
   * @param mat The matrix to receive the row values.
   * @param row The index of the row.
   * @param vec The vector containing the values.
   */
  function setRow (mat : ಠ_ಠ.clutz.goog.vec.Float32 , row : number , vec : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the row values from the supplied values.
   * @param mat The matrix to receive the values.
   * @param row The index of the row to receive the values.
   * @param v0 The value for column 0.
   * @param v1 The value for column 1.
   * @param v2 The value for column 2.
   * @param v3 The value for column 3.
   */
  function setRowValues (mat : ಠ_ಠ.clutz.goog.vec.Float32 , row : number , v0 : number , v1 : number , v2 : number , v3 : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Sets the rows of the matrix from the supplied vectors.
   * @param mat The matrix to receive the values.
   * @param vec0 The values for row 0.
   * @param vec1 The values for row 1.
   * @param vec2 The values for row 2.
   * @param vec3 The values for row 3.
   */
  function setRows (mat : ಠ_ಠ.clutz.goog.vec.Float32 , vec0 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec1 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec2 : ಠ_ಠ.clutz.goog.vec.vec4f.Type , vec3 : ಠ_ಠ.clutz.goog.vec.vec4f.Type ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Performs a per-component subtraction of the matrix mat0 and mat1,
   * storing the result into resultMat.
   * @param mat0 The minuend.
   * @param mat1 The subtrahend.
   * @param resultMat The matrix to receive the results (may be either mat0 or mat1).
   */
  function subMat (mat0 : ಠ_ಠ.clutz.goog.vec.Float32 , mat1 : ಠ_ಠ.clutz.goog.vec.Float32 , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Decomposes a rotation matrix into Euler angles using the ZXZ convention so
   * that rotation = rotation_z(theta1) * rotation_x(theta2) * rotation_z(theta3),
   * with theta1 in [0, 2 * pi], theta2 in [0, pi] and theta3 in [0, 2 * pi].
   * rotation_x(theta) means rotation around the X axis of theta radians.
   * @param mat The matrix.
   * @param euler The ZXZ Euler angles in radians as [theta1, theta2, theta3].
   * @param opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead of the default [0, pi].
   */
  function toEulerZXZ (mat : ಠ_ಠ.clutz.goog.vec.Float32 , euler : ಠ_ಠ.clutz.goog.vec.vec3f.Type , opt_theta2IsNegative ? : boolean ) : ಠ_ಠ.clutz.goog.vec.vec4f.Type ;
  /**
   * Decomposes a matrix into the lookAt vectors eyePt, fwdVec and worldUpVec.
   * The matrix represents the modelview matrix of a camera. It is the inverse
   * of lookAt except for the output of the fwdVec instead of centerPt.
   * The centerPt itself cannot be recovered from a modelview matrix.
   *
   * Note that unlike most other goog.vec functions where we inline
   * everything, this function does not inline various goog.vec
   * functions.  This makes the code more readable, but somewhat
   * less efficient.
   * @param mat The matrix.
   * @param eyePt The position of the eye point (camera origin).
   * @param fwdVec The vector describing where the camera points to.
   * @param worldUpVec The vector that identifies the up direction for the camera.
   */
  function toLookAt (mat : ಠ_ಠ.clutz.goog.vec.Float32 , eyePt : ಠ_ಠ.clutz.goog.vec.vec3f.Type , fwdVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type , worldUpVec : ಠ_ಠ.clutz.goog.vec.vec3f.Type ) : boolean ;
  /**
   * Translates the given matrix by x,y,z.  Equvialent to:
   * goog.vec.mat4f.multMat(
   * mat,
   * goog.vec.mat4f.makeTranslate(goog.vec.mat4f.create(), x, y, z),
   * mat);
   * @param mat The matrix.
   * @param x The translation along the x axis.
   * @param y The translation along the y axis.
   * @param z The translation along the z axis.
   */
  function translate (mat : ಠ_ಠ.clutz.goog.vec.Float32 , x : number , y : number , z : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Transposes the given matrix mat storing the result into resultMat.
   * @param mat The matrix to transpose.
   * @param resultMat The matrix to receive the results (may be mat).
   */
  function transpose (mat : ಠ_ಠ.clutz.goog.vec.Float32 , resultMat : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
}
declare module 'goog:goog.vec.mat4f' {
  import mat4f = ಠ_ಠ.clutz.goog.vec.mat4f;
  export = mat4f;
}
// Generated from vec/mat4f.js
declare namespace ಠ_ಠ.clutz.goog.vec.mat4f {
  type Type = ಠ_ಠ.clutz.goog.vec.Float32 ;
}
declare module 'goog:goog.vec.mat4f.Type' {
  import Type = ಠ_ಠ.clutz.goog.vec.mat4f.Type;
  export default Type;
}
