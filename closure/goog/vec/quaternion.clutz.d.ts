//!! generated by clutz.
// Generated from vec/quaternion.js
declare namespace ಠ_ಠ.clutz.goog.vec.Quaternion {
  type Float32 = ಠ_ಠ.clutz.goog.vec.Float32 ;
  type Float64 = ಠ_ಠ.clutz.goog.vec.Float64 ;
  type Number = ಠ_ಠ.clutz.goog.vec.Number ;
  /**
   * Adds the two quaternions.
   * @param quat0 The first addend.
   * @param quat1 The second addend.
   * @param resultQuat The quaternion to receive the result. May be quat0 or quat1.
   */
  function add (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType , c : ಠ_ಠ.clutz.goog.vec.AnyType ) : any ;
  /**
   * Creates a clone of the given Float32 quaternion.
   * @param q The source quaternion.
   */
  function cloneFloat32 (a : ಠ_ಠ.clutz.goog.vec.Float32 ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a clone of the given Float64 quaternion.
   * @param q The source quaternion.
   */
  function cloneFloat64 (a : ಠ_ಠ.clutz.goog.vec.Float64 ) : ಠ_ಠ.clutz.goog.vec.Float64 ;
  /**
   * Concatenates the two quaternions storing the result into resultQuat.
   * @param quat0 The first quaternion.
   * @param quat1 The second quaternion.
   * @param resultQuat The quaternion to receive the result.
   */
  function concat (quat0 : ಠ_ಠ.clutz.goog.vec.AnyType , quat1 : ಠ_ಠ.clutz.goog.vec.AnyType , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Computes the conjugate of the quaternion in quat, storing the result into
   * resultQuat.
   *
   * If the quaternion is normalized already, this function is faster than
   * goog.Quaternion.inverse and produces the same result.
   * @param quat The source quaternion.
   * @param resultQuat The quaternion to receive the result.
   */
  function conjugate (quat : ಠ_ಠ.clutz.goog.vec.AnyType , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Creates a Float32 quaternion, initialized to zero.
   */
  function createFloat32 ( ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a new Float32 quaternion initialized with the values from the
   * supplied array.
   * @param vec The source 4 element array.
   */
  function createFloat32FromArray (a : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a new Float32 quaternion initialized with the supplied values.
   * @param v0 The value for element at index 0.
   * @param v1 The value for element at index 1.
   * @param v2 The value for element at index 2.
   * @param v3 The value for element at index 3.
   */
  function createFloat32FromValues (a : number , b : number , c : number , d : number ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a Float64 quaternion, initialized to zero.
   */
  function createFloat64 ( ) : ಠ_ಠ.clutz.goog.vec.Float64 ;
  /**
   * Creates a new Float64 quaternion initialized with the values from the
   * supplied array.
   * @param vec The source 4 element array.
   */
  function createFloat64FromArray (a : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.Float64 ;
  /**
   * Creates a new Float64 quaternion initialized with the supplied values.
   * @param v0 The value for element at index 0.
   * @param v1 The value for element at index 1.
   * @param v2 The value for element at index 2.
   * @param v3 The value for element at index 3.
   */
  function createFloat64FromValues (a : number , b : number , c : number , d : number ) : ಠ_ಠ.clutz.goog.vec.Float64 ;
  /**
   * Creates a Float32 quaternion, initialized to the identity.
   */
  function createIdentityFloat32 ( ) : ಠ_ಠ.clutz.goog.vec.Float32 ;
  /**
   * Creates a Float64 quaternion, initialized to the identity.
   */
  function createIdentityFloat64 ( ) : ಠ_ಠ.clutz.goog.vec.Float64 ;
  /**
   * Creates a Number quaternion, initialized to zero.
   */
  function createNumber ( ) : ಠ_ಠ.clutz.goog.vec.Number ;
  /**
   * Computes the dot (scalar) product of two quaternions.
   * @param q0 The first quaternion.
   * @param q1 The second quaternion.
   */
  function dot (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType ) : number ;
  /**
   * Generates a unit quaternion from the given angle-axis rotation pair.
   * The rotation axis is not required to be a unit vector, but should
   * have non-zero length.  The angle should be specified in radians.
   * @param angle The angle (in radians) to rotate about the axis.
   * @param axis Unit vector specifying the axis of rotation.
   * @param quat Unit quaternion to store the result.
   */
  function fromAngleAxis (angle : number , axis : ಠ_ಠ.clutz.goog.vec.AnyType , quat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Generates the quaternion from the given 3x3 rotation matrix.
   *
   * Perf: http://jsperf.com/conversion-of-3x3-matrix-to-quaternion
   * http://jsperf.com/goog-vec-fromrotationmatrix3-a
   * @param matrix The source matrix.
   * @param quat The resulting quaternion.
   */
  function fromRotationMatrix3 (matrix : ಠ_ಠ.clutz.goog.vec.AnyType , quat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Generates the quaternion from the given 4x4 rotation matrix.
   *
   * Perf: http://jsperf.com/goog-vec-fromrotationmatrix4
   *
   * Implementation is the same as fromRotationMatrix3 but using indices from
   * the top left 3x3 in a 4x4 matrix.
   * @param matrix The source matrix.
   * @param quat The resulting quaternion.
   */
  function fromRotationMatrix4 (matrix : ಠ_ಠ.clutz.goog.vec.AnyType , quat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Computes the inverse of the quaternion in quat, storing the result into
   * resultQuat.
   *
   * If the quaternion is already normalized, goog.vec.Quaternion.conjugate
   * is faster than this function and produces the same result.
   * @param quat The quaternion to invert.
   * @param resultQuat The quaternion to receive the result.
   */
  function invert (quat : ಠ_ಠ.clutz.goog.vec.AnyType , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Returns the magnitude of the given quaternion.
   * @param quat0 The quaternion.
   */
  function magnitude (a : ಠ_ಠ.clutz.goog.vec.AnyType ) : number ;
  /**
   * Returns the square magnitude of the given quaternion.
   * @param quat0 The quaternion.
   */
  function magnitudeSquared (a : ಠ_ಠ.clutz.goog.vec.AnyType ) : number ;
  /**
   * Makes the given quaternion the identity quaternion (0, 0, 0, 1).
   * @param quat The quaternion.
   */
  function makeIdentity (quat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Negates a quaternion, storing the result into resultQuat.
   * @param quat0 The quaternion to negate.
   * @param resultQuat The quaternion to receive the result. May be quat0.
   */
  function negate (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType ) : any ;
  /**
   * Compute the simple linear interpolation of the two quaternions q0 and q1
   * according to the coefficient t. The resulting quaternion is stored in
   * resultVec.
   * @param q0 The first quaternion.
   * @param q1 The second quaternion.
   * @param t The interpolation factor.
   * @param resultQuat The quaternion to receive the results (may be q0 or q1).
   */
  function nlerp (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType , c : number , d : ಠ_ಠ.clutz.goog.vec.AnyType ) : any ;
  /**
   * Normalizes the given quaternion storing the result into resultVec.
   * @param quat0 The quaternion to normalize.
   * @param resultQuat The quaternion to receive the result. May be quat0.
   */
  function normalize (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType ) : any ;
  /**
   * Rotates a quaternion by the given angle about the X axis.
   * @param quat The quaternion.
   * @param angle The angle in radians.
   * @param resultQuat The quaternion to receive the result.
   */
  function rotateX (quat : ಠ_ಠ.clutz.goog.vec.AnyType , angle : number , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Rotates a quaternion by the given angle about the Y axis.
   * @param quat The quaternion.
   * @param angle The angle in radians.
   * @param resultQuat The quaternion to receive the result.
   */
  function rotateY (quat : ಠ_ಠ.clutz.goog.vec.AnyType , angle : number , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Rotates a quaternion by the given angle about the Z axis.
   * @param quat The quaternion.
   * @param angle The angle in radians.
   * @param resultQuat The quaternion to receive the result.
   */
  function rotateZ (quat : ಠ_ಠ.clutz.goog.vec.AnyType , angle : number , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Multiplies each component of quat0 with scalar storing the product into
   * resultVec.
   * @param quat0 The source quaternion.
   * @param scalar The value to multiply with each component of quat0.
   * @param resultQuat The quaternion to receive the result. May be quat0.
   */
  function scale (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : number , c : ಠ_ಠ.clutz.goog.vec.AnyType ) : any ;
  /**
   * Initializes the quaternion with the given array of values.
   * @param q The quaternion to receive the values.
   * @param values The array of values.
   */
  function setFromArray (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Initializes the quaternion with the given values.
   * @param q The quaternion to receive the values.
   * @param v0 The value for element at index 0.
   * @param v1 The value for element at index 1.
   * @param v2 The value for element at index 2.
   * @param v3 The value for element at index 3.
   */
  function setFromValues (a : ಠ_ಠ.clutz.goog.vec.AnyType , b : number , c : number , d : number , e : number ) : ಠ_ಠ.clutz.goog.vec.Vec4.AnyType ;
  /**
   * Computes the spherical linear interpolated value from the given quaternions
   * q0 and q1 according to the coefficient t. The resulting quaternion is stored
   * in resultQuat.
   * @param q0 The first quaternion.
   * @param q1 The second quaternion.
   * @param t The interpolating coefficient.
   * @param resultQuat The quaternion to receive the result.
   */
  function slerp (q0 : ಠ_ಠ.clutz.goog.vec.AnyType , q1 : ಠ_ಠ.clutz.goog.vec.AnyType , t : number , resultQuat : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Generates an angle-axis rotation pair from a unit quaternion.
   * The quaternion is assumed to be of unit length.  The calculated
   * values are returned via the passed 'axis' object and the 'angle'
   * number returned by the function itself. The returned rotation axis
   * is a non-zero length unit vector, and the returned angle is in
   * radians in the range of [-PI, +PI].
   * @param quat Unit quaternion to convert.
   * @param axis Vector to store the returned rotation axis.
   */
  function toAngleAxis (quat : ಠ_ಠ.clutz.goog.vec.AnyType , axis : ಠ_ಠ.clutz.goog.vec.AnyType ) : number ;
  /**
   * Generates the 3x3 rotation matrix from the given quaternion.
   * @param quat The source quaternion.
   * @param matrix The resulting matrix.
   */
  function toRotationMatrix3 (quat : ಠ_ಠ.clutz.goog.vec.AnyType , matrix : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Generates the 4x4 rotation matrix from the given quaternion.
   * @param quat The source quaternion.
   * @param matrix The resulting matrix.
   */
  function toRotationMatrix4 (quat : ಠ_ಠ.clutz.goog.vec.AnyType , matrix : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
  /**
   * Transforms a vec with a quaternion. Works on both vec3s and vec4s.
   * @param vec The vec to transform.
   * @param quat The quaternion.
   * @param resultVec The vec to receive the result.
   */
  function transformVec (vec : ಠ_ಠ.clutz.goog.vec.AnyType , quat : ಠ_ಠ.clutz.goog.vec.AnyType , resultVec : ಠ_ಠ.clutz.goog.vec.AnyType ) : ಠ_ಠ.clutz.goog.vec.AnyType ;
}
declare module 'goog:goog.vec.Quaternion' {
  import Quaternion = ಠ_ಠ.clutz.goog.vec.Quaternion;
  export = Quaternion;
}
// Generated from vec/quaternion.js
declare namespace ಠ_ಠ.clutz.goog.vec.Quaternion {
  type AnyType = ಠ_ಠ.clutz.goog.vec.AnyType ;
}
declare module 'goog:goog.vec.Quaternion.AnyType' {
  import AnyType = ಠ_ಠ.clutz.goog.vec.Quaternion.AnyType;
  export default AnyType;
}
