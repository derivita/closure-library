//!! generated by clutz.
// Generated from json/jsonable.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Types that can be JSON serialized. We only check one level deep for Objects
   * and Arrays so it's not checked at compile time whether nested types are
   * correct, and it would be possible for a user to pass in an invalid JSON
   * object. Which would be a bummer.
   * NOTE: If the compiler were to support recursive typedefs, this would be
   * {boolean|number|string|!Object<string, !Jsonable>|!Array<!Jsonable>}.
   * Recursive type checking is supported by @record but not @typedef.
   */
  type module$exports$goog$json$Jsonable = boolean | number | string | null | { [ key: string ]: boolean | number | string | GlobalObject | null } | ( boolean | number | string | GlobalObject | null ) [] ;
}
declare module 'goog:goog.json.Jsonable' {
  import Jsonable = ಠ_ಠ.clutz.module$exports$goog$json$Jsonable;
  export default Jsonable;
}
