//!! generated by clutz.
// Generated from testing/testrunner.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Construct a test runner.
   *
   * NOTE(user): This is currently pretty weird, I'm essentially trying to
   * create a wrapper that the Selenium test can hook into to query the state of
   * the running test case, while making goog.testing.TestCase general.
   */
  class TestRunner {
    private noStructuralTyping_goog_testing_TestRunner : any;
    /**
     * Errors that occurred in the window.
     */
    errors : string [] ;
    /**
     * Whether the test runner has been initialized yet.
     */
    initialized : boolean ;
    /**
     * Reference to the active test case.
     */
    testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ;
    clearUniqueId ( ) : void ;
    execute ( ) : void ;
    /**
     * Returns the number of script files that were loaded in order to run the test.
     */
    getNumFilesLoaded ( ) : number ;
    /**
     * Returns a report of the test case that ran.
     * Used by Selenium Hooks.
     * @param opt_verbose If true results will include data about all tests, not just what failed.
     */
    getReport (opt_verbose ? : boolean ) : string ;
    /**
     * Returns the amount of time it took for the test to run.
     * Used by Selenium Hooks.
     */
    getRunTime ( ) : number ;
    /**
     * The uuid is embedded in the URL search. This function allows us to mock
     * the search in the test.
     */
    getSearchString ( ) : string ;
    getTestResults ( ) : { [ key: string ]: ಠ_ಠ.clutz.goog.testing.TestCase.IResult [] } | null ;
    /**
     * Returns the test results as json.
     * This is called by the testing infrastructure through G_testrunner.
     */
    getTestResultsAsJson ( ) : string | null ;
    /**
     * Returns the unique id for this test page.
     */
    getUniqueId ( ) : string ;
    /**
     * Returns true if the test case runner has errors that were caught outside of
     * the test case.
     */
    hasErrors ( ) : boolean ;
    /**
     * Initializes the test runner.
     * @param testCase The test case to initialize with.
     */
    initialize (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ) : void ;
    /**
     * Returns true if the test runner is finished.
     */
    isComplete ( ) : boolean ;
    /**
     * Returns false if the test runner has not finished successfully.
     * Used by Selenium Hooks.
     */
    isFinished ( ) : boolean ;
    /**
     * Returns true if the test runner is initialized.
     * Used by Selenium Hooks.
     */
    isInitialized ( ) : boolean ;
    isStrict ( ) : boolean ;
    /**
     * Returns true if the test case didn't fail.
     * Used by Selenium Hooks.
     */
    isSuccess ( ) : boolean ;
    /**
     * Logs a message to the current test case.
     * @param s The text to output to the log.
     */
    log (s : string ) : void ;
    /**
     * Logs an error that occurred.  Used in the case of environment setting up
     * an onerror handler.
     * @param msg Error message.
     */
    logError (msg : string ) : void ;
    /**
     * Log failure in current running test.
     * @param ex Exception.
     */
    logTestFailure (ex : GlobalError | null ) : void ;
    /**
     * Sets a function to use as a filter for errors.
     * @param fn Filter function.
     */
    setErrorFilter (fn : (a : string ) => any ) : void ;
    /**
     * By default, the test runner is strict, and fails if it runs an empty
     * test case.
     * @param strict Whether the test runner should fail on an empty test case.
     */
    setStrict (strict : boolean ) : void ;
    /**
     * Writes a nicely formatted log out to the document.
     * @param log The string to write.
     */
    writeLog (log : string ) : void ;
    static TEST_LOG_ID : string ;
  }
}
declare module 'goog:goog.testing.TestRunner' {
  import TestRunner = ಠ_ಠ.clutz.goog.testing.TestRunner;
  export default TestRunner;
}
