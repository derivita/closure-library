//!! generated by clutz.
// Generated from testing/asserts.js
declare namespace ಠ_ಠ.clutz.goog.testing.asserts {
  let ARRAY_TYPES : { [ key: string ]: boolean } ;
  /**
   * The result of a comparison performed by an EqualityFunction: if undefined,
   * the inputs are equal; otherwise, a human-readable description of their
   * inequality.
   */
  type ComparisonResult = string | undefined ;
  /**
   * The return value of the equality predicate passed to findDifferences below,
   * in cases where the predicate can't test the input variables for equality.
   */
  let EQUALITY_PREDICATE_CANT_PROCESS : string | null ;
  /**
   * The return value of the equality predicate passed to findDifferences below,
   * in cases where the input vriables are equal.
   */
  let EQUALITY_PREDICATE_VARS_ARE_EQUAL : string | null ;
  /**
   * A equality predicate.
   *
   * The first two arguments are the values to be compared. The third is an
   * equality function which can be used to recursively apply findDifferences.
   *
   * An example comparison implementation for Array could be:
   *
   * function arrayEq(a, b, eq) {
   * if (a.length !== b.length) {
   * return "lengths unequal";
   * }
   *
   * const differences = [];
   * for (let i = 0; i < a.length; i++) {
   * // Use the findDifferences implementation to perform recursive
   * // comparisons.
   * const diff = eq(a[i], b[i], eq);
   * if (diff) {
   * differences[i] = diff;
   * }
   * }
   *
   * if (differences) {
   * return `found array differences: ${differences}`;
   * }
   *
   * // Otherwise return undefined, indicating no differences.
   * return undefined;
   * }
   */
  type EqualityFunction = (a ? : any , b ? : any , c ? : any ) => string | undefined | null ;
  function assert (a : any , opt_b ? : any ) : void ;
  /**
   * Compares two arrays ignoring negative indexes and extra properties on the
   * array objects. Use case: Internet Explorer adds the index, lastIndex and
   * input enumerable fields to the result of string.match(/regexp/g), which makes
   * assertObjectEquals fail.
   * @param a The expected array (2 args) or the debug message (3 args).
   * @param b The actual array (2 args) or the expected array (3 args).
   * @param opt_c The actual array (3 args only).
   */
  function assertArrayEquals (a : any , b : any , opt_c ? : any ) : void ;
  /**
   * Compares two CSS property values to make sure that they represent the same
   * things. This will normalize values in the browser. For example, in Firefox,
   * this assertion will consider "rgb(0, 0, 255)" and "#0000ff" to be identical
   * values for the "color" property. This function won't normalize everything --
   * for example, in most browsers, "blue" will not match "#0000ff". It is
   * intended only to compensate for unexpected normalizations performed by
   * the browser that should also affect your expected value.
   * @param a Assertion message, or the CSS property name.
   * @param b CSS property name, or the expected value.
   * @param c The expected value, or the actual value.
   * @param opt_d The actual value.
   */
  function assertCSSValueEquals (a : string , b : string , c : string , opt_d ? : string ) : void ;
  /**
   * Checks if the test value is included in the given container. The container
   * can be a string (where "included" means a substring), an array or any
   * `IArrayLike` (where "included" means a member), or any type implementing
   * `indexOf` with similar semantics (returning -1 for not included).
   * @param a Failure message (3 arguments) or the test value (2 arguments).
   * @param b The test value (3 arguments) or the container (2 arguments).
   * @param opt_c The container.
   */
  function assertContains (a : any , b : any , opt_c ? : any ) : void ;
  /**
   * Compares two objects that can be accessed like an array and assert that
   * each element is equal.
   * @param a Failure message (3 arguments) or object #1 (2 arguments).
   * @param b Object #2 (2 arguments) or object #1 (3 arguments).
   * @param opt_c Object #2 (3 arguments).
   */
  function assertElementsEquals (a : string | GlobalObject | null , b : GlobalObject | null , opt_c ? : GlobalObject | null ) : void ;
  /**
   * Compares two objects that can be accessed like an array and assert that
   * each element is roughly equal.
   * @param a Failure message (4 arguments) or object #1 (3 arguments).
   * @param b Object #1 (4 arguments) or object #2 (3 arguments).
   * @param c Object #2 (4 arguments) or tolerance (3 arguments).
   * @param opt_d tolerance (4 arguments).
   */
  function assertElementsRoughlyEqual (a : string | GlobalObject | null , b : GlobalObject | null , c : GlobalObject | null | number , opt_d ? : number ) : void ;
  function assertEquals (a : any , b : any , opt_c ? : any ) : void ;
  function assertEvaluatesToFalse (a : any , opt_b ? : any ) : void ;
  function assertEvaluatesToTrue (a : any , opt_b ? : any ) : void ;
  function assertFalse (a : any , opt_b ? : any ) : void ;
  /**
   * Compares two HTML snippets.
   *
   * Take extra care if attributes are involved. `assertHTMLEquals`'s
   * implementation isn't prepared for complex cases. For example, the following
   * comparisons erroneously fail:
   * <pre>
   * assertHTMLEquals('<a href="x" target="y">', '<a target="y" href="x">');
   * assertHTMLEquals('<div class="a b">', '<div class="b a">');
   * assertHTMLEquals('<input disabled>', '<input disabled="disabled">');
   * </pre>
   *
   * When in doubt, use `goog.testing.dom.assertHtmlMatches`.
   * @param a The expected value (2 args) or the debug message (3 args).
   * @param b The actual value (2 args) or the expected value (3 args).
   * @param opt_c The actual value (3 args only).
   */
  function assertHTMLEquals (a : any , b : any , opt_c ? : any ) : void ;
  function assertHashEquals (a : any , b : any , opt_c ? : any ) : void ;
  function assertNaN (a : any , opt_b ? : any ) : void ;
  function assertNonEmptyString (a : any , opt_b ? : any ) : void ;
  /**
   * Checks if the test value is not included in the given container. The
   * container can be a string (where "included" means a substring), an array or
   * any `IArrayLike` (where "included" means a member), or any type implementing
   * `indexOf` with similar semantics (returning -1 for not included).
   * @param a Failure message (3 arguments) or the contained element (2 arguments).
   * @param b The contained element (3 arguments) or the container (2 arguments).
   * @param opt_c The container.
   */
  function assertNotContains (a : any , b : any , opt_c ? : any ) : void ;
  function assertNotEquals (a : any , b : any , opt_c ? : any ) : void ;
  function assertNotNaN (a : any , opt_b ? : any ) : void ;
  function assertNotNull (a : any , opt_b ? : any ) : void ;
  function assertNotNullNorUndefined (a : any , opt_b ? : any ) : void ;
  /**
   * Asserts that the function does not throw an error.
   * @param a The assertion comment or the function to call.
   * @param opt_b The function to call (if the first argument of `assertNotThrows` was the comment).
   */
  function assertNotThrows (a : string | Function , opt_b ? : Function ) : any ;
  function assertNotUndefined (a : any , opt_b ? : any ) : void ;
  function assertNull (a : any , opt_b ? : any ) : void ;
  function assertNullOrUndefined (a : any , opt_b ? : any ) : void ;
  /**
   * Notes:
   * Object equality has some nasty browser quirks, and this implementation is
   * not 100% correct. For example,
   *
   * <code>
   * var a = [0, 1, 2];
   * var b = [0, 1, 2];
   * delete a[1];
   * b[1] = undefined;
   * assertObjectEquals(a, b); // should fail, but currently passes
   * </code>
   *
   * See asserts_test.html for more interesting edge cases.
   *
   * The first comparison object provided is the expected value, the second is
   * the actual.
   * @param a Assertion message or comparison object.
   * @param b Comparison object.
   * @param opt_c Comparison object, if an assertion message was provided.
   */
  function assertObjectEquals (a : any , b : any , opt_c ? : any ) : void ;
  /**
   * Compares two arbitrary objects for non-equalness.
   *
   * All the same caveats as for assertObjectEquals apply here:
   * Undefined values may be confused for missing values, or vice versa.
   * @param a Assertion message or comparison object.
   * @param b Comparison object.
   * @param opt_c Comparison object, if an assertion message was provided.
   */
  function assertObjectNotEquals (a : any , b : any , opt_c ? : any ) : void ;
  /**
   * Similar to assertObjectEquals above, but accepts a tolerance margin.
   * @param a Assertion message or comparison object.
   * @param b Comparison object.
   * @param c Comparison object or tolerance.
   * @param opt_d Tolerance, if an assertion message was provided.
   */
  function assertObjectRoughlyEquals (a : any , b : any , c : any , opt_d ? : any ) : void ;
  /**
   * Checks if the given string matches the given regular expression.
   * @param a Failure message (3 arguments) or the expected regular expression as a string or RegExp (2 arguments).
   * @param b The regular expression (3 arguments) or the string to test (2 arguments).
   * @param opt_c The string to test.
   */
  function assertRegExp (a : any , b : any , opt_c ? : any ) : void ;
  /**
   * Asserts that the IThenable rejects.
   *
   * This is useful for asserting that async functions throw, like an asynchronous
   * assertThrows. Example:
   *
   * ```
   * async function shouldThrow() { throw new Error('error!'); }
   * async function testShouldThrow() {
   * const error = await assertRejects(shouldThrow());
   * assertEquals('error!', error.message);
   * }
   * ```
   * @param a The assertion comment or the IThenable.
   * @param opt_b The IThenable (if the first argument of `assertRejects` was the comment).
   */
  function assertRejects (a : string | PromiseLike < any > , opt_b ? : PromiseLike < any > ) : PromiseLike < any > ;
  function assertRoughlyEquals (a : any , b : any , c : any , opt_d ? : any ) : void ;
  /**
   * Compares elements of two array-like or iterable objects using strict equality
   * without taking their order into account.
   * @param a Assertion message or the expected elements.
   * @param b Expected elements or the actual elements.
   * @param opt_c Actual elements.
   */
  function assertSameElements (a : string | ArrayLike < any > | Iterable < any > , b : ArrayLike < any > | Iterable < any > , opt_c ? : ArrayLike < any > | Iterable < any > ) : void ;
  /**
   * Asserts that the function throws an error.
   * @param a The assertion comment or the function to call.
   * @param opt_b The function to call (if the first argument of `assertThrows` was the comment).
   */
  function assertThrows (a : string | Function , opt_b ? : Function ) : GlobalError ;
  /**
   * Asserts that the given callback function results in a JsUnitException when
   * called, and that the resulting failure message matches the given expected
   * message.
   * @param callback Function to be run expected to result in a JsUnitException (usually contains a call to an assert).
   * @param opt_expectedMessage Failure message expected to be given with the exception.
   */
  function assertThrowsJsUnitException (callback : ( ) => void , opt_expectedMessage ? : string ) : ಠ_ಠ.clutz.goog.testing.JsUnitException ;
  function assertTrue (a : any , opt_b ? : any ) : void ;
  function assertUndefined (a : any , opt_b ? : any ) : void ;
  /**
   * Clears the custom equality function currently applied to the given prototype.
   * Returns true if a function was removed.
   */
  function clearCustomComparator (prototype : GlobalObject ) : boolean ;
  function fail (failureMessage ? : any ) : void ;
  /**
   * Determines if two items of any type match, and formulates an error message
   * if not.
   * @param expected Expected argument to match.
   * @param actual Argument as a result of performing the test.
   * @param opt_equalityPredicate An optional function that can be used to check equality of variables. It accepts 3 arguments: type-of-variables, var1, var2 (in that order) and returns an error message if the variables are not equal, goog.testing.asserts.EQUALITY_PREDICATE_VARS_ARE_EQUAL if the variables are equal, or goog.testing.asserts.EQUALITY_PREDICATE_CANT_PROCESS if the predicate couldn't check the input variables. The function will be called only if the types of var1 and var2 are identical.
   */
  function findDifferences (expected : any , actual : any , opt_equalityPredicate ? : (a : string , b : any , c : any ) => string | null ) : string | null ;
  /**
   * Raises a JsUnit exception with the given comment. If the exception is
   * unexpectedly caught during a unit test, it will be rethrown so that it is
   * seen by the test framework.
   * @param comment A summary for the exception.
   * @param opt_message A description of the exception.
   */
  function raiseException (comment : string , opt_message ? : string ) : void ;
  /**
   * Marks the given prototype as having equality semantics provided by the given
   * custom equality function.
   *
   * This will cause findDifferences and assertObjectEquals to use the given
   * function when comparing objects with this prototype. When comparing two
   * objects with different prototypes, the equality (if any) attached to their
   * lowest common ancestor in the prototype hierarchy will be used.
   */
  function registerComparator (prototype : GlobalObject , fn : ಠ_ಠ.clutz.goog.testing.asserts.EqualityFunction ) : void ;
}
declare module 'goog:goog.testing.asserts' {
  import asserts = ಠ_ಠ.clutz.goog.testing.asserts;
  export = asserts;
}
