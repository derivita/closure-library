//!! generated by clutz.
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A function that checks to see if an array matches a given set of
   * expectations.  The expectations array can be a mix of ArgumentMatcher
   * implementations and values.  True will be returned if values are identical or
   * if a matcher returns a positive result.
   * @param expectedArr An array of expectations which can be either values to check for equality or ArgumentMatchers.
   * @param arr The array to match.
   * @param opt_expectation The expectation for this match.
   */
  function flexibleArrayMatcher (expectedArr : any [] | null , arr : any [] | null , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  /**
   * An instance of the IgnoreArgument matcher. Returns true for all matches.
   */
  let ignoreArgument : ಠ_ಠ.clutz.goog.testing.mockmatchers.IgnoreArgument ;
  /**
   * A matcher that verifies that an argument is an array.
   */
  let isArray : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a array-like.  A NodeList is an
   * example of a collection that is very close to an array.
   */
  let isArrayLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a boolean.
   */
  let isBoolean : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a date-like.
   */
  let isDateLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a function.
   */
  let isFunction : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is like a DOM node.
   */
  let isNodeLike : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a number.
   */
  let isNumber : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is an object.
   */
  let isObject : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * A matcher that verifies that an argument is a string.
   */
  let isString : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
}
declare module 'goog:goog.testing.mockmatchers' {
  import mockmatchers = ಠ_ಠ.clutz.goog.testing.mockmatchers;
  export = mockmatchers;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A simple interface for executing argument matching.  A match in this case is
   * testing to see if a supplied object fits a given criteria.  True is returned
   * if the given criteria is met.
   */
  class ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_ArgumentMatcher : any;
    /**
     * A simple interface for executing argument matching.  A match in this case is
     * testing to see if a supplied object fits a given criteria.  True is returned
     * if the given criteria is met.
     * @param opt_matchFn A function that evaluates a given argument and returns true if it meets a given criteria.
     * @param opt_matchName The name expressing intent as part of an error message for when a match fails.
     */
    constructor (opt_matchFn ? : Function | null , opt_matchName ? : string | null ) ;
    /**
     * A function that takes a match argument and an optional MockExpectation
     * which (if provided) will get error information and returns whether or
     * not it matches.
     * @param toVerify The argument that should be verified.
     * @param opt_expectation The expectation for this match.
     */
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare module 'goog:goog.testing.mockmatchers.ArgumentMatcher' {
  import ArgumentMatcher = ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher;
  export default ArgumentMatcher;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that always returns true. It is useful when the user does not care
   * for some arguments.
   * For example: mockFunction('username', 'password', new IgnoreArgument());
   */
  class IgnoreArgument extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_IgnoreArgument : any;
    /**
     * A matcher that always returns true. It is useful when the user does not care
     * for some arguments.
     * For example: mockFunction('username', 'password', new IgnoreArgument());
     */
    constructor ( ) ;
  }
}
declare module 'goog:goog.testing.mockmatchers.IgnoreArgument' {
  import IgnoreArgument = ಠ_ಠ.clutz.goog.testing.mockmatchers.IgnoreArgument;
  export default IgnoreArgument;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument is an instance of a given class.
   */
  class InstanceOf extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_InstanceOf : any;
    /**
     * A matcher that verifies that an argument is an instance of a given class.
     * @param ctor The class that will be used for verification.
     */
    constructor (ctor : Function | null ) ;
  }
}
declare module 'goog:goog.testing.mockmatchers.InstanceOf' {
  import InstanceOf = ಠ_ಠ.clutz.goog.testing.mockmatchers.InstanceOf;
  export default InstanceOf;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that the argument is an object that equals the given
   * expected object, using a deep comparison.
   */
  class ObjectEquals extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_ObjectEquals : any;
    /**
     * A matcher that verifies that the argument is an object that equals the given
     * expected object, using a deep comparison.
     * @param expectedObject An object to match against when verifying the argument.
     */
    constructor (expectedObject : GlobalObject | null ) ;
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare module 'goog:goog.testing.mockmatchers.ObjectEquals' {
  import ObjectEquals = ಠ_ಠ.clutz.goog.testing.mockmatchers.ObjectEquals;
  export default ObjectEquals;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument matches a given RegExp.
   */
  class RegexpMatch extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_RegexpMatch : any;
    /**
     * A matcher that verifies that an argument matches a given RegExp.
     * @param regexp The regular expression that the argument must match.
     */
    constructor (regexp : RegExp | null ) ;
  }
}
declare module 'goog:goog.testing.mockmatchers.RegexpMatch' {
  import RegexpMatch = ಠ_ಠ.clutz.goog.testing.mockmatchers.RegexpMatch;
  export default RegexpMatch;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that saves the argument that it is verifying so that your unit test
   * can perform extra tests with this argument later.  For example, if the
   * argument is a callback method, the unit test can then later call this
   * callback to test the asynchronous portion of the call.
   */
  class SaveArgument extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_SaveArgument : any;
    /**
     * A matcher that saves the argument that it is verifying so that your unit test
     * can perform extra tests with this argument later.  For example, if the
     * argument is a callback method, the unit test can then later call this
     * callback to test the asynchronous portion of the call.
     * @param opt_matcher Argument matcher or matching function that will be used to validate the argument.  By default, argument will always be valid.
     * @param opt_matchName The name expressing intent as part of an error message for when a match fails.
     */
    constructor (opt_matcher ? : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher | null | Function , opt_matchName ? : string | null ) ;
    /**
     * All saved arguments that were verified.
     */
    allArgs : any [] ;
    /**
     * The last (or only) saved argument that was verified.
     */
    arg : any ;
    matches (toVerify : any , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : boolean ;
  }
}
declare module 'goog:goog.testing.mockmatchers.SaveArgument' {
  import SaveArgument = ಠ_ಠ.clutz.goog.testing.mockmatchers.SaveArgument;
  export default SaveArgument;
}
// Generated from testing/mockmatchers.js
declare namespace ಠ_ಠ.clutz.goog.testing.mockmatchers {
  /**
   * A matcher that verifies that an argument is of a given type (e.g. "object").
   */
  class TypeOf extends ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher {
    private noStructuralTyping_goog_testing_mockmatchers_TypeOf : any;
    /**
     * A matcher that verifies that an argument is of a given type (e.g. "object").
     * @param type The type that a given argument must have.
     */
    constructor (type : string ) ;
  }
}
declare module 'goog:goog.testing.mockmatchers.TypeOf' {
  import TypeOf = ಠ_ಠ.clutz.goog.testing.mockmatchers.TypeOf;
  export default TypeOf;
}
