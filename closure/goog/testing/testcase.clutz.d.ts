//!! generated by clutz.
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A class representing a JsUnit test case. A TestCase is made up of a number
   * of test functions which can be run. Individual test cases can override the
   * following functions to set up their test environment:
   * - runTests - completely override the test's runner
   * - setUpPage - called before any of the test functions are run
   * - tearDownPage - called after all tests are finished
   * - setUp - called before each of the test functions
   * - tearDown - called after each of the test functions
   * - shouldRunTests - called before a test run, all tests are skipped if it
   * returns false. Can be used to disable tests on browsers
   * where they aren't expected to pass.
   * <p>
   * TestCase objects are usually constructed by inspecting the global environment
   * to discover functions that begin with the prefix <code>test</code>.
   * (See {@link #autoDiscoverLifecycle} and {@link #autoDiscoverTests}.)
   * </p>
   *
   * <h2>Testing asychronous code with promises</h2>
   *
   * <p>
   * In the simplest cases, the behavior that the developer wants to test
   * is synchronous, and the test functions exercising the behavior execute
   * synchronously. But TestCase can also be used to exercise asynchronous code
   * through the use of <a
   * href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">
   * promises</a>. If a test function returns an object that has a
   * <code>then</code> method defined on it, the test framework switches to an
   * asynchronous execution strategy: the next test function will not begin
   * execution until the returned promise is resolved or rejected. Instead of
   * writing test assertions at the top level inside a test function, the test
   * author chains them on the end of the returned promise. For example:
   * </p>
   * <pre>
   * function testPromiseBasedAPI() {
   * return promiseBasedAPI().then(function(value) {
   * // Will run when the promise resolves, and before the next
   * // test function begins execution.
   * assertEquals('foo', value.bar);
   * });
   * }
   * </pre>
   * <p>
   * Synchronous and asynchronous tests can be mixed in the same TestCase.
   * Test functions that return an object with a <code>then</code> method are
   * executed asynchronously, and all other test functions are executed
   * synchronously. While this is convenient for test authors (since it doesn't
   * require any explicit configuration for asynchronous tests), it can lead to
   * confusion if the test author forgets to return the promise from the test
   * function. For example:
   * </p>
   * <pre>
   * function testPromiseBasedAPI() {
   * // This test should never succeed.
   * promiseBasedAPI().then(fail, fail);
   * // Oops! The promise isn't returned to the framework,
   * // so this test actually does succeed.
   * }
   * </pre>
   * <p>
   * Since the test framework knows nothing about the promise created
   * in the test function, it will run the function synchronously, record
   * a success, and proceed immediately to the next test function.
   * </p>
   * <p>
   * Promises returned from test functions can time out. If a returned promise
   * is not resolved or rejected within {@link promiseTimeout} milliseconds,
   * the test framework rejects the promise without a timeout error message.
   * Test cases can configure the value of `promiseTimeout` by setting
   * <pre>
   * goog.testing.TestCase.getActiveTestCase().promiseTimeout = ...
   * </pre>
   * in their `setUpPage` methods.
   * </p>
   */
  class TestCase {
    private noStructuralTyping_goog_testing_TestCase : any;
    /**
     * A class representing a JsUnit test case. A TestCase is made up of a number
     * of test functions which can be run. Individual test cases can override the
     * following functions to set up their test environment:
     * - runTests - completely override the test's runner
     * - setUpPage - called before any of the test functions are run
     * - tearDownPage - called after all tests are finished
     * - setUp - called before each of the test functions
     * - tearDown - called after each of the test functions
     * - shouldRunTests - called before a test run, all tests are skipped if it
     * returns false. Can be used to disable tests on browsers
     * where they aren't expected to pass.
     * <p>
     * TestCase objects are usually constructed by inspecting the global environment
     * to discover functions that begin with the prefix <code>test</code>.
     * (See {@link #autoDiscoverLifecycle} and {@link #autoDiscoverTests}.)
     * </p>
     *
     * <h2>Testing asychronous code with promises</h2>
     *
     * <p>
     * In the simplest cases, the behavior that the developer wants to test
     * is synchronous, and the test functions exercising the behavior execute
     * synchronously. But TestCase can also be used to exercise asynchronous code
     * through the use of <a
     * href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">
     * promises</a>. If a test function returns an object that has a
     * <code>then</code> method defined on it, the test framework switches to an
     * asynchronous execution strategy: the next test function will not begin
     * execution until the returned promise is resolved or rejected. Instead of
     * writing test assertions at the top level inside a test function, the test
     * author chains them on the end of the returned promise. For example:
     * </p>
     * <pre>
     * function testPromiseBasedAPI() {
     * return promiseBasedAPI().then(function(value) {
     * // Will run when the promise resolves, and before the next
     * // test function begins execution.
     * assertEquals('foo', value.bar);
     * });
     * }
     * </pre>
     * <p>
     * Synchronous and asynchronous tests can be mixed in the same TestCase.
     * Test functions that return an object with a <code>then</code> method are
     * executed asynchronously, and all other test functions are executed
     * synchronously. While this is convenient for test authors (since it doesn't
     * require any explicit configuration for asynchronous tests), it can lead to
     * confusion if the test author forgets to return the promise from the test
     * function. For example:
     * </p>
     * <pre>
     * function testPromiseBasedAPI() {
     * // This test should never succeed.
     * promiseBasedAPI().then(fail, fail);
     * // Oops! The promise isn't returned to the framework,
     * // so this test actually does succeed.
     * }
     * </pre>
     * <p>
     * Since the test framework knows nothing about the promise created
     * in the test function, it will run the function synchronously, record
     * a success, and proceed immediately to the next test function.
     * </p>
     * <p>
     * Promises returned from test functions can time out. If a returned promise
     * is not resolved or rejected within {@link promiseTimeout} milliseconds,
     * the test framework rejects the promise without a timeout error message.
     * Test cases can configure the value of `promiseTimeout` by setting
     * <pre>
     * goog.testing.TestCase.getActiveTestCase().promiseTimeout = ...
     * </pre>
     * in their `setUpPage` methods.
     * </p>
     * @param opt_name The name of the test case, defaults to 'Untitled Test Case'.
     */
    constructor (opt_name ? : string ) ;
    endTime_ ? : number ;
    /**
     * The order to run the auto-discovered tests in.
     */
    order : string ;
    /**
     * The maximum time in milliseconds a promise returned from a test function
     * may remain pending before the test fails due to timeout.
     */
    promiseTimeout : number ;
    /**
     * Object used to encapsulate the test results.
     */
    protected result_ : ಠ_ಠ.clutz.goog.testing.TestCase.Result ;
    /**
     * Adds a new test to the test case.
     * @param test The test to add.
     */
    add (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test ) : void ;
    /**
     * Adds a callback function that should be executed when the tests have
     * completed.
     * @param fn The callback function.
     */
    addCompletedCallback (fn : ( ) => any ) : void ;
    /**
     * Creates and adds a new test.
     *
     * Convenience function to make syntax less awkward when not using automatic
     * test discovery.
     * @param name The test name.
     * @param ref Reference to the test function.
     * @param scope Optional scope that the test function should be called in.
     * @param objChain An array of Objects that may have additional set up/tear down logic for a particular test.
     */
    addNewTest (name : string , ref : ( ) => any , scope ? : GlobalObject , objChain ? : GlobalObject [] ) : void ;
    autoDiscoverLifecycle ( ) : void ;
    autoDiscoverTests ( ) : void ;
    /**
     * Clears a timeout created by `this.timeout()`.
     * @param id A timeout id.
     */
    protected clearTimeout (id : number ) : void ;
    /**
     * Creates a `goog.testing.TestCase.Test` from an auto-discovered
     * function.
     * @param name The name of the function.
     * @param ref The auto-discovered function.
     * @param scope The scope to attach to the test.
     */
    protected createTest (name : string , ref : ( ) => any , scope ? : GlobalObject , objChain ? : GlobalObject [] ) : ಠ_ಠ.clutz.goog.testing.TestCase.Test ;
    cycleTests ( ) : void ;
    /**
     * Handles a test that failed.
     * @param test The test that failed.
     */
    protected doError (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) : void ;
    /**
     * Handles a test that was skipped.
     * @param test The test that was skipped.
     */
    protected doSkipped (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test ) : void ;
    /**
     * Handles a test that passed.
     * @param test The test that passed.
     */
    protected doSuccess (test : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) : void ;
    /**
     * Exception object that was detected before a test runs.
     */
    protected exceptionBeforeTest : any ;
    execute ( ) : void ;
    finalize ( ) : void ;
    /**
     * Returns the number of tests actually run in the test case, i.e. subtracting
     * any which are skipped.
     */
    getActuallyRunCount ( ) : number ;
    getAutoDiscoveryPrefix ( ) : string ;
    protected getBatchTime ( ) : number ;
    /**
     * Returns the number of tests contained in the test case.
     */
    getCount ( ) : number ;
    /**
     * Returns the current test or null.
     */
    protected getCurrentTest ( ) : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ;
    /**
     * Gets list of objects that potentially contain test cases. For IE 8 and
     * below, this is the global "this" (for properties set directly on the global
     * this or window) and the RuntimeObject (for global variables and functions).
     * For all other browsers, the array simply contains the global this.
     * @param opt_prefix An optional prefix. If specified, only get things under this prefix. Note that the prefix is only honored in IE, since it supports the RuntimeObject: http://msdn.microsoft.com/en-us/library/ff521039%28VS.85%29.aspx TODO: Remove this option.
     */
    getGlobals (opt_prefix ? : string ) : GlobalObject [] ;
    getName ( ) : string ;
    /**
     * Returns the number of script files that were loaded in order to run the test.
     */
    getNumFilesLoaded ( ) : number ;
    /**
     * Returns a string detailing the results from the test.
     * @param opt_verbose If true results will include data about all tests, not just what failed.
     */
    getReport (opt_verbose ? : boolean ) : string ;
    /**
     * Returns the amount of time it took for the test to run.
     */
    getRunTime ( ) : number ;
    /**
     * Returns the test results object: a map from test names to a list of test
     * failures (if any exist).
     */
    getTestResults ( ) : { [ key: string ]: ಠ_ಠ.clutz.goog.testing.TestCase.IResult [] } ;
    /**
     * Gets the tests.
     */
    getTests ( ) : ( ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) [] ;
    groupLogsEnd ( ) : void ;
    groupLogsStart ( ) : void ;
    ignoreStartupCspViolations ( ) : void ;
    isInsideMultiTestRunner ( ) : boolean ;
    isSuccess ( ) : boolean ;
    /**
     * Logs an object to the console, if available.
     * @param val The value to log. Will be ToString'd.
     */
    log (val : any ) : void ;
    logError (name : string , error : any ) : ಠ_ಠ.clutz.goog.testing.TestCase.Error ;
    /**
     * Checks to see if the test should be marked as failed before it is run.
     *
     * If there was an error in setUpPage, we treat that as a failure for all
     * tests and mark them all as having failed.
     * @param testCase The current test case.
     */
    protected maybeFailTestEarly (testCase : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) : boolean ;
    /**
     * Returns the current test and increments the pointer.
     */
    next ( ) : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ;
    protected now ( ) : number ;
    /**
     * Toggles recording of Content Security Policy violations. Call this with false
     * during tests, setUpPage, setUp, and tearDown functions to prevent CSP
     * violations occurring while the function is executing from being reported as
     * errors. Reporting will be reset upon execution of the next test function.
     */
    observeCspViolations (enable : boolean ) : void ;
    /**
     * Records and logs an error from or related to a test.
     * @param testName The name of the test that failed.
     * @param error The exception object associated with the failure or a string.
     */
    protected recordError (testName : string , error : any ) : void ;
    /**
     * Records an error that fails the current test, without throwing it.
     *
     * Use this function to implement expect()-style assertion libraries that fail a
     * test without breaking execution (so you can see further failures). Do not use
     * this from normal test code.
     *
     * Please contact js-core-libraries-team@ before using this method.  If it grows
     * popular, we may add an expect() API to Closure.
     *
     * NOTE: If there is no active TestCase, you must throw an error.
     * @param error The error to log.  If it is a JsUnitException which has already been logged, nothing will happen.
     */
    recordTestError (error : GlobalError ) : void ;
    reset ( ) : void ;
    runTests ( ) : void ;
    /**
     * Whether the test case is running.
     */
    running : boolean ;
    /**
     * Saves a message to the result set.
     * @param message The message to save.
     */
    saveMessage (message : string ) : void ;
    protected setBatchTime (batchTime : number ) : void ;
    /**
     * Extracts any functions defined on 'obj' that correspond to page lifecycle
     * events (setUpPage, tearDownPage, runTests, shouldRunTests) and add them to
     * on this test case.
     */
    setLifecycleObj (obj : GlobalObject ) : void ;
    setOrder (order : ಠ_ಠ.clutz.goog.testing.TestCase.Order ) : void ;
    setTestDoneCallback (testDone : (a : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null , b : string [] ) => any ) : void ;
    setTestObj (obj : GlobalObject ) : void ;
    /**
     * Sets the tests.
     * @param tests A new test array.
     */
    protected setTests (tests : ( ಠ_ಠ.clutz.goog.testing.TestCase.Test | null ) [] ) : void ;
    setTestsToRun (testsToRun : { [ key: string ]: boolean } | null ) : void ;
    /**
     * Gets called before every goog.testing.TestCase.Test is been executed. Can
     * be overridden to add set up functionality to each test.
     */
    setUp ( ) : { then : any } | undefined ;
    /**
     * Gets called before any tests are executed.  Can be overridden to set up the
     * environment for the whole test case.
     */
    setUpPage ( ) : { then : any } | undefined ;
    shouldLogTestProgress ( ) : boolean ;
    /**
     * Can be overridden in test classes to indicate whether the tests in a case
     * should be run in that particular situation.  For example, this could be used
     * to stop tests running in a particular browser, where browser support for
     * the class under test was absent.
     */
    shouldRunTests ( ) : boolean ;
    /**
     * Whether the test case has ever tried to execute.
     */
    started : boolean ;
    /**
     * Gets called after every goog.testing.TestCase.Test has been executed. Can
     * be overridden to add tear down functionality to each test.
     */
    tearDown ( ) : { then : any } | undefined ;
    tearDownPage ( ) : void ;
    /**
     * Calls a function after a delay, using the protected timeout.
     * @param fn The function to call.
     * @param time Delay in milliseconds.
     */
    protected timeout (fn : Function | null , time : number ) : number ;
    useGoogPromise ( ) : void ;
    useNativePromise ( ) : void ;
    /**
     * Avoid a dependency on goog.userAgent and keep our own reference of whether
     * the browser is IE.
     */
    static IS_IE : boolean ;
    /**
     * Name of the current test that is running, or null if none is running.
     */
    static currentTestName : string | null ;
    static getActiveTestCase ( ) : ಠ_ಠ.clutz.goog.testing.TestCase | null ;
    /**
     * Gets list of objects that potentially contain test cases. For IE 8 and
     * below, this is the global "this" (for properties set directly on the global
     * this or window) and the RuntimeObject (for global variables and functions).
     * For all other browsers, the array simply contains the global this.
     * @param opt_prefix An optional prefix. If specified, only get things under this prefix. Note that the prefix is only honored in IE, since it supports the RuntimeObject: http://msdn.microsoft.com/en-us/library/ff521039%28VS.85%29.aspx TODO: Remove this option.
     */
    static getGlobals (opt_prefix ? : string ) : GlobalObject [] ;
    /**
     * Initializes the TestCase.
     * @param testCase The test case to install.
     * @param opt_testDone Called when each test completes.
     */
    static initializeTestCase (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null , opt_testDone ? : (a : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null , b : string [] | null ) => any ) : void ;
    /**
     * Initializes the given test case with the global test runner 'G_testRunner'.
     * @param testCase The test case to install.
     * @param opt_testDone Called when each test completes.
     */
    static initializeTestRunner (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null , opt_testDone ? : (a : ಠ_ಠ.clutz.goog.testing.TestCase.Test | null , b : string [] | null ) => any ) : void ;
    /**
     * The maximum amount of time in milliseconds that the test case can take
     * before it is forced to yield and reschedule. This prevents the test runner
     * from blocking the browser and potentially hurting the test harness.
     */
    static maxRunTime : number ;
    protected static now ( ) : number ;
  }
}
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  class Continuation_ {
    private noStructuralTyping_goog_testing_TestCase_Continuation_ : any;
    static run (continuation : ಠ_ಠ.clutz.goog.testing.TestCase.Continuation_ | null | undefined ) : void ;
  }
  type IResult = { message : string , source : string , stacktrace : string } ;
}
declare module 'goog:goog.testing.TestCase' {
  import TestCase = ಠ_ಠ.clutz.goog.testing.TestCase;
  export default TestCase;
}
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class representing an error thrown by the test
   */
  class Error {
    private noStructuralTyping_goog_testing_TestCase_Error : any;
    /**
     * A class representing an error thrown by the test
     * @param source The name of the test which threw the error.
     * @param message The error message.
     * @param opt_stack A string showing the execution stack.
     */
    constructor (source : string , message : string , opt_stack ? : string ) ;
    /**
     * Reference to the test function.
     */
    message : string ;
    /**
     * The name of the test which threw the error.
     */
    source : string ;
    /**
     * The stack.
     */
    stack : string | null ;
    /**
     * Returns a string representing the error object.
     */
    toString ( ) : string ;
  }
}
declare module 'goog:goog.testing.TestCase.Error' {
  import Error = ಠ_ಠ.clutz.goog.testing.TestCase.Error;
  export default Error;
}
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * The order to run the auto-discovered tests.
   */
  /**
   * The order to run the auto-discovered tests.
   */
  enum Order {
    NATURAL = 'natural' ,
    RANDOM = 'random' ,
    SORTED = 'sorted' ,
  }
}
declare module 'goog:goog.testing.TestCase.Order' {
  import Order = ಠ_ಠ.clutz.goog.testing.TestCase.Order;
  export default Order;
}
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class for representing test results.  A bag of public properties.
   */
  class Result {
    private noStructuralTyping_goog_testing_TestCase_Result : any;
    /**
     * A class for representing test results.  A bag of public properties.
     * @param testCase The test case that owns this result.
     */
    constructor (testCase : ಠ_ಠ.clutz.goog.testing.TestCase | null ) ;
    /**
     * Whether the tests have completed.
     */
    complete : boolean ;
    /**
     * Errors encountered while running the test.
     */
    errors : ( ಠ_ಠ.clutz.goog.testing.TestCase.Error | null ) [] ;
    /**
     * Messages to show the user after running the test.
     */
    messages : string [] ;
    /**
     * The number of files loaded to run this test.
     */
    numFilesLoaded : number ;
    /**
     * Test results for each test that was run. The test name is always added
     * as the key in the map, and the array of strings is an optional list
     * of failure messages. If the array is empty, the test passed. Otherwise,
     * the test failed.
     */
    resultsByName : { [ key: string ]: ( ಠ_ಠ.clutz.goog.testing.TestCase.Error | null ) [] } ;
    /**
     * Total number of tests that were actually run.
     */
    runCount : number ;
    /**
     * The amount of time the tests took to run.
     */
    runTime : number ;
    /**
     * Number of tests skipped due to nested shouldRunTests.
     */
    skipCount : number ;
    /**
     * Number of successful tests.
     */
    successCount : number ;
    /**
     * Which tests were suppressed by shouldRunTests() returning false.
     */
    suppressedTests : string [] ;
    /**
     * Whether all tests were suppressed from a top-level shouldRunTests().
     */
    testSuppressed : boolean ;
    /**
     * Total number of tests that should have been run.
     */
    totalCount : number ;
    getSummary ( ) : string ;
    isSuccess ( ) : boolean ;
  }
}
declare module 'goog:goog.testing.TestCase.Result' {
  import Result = ಠ_ಠ.clutz.goog.testing.TestCase.Result;
  export default Result;
}
// Generated from testing/testcase.js
declare namespace ಠ_ಠ.clutz.goog.testing.TestCase {
  /**
   * A class representing a single test function.
   */
  class Test {
    private noStructuralTyping_goog_testing_TestCase_Test : any;
    /**
     * A class representing a single test function.
     * @param name The test name.
     * @param ref Reference to the test function or test object.
     * @param scope Optional scope that the test function should be called in.
     * @param objChain A chain of objects used to populate setUps and tearDowns.
     */
    constructor (name : string , ref : ( ( ) => any ) | null , scope ? : GlobalObject | null , objChain ? : any [] ) ;
    /**
     * The name of the test.
     */
    name : string ;
    objChain : any [] ;
    /**
     * TODO(user): Rename this to something more clear.
     * Reference to the test function.
     */
    ref ( ) : any ;
    /**
     * Scope that the test function should be called in.
     */
    scope : GlobalObject | null ;
    setUps : ( ( ) => any ) [] ;
    tearDowns : ( ( ) => any ) [] ;
    /**
     * Returns the runtime for this test function in milliseconds.
     */
    getElapsedTime ( ) : number ;
    started ( ) : void ;
    stopped ( ) : void ;
  }
}
declare module 'goog:goog.testing.TestCase.Test' {
  import Test = ಠ_ಠ.clutz.goog.testing.TestCase.Test;
  export default Test;
}
