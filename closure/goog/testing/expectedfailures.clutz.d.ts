//!! generated by clutz.
// Generated from testing/expectedfailures.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Helper class for allowing some unit tests to fail, particularly designed to
   * mark tests that should be fixed on a given browser.
   *
   * <pre>
   * var expectedFailures = new goog.testing.ExpectedFailures();
   *
   * function tearDown() {
   * expectedFailures.handleTearDown();
   * }
   *
   * function testSomethingThatBreaksInWebKit() {
   * expectedFailures.expectFailureFor(goog.userAgent.WEBKIT);
   *
   * try {
   * ...
   * assert(somethingThatFailsInWebKit);
   * ...
   * } catch (e) {
   * expectedFailures.handleException(e);
   * }
   * }
   * </pre>
   */
  class ExpectedFailures {
    private noStructuralTyping_goog_testing_ExpectedFailures : any;
    /**
     * Register to expect failure for the given condition.  Multiple calls to this
     * function act as a boolean OR.  The first applicable message will be used.
     * @param condition Whether to expect failure.
     * @param opt_message Descriptive message of this expected failure.
     */
    expectFailureFor (condition : boolean , opt_message ? : string ) : void ;
    /**
     * Handle an exception, suppressing it if it is a unit test failure that we
     * expected.
     * @param ex The exception to handle.
     */
    handleException (ex : GlobalError | null ) : void ;
    handleTearDown ( ) : void ;
    /**
     * Determines if the given exception was expected.
     * @param ex The exception to check.
     */
    isExceptionExpected (ex : GlobalObject | null ) : boolean ;
    /**
     * Run the given function, catching any expected failures.
     * @param func The function to run.
     * @param opt_lenient Whether to ignore if the expected failures didn't occur.  In this case a warning will be logged in handleTearDown.
     */
    run (func : Function | null , opt_lenient ? : boolean ) : void ;
  }
}
declare module 'goog:goog.testing.ExpectedFailures' {
  import ExpectedFailures = ಠ_ಠ.clutz.goog.testing.ExpectedFailures;
  export default ExpectedFailures;
}
