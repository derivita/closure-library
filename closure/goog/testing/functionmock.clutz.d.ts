//!! generated by clutz.
// Generated from testing/functionmock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Convenience method for creating a mock for a constructor. Copies class
   * members to the mock.
   *
   * <p>When mocking a constructor to return a mocked instance, remember to create
   * the instance mock before mocking the constructor. If you mock the constructor
   * first, then the mock framework will be unable to examine the prototype chain
   * when creating the mock instance.
   * @param scope The scope of the constructor to be mocked out.
   * @param constructorName The name of the constructor we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createConstructorMock (scope : GlobalObject | null , constructorName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mock for a function.
   * @param opt_functionName The optional name of the function to mock set to '[anonymous mocked function]' if not passed in.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createFunctionMock (opt_functionName ? : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mocks for a global / top-level function.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createGlobalFunctionMock (functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
  /**
   * Convenience method for creating a mock for a method.
   * @param scope The scope of the method to be mocked out.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function createMethodMock (scope : GlobalObject | null , functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare module 'goog:goog.testing' {
  import testing = ಠ_ಠ.clutz.goog.testing;
  export = testing;
}
// Generated from testing/functionmock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Class used to mock a function. Useful for mocking closures and anonymous
   * callbacks etc. Creates a function object that extends goog.testing.Mock.
   * @param opt_functionName The optional name of the function to mock. Set to '[anonymous mocked function]' if not passed in.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function FunctionMock (opt_functionName ? : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare module 'goog:goog.testing.FunctionMock' {
  import FunctionMock = ಠ_ಠ.clutz.goog.testing.FunctionMock;
  export default FunctionMock;
}
// Generated from testing/functionmock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Mocks a global / top-level function. Creates a goog.testing.MethodMock
   * in the global scope with the name specified by functionName.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function GlobalFunctionMock (functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare module 'goog:goog.testing.GlobalFunctionMock' {
  import GlobalFunctionMock = ಠ_ಠ.clutz.goog.testing.GlobalFunctionMock;
  export default GlobalFunctionMock;
}
// Generated from testing/functionmock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Mocks an existing function. Creates a goog.testing.FunctionMock
   * and registers it in the given scope with the name specified by functionName.
   * @param scope The scope of the method to be mocked out.
   * @param functionName The name of the function we're going to mock.
   * @param opt_strictness One of goog.testing.Mock.LOOSE or goog.testing.Mock.STRICT. The default is STRICT.
   */
  function MethodMock (scope : GlobalObject | null , functionName : string , opt_strictness ? : number ) : ಠ_ಠ.clutz.goog.testing.MockInterface ;
}
declare module 'goog:goog.testing.MethodMock' {
  import MethodMock = ಠ_ಠ.clutz.goog.testing.MethodMock;
  export default MethodMock;
}
