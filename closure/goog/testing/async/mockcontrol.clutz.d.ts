//!! generated by clutz.
// Generated from testing/async/mockcontrol.js
declare namespace ಠ_ಠ.clutz.goog.testing.async {
  /**
   * Provides asynchronous mocks and assertions controlled by a parent
   * MockControl.
   */
  class MockControl {
    private noStructuralTyping_goog_testing_async_MockControl : any;
    /**
     * Provides asynchronous mocks and assertions controlled by a parent
     * MockControl.
     * @param mockControl The parent MockControl.
     */
    constructor (mockControl : ಠ_ಠ.clutz.goog.testing.MockControl | null ) ;
    /**
     * Asserts that a deferred object will call its callback with the given value.
     * @param message A message to print if the arguments are wrong.
     * @param expected The expected value. If this is a deferred object, then the expected value is the deferred value.
     * @param actual The actual value. If this is a deferred object, then the actual value is the deferred value. Either this or 'expected' must be deferred.
     */
    assertDeferredEquals (message : string , expected : any , actual : any ) : void ;
    /**
     * Asserts that a deferred object will have an error and call its errback
     * function.
     * @param deferred The deferred object.
     * @param fn A function wrapping the code in which the error will occur.
     */
    assertDeferredError (deferred : ಠ_ಠ.clutz.goog.async.Deferred | null , fn : ( ) => void ) : void ;
    /**
     * Returns a function that will assert that its arguments are equal to the
     * arguments given to asyncAssertEquals. In addition, the function also asserts
     * that it will be called.
     * @param message A message to print if the arguments are wrong.
     * @param var_args The arguments to assert.
     */
    asyncAssertEquals (message : string ,  ...var_args : any [] ) : ( ...a : any [] ) => void ;
    /**
     * Returns a function that will assert that it will be called, and run the given
     * callback when it is.
     * @param name The name of the callback mock.
     * @param callback The wrapped callback. This will be called when the returned function is called.
     * @param opt_selfObj The object which this should point to when the callback is run.
     */
    createCallbackMock < THIS = any > (name : string , callback : (this : THIS ,  ...a : any [] ) => any , opt_selfObj ? : THIS ) : Function ;
  }
}
declare module 'goog:goog.testing.async.MockControl' {
  import MockControl = ಠ_ಠ.clutz.goog.testing.async.MockControl;
  export default MockControl;
}
