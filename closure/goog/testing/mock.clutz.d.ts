//!! generated by clutz.
// Generated from testing/mock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * The base class for a mock object.
   */
  class Mock implements ಠ_ಠ.clutz.goog.testing.MockInterface {
    private noStructuralTyping_goog_testing_Mock : any;
    /**
     * The base class for a mock object.
     * @param objectToMock The object that should be mocked, or the constructor of an object to mock.
     * @param opt_mockStaticMethods An optional argument denoting that a mock should be constructed from the static functions of a class.
     * @param opt_createProxy An optional argument denoting that a proxy for the target mock should be created.
     */
    constructor (objectToMock : GlobalObject | null , opt_mockStaticMethods ? : boolean , opt_createProxy ? : boolean ) ;
    protected waitingForExpectations : ಠ_ಠ.clutz.goog.promise.Resolver < undefined > | null ;
    /**
     * Allows the expectation to be called any number of times.
     */
    $anyTimes ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Map of argument name to optional argument list verifier function.
     */
    $argumentListVerifiers_ : GlobalObject | null ;
    /**
     * Render the provided argument array to a string to help
     * clients with debugging tests.
     * @param args The arguments passed to the mock.
     */
    $argumentsAsString (args : any [] | null ) : string ;
    /**
     * Allows the expectation to be called any number of times, as long as it's
     * called once.
     */
    $atLeastOnce ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Allows the expectation to be called 0 or 1 times.
     */
    $atMostOnce ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * If this expectation defines a function to be called,
     * it will be called and its result will be returned.
     * Otherwise, if the expectation expects to throw, it will throw.
     * Otherwise, this method will return defined value.
     * @param expectation The expectation.
     * @param args The arguments to the method.
     */
    $do (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null , args : any [] | null ) : any ;
    /**
     * Specifies a function to call for currently pending expectation.
     * Note, that using this method overrides declarations made
     * using $returns() and $throws() methods.
     * @param func The function to call.
     */
    $does (func : Function | null ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * If the expectation expects to throw, this method will throw.
     * @param expectation The expectation.
     */
    $maybeThrow (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : void ;
    /**
     * The function that replaces all methods on the mock object.
     * @param name The name of the method being mocked.
     */
    $mockMethod (name : string ) : any ;
    /**
     * Disallows the expectation from being called.
     */
    $never ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Allows the expectation to be called exactly once.
     */
    $once ( ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * The expectation currently being created. All methods that modify the
     * current expectation return the Mock object for easy chaining, so this is
     * where we keep track of the expectation that's currently being modified.
     */
    protected $pendingExpectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ;
    /**
     * A proxy for the mock.  This can be used for dependency injection in lieu of
     * the mock if the test requires a strict instanceof check.
     */
    $proxy : GlobalObject | null ;
    /**
     * Throws an exception and records that an exception was thrown.
     * @param ex Exception.
     * @param rethrow True if this exception has already been thrown.  If so, we should not report it to TestCase (since it was already reported at the original throw). This is necessary to avoid logging it twice, because assertThrowsJsUnitException only removes one record.
     */
    protected $recordAndThrow (ex : GlobalObject | null , rethrow ? : boolean ) : void ;
    /**
     * Records an actual method call, intended to be overridden by a
     * subclass. The subclass must find the pending expectation and return the
     * correct value.
     * @param name The name of the method being called.
     * @param args The arguments to the method.
     */
    protected $recordCall (name : string , args : any [] | null ) : any ;
    /**
     * Records the currently pending expectation, intended to be overridden by a
     * subclass.
     */
    protected $recordExpectation ( ) : void ;
    /**
     * Registers a verifier function to use when verifying method argument lists.
     * @param methodName The name of the method for which the verifierFn should be used.
     * @param fn Argument list verifier function.  Should take 2 argument arrays as arguments, and return true if they are considered equivalent.
     */
    $registerArgumentListVerifier (methodName : string , fn : Function | null ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Switches from recording to replay mode.
     */
    $replay ( ) : void ;
    /**
     * Resets the state of this mock object. This clears all pending expectations
     * without verifying, and puts the mock in recording mode.
     */
    $reset ( ) : void ;
    /**
     * Specifies a return value for the currently pending expectation.
     * @param val The return value.
     */
    $returns (val : any ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Throw an exception based on an incorrect method call.
     * @param name Name of method called.
     * @param args Arguments passed to the mock.
     * @param opt_expectation Expected next call, if any.
     */
    $throwCallException (name : string , args : any [] | null , opt_expectation ? : ಠ_ಠ.clutz.goog.testing.MockExpectation | null ) : void ;
    /**
     * Throws an exception and records that an exception was thrown.
     * @param comment A short comment about the exception.
     * @param opt_message A longer message about the exception.
     */
    protected $throwException (comment : string , opt_message ? : string | null ) : void ;
    /**
     * Specifies a value for the currently pending expectation to throw.
     * @param val The value to throw.
     */
    $throws (val : any ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Specifies the number of times the expectation should be called.
     * @param times The number of times this method will be called.
     */
    $times (times : number ) : ಠ_ಠ.clutz.goog.testing.Mock ;
    /**
     * Verify that all of the expectations were met. Should be overridden by
     * subclasses.
     */
    $verify ( ) : void ;
    /**
     * Verifies that a method call matches an expectation.
     * @param expectation The expectation to check.
     * @param name The name of the called method.
     * @param args The arguments passed to the mock.
     */
    $verifyCall (expectation : ಠ_ಠ.clutz.goog.testing.MockExpectation | null , name : string , args : any [] | null ) : boolean ;
    $waitAndVerify ( ) : any ;
    /**
     * Option that may be passed when constructing function, method, and
     * constructor mocks. Indicates that the expected calls should be accepted in
     * any order.
     */
    static LOOSE : number ;
    /**
     * Option that may be passed when constructing function, method, and
     * constructor mocks. Indicates that the expected calls should be accepted in
     * the recorded order only.
     */
    static STRICT : number ;
    /**
     * Asserts that a mock object is in record mode.  This avoids type system errors
     * from mock expectations.
     *
     * Usage:
     *
     * ```
     * const record = goog.require('goog.testing.Mock.record');
     *
     * record(mockObject).someMethod(ignoreArgument).$returns(42);
     * record(mockFunction)(ignoreArgument).$returns(42);
     * ```
     * @param obj A mock in record mode.
     */
    static record (obj ? : any ) : any ;
  }
}
declare module 'goog:goog.testing.Mock' {
  import Mock = ಠ_ಠ.clutz.goog.testing.Mock;
  export default Mock;
}
// Generated from testing/mock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * This is a class that represents an expectation.
   */
  class MockExpectation {
    private noStructuralTyping_goog_testing_MockExpectation : any;
    /**
     * This is a class that represents an expectation.
     * @param name The name of the method for this expectation.
     */
    constructor (name : string ) ;
    /**
     * An array of error messages for expectations not met.
     */
    errorMessages : string [] | null ;
    /**
     * The name of the method that is expected to be called.
     */
    name : string ;
    /**
     * The number of times this method is called by real code.
     */
    actualCalls : number ;
    /**
     * Allow expectation failures to include messages.
     * @param message The failure message.
     */
    addErrorMessage (message : string ) : void ;
    /**
     * The arguments that are expected to be passed to this function
     */
    argumentList : any [] | null ;
    /**
     * The value that will be thrown when the method is called
     */
    exceptionToThrow : any ;
    /**
     * Get the error messages seen so far.
     */
    getErrorMessage ( ) : string ;
    /**
     * Get how many error messages have been seen so far.
     */
    getErrorMessageCount ( ) : number ;
    /**
     * The maximum number of times this method should be called.
     */
    maxCalls : number ;
    /**
     * The minimum number of times this method should be called.
     */
    minCalls : number ;
    /**
     * The value that this method should return.
     */
    returnValue : any ;
    /**
     * The function which will be executed when this method is called.
     * Method arguments will be passed to this function, and return value
     * of this function will be returned by the method.
     */
    toDo : Function | null ;
    /**
     * The number of times this method is called during the verification phase.
     */
    verificationCalls : number ;
  }
}
declare module 'goog:goog.testing.MockExpectation' {
  import MockExpectation = ಠ_ಠ.clutz.goog.testing.MockExpectation;
  export default MockExpectation;
}
