//!! generated by clutz.
// Generated from testing/events/events.js
declare namespace ಠ_ಠ.clutz.goog.testing.events {
  /**
   * Simulate a blur event on the given target.
   * @param target The target for the event.
   */
  function fireBlurEvent (target : GlobalEventTarget | null ) : boolean ;
  /**
   * Simulates an event's capturing and bubbling phases.
   * @param event A simulated native event. It will be wrapped in a normalized BrowserEvent and dispatched to Closure listeners on all ancestors of its target (inclusive).
   */
  function fireBrowserEvent (event : GlobalEvent | null ) : boolean ;
  /**
   * Simulates a click event on the given target. IE only supports click with
   * the left mouse button.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to `goog.events.BrowserEvent.MouseButton.LEFT`.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireClickEvent (target : GlobalEventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a mousedown, mouseup, and then click on the given event target,
   * with the left mouse button.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to `goog.events.BrowserEvent.MouseButton.LEFT`.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireClickSequence (target : GlobalEventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a contextmenu event on the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireContextMenuEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mousedown, contextmenu, and the mouseup on the given event
   * target, with the right mouse button.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireContextMenuSequence (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a double-click event on the given target. Always double-clicks
   * with the left mouse button since no browser supports double-clicking with
   * any other buttons.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireDoubleClickEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates the sequence of events fired by the browser when the user double-
   * clicks the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireDoubleClickSequence (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulate a focus event on the given target.
   * @param target The target for the event.
   */
  function fireFocusEvent (target : GlobalEventTarget | null ) : boolean ;
  /**
   * Simulate a focus-in event on the given target.
   * @param target The target for the event.
   */
  function fireFocusInEvent (target : GlobalEventTarget ) : boolean ;
  /**
   * Simulates a complete keystroke (keydown, keypress, and keyup). Note that
   * if preventDefault is called on the keydown, the keypress will not fire.
   * @param target The target for the event.
   * @param keyOrKeyCode The key value or keycode of the key pressed.
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireKeySequence (target : GlobalEventTarget | null , keyOrKeyCode : string | number , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a mousedown event on the given target.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to `goog.events.BrowserEvent.MouseButton.LEFT`.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireMouseDownEvent (target : GlobalEventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a mouseenter event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved out of).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseEnterEvent (target : GlobalEventTarget , relatedTarget : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
  /**
   * Simulates a mouseleave event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved into).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseLeaveEvent (target : GlobalEventTarget , relatedTarget : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate ) : boolean ;
  /**
   * Simulates a mousemove event on the given target.
   * @param target The target for the event.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseMoveEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseout event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved into).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseOutEvent (target : GlobalEventTarget | null , relatedTarget : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseover event on the given target.
   * @param target The target for the event.
   * @param relatedTarget The related target for the event (e.g., the node that the mouse is being moved out of).
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   */
  function fireMouseOverEvent (target : GlobalEventTarget | null , relatedTarget : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
  /**
   * Simulates a mouseup event on the given target.
   * @param target The target for the event.
   * @param opt_button Mouse button; defaults to `goog.events.BrowserEvent.MouseButton.LEFT`.
   * @param opt_coords Mouse position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireMouseUpEvent (target : GlobalEventTarget | null , opt_button ? : ಠ_ಠ.clutz.goog.events.BrowserEvent.MouseButton | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a complete keystroke (keydown, keypress, and keyup) when typing
   * a non-ASCII character. Same as fireKeySequence, the keypress will not fire
   * if preventDefault is called on the keydown.
   * @param target The target for the event.
   * @param keyOrKeyCode The key value or keycode of the keydown and keyup events.
   * @param keyPressKeyOrKeyCode The key value or keycode of the keypress event.
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireNonAsciiKeySequence (target : GlobalEventTarget | null , keyOrKeyCode : string | number , keyPressKeyOrKeyCode : string | number , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a popstate event on the given target.
   * @param target The target for the event.
   * @param state History state object.
   */
  function firePopStateEvent (target : GlobalEventTarget | null , state : GlobalObject | null ) : boolean ;
  /**
   * Simulates a touchend event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchEndEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a touchmove event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchMoveEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a simple touch sequence on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchSequence (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Simulates a touchstart event on the given target.
   * @param target The target for the event.
   * @param opt_coords Touch position. Defaults to event's target's position (if available), otherwise (0, 0).
   * @param opt_eventProperties Event properties to be mixed into the BrowserEvent.
   */
  function fireTouchStartEvent (target : GlobalEventTarget | null , opt_coords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_eventProperties ? : GlobalObject | null ) : boolean ;
  /**
   * Mixins a listenable into the given object. This turns the object
   * into a goog.events.Listenable. This is useful, for example, when
   * you need to mock a implementation of listenable and still want it
   * to work with goog.events.
   * @param obj The object to mixin into.
   */
  function mixinListenable (obj : GlobalObject ) : void ;
}
declare module 'goog:goog.testing.events' {
  import events = ಠ_ಠ.clutz.goog.testing.events;
  export = events;
}
// Generated from testing/events/events.js
declare namespace ಠ_ಠ.clutz.goog.testing.events {
  /**
   * goog.events.BrowserEvent expects an Event so we provide one for JSCompiler.
   *
   * This clones a lot of the functionality of goog.events.Event. This used to
   * use a mixin, but the mixin results in confusing the two types when compiled.
   */
  class Event extends GlobalEvent {
    private noStructuralTyping_goog_testing_events_Event : any;
    /**
     * goog.events.BrowserEvent expects an Event so we provide one for JSCompiler.
     *
     * This clones a lot of the functionality of goog.events.Event. This used to
     * use a mixin, but the mixin results in confusing the two types when compiled.
     * @param type Event Type.
     * @param opt_target Reference to the object that is the target of this event.
     */
    constructor (type : string , opt_target ? : GlobalObject | null ) ;
    currentTarget : GlobalEventTarget | null ;
    defaultPrevented : boolean ;
    target : GlobalEventTarget | null ;
    type : string ;
    preventDefault ( ) : void ;
    /**
     * Whether to cancel the event in internal capture/bubble processing for IE.
     */
    propagationStopped_ : boolean ;
    /**
     * Return value for in internal capture/bubble processing for IE.
     */
    returnValue_ : boolean ;
    stopPropagation ( ) : void ;
  }
}
declare module 'goog:goog.testing.events.Event' {
  import Event = ಠ_ಠ.clutz.goog.testing.events.Event;
  export default Event;
}
