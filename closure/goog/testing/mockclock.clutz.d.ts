//!! generated by clutz.
// Generated from testing/mockclock.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Class for unit testing code that uses setTimeout and clearTimeout.
   *
   * NOTE: If you are using MockClock to test code that makes use of
   * goog.fx.Animation, then you must either:
   *
   * 1. Install and dispose of the MockClock in setUpPage() and tearDownPage()
   * respectively (rather than setUp()/tearDown()).
   *
   * or
   *
   * 2. Ensure that every test clears the animation queue by calling
   * mockClock.tick(x) at the end of each test function (where `x` is large
   * enough to complete all animations).
   *
   * Otherwise, if any animation is left pending at the time that
   * MockClock.dispose() is called, that will permanently prevent any future
   * animations from playing on the page.
   */
  class MockClock extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_testing_MockClock : any;
    /**
     * Class for unit testing code that uses setTimeout and clearTimeout.
     *
     * NOTE: If you are using MockClock to test code that makes use of
     * goog.fx.Animation, then you must either:
     *
     * 1. Install and dispose of the MockClock in setUpPage() and tearDownPage()
     * respectively (rather than setUp()/tearDown()).
     *
     * or
     *
     * 2. Ensure that every test clears the animation queue by calling
     * mockClock.tick(x) at the end of each test function (where `x` is large
     * enough to complete all animations).
     *
     * Otherwise, if any animation is left pending at the time that
     * MockClock.dispose() is called, that will permanently prevent any future
     * animations from playing on the page.
     * @param opt_autoInstall Install the MockClock at construction time.
     */
    constructor (opt_autoInstall ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Instantly adjusts the clock's current time to a new timestamp. Unlike tick(),
     * this method skips over the intervening time, so that `setInterval()` calls or
     * recurring `setTimeout()`s will only run once.
     *
     * This mimics the behavior of setting the system clock, rather than waiting for
     * time to pass.
     *
     * CAUTION: This is an advanced feature.  Use this method to set the clock to be
     * a specific date, which is much faster than calling tick() with a large value.
     * This lets you test code against arbitrary dates.
     *
     * MOE:begin_strip
     * See go/mockclock-time-travel for how & why to use this method.
     * MOE:end_strip
     * @param newDate The new timestamp to set the clock to.
     */
    doTimeWarpAsync (newDate : GlobalDate ) : Promise < any > ;
    getCallbacksTriggered ( ) : number ;
    getCurrentTime ( ) : number ;
    getTimeoutDelay ( ) : number ;
    getTimeoutsMade ( ) : number ;
    install ( ) : void ;
    /**
     * Whether the MockClock is configured to run synchronously.
     *
     * This allows MockClock consumers to decide whether to tick synchronously or
     * asynchronously.
     */
    isSynchronous ( ) : boolean ;
    isTimeoutSet (timeoutKey : number ) : boolean ;
    /**
     * Resets the MockClock, removing all timeouts that are scheduled and resets
     * the fake timer count.
     * @param retainAsyncQueue By default, a synchronous MockClock will clear any pending async work when reset. This can leave goog.Promises in a state where callbacks can never be executed. Set this flag to restore original scheduling behavior and retain the async queue. This argument is ignored for an async-only MockClock.
     */
    reset (retainAsyncQueue ? : boolean ) : void ;
    /**
     * Sets the amount of time between when a timeout is scheduled to fire and when
     * it actually fires.
     * @param delay The delay in milliseconds.  May be negative.
     */
    setTimeoutDelay (delay : number ) : void ;
    /**
     * Increments the MockClock's time by a given number of milliseconds, running
     * any functions that are now overdue.
     * @param opt_millis Number of milliseconds to increment the counter. If not specified, clock ticks 1 millisecond.
     */
    tick (opt_millis ? : number ) : number ;
    /**
     * Increments the MockClock's time by a given number of milliseconds, running
     * any functions that are now overdue.
     * @param millis Number of milliseconds to increment the counter. If not specified, clock ticks 1 millisecond.
     */
    tickAsync (millis ? : number ) : Promise < number > ;
    /**
     * Asynchronously increments the MockClock's time by a given number of
     * milliseconds, returning the settled promise value.
     * @param millis Number of milliseconds to increment the counter.
     * @param promise A promise that should be resolved after the mockClock is ticked for the given opt_millis.
     */
    tickAsyncMustSettlePromise < T = any > (millis : number , promise : ಠ_ಠ.clutz.goog.Thenable < T > ) : Promise < T > ;
    /**
     * Takes a promise and then ticks the mock clock. If the promise successfully
     * resolves, returns the value produced by the promise. If the promise is
     * rejected, it throws the rejection as an exception. If the promise is not
     * resolved at all, throws an exception.
     * Also ticks the general clock by the specified amount.
     * Only works with goog.Thenable, hence goog.Promise. Does NOT work with native
     * browser promises.
     * @param promise A promise that should be resolved after the mockClock is ticked for the given opt_millis.
     * @param opt_millis Number of milliseconds to increment the counter. If not specified, clock ticks 1 millisecond.
     */
    tickPromise < T = any > (promise : ಠ_ಠ.clutz.goog.Thenable < T > , opt_millis ? : number ) : T ;
    /**
     * Removes the MockClock's hooks into the global object's functions and revert
     * to their original values.
     * @param resetScheduler By default, a synchronous MockClock will not restore default goog.async behavior upon uninstallation and clear any pending async work. This can leave goog.Promises in a state where callbacks can never be executed. Set this flag to restore original scheduling behavior and retain the async queue. This argument is ignored for an async-only MockClock.
     */
    uninstall (resetScheduler ? : boolean ) : void ;
    /**
     * Unmocks the Date.now() function for tests that aren't expecting it to be
     * mocked. See b/141619890.
     */
    unmockDateNow ( ) : void ;
    /**
     * Default wait timeout for mocking requestAnimationFrame (in milliseconds).
     */
    static REQUEST_ANIMATION_FRAME_TIMEOUT : number ;
    /**
     * Creates an async-only MockClock that can only be ticked asynchronously.
     *
     * Async-only MockClocks rely on native Promise resolution instead of
     * patching async run behavior to force GoogPromise to resolve synchronously.
     * As a result, async MockClocks must be ticked with tickAsync() instead of
     * tick().
     *
     * Async-only MockClocks will always use the default async scheduler and will
     * never reset the async queue when uninstalled.
     */
    static createAsyncMockClock ( ) : ಠ_ಠ.clutz.goog.testing.MockClock ;
    /**
     * ID to use for next timeout.  Timeout IDs must never be reused, even across
     * MockClock instances.
     */
    static nextId : number ;
  }
}
declare module 'goog:goog.testing.MockClock' {
  import MockClock = ಠ_ಠ.clutz.goog.testing.MockClock;
  export default MockClock;
}
