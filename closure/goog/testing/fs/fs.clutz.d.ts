//!! generated by clutz.
// Generated from testing/fs/fs.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs {
  /**
   * Create a fake object URL for a given fake blob. This can be used as a real
   * URL, and it can be created and revoked normally.
   * @param blob The blob for which to create the URL.
   */
  function createObjectUrl (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob ) : string ;
  /**
   * Concatenates one or more values together and converts them to a fake blob.
   * @param var_args The values that will make up the resulting blob.
   */
  function getBlob ( ...var_args : ( string | ಠ_ಠ.clutz.goog.testing.fs.Blob ) [] ) : ಠ_ಠ.clutz.goog.testing.fs.Blob ;
  /**
   * Creates a blob with the given properties.
   * See https://developer.mozilla.org/en-US/docs/Web/API/Blob for more details.
   * @param parts The values that will make up the resulting blob.
   * @param opt_type The MIME type of the Blob.
   * @param opt_endings Specifies how strings containing newlines are to be written out.
   */
  function getBlobWithProperties (parts : ( string | ಠ_ಠ.clutz.goog.testing.fs.Blob ) [] | null , opt_type ? : string , opt_endings ? : string ) : ಠ_ಠ.clutz.goog.testing.fs.Blob ;
  /**
   * Get a filesystem object. Since these are mocks, there's no difference between
   * temporary and persistent filesystems.
   * @param size Ignored.
   */
  function getPersistent (size : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  /**
   * Get a filesystem object. Since these are mocks, there's no difference between
   * temporary and persistent filesystems.
   * @param size Ignored.
   */
  function getTemporary (size : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  /**
   * Installs goog.testing.fs in place of the standard goog.fs. After calling
   * this, code that uses goog.fs should work without issue using goog.testing.fs.
   * @param stubs The property replacer for stubbing out the original goog.fs functions.
   */
  function install (stubs : ಠ_ಠ.clutz.goog.testing.PropertyReplacer ) : void ;
  /**
   * Return whether or not a URL has been granted for the given blob.
   * @param blob The blob to check.
   */
  function isObjectUrlGranted (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob ) : boolean ;
  /**
   * Remove a URL that was created for a fake blob.
   * @param url The URL to revoke.
   */
  function revokeObjectUrl (url : string ) : void ;
  /**
   * Slices the blob. The returned blob contains data from the start byte
   * (inclusive) till the end byte (exclusive). Negative indices can be used
   * to count bytes from the end of the blob (-1 == blob.size - 1). Indices
   * are always clamped to blob range. If end is omitted, all the data till
   * the end of the blob is taken.
   * @param testBlob The blob to slice.
   * @param start Index of the starting byte.
   * @param opt_end Index of the ending byte.
   */
  function sliceBlob (testBlob : ಠ_ಠ.clutz.goog.testing.fs.Blob , start : number , opt_end ? : number ) : ಠ_ಠ.clutz.goog.testing.fs.Blob ;
}
declare module 'goog:goog.testing.fs' {
  import fs = ಠ_ಠ.clutz.goog.testing.fs;
  export = fs;
}
