//!! generated by clutz.
// Generated from testing/fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs {
  /**
   * A mock directory entry object.
   */
  class DirectoryEntry extends ಠ_ಠ.clutz.goog.testing.fs.Entry implements ಠ_ಠ.clutz.goog.fs.DirectoryEntry {
    private noStructuralTyping_goog_testing_fs_DirectoryEntry : any;
    /**
     * A mock directory entry object.
     * @param fs The filesystem containing this entry.
     * @param parent The directory entry directly containing this entry. If this is null, that means this is the root directory and so is its own parent.
     * @param name The name of this entry.
     * @param children The map of child names to entry objects.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.testing.fs.FileSystem , parent : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry | null , name : string , children : { [ /* warning: coerced from ? */ key: string ]: ಠ_ಠ.clutz.goog.testing.fs.Entry } ) ;
    /**
     * The map of child names to entry objects.
     */
    children : { [ /* warning: coerced from ? */ key: string ]: ಠ_ಠ.clutz.goog.testing.fs.Entry } ;
    clone ( ) : ಠ_ಠ.clutz.goog.testing.fs.Entry ;
    /**
     * Creates a directory synchronously. This is a shorthand for getFileSync,
     * useful for setting up tests.
     * @param path The path to the directory, relative to this directory.
     */
    createDirectorySync (path : string ) : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry ;
    /**
     * Creates a file synchronously. This is a shorthand for getFileSync, useful for
     * setting up tests.
     * @param path The path to the file, relative to this directory.
     */
    createFileSync (path : string ) : ಠ_ಠ.clutz.goog.testing.fs.FileEntry ;
    createPath ( ...a : any [] ) : any ;
    getDirectory (path ? : any , opt_behavior ? : any ) : any ;
    /**
     * Get a directory synchronously, without waiting for a Deferred to resolve.
     * @param path The path to the directory, relative to this one.
     * @param opt_behavior The behavior for loading the directory.
     */
    getDirectorySync (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior | null ) : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry ;
    getFile (path ? : any , opt_behavior ? : any ) : any ;
    /**
     * Get a file entry synchronously, without waiting for a Deferred to resolve.
     * @param path The path to the file, relative to this directory.
     * @param opt_behavior The behavior for loading the file.
     * @param opt_data The string data encapsulated by the blob.
     * @param opt_type The mime type of the blob.
     */
    getFileSync (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior | null , opt_data ? : string , opt_type ? : string ) : ಠ_ಠ.clutz.goog.testing.fs.FileEntry ;
    getLastModified ( ) : any ;
    getMetadata ( ) : any ;
    /**
     * Returns whether this directory has a child with the given name.
     * @param name The name of the entry to check for.
     */
    hasChild (name : string ) : boolean ;
    isDirectory ( ) : any ;
    isFile ( ) : any ;
    listDirectory ( ) : any ;
    remove ( ) : any ;
    removeRecursively ( ) : any ;
  }
}
declare module 'goog:goog.testing.fs.DirectoryEntry' {
  import DirectoryEntry = ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry;
  export default DirectoryEntry;
}
// Generated from testing/fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs {
  /**
   * A mock filesystem entry object.
   */
  class Entry implements ಠ_ಠ.clutz.goog.fs.Entry {
    private noStructuralTyping_goog_testing_fs_Entry : any;
    /**
     * A mock filesystem entry object.
     * @param fs The filesystem containing this entry.
     * @param parent The directory entry directly containing this entry.
     * @param name The name of this entry.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.testing.fs.FileSystem , parent : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry , name : string ) ;
    /**
     * The parent of this entry.
     */
    parent : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry ;
    /**
     * Return a deferred that will call its errback if this entry has been deleted.
     * In addition, the deferred will only run after a timeout of 0, and all its
     * callbacks will run with the entry as "this".
     * @param action The name of the action being performed. For error reporting.
     */
    protected checkNotDeleted (action : string ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    clone ( ) : ಠ_ಠ.clutz.goog.testing.fs.Entry ;
    copyTo (parent ? : any , opt_newName ? : any ) : any ;
    /**
     * Whether or not this entry has been deleted.
     */
    deleted : boolean ;
    getFileSystem ( ) : ಠ_ಠ.clutz.goog.testing.fs.FileSystem ;
    getFullPath ( ) : any ;
    getLastModified ( ...a : any [] ) : any ;
    getMetadata ( ...a : any [] ) : any ;
    getName ( ) : any ;
    getParent ( ) : any ;
    isDirectory ( ...a : any [] ) : any ;
    isFile ( ...a : any [] ) : any ;
    moveTo (parent ? : any , opt_newName ? : any ) : any ;
    remove ( ) : any ;
    toUri (opt_mimetype ? : any ) : any ;
    toUrl (opt_mimetype ? : any ) : any ;
    wrapEntry ( ...a : any [] ) : any ;
  }
}
declare module 'goog:goog.testing.fs.Entry' {
  import Entry = ಠ_ಠ.clutz.goog.testing.fs.Entry;
  export default Entry;
}
// Generated from testing/fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs {
  /**
   * A mock file entry object.
   */
  class FileEntry extends ಠ_ಠ.clutz.goog.testing.fs.Entry implements ಠ_ಠ.clutz.goog.fs.FileEntry {
    private noStructuralTyping_goog_testing_fs_FileEntry : any;
    /**
     * A mock file entry object.
     * @param fs The filesystem containing this entry.
     * @param parent The directory entry directly containing this entry.
     * @param name The name of this entry.
     * @param data The data initially contained in the file.
     * @param opt_type The mime type of the blob.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.testing.fs.FileSystem , parent : ಠ_ಠ.clutz.goog.testing.fs.DirectoryEntry , name : string , data : string , opt_type ? : string ) ;
    clone ( ) : ಠ_ಠ.clutz.goog.testing.fs.Entry ;
    createWriter ( ) : any ;
    file ( ) : any ;
    /**
     * Get the internal file representation synchronously, without waiting for a
     * Deferred to resolve.
     */
    fileSync ( ) : ಠ_ಠ.clutz.goog.testing.fs.File ;
    getLastModified ( ) : any ;
    getMetadata ( ) : any ;
    isDirectory ( ) : any ;
    isFile ( ) : any ;
  }
}
declare module 'goog:goog.testing.fs.FileEntry' {
  import FileEntry = ಠ_ಠ.clutz.goog.testing.fs.FileEntry;
  export default FileEntry;
}
