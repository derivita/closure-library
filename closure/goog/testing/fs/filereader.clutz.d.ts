//!! generated by clutz.
// Generated from testing/fs/filereader.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs {
  /**
   * A mock FileReader object. This emits the same events as
   * {@link goog.fs.FileReader}.
   */
  class FileReader extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_testing_fs_FileReader : any;
    /**
     * A mock FileReader object. This emits the same events as
     * {@link goog.fs.FileReader}.
     */
    constructor ( ) ;
    abort ( ) : void ;
    getError ( ) : ಠ_ಠ.clutz.goog.fs.Error | null ;
    getReadyState ( ) : ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState | null ;
    getResult ( ) : any ;
    readAsArrayBuffer (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob ) : void ;
    readAsBinaryString (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob ) : void ;
    readAsDataUrl (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob ) : void ;
    readAsText (blob : ಠ_ಠ.clutz.goog.testing.fs.Blob , opt_encoding ? : string ) : void ;
  }
}
// Generated from testing/fs/filereader.js
declare namespace ಠ_ಠ.clutz.goog.testing.fs.FileReader {
  /**
   * The possible return types.
   */
  enum ReturnType {
    ARRAY_BUFFER = 3.0 ,
    BINARY_STRING = 2.0 ,
    DATA_URL = 4.0 ,
    TEXT = 1.0 ,
  }
}
declare module 'goog:goog.testing.fs.FileReader' {
  import FileReader = ಠ_ಠ.clutz.goog.testing.fs.FileReader;
  export default FileReader;
}
