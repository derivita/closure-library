//!! generated by clutz.
// Generated from testing/mockclassfactory.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A factory used to create new mock class instances.  It is able to generate
   * both static and loose mocks.  The MockClassFactory is a singleton since it
   * tracks the classes that have been mocked internally.
   */
  class MockClassFactory {
    private noStructuralTyping_goog_testing_MockClassFactory : any;
    /**
     * Gets a loose mock for a given class.
     * @param namespace A javascript namespace (e.g. goog.testing).
     * @param classToMock The class that will be mocked.
     * @param var_args The arguments associated with this instance's constructor.
     */
    getLooseMockClass (namespace : GlobalObject | null , classToMock : Function | null ,  ...var_args : any [] ) : ಠ_ಠ.clutz.goog.testing.LooseMock | null ;
    /**
     * Gets a loose mock for the static functions of a given class.
     * @param namespace A javascript namespace (e.g. goog.testing).
     * @param classToMock The class whose static functions will be mocked.  This should be the original class and not the proxy.
     */
    getLooseStaticMock (namespace : GlobalObject | null , classToMock : Function | null ) : ಠ_ಠ.clutz.goog.testing.LooseMock | null ;
    /**
     * Gets a strict mock for a given class.
     * @param namespace A javascript namespace (e.g. goog.testing).
     * @param classToMock The class that will be mocked.
     * @param var_args The arguments associated with this instance's constructor.
     */
    getStrictMockClass (namespace : GlobalObject | null , classToMock : Function | null ,  ...var_args : any [] ) : ಠ_ಠ.clutz.goog.testing.StrictMock ;
    /**
     * Gets a strict mock for the static functions of a given class.
     * @param namespace A javascript namespace (e.g. goog.testing).
     * @param classToMock The class whose static functions will be mocked.  This should be the original class and not the proxy.
     */
    getStrictStaticMock (namespace : GlobalObject | null , classToMock : Function | null ) : ಠ_ಠ.clutz.goog.testing.StrictMock | null ;
    reset ( ) : void ;
  }
}
declare module 'goog:goog.testing.MockClassFactory' {
  import MockClassFactory = ಠ_ಠ.clutz.goog.testing.MockClassFactory;
  export default MockClassFactory;
}
// Generated from testing/mockclassfactory.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A record that represents all the data associated with a mock replacement of
   * a given class.
   */
  class MockClassRecord {
    private noStructuralTyping_goog_testing_MockClassRecord : any;
    /**
     * A record that represents all the data associated with a mock replacement of
     * a given class.
     * @param namespace The namespace in which the mocked class resides.
     * @param className The name of the class within the namespace.
     * @param originalClass The original class implementation before it was replaced by a proxy.
     * @param proxy The proxy that replaced the original class.
     */
    constructor (namespace : GlobalObject | null , className : string , originalClass : Function | null , proxy : Function | null ) ;
    /**
     * Adds a new mock instance mapping.  The mapping connects a set of function
     * arguments to a specific mock instance.
     * @param args An array of function arguments.
     * @param mock A mock associated with the supplied arguments.
     */
    addMockInstance (args : any [] | null , mock : ಠ_ಠ.clutz.goog.testing.StrictMock | null | ಠ_ಠ.clutz.goog.testing.LooseMock ) : void ;
    /**
     * Finds the mock corresponding to a given argument set.  Throws an error if
     * there is no appropriate match found.
     * @param args An array of function arguments.
     */
    findMockInstance (args : any [] | null ) : ಠ_ಠ.clutz.goog.testing.StrictMock | null | ಠ_ಠ.clutz.goog.testing.LooseMock ;
    /**
     * A getter for this record's class name.
     */
    getClassName ( ) : string ;
    /**
     * A getter for this record's namespace.
     */
    getNamespace ( ) : GlobalObject | null ;
    /**
     * A getter for the original class.
     */
    getOriginalClass ( ) : Function | null ;
    /**
     * A getter for the proxy being used as a replacement for the original class.
     */
    getProxy ( ) : Function | null ;
    /**
     * A getter for the static mock.
     */
    getStaticMock ( ) : ಠ_ಠ.clutz.goog.testing.StrictMock | null | ಠ_ಠ.clutz.goog.testing.LooseMock ;
    reset ( ) : void ;
    /**
     * A setter for the static mock.
     * @param staticMock A mock to associate with the static functions for the referenced class.
     */
    setStaticMock (staticMock : ಠ_ಠ.clutz.goog.testing.StrictMock | null | ಠ_ಠ.clutz.goog.testing.LooseMock ) : void ;
  }
}
declare module 'goog:goog.testing.MockClassRecord' {
  import MockClassRecord = ಠ_ಠ.clutz.goog.testing.MockClassRecord;
  export default MockClassRecord;
}
