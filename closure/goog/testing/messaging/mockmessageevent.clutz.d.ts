//!! generated by clutz.
// Generated from testing/messaging/mockmessageevent.js
declare namespace ಠ_ಠ.clutz.goog.testing.messaging {
  /**
   * Creates a new fake MessageEvent.
   */
  class MockMessageEvent extends ಠ_ಠ.clutz.goog.testing.events.Event {
    private noStructuralTyping_goog_testing_messaging_MockMessageEvent : any;
    /**
     * Creates a new fake MessageEvent.
     * @param data The data of the message.
     * @param opt_origin The origin of the message, for server-sent and cross-document events.
     * @param opt_lastEventId The last event ID, for server-sent events.
     * @param opt_source The proxy for the source window, for cross-document events.
     * @param opt_ports The Array of ports sent with the message, for cross-document and channel events.
     */
    constructor (data : any , opt_origin ? : string , opt_lastEventId ? : string , opt_source ? : Window | null , opt_ports ? : ( MessagePort | null ) [] | null ) ;
    /**
     * The data of the message.
     */
    data : any ;
    /**
     * The last event ID, for server-sent events.
     */
    lastEventId : string | null ;
    /**
     * The origin of the message, for server-sent and cross-document events.
     */
    origin : string | null ;
    /**
     * The Array of ports sent with the message, for cross-document and channel
     * events.
     */
    ports : MessagePort [] | null ;
    /**
     * The proxy for the source window, for cross-document events.
     */
    source : Window | null ;
    /**
     * Wraps a new fake MessageEvent in a BrowserEvent, like how a real MessageEvent
     * would be wrapped.
     * @param data The data of the message.
     * @param opt_origin The origin of the message, for server-sent and cross-document events.
     * @param opt_lastEventId The last event ID, for server-sent events.
     * @param opt_source The proxy for the source window, for cross-document events.
     * @param opt_ports The Array of ports sent with the message, for cross-document and channel events.
     */
    static wrap (data : any , opt_origin ? : string , opt_lastEventId ? : string , opt_source ? : Window | null , opt_ports ? : ( MessagePort | null ) [] | null ) : ಠ_ಠ.clutz.goog.events.BrowserEvent ;
  }
}
declare module 'goog:goog.testing.messaging.MockMessageEvent' {
  import MockMessageEvent = ಠ_ಠ.clutz.goog.testing.messaging.MockMessageEvent;
  export default MockMessageEvent;
}
