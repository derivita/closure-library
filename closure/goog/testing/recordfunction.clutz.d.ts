//!! generated by clutz.
// Generated from testing/recordfunction.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Struct for a single function call.
   */
  class FunctionCall {
    private noStructuralTyping_goog_testing_FunctionCall : any;
    /**
     * Struct for a single function call.
     * @param func The called function.
     * @param thisContext `this` context of called function.
     * @param args Arguments of the called function.
     * @param ret Return value of the function or undefined in case of error.
     * @param error The error thrown by the function or null if none.
     */
    constructor (func : Function , thisContext : GlobalObject , args : IArguments , ret : any , error : any ) ;
    arguments_ : any ;
    error_ : any ;
    function_ ( ...a : any [] ) : any ;
    returnValue_ : any ;
    thisContext_ : GlobalObject ;
    /**
     * Returns the nth argument of the called function.
     * @param index 0-based index of the argument.
     */
    getArgument (index : number ) : any ;
    getArguments ( ) : any [] ;
    getError ( ) : any ;
    getFunction ( ) : Function ;
    getReturnValue ( ) : any ;
    getThis ( ) : GlobalObject ;
  }
}
declare module 'goog:goog.testing.FunctionCall' {
  import FunctionCall = ಠ_ಠ.clutz.goog.testing.FunctionCall;
  export default FunctionCall;
}
// Generated from testing/recordfunction.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Same as {@link goog.testing.recordFunction} but the recorded function will
   * have the same prototype and static fields as the original one. It can be
   * used with constructors.
   * @param ctor The function to wrap and record.
   */
  function recordConstructor (ctor : Function ) : Function ;
}
declare module 'goog:goog.testing.recordConstructor' {
  import recordConstructor = ಠ_ಠ.clutz.goog.testing.recordConstructor;
  export default recordConstructor;
}
// Generated from testing/recordfunction.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Wraps the function into another one which calls the inner function and
   * records its calls. The recorded function will have 3 static methods:
   * `getCallCount`, `getCalls` and `getLastCall` but won't
   * inherit the original function's prototype and static fields.
   * @param opt_f The function to wrap and record. Defaults to goog.functions.UNDEFINED.
   */
  function recordFunction (opt_f ? : Function ) : ಠ_ಠ.clutz.goog.testing.recordFunction.Type ;
}
// Generated from testing/recordfunction.js
declare namespace ಠ_ಠ.clutz.goog.testing.recordFunction {
  type Type = ( ...var_args : any [] ) => any ;
}
declare module 'goog:goog.testing.recordFunction' {
  import recordFunction = ಠ_ಠ.clutz.goog.testing.recordFunction;
  export default recordFunction;
}
