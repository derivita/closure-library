//!! generated by clutz.
// Generated from testing/deferredtestcase.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A test case that can asynchronously wait on a Deferred object.
   */
  class DeferredTestCase extends ಠ_ಠ.clutz.goog.testing.AsyncTestCase {
    private noStructuralTyping_goog_testing_DeferredTestCase : any;
    /**
     * A test case that can asynchronously wait on a Deferred object.
     * @param opt_name A descriptive name for the test case.
     */
    constructor (opt_name ? : string ) ;
    /**
     * Adds a callback to update the wait message of this async test case. Using
     * this method generously also helps to document the test flow.
     * @param msg The update wait status message.
     * @param d The deferred object to add the waitForAsync callback to.
     */
    addWaitForAsync (msg : string , d : ಠ_ಠ.clutz.goog.async.Deferred | null ) : void ;
    /**
     * Handler for when the test produces an error.
     * @param err The error object.
     */
    protected onError (err : GlobalError | null | string ) : void ;
    /**
     * Handler for when the test succeeds.
     */
    protected onSuccess ( ) : void ;
    /**
     * Wires up given Deferred object to the test case, then starts the
     * goog.async.Deferred object's callback.
     * @param a The wait status message or the deferred object to wait for.
     * @param opt_b The deferred object to wait for.
     */
    waitForDeferred (a : string | ಠ_ಠ.clutz.goog.async.Deferred , opt_b ? : ಠ_ಠ.clutz.goog.async.Deferred | null ) : void ;
    /**
     * Preferred way of creating a DeferredTestCase. Creates one and initializes it
     * with the G_testRunner.
     * @param opt_name A descriptive name for the test case.
     */
    static createAndInstall (opt_name ? : string ) : ಠ_ಠ.clutz.goog.testing.DeferredTestCase ;
  }
}
declare module 'goog:goog.testing.DeferredTestCase' {
  import DeferredTestCase = ಠ_ಠ.clutz.goog.testing.DeferredTestCase;
  export default DeferredTestCase;
}
