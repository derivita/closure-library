//!! generated by clutz.
// Generated from testing/editor/testhelper.js
declare namespace ಠ_ಠ.clutz.goog.testing.editor {
  /**
   * Create a new test controller.
   */
  class TestHelper extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_testing_editor_TestHelper : any;
    /**
     * Create a new test controller.
     * @param root The root editable element.
     */
    constructor (root : GlobalElement | null ) ;
    /**
     * Assert that the html in 'root' is substantially similar to htmlPattern.
     * This method tests for the same set of styles, and for the same order of
     * nodes.  Breaking whitespace nodes are ignored.  Elements can be annotated
     * with classnames corresponding to keys in goog.userAgent and will be
     * expected to show up in that user agent and expected not to show up in
     * others.
     * @param htmlPattern The pattern to match.
     */
    assertHtmlMatches (htmlPattern : string ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Finds the first text node descendant of root with the given content.
     * @param textOrRegexp The text to find, or a regular expression to find a match of.
     */
    findTextNode (textOrRegexp : string | RegExp | null ) : Node | null ;
    /**
     * Select from the given `fromOffset` in the given `from` node to
     * the given `toOffset` in the optionally given `to` node. If nodes
     * are passed in, uses them, otherwise uses findTextNode to find the nodes to
     * select. Selects a caret if opt_to and opt_toOffset are not given.
     * @param from Node or text of the node to start the selection at.
     * @param fromOffset Offset within the above node to start the selection at.
     * @param opt_to Node or text of the node to end the selection at.
     * @param opt_toOffset Offset within the above node to end the selection at.
     */
    select (from : Node | null | string , fromOffset : number , opt_to ? : Node | null | string , opt_toOffset ? : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
    /**
     * Selects a new root element.
     * @param root The root editable element.
     */
    setRoot (root : GlobalElement | null ) : void ;
    setUpEditableElement ( ) : void ;
    tearDownEditableElement ( ) : void ;
  }
}
declare module 'goog:goog.testing.editor.TestHelper' {
  import TestHelper = ಠ_ಠ.clutz.goog.testing.editor.TestHelper;
  export default TestHelper;
}
