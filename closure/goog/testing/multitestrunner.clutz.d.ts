//!! generated by clutz.
// Generated from testing/multitestrunner.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * A component for running multiple tests within the browser.
   */
  class MultiTestRunner extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_testing_MultiTestRunner : any;
    /**
     * A component for running multiple tests within the browser.
     * @param opt_domHelper A DOM helper.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds an array of tests to the tests that the test runner should execute.
     * @param tests Adds tests to the test runner.
     */
    addTests (tests : string [] | null ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    createDom ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns list of each frame's test results.
     */
    getAllTestResults ( ) : { [ key: string ]: ಠ_ಠ.clutz.goog.testing.TestCase.IResult [] } [] ;
    /**
     * Returns the list of all tests added to the runner.
     */
    getAllTests ( ) : string [] | null ;
    /**
     * Returns the basepath that tests added using addTests are resolved with.
     */
    getBasePath ( ) : string ;
    /**
     * Returns a list of reports for tests that have finished since last "start".
     */
    getFailureReports ( ) : string [] ;
    /**
     * Returns a filter function. Only test paths that match the filter function
     * will be executed.
     */
    getFilterFunction ( ) : (a : string ) => boolean ;
    /**
     * Returns whether the report should contain passing tests at all, makes
     * setVerbosePasses obsolete.
     */
    getHidePasses ( ) : boolean ;
    /**
     * Returns the name for the test suite.
     */
    getName ( ) : string ;
    /**
     * Returns the number of tests that can be run at the same time. This only
     * improves performance due to the amount of time spent loading the tests.
     */
    getPoolSize ( ) : number ;
    /**
     * Returns a list of tests from runner that have been marked as failed.
     */
    getTestsThatFailed ( ) : string [] ;
    /**
     * Returns the list of tests that will be run when start() is called.
     */
    getTestsToRun ( ) : string [] ;
    /**
     * Returns the number of milliseconds to wait for the page to load, initialize
     * and run the tests.
     */
    getTimeout ( ) : number ;
    /**
     * Returns whether the report should contain verbose information for tests that
     * pass.
     */
    getVerbosePasses ( ) : boolean ;
    /**
     * Logs a message to the log window.
     * @param msg A message to log.
     */
    log (msg : string ) : void ;
    /**
     * Processes a result returned from a TestFrame.  If there are tests remaining
     * it will trigger the next one to be run, otherwise if there are no tests and
     * all results have been received then it will call finish.
     * @param frame The frame that just finished.
     */
    processResult (frame : ಠ_ಠ.clutz.goog.testing.MultiTestRunner.TestFrame | null ) : void ;
    /**
     * Sets the basepath that tests added using addTests are resolved with.
     * @param path The relative basepath.
     */
    setBasePath (path : string ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets a filter function. Only test paths that match the filter function
     * will be executed.
     * @param filterFn Filters test paths.
     */
    setFilterFunction (filterFn : (a : string ) => boolean ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets whether the report should contain passing tests at all, makes
     * setVerbosePasses obsolete.
     * @param hide Whether report should not contain passing tests.
     */
    setHidePasses (hide : boolean ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets the name for the test suite.
     * @param name The suite's name.
     */
    setName (name : string ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets the number of tests that can be run at the same time. This only improves
     * performance due to the amount of time spent loading the tests.
     * @param size The number of tests to run at a time.
     */
    setPoolSize (size : number ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets the bucket sizes for the histograms.
     * @param f Bucket size for num files loaded histogram.
     * @param t Bucket size for run time histogram.
     */
    setStatsBucketSizes (f : number , t : number ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets the number of milliseconds to wait for the page to load, initialize and
     * run the tests.
     * @param timeout Time in milliseconds.
     */
    setTimeout (timeout : number ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    /**
     * Sets whether the report should contain verbose information for tests that
     * pass.
     * @param verbose Whether report should be verbose.
     */
    setVerbosePasses (verbose : boolean ) : ಠ_ಠ.clutz.goog.testing.MultiTestRunner ;
    start ( ) : void ;
    /**
     * Default maximimum amount of time to spend at each stage of the test.
     */
    static DEFAULT_TIMEOUT_MS : number ;
    /**
     * Messages corresponding to the numeric states.
     */
    static STATES : string [] | null ;
    /**
     * Event type dispatched when tests are completed.
     */
    static TESTS_FINISHED : string ;
  }
}
declare module 'goog:goog.testing.MultiTestRunner' {
  import MultiTestRunner = ಠ_ಠ.clutz.goog.testing.MultiTestRunner;
  export default MultiTestRunner;
}
// Generated from testing/multitestrunner.js
declare namespace ಠ_ಠ.clutz.goog.testing.MultiTestRunner {
  /**
   * Class used to manage the interaction with a single iframe.
   */
  class TestFrame extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_testing_MultiTestRunner_TestFrame : any;
    /**
     * Class used to manage the interaction with a single iframe.
     * @param basePath The base path for tests.
     * @param timeoutMs The time to wait for the test to load and run.
     * @param verbosePasses Whether to show results for passes.
     * @param opt_domHelper Optional dom helper.
     */
    constructor (basePath : string , timeoutMs : number , verbosePasses : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    disposeInternal ( ) : void ;
    getReport ( ) : string ;
    getStats ( ) : { numFilesLoaded : number , runTime : number , success : boolean | null , testFile : string , totalTime : number } ;
    getTestFile ( ) : string ;
    getTestResults ( ) : { [ key: string ]: ಠ_ಠ.clutz.goog.testing.TestCase.IResult [] } ;
    isSuccess ( ) : boolean | null ;
    /**
     * Runs a test file in this test frame.
     * @param testFile The test to run.
     */
    runTest (testFile : string ) : void ;
  }
}
declare module 'goog:goog.testing.MultiTestRunner.TestFrame' {
  import TestFrame = ಠ_ಠ.clutz.goog.testing.MultiTestRunner.TestFrame;
  export default TestFrame;
}
