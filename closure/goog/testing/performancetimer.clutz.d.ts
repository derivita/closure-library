//!! generated by clutz.
// Generated from testing/performancetimer.js
declare namespace ಠ_ಠ.clutz.goog.testing {
  /**
   * Creates a performance timer that runs test functions a number of times to
   * generate timing samples, and provides performance statistics (minimum,
   * maximum, average, and standard deviation).
   */
  class PerformanceTimer {
    private noStructuralTyping_goog_testing_PerformanceTimer : any;
    /**
     * Creates a performance timer that runs test functions a number of times to
     * generate timing samples, and provides performance statistics (minimum,
     * maximum, average, and standard deviation).
     * @param opt_numSamples Number of times to run the test function; defaults to 10.
     * @param opt_timeoutInterval Number of milliseconds after which the test is to be aborted; defaults to 5 seconds (5,000ms).
     */
    constructor (opt_numSamples ? : number , opt_timeoutInterval ? : number ) ;
    getNumSamples ( ) : number ;
    getTimeoutInterval ( ) : number ;
    isDiscardOutliers ( ) : boolean ;
    /**
     * Executes the test function the required number of times (or until the
     * test run exceeds the timeout interval, whichever comes first).  Returns
     * an object containing the following:
     * <pre>
     * {
     * 'average': average execution time (ms)
     * 'count': number of executions (may be fewer than expected due to timeout)
     * 'maximum': longest execution time (ms)
     * 'minimum': shortest execution time (ms)
     * 'standardDeviation': sample standard deviation (ms)
     * 'total': total execution time (ms)
     * }
     * </pre>
     * @param testFn Test function whose performance is to be measured.
     */
    run (testFn : Function | null ) : GlobalObject ;
    /**
     * Executes the test function of the specified task asynchronously. The test
     * function may return a Thenable to allow for asynchronous execution. In
     * addition, if specified, the setUp and tearDown functions of the task are
     * invoked before and after each invocation of the test function. Note,
     * setUp/tearDown too may return Thenables for asynchronous execution.
     * @param task A task describing the test function to invoke.
     */
    runAsyncTask (task : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.Task | null ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Executes the test function of the specified task as described in
     * `run`. In addition, if specified, the set up and tear down functions of
     * the task are invoked before and after each invocation of the test function.
     * @param task A task describing the test function to invoke.
     */
    runTask (task : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.Task | null ) : GlobalObject ;
    /**
     * Sets whether to ignore the smallest and the largest values when computing
     * stats.
     * @param discard Whether to discard outlier values.
     */
    setDiscardOutliers (discard : boolean ) : void ;
    /**
     * Sets the number of times the test function will be run.
     * @param numSamples Number of times to run the test function.
     */
    setNumSamples (numSamples : number ) : void ;
    /**
     * Sets the number of milliseconds after which the test times out.
     * @param timeoutInterval Timeout interval in ms.
     */
    setTimeoutInterval (timeoutInterval : number ) : void ;
    /**
     * Creates a performance timer results object by analyzing a given array of
     * sample timings.
     * @param samples The samples to analyze.
     */
    static createResults (samples : number [] ) : GlobalObject ;
    /**
     * Return the median of the samples.
     */
    static median (samples : number [] ) : number ;
  }
}
// Generated from testing/performancetimer.js
declare namespace ಠ_ಠ.clutz.goog.testing.PerformanceTimer {
  type TestFunction = ( ) => ಠ_ಠ.clutz.goog.Thenable | undefined ;
}
declare module 'goog:goog.testing.PerformanceTimer' {
  import PerformanceTimer = ಠ_ಠ.clutz.goog.testing.PerformanceTimer;
  export default PerformanceTimer;
}
// Generated from testing/performancetimer.js
declare namespace ಠ_ಠ.clutz.goog.testing.PerformanceTimer {
  /**
   * A task for the performance timer to measure. Callers can specify optional
   * setUp and tearDown methods to control state before and after each run of the
   * test function.
   */
  class Task {
    private noStructuralTyping_goog_testing_PerformanceTimer_Task : any;
    /**
     * A task for the performance timer to measure. Callers can specify optional
     * setUp and tearDown methods to control state before and after each run of the
     * test function.
     * @param test Test function whose performance is to be measured.
     */
    constructor (test : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ) ;
    getSetUp ( ) : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ;
    getTearDown ( ) : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ;
    getTest ( ) : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ;
    /**
     * Specifies a set up function to be invoked before each invocation of the test
     * function.
     * @param setUp The set up function.
     */
    withSetUp (setUp : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ) : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.Task ;
    /**
     * Specifies a tear down function to be invoked after each invocation of the
     * test function.
     * @param tearDown The tear down function.
     */
    withTearDown (tearDown : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.TestFunction ) : ಠ_ಠ.clutz.goog.testing.PerformanceTimer.Task ;
  }
}
declare module 'goog:goog.testing.PerformanceTimer.Task' {
  import Task = ಠ_ಠ.clutz.goog.testing.PerformanceTimer.Task;
  export default Task;
}
