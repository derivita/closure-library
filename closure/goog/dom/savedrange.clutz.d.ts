//!! generated by clutz.
// Generated from dom/savedrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Abstract interface for a range saved using carets.
   */
  abstract class AbstractSavedCaretRange extends ಠ_ಠ.clutz.goog.dom.SavedRange {
    private noStructuralTyping_goog_dom_AbstractSavedCaretRange : any;
    /**
     * Abstract interface for a range saved using carets.
     */
    constructor ( ) ;
    /**
     * Gets carets.
     * @param start If true, returns the start caret. Otherwise, get the end caret.
     */
    abstract getCaret (start : boolean ) : GlobalElement | null ;
    /**
     * Removes the carets from the current restoration document.
     * @param opt_range A range whose offsets have already been adjusted for caret removal; it will be adjusted if it is also affected by post-removal operations, such as text node normalization.
     */
    abstract removeCarets (opt_range ? : ಠ_ಠ.clutz.goog.dom.AbstractRange ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null | undefined ;
    /**
     * Sets the document where the range will be restored.
     * @param doc An HTML document.
     */
    abstract setRestorationDocument (doc : Document ) : void ;
    /**
     * Gets the range that this SavedCaretRage represents, without selecting it
     * or removing the carets from the DOM.
     */
    toAbstractRange ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  }
}
declare module 'goog:goog.dom.AbstractSavedCaretRange' {
  import AbstractSavedCaretRange = ಠ_ಠ.clutz.goog.dom.AbstractSavedCaretRange;
  export default AbstractSavedCaretRange;
}
// Generated from dom/savedrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Abstract interface for a saved range.
   * // TODO(user): rename to AbstractSavedRange?
   */
  abstract class SavedRange extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_dom_SavedRange : any;
    /**
     * Abstract interface for a saved range.
     * // TODO(user): rename to AbstractSavedRange?
     */
    constructor ( ) ;
    /**
     * Restores the range and by default disposes of the saved copy.  Take note:
     * this means the by default SavedRange objects are single use objects.
     * @param opt_stayAlive Whether this SavedRange should stay alive (not be disposed) after restoring the range. Defaults to false (dispose).
     */
    restore (opt_stayAlive ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * Internal method to restore the saved range.
     */
    protected restoreInternal ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  }
}
declare module 'goog:goog.dom.SavedRange' {
  import SavedRange = ಠ_ಠ.clutz.goog.dom.SavedRange;
  export default SavedRange;
}
