//!! generated by clutz.
// Generated from dom/classlist.js
declare namespace ಠ_ಠ.clutz.goog.dom.classlist {
  /**
   * Override this define at build-time if you know your target supports it.
   */
  let ALWAYS_USE_DOM_TOKEN_LIST : boolean ;
  /**
   * Adds a class to an element.  Does not add multiples of class names.  This
   * method may throw a DOM exception for an invalid or empty class name if
   * DOMTokenList is used.
   * @param element DOM node to add class to.
   * @param className Class name to add.
   */
  function add (element : GlobalElement | null , className : string ) : void ;
  /**
   * Convenience method to add a number of class names at once.
   * @param element The element to which to add classes.
   * @param classesToAdd An array-like object containing a collection of class names to add to the element. This method may throw a DOM exception if classesToAdd contains invalid or empty class names.
   */
  function addAll (element : GlobalElement | null , classesToAdd : ArrayLike < string > | null ) : void ;
  /**
   * Adds and removes a class of an element.  Unlike
   * {@link goog.dom.classlist.swap}, this method adds the classToAdd regardless
   * of whether the classToRemove was present and had been removed.  This method
   * may throw a DOM exception if the class names are empty or invalid.
   * @param element DOM node to swap classes on.
   * @param classToRemove Class to remove.
   * @param classToAdd Class to add.
   */
  function addRemove (element : GlobalElement | null , classToRemove : string , classToAdd : string ) : void ;
  /**
   * Returns true if an element has a class.  This method may throw a DOM
   * exception for an invalid or empty class name if DOMTokenList is used.
   * @param element DOM node to test.
   * @param className Class name to test for.
   */
  function contains (element : GlobalElement | null , className : string ) : boolean ;
  /**
   * Adds or removes a class depending on the enabled argument.  This method
   * may throw a DOM exception for an invalid or empty class name if DOMTokenList
   * is used.
   * @param element DOM node to add or remove the class on.
   * @param className Class name to add or remove.
   * @param enabled Whether to add or remove the class (true adds, false removes).
   */
  function enable (element : GlobalElement | null , className : string , enabled : boolean ) : void ;
  /**
   * Adds or removes a set of classes depending on the enabled argument.  This
   * method may throw a DOM exception for an invalid or empty class name if
   * DOMTokenList is used.
   * @param element DOM node to add or remove the class on.
   * @param classesToEnable An array-like object containing a collection of class names to add or remove from the element.
   * @param enabled Whether to add or remove the classes (true adds, false removes).
   */
  function enableAll (element : GlobalElement , classesToEnable : ArrayLike < string > | null , enabled : boolean ) : void ;
  /**
   * Gets an array-like object of class names on an element.
   * @param element DOM node to get the classes of.
   */
  function get (element : GlobalElement | null ) : ArrayLike < any > ;
  /**
   * Removes a class from an element.  This method may throw a DOM exception
   * for an invalid or empty class name if DOMTokenList is used.
   * @param element DOM node to remove class from.
   * @param className Class name to remove.
   */
  function remove (element : GlobalElement | null , className : string ) : void ;
  /**
   * Removes a set of classes from an element.  Prefer this call to
   * repeatedly calling `goog.dom.classlist.remove` if you want to remove
   * a large set of class names at once.
   * @param element The element from which to remove classes.
   * @param classesToRemove An array-like object containing a collection of class names to remove from the element. This method may throw a DOM exception if classesToRemove contains invalid or empty class names.
   */
  function removeAll (element : GlobalElement | null , classesToRemove : ArrayLike < string > | null ) : void ;
  /**
   * Sets the entire class name of an element.
   * @param element DOM node to set class of.
   * @param className Class name(s) to apply to element.
   */
  function set (element : GlobalElement | null , className : string ) : void ;
  /**
   * Switches a class on an element from one to another without disturbing other
   * classes. If the fromClass isn't removed, the toClass won't be added.  This
   * method may throw a DOM exception if the class names are empty or invalid.
   * @param element DOM node to swap classes on.
   * @param fromClass Class to remove.
   * @param toClass Class to add.
   */
  function swap (element : GlobalElement | null , fromClass : string , toClass : string ) : boolean ;
  /**
   * Removes a class if an element has it, and adds it the element doesn't have
   * it.  Won't affect other classes on the node.  This method may throw a DOM
   * exception if the class name is empty or invalid.
   * @param element DOM node to toggle class on.
   * @param className Class to toggle.
   */
  function toggle (element : GlobalElement | null , className : string ) : boolean ;
}
declare module 'goog:goog.dom.classlist' {
  import classlist = ಠ_ಠ.clutz.goog.dom.classlist;
  export = classlist;
}
