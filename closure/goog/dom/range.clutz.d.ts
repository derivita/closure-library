//!! generated by clutz.
// Generated from dom/range.js
declare namespace ಠ_ಠ.clutz.goog.dom.Range {
  /**
   * Clears the window's selection.
   * @param opt_win The window to get the selection of.  Defaults to the window this class was defined in.
   */
  function clearSelection (opt_win ? : Window | null ) : void ;
  /**
   * Create a new range wrapper that represents a caret at the given node,
   * accounting for the given offset.  This always creates a TextRange, regardless
   * of whether node is an image node or other control range type node.
   * @param node The node to place a caret at.
   * @param offset The offset within the node to place the caret at.
   */
  function createCaret (node : Node | null , offset : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper from the given browser range object.
   * @param range The browser range object.
   * @param opt_isReversed Whether the focus node is before the anchor node.
   */
  function createFromBrowserRange (range : Range | null | ಠ_ಠ.clutz.TextRange , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper from the given browser selection object.  Note
   * that this object does not auto-update if the user changes their selection and
   * should be used as a snapshot.
   * @param selection The browser selection object.
   */
  function createFromBrowserSelection (selection : GlobalObject ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Create a new range wrapper that selects the given node's text.
   * @param node The node to select.
   * @param opt_isReversed Whether the focus node is before the anchor node.
   */
  function createFromNodeContents (node : Node | null , opt_isReversed ? : boolean ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new range wrapper that selects the area between the given nodes,
   * accounting for the given offsets.
   * @param anchorNode The node to anchor on.
   * @param anchorOffset The offset within the node to anchor on.
   * @param focusNode The node to focus on.
   * @param focusOffset The offset within the node to focus on.
   */
  function createFromNodes (anchorNode : Node | null , anchorOffset : number , focusNode : Node | null , focusOffset : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
  /**
   * Create a new selection from the given browser window's current selection.
   * Note that this object does not auto-update if the user changes their
   * selection and should be used as a snapshot.
   * @param opt_win The window to get the selection of.  Defaults to the window this class was defined in.
   */
  function createFromWindow (opt_win ? : Window | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
  /**
   * Tests if the window has a selection.
   * @param opt_win The window to check the selection of.  Defaults to the window this class was defined in.
   */
  function hasSelection (opt_win ? : Window | null ) : boolean ;
  /**
   * Returns whether the focus position occurs before the anchor position.
   * @param anchorNode The node to anchor on.
   * @param anchorOffset The offset within the node to anchor on.
   * @param focusNode The node to focus on.
   * @param focusOffset The offset within the node to focus on.
   */
  function isReversed (anchorNode : Node | null , anchorOffset : number , focusNode : Node | null , focusOffset : number ) : boolean ;
}
declare module 'goog:goog.dom.Range' {
  import Range = ಠ_ಠ.clutz.goog.dom.Range;
  export = Range;
}
