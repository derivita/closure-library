//!! generated by clutz.
// Generated from dom/fontsizemonitor.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * This class can be used to monitor changes in font size.  Instances will
   * dispatch a `goog.dom.FontSizeMonitor.EventType.CHANGE` event.
   * Example usage:
   * <pre>
   * var fms = new goog.dom.FontSizeMonitor();
   * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
   * function(e) {
   * alert('Font size was changed');
   * });
   * </pre>
   */
  class FontSizeMonitor extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_dom_FontSizeMonitor : any;
    /**
     * This class can be used to monitor changes in font size.  Instances will
     * dispatch a `goog.dom.FontSizeMonitor.EventType.CHANGE` event.
     * Example usage:
     * <pre>
     * var fms = new goog.dom.FontSizeMonitor();
     * goog.events.listen(fms, goog.dom.FontSizeMonitor.EventType.CHANGE,
     * function(e) {
     * alert('Font size was changed');
     * });
     * </pre>
     * @param opt_domHelper DOM helper object that is used to determine where to insert the DOM nodes used to determine when the font size changes.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    resizeTarget_ : any ;
    disposeInternal ( ) : void ;
    /**
     * Constant for the change event.
     */
    static CHANGE_EVENT : string ;
  }
}
declare module 'goog:goog.dom.FontSizeMonitor' {
  import FontSizeMonitor = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor;
  export default FontSizeMonitor;
}
// Generated from dom/fontsizemonitor.js
declare namespace ಠ_ಠ.clutz.goog.dom.FontSizeMonitor {
  /**
   * The event types that the FontSizeMonitor fires.
   */
  /**
   * The event types that the FontSizeMonitor fires.
   */
  enum EventType {
    CHANGE = 'fontsizechange' ,
  }
}
declare module 'goog:goog.dom.FontSizeMonitor.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.dom.FontSizeMonitor.EventType;
  export default EventType;
}
