//!! generated by clutz.
// Generated from dom/animationframe/animationframe.js
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  /**
   * Returns a function that schedules the two passed-in functions to be run upon
   * the next animation frame. Calling the function again during the same
   * animation frame does nothing.
   *
   * The function under the "measure" key will run first and together with all
   * other functions scheduled under this key and the function under "mutate" will
   * run after that.
   * @param opt_context Context in which to run the function.
   */
  function createTask < THIS = any > (spec : { measure ? : (this : THIS , a : ಠ_ಠ.clutz.goog.dom.animationFrame.State ) => any , mutate ? : (this : THIS , a : ಠ_ಠ.clutz.goog.dom.animationFrame.State ) => any } , opt_context ? : THIS ) : ( ...a : any [] ) => any ;
  function isRunning ( ) : boolean ;
}
declare module 'goog:goog.dom.animationFrame' {
  import animationFrame = ಠ_ಠ.clutz.goog.dom.animationFrame;
  export = animationFrame;
}
// Generated from dom/animationframe/animationframe.js
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  type Spec = { measure ? : Function , mutate ? : Function } ;
}
declare module 'goog:goog.dom.animationFrame.Spec' {
  import Spec = ಠ_ಠ.clutz.goog.dom.animationFrame.Spec;
  export default Spec;
}
// Generated from dom/animationframe/animationframe.js
declare namespace ಠ_ಠ.clutz.goog.dom.animationFrame {
  /**
   * A type to represent state. Users may add properties as desired.
   */
  class State {
    private noStructuralTyping_goog_dom_animationFrame_State : any;
  }
}
declare module 'goog:goog.dom.animationFrame.State' {
  import State = ಠ_ಠ.clutz.goog.dom.animationFrame.State;
  export default State;
}
