//!! generated by clutz.
// Generated from dom/safe.js
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
  /**
   * Safely assigns the URL of a Location object.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and
   * passed to Location#assign. If url is of type string however, it is
   * first sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.assignLocation(document.location, newUrl);
   * which is a safe alternative to
   * document.location.assign(newUrl);
   * The latter can result in XSS vulnerabilities if newUrl is a
   * user-/attacker-controlled value.
   *
   * This has the same behaviour as setLocationHref, however some test
   * mock Location.assign instead of a property assignment.
   * @param loc The Location object which is to be assigned.
   * @param url The URL to assign.
   */
  function assignLocation (loc : Location , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Creates a DocumentFragment by parsing html in the context of a Range.
   * @param range The Range object starting from the context node to create a fragment in.
   * @param html HTML to create a fragment from.
   */
  function createContextualFragment (range : Range , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : DocumentFragment | null ;
  /**
   * Safely creates an HTMLImageElement from a Blob.
   *
   * Example usage:
   * goog.dom.safe.createImageFromBlob(blob);
   * which is a safe alternative to
   * image.src = createObjectUrl(blob)
   * The latter can result in executing malicious same-origin scripts from a bad
   * Blob.
   * @param blob The blob to create the image from.
   */
  function createImageFromBlob (blob : Blob ) : HTMLImageElement ;
  /**
   * Writes known-safe HTML to a document.
   * @param doc The document to be written to.
   * @param html The known-safe HTML to assign.
   */
  function documentWrite (doc : Document , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Returns CSP script nonce, if set for any <script> tag.
   * @param opt_window The window context used to retrieve the nonce. Defaults to global context.
   */
  function getScriptNonce (opt_window ? : Window | null ) : string ;
  /**
   * Returns CSP style nonce, if set for any <style> or <link rel="stylesheet">
   * tag.
   * @param opt_window The window context used to retrieve the nonce. Defaults to global context.
   */
  function getStyleNonce (opt_window ? : Window | null ) : string ;
  /**
   * Inserts known-safe HTML into a Node, at the specified position.
   * @param node The node on which to call insertAdjacentHTML.
   * @param position Position where to insert the HTML.
   * @param html The known-safe HTML to insert.
   */
  function insertAdjacentHtml (node : Node , position : ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Safely opens a URL in a new window (via window.open).
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to
   * window.open.  If url is of type string however, it is first sanitized
   * using goog.html.SafeUrl.sanitize.
   *
   * Note that this function does not prevent leakages via the referer that is
   * sent by window.open. It is advised to only use this to open 1st party URLs.
   *
   * Example usage:
   * goog.dom.safe.openInWindow(url);
   * which is a safe alternative to
   * window.open(url);
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param url The URL to open.
   * @param opt_openerWin Window of which to call the .open() method. Defaults to the global window.
   * @param opt_name Name of the window to open in. Can be _top, etc as allowed by window.open(). This accepts string for legacy reasons. Pass goog.string.Const if possible.
   * @param opt_specs Comma-separated list of specifications, same as in window.open().
   */
  function openInWindow (url : string | ಠ_ಠ.clutz.goog.html.SafeUrl , opt_openerWin ? : Window | null , opt_name ? : ಠ_ಠ.clutz.goog.string.Const | string , opt_specs ? : string ) : Window | null ;
  /**
   * Parses the string.
   * @param content Note: We don't have a special type for XML or SVG supported by this function so we use SafeHtml.
   */
  function parseFromString (parser : DOMParser , content : ಠ_ಠ.clutz.goog.html.SafeHtml , type : string ) : Document ;
  /**
   * Parses the HTML as 'text/html'.
   * @param html The HTML to be parsed.
   */
  function parseFromStringHtml (parser : DOMParser , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : Document ;
  /**
   * Safely replaces the URL of a Location object.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and
   * passed to Location#replace. If url is of type string however, it is
   * first sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.replaceLocation(document.location, newUrl);
   * which is a safe alternative to
   * document.location.replace(newUrl);
   * The latter can result in XSS vulnerabilities if newUrl is a
   * user-/attacker-controlled value.
   * @param loc The Location object which is to be replaced.
   * @param url The URL to assign.
   */
  function replaceLocation (loc : Location , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to an anchor element's href property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * anchor's href property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setAnchorHref(anchorEl, url);
   * which is a safe alternative to
   * anchorEl.href = url;
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param anchor The anchor element whose href property is to be assigned to.
   * @param url The URL to assign.
   */
  function setAnchorHref (anchor : HTMLAnchorElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to a audio element's src property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * audio's src property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   * @param audioElement The audio element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setAudioSrc (audioElement : HTMLAudioElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to a button element's formaction property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * button's formaction property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setButtonFormAction(buttonEl, url);
   * which is a safe alternative to
   * buttonEl.action = url;
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param button The button element whose action property is to be assigned to.
   * @param url The URL to assign.
   */
  function setButtonFormAction (button : GlobalElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to an embed element's src property.
   *
   * Example usage:
   * goog.dom.safe.setEmbedSrc(embedEl, url);
   * which is a safe alternative to
   * embedEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param embed The embed element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setEmbedSrc (embed : HTMLEmbedElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns a URL a form element's action property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * form's action property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setFormElementAction(formEl, url);
   * which is a safe alternative to
   * formEl.action = url;
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param form The form element whose action property is to be assigned to.
   * @param url The URL to assign.
   */
  function setFormElementAction (form : GlobalElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to a frame element's src property.
   *
   * Example usage:
   * goog.dom.safe.setFrameSrc(frameEl, url);
   * which is a safe alternative to
   * frameEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param frame The frame element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setFrameSrc (frame : HTMLFrameElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns a URL to an iframe element's src property.
   *
   * Example usage:
   * goog.dom.safe.setIframeSrc(iframeEl, url);
   * which is a safe alternative to
   * iframeEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param iframe The iframe element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setIframeSrc (iframe : HTMLIFrameElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Safely assigns HTML to an iframe element's srcdoc property.
   *
   * Example usage:
   * goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);
   * which is a safe alternative to
   * iframeEl.srcdoc = html;
   * The latter can result in loading untrusted code.
   * @param iframe The iframe element whose srcdoc property is to be assigned to.
   * @param html The HTML to assign.
   */
  function setIframeSrcdoc (iframe : HTMLIFrameElement , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Assigns known-safe HTML to an element's innerHTML property.
   * @param elem The element whose innerHTML is to be assigned to.
   * @param html The known-safe HTML to assign.
   */
  function setInnerHtml (elem : GlobalElement | ShadowRoot , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Assigns constant HTML to an element's innerHTML property.
   * @param element The element whose innerHTML is to be assigned to.
   * @param constHtml The known-safe HTML to assign.
   */
  function setInnerHtmlFromConstant (element : GlobalElement , constHtml : ಠ_ಠ.clutz.goog.string.Const ) : void ;
  /**
   * Safely assigns a URL to an input element's formaction property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * input's formaction property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setInputFormAction(inputEl, url);
   * which is a safe alternative to
   * inputEl.action = url;
   * The latter can result in XSS vulnerabilities if url is a
   * user-/attacker-controlled value.
   * @param input The input element whose action property is to be assigned to.
   * @param url The URL to assign.
   */
  function setInputFormAction (input : GlobalElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely sets a link element's href and rel properties. Whether or not
   * the URL assigned to href has to be a goog.html.TrustedResourceUrl
   * depends on the value of the rel property. If rel contains "stylesheet"
   * then a TrustedResourceUrl is required.
   *
   * Example usage:
   * goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');
   * which is a safe alternative to
   * linkEl.rel = 'stylesheet';
   * linkEl.href = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param link The link element whose href property is to be assigned to.
   * @param url The URL to assign to the href property. Must be a TrustedResourceUrl if the value assigned to rel contains "stylesheet". A string value is sanitized with goog.html.SafeUrl.sanitize.
   * @param rel The value to assign to the rel property.
   */
  function setLinkHrefAndRel (link : HTMLLinkElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl | ಠ_ಠ.clutz.goog.html.TrustedResourceUrl , rel : string ) : void ;
  /**
   * Safely assigns a URL to a Location object's href property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * loc's href property.  If url is of type string however, it is first sanitized
   * using goog.html.SafeUrl.sanitize.
   *
   * Example usage:
   * goog.dom.safe.setLocationHref(document.location, redirectUrl);
   * which is a safe alternative to
   * document.location.href = redirectUrl;
   * The latter can result in XSS vulnerabilities if redirectUrl is a
   * user-/attacker-controlled value.
   * @param loc The Location object whose href property is to be assigned to.
   * @param url The URL to assign.
   */
  function setLocationHref (loc : Location , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Safely assigns a URL to an object element's data property.
   *
   * Example usage:
   * goog.dom.safe.setObjectData(objectEl, url);
   * which is a safe alternative to
   * objectEl.data = url;
   * The latter can result in loading untrusted code unless setit is ensured that
   * the URL refers to a trustworthy resource.
   * @param object The object element whose data property is to be assigned to.
   * @param url The URL to assign.
   */
  function setObjectData (object : HTMLObjectElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Assigns known-safe HTML to an element's outerHTML property.
   * @param elem The element whose outerHTML is to be assigned to.
   * @param html The known-safe HTML to assign.
   */
  function setOuterHtml (elem : GlobalElement , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
  /**
   * Safely assigns a value to a script element's content.
   *
   * Example usage:
   * goog.dom.safe.setScriptContent(scriptEl, content);
   * which is a safe alternative to
   * scriptEl.text = content;
   * The latter can result in executing untrusted code unless it is ensured that
   * the code is loaded from a trustworthy resource.
   * @param script The script element whose content is being set.
   * @param content The content to assign.
   */
  function setScriptContent (script : HTMLScriptElement , content : ಠ_ಠ.clutz.goog.html.SafeScript ) : void ;
  /**
   * Safely assigns a URL to a script element's src property.
   *
   * Example usage:
   * goog.dom.safe.setScriptSrc(scriptEl, url);
   * which is a safe alternative to
   * scriptEl.src = url;
   * The latter can result in loading untrusted code unless it is ensured that
   * the URL refers to a trustworthy resource.
   * @param script The script element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setScriptSrc (script : HTMLScriptElement , url : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : void ;
  /**
   * Sets the given element's style property to the contents of the provided
   * SafeStyle object.
   */
  function setStyle (elem : GlobalElement , style : ಠ_ಠ.clutz.goog.html.SafeStyle ) : void ;
  /**
   * Safely assigns a URL to a video element's src property.
   *
   * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to
   * video's src property.  If url is of type string however, it is first
   * sanitized using goog.html.SafeUrl.sanitize.
   * @param videoElement The video element whose src property is to be assigned to.
   * @param url The URL to assign.
   */
  function setVideoSrc (videoElement : HTMLVideoElement , url : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : void ;
  /**
   * Assigns HTML to an element's innerHTML property. Helper to use only here and
   * in soy.js.
   * @param elem The element whose innerHTML is to be assigned to.
   */
  function unsafeSetInnerHtmlDoNotUseOrElse (elem : GlobalElement | null | ShadowRoot , html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
}
declare module 'goog:goog.dom.safe' {
  import safe = ಠ_ಠ.clutz.goog.dom.safe;
  export = safe;
}
// Generated from dom/safe.js
declare namespace ಠ_ಠ.clutz.goog.dom.safe {
  enum InsertAdjacentHtmlPosition {
    AFTERBEGIN = 'afterbegin' ,
    AFTEREND = 'afterend' ,
    BEFOREBEGIN = 'beforebegin' ,
    BEFOREEND = 'beforeend' ,
  }
}
declare module 'goog:goog.dom.safe.InsertAdjacentHtmlPosition' {
  import InsertAdjacentHtmlPosition = ಠ_ಠ.clutz.goog.dom.safe.InsertAdjacentHtmlPosition;
  export default InsertAdjacentHtmlPosition;
}
