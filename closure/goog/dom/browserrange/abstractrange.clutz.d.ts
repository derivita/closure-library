//!! generated by clutz.
// Generated from dom/browserrange/abstractrange.js
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * The constructor for abstract ranges.  Don't call this from subclasses.
   */
  class AbstractRange {
    private noStructuralTyping_goog_dom_browserrange_AbstractRange : any;
    /**
     * Returns a RangeIterator over the contents of the range.  Regardless of the
     * direction of the range, the iterator will move in document order.
     * @param opt_keys Unused for this iterator.
     */
    __iterator__ (opt_keys ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange | null ;
    /**
     * Collapses the range to one of its boundary points.
     * @param toStart Whether to collapse to the start of the range.
     */
    collapse (a : boolean ) : any ;
    /**
     * Compares one endpoint of this range with the endpoint of another browser
     * native range object.
     * @param range The browser native range to compare against.
     * @param thisEndpoint The endpoint of this range to compare with.
     * @param otherEndpoint The endpoint of the other range to compare with.
     */
    compareBrowserRangeEndpoints (a : Range | null | ಠ_ಠ.clutz.TextRange , b : ಠ_ಠ.clutz.goog.dom.RangeEndpoint | null , c : ಠ_ಠ.clutz.goog.dom.RangeEndpoint | null ) : number ;
    /**
     * Tests if this range contains the given node.
     * @param node The node to test.
     * @param opt_allowPartial If not set or false, the node must be entirely contained in the selection for this function to return true.
     */
    containsNode (node : Node | null , opt_allowPartial ? : boolean ) : boolean ;
    /**
     * Tests if this range contains the given range.
     * @param abstractRange The range to test.
     * @param opt_allowPartial If not set or false, the range must be entirely contained in the selection for this function to return true.
     */
    containsRange (abstractRange : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange | null , opt_allowPartial ? : boolean ) : boolean ;
    /**
     * Returns the browser native implementation of the range.  Please refrain from
     * using this function - if you find you need the range please add wrappers for
     * the functionality you need rather than just using the native range.
     */
    getBrowserRange ( ) : Range | null | ಠ_ಠ.clutz.TextRange ;
    /**
     * Returns the deepest node in the tree that contains the entire range.
     */
    getContainer ( ) : Node | null ;
    /**
     * Returns the node the range ends in.
     */
    getEndNode ( ) : Node | null ;
    /**
     * Returns the offset into the node the range ends in.
     */
    getEndOffset ( ) : number ;
    getEndPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * Returns the HTML fragment this range selects.  This is slow on all browsers.
     */
    getHtmlFragment ( ) : string ;
    /**
     * Returns the node the range starts in.
     */
    getStartNode ( ) : Node | null ;
    /**
     * Returns the offset into the node the range starts in.
     */
    getStartOffset ( ) : number ;
    getStartPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getText ( ) : string ;
    /**
     * Returns valid HTML for this range.  This is fast on IE, and semi-fast on
     * other browsers.
     */
    getValidHtml ( ) : string ;
    /**
     * Inserts a node before (or after) the range.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     * @param before True to insert before, false to insert after.
     */
    insertNode (a : Node | null , b : boolean ) : Node | null ;
    /**
     * Tests if the selection is collapsed - i.e. is just a caret.
     */
    isCollapsed ( ) : boolean ;
    removeContents ( ...a : any [] ) : any ;
    /**
     * Set this range as the selection in its window.
     * @param opt_reverse Whether to select the range in reverse, if possible.
     */
    select (a ? : boolean ) : any ;
    /**
     * Surrounds the text range with the specified element (on Mozilla) or with a
     * clone of the specified element (on IE).  Returns a reference to the
     * surrounding element if the operation was successful; returns null if the
     * operation failed.
     * @param element The element with which the selection is to be surrounded.
     */
    surroundContents (a : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Surrounds this range with the two given nodes.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param startNode The node to insert at the start.
     * @param endNode The node to insert at the end.
     */
    surroundWithNodes (a : GlobalElement | null , b : GlobalElement | null ) : any ;
  }
}
declare module 'goog:goog.dom.browserrange.AbstractRange' {
  import AbstractRange = ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange;
  export default AbstractRange;
}
