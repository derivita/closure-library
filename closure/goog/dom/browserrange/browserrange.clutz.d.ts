//!! generated by clutz.
// Generated from dom/browserrange/browserrange.js
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * Tests whether the given node can contain a range end point.
   * @param node The node to check.
   */
  function canContainRangeEndpoint (node : Node | null ) : boolean ;
  /**
   * Static method that returns the proper type of browser range.
   * @param range A browser range object.
   */
  function createRange (range : Range | null | ಠ_ಠ.clutz.TextRange ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
  /**
   * Static method that returns the proper type of browser range.
   * @param node The node to select.
   */
  function createRangeFromNodeContents (node : Node | null ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
  /**
   * Static method that returns the proper type of browser range.
   * @param startNode The node to start with.
   * @param startOffset The offset within the node to start.  This is either the index into the childNodes array for element startNodes or the index into the character array for text startNodes.
   * @param endNode The node to end with.
   * @param endOffset The offset within the node to end.  This is either the index into the childNodes array for element endNodes or the index into the character array for text endNodes.
   */
  function createRangeFromNodes (startNode : Node | null , startOffset : number , endNode : Node | null , endOffset : number ) : ಠ_ಠ.clutz.goog.dom.browserrange.AbstractRange ;
}
declare module 'goog:goog.dom.browserrange' {
  import browserrange = ಠ_ಠ.clutz.goog.dom.browserrange;
  export = browserrange;
}
// Generated from dom/browserrange/browserrange.js
declare namespace ಠ_ಠ.clutz.goog.dom.browserrange {
  /**
   * Common error constants.
   */
  /**
   * Common error constants.
   */
  enum Error {
    NOT_IMPLEMENTED = 'Not Implemented' ,
  }
}
declare module 'goog:goog.dom.browserrange.Error' {
  import Error = ಠ_ಠ.clutz.goog.dom.browserrange.Error;
  export default Error;
}
