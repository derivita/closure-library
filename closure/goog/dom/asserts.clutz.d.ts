//!! generated by clutz.
// Generated from dom/asserts.js
declare namespace ಠ_ಠ.clutz.goog.dom.asserts {
  /**
   * Asserts that a given object is a HTMLAnchorElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not of type Location nor a subtype
   * of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLAnchorElement (o : GlobalObject | null ) : HTMLAnchorElement ;
  /**
   * Asserts that a given object is a HTMLAudioElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLAudioElement (o : GlobalObject | null ) : HTMLAudioElement ;
  /**
   * Asserts that a given object is a HTMLButtonElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLButtonElement (o : GlobalObject | null ) : HTMLButtonElement ;
  /**
   * Asserts that a given object is a HTMLCanvasElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLCanvasElement (o : GlobalObject | null ) : HTMLCanvasElement ;
  /**
   * Asserts that a given object is a HTMLEmbedElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLEmbedElement (o : GlobalObject | null ) : HTMLEmbedElement ;
  /**
   * Asserts that a given object is a HTMLFormElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLFormElement (o : GlobalObject | null ) : HTMLFormElement ;
  /**
   * Asserts that a given object is a HTMLFrameElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLFrameElement (o : GlobalObject | null ) : HTMLFrameElement ;
  /**
   * Asserts that a given object is a HTMLIFrameElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLIFrameElement (o : GlobalObject | null ) : HTMLIFrameElement ;
  /**
   * Asserts that a given object is a HTMLImageElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLImageElement (o : GlobalObject | null ) : HTMLImageElement ;
  /**
   * Asserts that a given object is a HTMLInputElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLInputElement (o : GlobalObject | null ) : HTMLInputElement ;
  /**
   * Asserts that a given object is a HTMLLinkElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLLinkElement (o : GlobalObject | null ) : HTMLLinkElement ;
  /**
   * Asserts that a given object is a HTMLObjectElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLObjectElement (o : GlobalObject | null ) : HTMLObjectElement ;
  /**
   * Asserts that a given object is a HTMLScriptElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLScriptElement (o : GlobalObject | null ) : HTMLScriptElement ;
  /**
   * Asserts that a given object is a HTMLTextAreaElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLTextAreaElement (o : GlobalObject | null ) : HTMLTextAreaElement ;
  /**
   * Asserts that a given object is a HTMLVideoElement.
   *
   * To permit this assertion to pass in the context of tests where elements might
   * be mocked, also accepts objects that are not a subtype of Element.
   * @param o The object whose type to assert.
   */
  function assertIsHTMLVideoElement (o : GlobalObject | null ) : HTMLVideoElement ;
  /**
   * Asserts that a given object is a Location.
   *
   * To permit this assertion to pass in the context of tests where DOM APIs might
   * be mocked, also accepts any other type except for subtypes of {!Element}.
   * This is to ensure that, for instance, HTMLLinkElement is not being used in
   * place of a Location, since this could result in security bugs due to stronger
   * contracts required for assignments to the href property of the latter.
   * @param o The object whose type to assert.
   */
  function assertIsLocation (o : GlobalObject | null ) : Location ;
}
declare module 'goog:goog.dom.asserts' {
  import asserts = ಠ_ಠ.clutz.goog.dom.asserts;
  export = asserts;
}
