//!! generated by clutz.
// Generated from dom/xml.js
declare namespace ಠ_ಠ.clutz.goog.dom.xml {
  /**
   * True if browser has ActiveXObject support.
   * Possible override if this test become wrong in coming IE versions.
   */
  let ACTIVEX_SUPPORT : boolean ;
  /**
   * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
   */
  let MAX_ELEMENT_DEPTH : number ;
  /**
   * Max XML size for MSXML2.  Used to prevent potential DoS attacks.
   */
  let MAX_XML_SIZE_KB : number ;
  /**
   * Creates an XML document appropriate for the current JS runtime
   * @param opt_rootTagName The root tag name.
   * @param opt_namespaceUri Namespace URI of the document element.
   * @param opt_preferActiveX Whether to default to ActiveXObject to create Document in IE. Use this if you need xpath support in IE (e.g., selectSingleNode or selectNodes), but be aware that the ActiveXObject does not support various DOM-specific Document methods and attributes.
   */
  function createDocument (opt_rootTagName ? : string , opt_namespaceUri ? : string , opt_preferActiveX ? : boolean ) : Document | null ;
  /**
   * Creates an XML document from a string
   * @param xml The text.
   * @param opt_preferActiveX Whether to default to ActiveXObject to create Document in IE. Use this if you need xpath support in IE (e.g., selectSingleNode or selectNodes), but be aware that the ActiveXObject does not support various DOM-specific Document methods and attributes.
   */
  function loadXml (xml : string , opt_preferActiveX ? : boolean ) : Document | null ;
  /**
   * Selects multiple nodes using an Xpath expression and a root node
   * @param node The root node.
   * @param path Xpath selector.
   */
  function selectNodes (node : Node | null , path : string ) : NodeList < Node > | Node [] ;
  /**
   * Selects a single node using an Xpath expression and a root node
   * @param node The root node.
   * @param path Xpath selector.
   */
  function selectSingleNode (node : Node | null , path : string ) : Node | null ;
  /**
   * Serializes an XML document or subtree to string.
   * @param xml The document or the root node of the subtree.
   */
  function serialize (xml : Document | null | GlobalElement ) : string ;
  /**
   * Sets multiple attributes on an element. Differs from goog.dom.setProperties
   * in that it exclusively uses the element's setAttributes method. Use this
   * when you need to ensure that the exact property is available as an attribute
   * and can be read later by the native getAttribute method.
   * @param element XML or DOM element to set attributes on.
   * @param attributes Map of property:value pairs.
   */
  function setAttributes (element : GlobalElement , attributes : { [ key: string ]: string } ) : void ;
}
declare module 'goog:goog.dom.xml' {
  import xml = ಠ_ಠ.clutz.goog.dom.xml;
  export = xml;
}
