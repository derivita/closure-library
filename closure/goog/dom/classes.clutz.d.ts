//!! generated by clutz.
// Generated from dom/classes.js
declare namespace ಠ_ಠ.clutz.goog.dom.classes {
  /**
   * Adds a class or classes to an element. Does not add multiples of class names.
   * @param element DOM node to add class to.
   * @param var_args Class names to add.
   */
  function add (element : Node | null ,  ...var_args : string [] ) : boolean ;
  /**
   * Adds zero or more classes to an element and removes zero or more as a single
   * operation. Unlike calling {@link goog.dom.classes.add} and
   * {@link goog.dom.classes.remove} separately, this is more efficient as it only
   * parses the class property once.
   *
   * If a class is in both the remove and add lists, it will be added. Thus,
   * you can use this instead of {@link goog.dom.classes.swap} when you have
   * more than two class names that you want to swap.
   * @param element DOM node to swap classes on.
   * @param classesToRemove Class or classes to remove, if null no classes are removed.
   * @param classesToAdd Class or classes to add, if null no classes are added.
   */
  function addRemove (element : Node | null , classesToRemove : string | string [] | null , classesToAdd : string | string [] | null ) : void ;
  /**
   * Adds or removes a class depending on the enabled argument.
   * @param element DOM node to add or remove the class on.
   * @param className Class name to add or remove.
   * @param enabled Whether to add or remove the class (true adds, false removes).
   */
  function enable (element : Node | null , className : string , enabled : boolean ) : void ;
  /**
   * Gets an array of class names on an element
   * @param element DOM node to get class of.
   */
  function get (element : Node | null ) : any [] ;
  /**
   * Returns true if an element has a class.
   * @param element DOM node to test.
   * @param className Class name to test for.
   */
  function has (element : Node | null , className : string ) : boolean ;
  /**
   * Removes a class or classes from an element.
   * @param element DOM node to remove class from.
   * @param var_args Class name(s) to remove.
   */
  function remove (element : Node | null ,  ...var_args : string [] ) : boolean ;
  /**
   * Sets the entire class name of an element.
   * @param element DOM node to set class of.
   * @param className Class name(s) to apply to element.
   */
  function set (element : Node | null , className : string ) : void ;
  /**
   * Switches a class on an element from one to another without disturbing other
   * classes. If the fromClass isn't removed, the toClass won't be added.
   * @param element DOM node to swap classes on.
   * @param fromClass Class to remove.
   * @param toClass Class to add.
   */
  function swap (element : Node | null , fromClass : string , toClass : string ) : boolean ;
  /**
   * Removes a class if an element has it, and adds it the element doesn't have
   * it.  Won't affect other classes on the node.
   * @param element DOM node to toggle class on.
   * @param className Class to toggle.
   */
  function toggle (element : Node | null , className : string ) : boolean ;
}
declare module 'goog:goog.dom.classes' {
  import classes = ಠ_ಠ.clutz.goog.dom.classes;
  export = classes;
}
