//!! generated by clutz.
// Generated from dom/savedcaretrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * A struct for holding context about saved selections.
   * This can be used to preserve the selection and restore while the DOM is
   * manipulated, or through an asynchronous call. Use goog.dom.Range factory
   * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
   * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
   * For editor ranges under content-editable elements or design-mode iframes,
   * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
   */
  class SavedCaretRange extends ಠ_ಠ.clutz.goog.dom.AbstractSavedCaretRange {
    private noStructuralTyping_goog_dom_SavedCaretRange : any;
    /**
     * A struct for holding context about saved selections.
     * This can be used to preserve the selection and restore while the DOM is
     * manipulated, or through an asynchronous call. Use goog.dom.Range factory
     * methods to obtain an {@see goog.dom.AbstractRange} instance, and use
     * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.
     * For editor ranges under content-editable elements or design-mode iframes,
     * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.
     * @param range The range being saved.
     */
    constructor (range : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) ;
    /**
     * Dispose the saved range and remove the carets from the DOM.
     */
    disposeInternal ( ) : void ;
    /**
     * Gets carets.
     * @param start If true, returns the start caret. Otherwise, get the end caret.
     */
    getCaret (start : boolean ) : GlobalElement | null ;
    /**
     * Removes the carets from the current restoration document.
     * @param opt_range A range whose offsets have already been adjusted for caret removal; it will be adjusted if it is also affected by post-removal operations, such as text node normalization.
     */
    removeCarets (opt_range ? : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null | undefined ;
    /**
     * Reconstruct the selection from the given saved range. Removes carets after
     * restoring the selection. If restore does not dispose this saved range, it may
     * only be restored a second time if innerHTML or some other mechanism is used
     * to restore the carets to the dom.
     */
    protected restoreInternal ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * Sets the document where the range will be restored.
     * @param doc An HTML document.
     */
    setRestorationDocument (doc : Document ) : void ;
    /**
     * Gets the range that this SavedCaretRage represents, without selecting it
     * or removing the carets from the DOM.
     */
    toAbstractRange ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    /**
     * A regex that will match all saved range carets in a string.
     */
    static CARET_REGEX : RegExp | null ;
    /**
     * Returns whether two strings of html are equal, ignoring any saved carets.
     * Thus two strings of html whose only difference is the id of their saved
     * carets will be considered equal, since they represent html with the
     * same selection.
     * @param str1 The first string.
     * @param str2 The second string.
     */
    static htmlEqual (str1 : string , str2 : string ) : boolean ;
  }
}
declare module 'goog:goog.dom.SavedCaretRange' {
  import SavedCaretRange = ಠ_ಠ.clutz.goog.dom.SavedCaretRange;
  export default SavedCaretRange;
}
