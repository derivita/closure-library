//!! generated by clutz.
// Generated from dom/abstractrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Creates a new selection with no properties.  Do not use this constructor -
   * use one of the goog.dom.Range.from* methods instead.
   */
  abstract class AbstractRange {
    private noStructuralTyping_goog_dom_AbstractRange : any;
    /**
     * Returns a RangeIterator over the contents of the range.  Regardless of the
     * direction of the range, the iterator will move in document order.
     * @param opt_keys Unused for this iterator.
     */
    __iterator__ (a ? : boolean ) : ಠ_ಠ.clutz.goog.dom.RangeIterator ;
    clone ( ) : ಠ_ಠ.clutz.goog.dom.AbstractRange ;
    /**
     * Collapses the range to one of its boundary points.
     * @param toAnchor Whether to collapse to the anchor of the range.
     */
    collapse (a : boolean ) : any ;
    /**
     * Tests if this range contains the given node.
     * @param node The node to test for.
     * @param opt_allowPartial If not set or false, the node must be entirely contained in the selection for this function to return true.
     */
    containsNode (a : Node | null , b ? : boolean ) : boolean ;
    /**
     * Tests if this range contains the given range.
     * @param range The range to test.
     * @param opt_allowPartial If true, the range can be partially contained in the selection, otherwise the range must be entirely contained.
     */
    containsRange (a : ಠ_ಠ.clutz.goog.dom.AbstractRange | null , b ? : boolean ) : boolean ;
    getAnchorNode ( ) : Node | null ;
    getAnchorOffset ( ) : number ;
    getBrowserRangeObject ( ) : Range | null | ಠ_ಠ.clutz.TextRange ;
    getContainer ( ) : Node | null ;
    /**
     * Returns the deepest element in the tree that contains the entire range.
     */
    getContainerElement ( ) : GlobalElement | null ;
    getDocument ( ) : Document ;
    getEndNode ( ) : Node | null ;
    getEndOffset ( ) : number ;
    getEndPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getFocusNode ( ) : Node | null ;
    getFocusOffset ( ) : number ;
    /**
     * Returns the HTML fragment this range selects.  This is slow on all browsers.
     * The HTML fragment may not be valid HTML, for instance if the user selects
     * from a to b inclusively in the following html:
     *
     * &lt;div&gt;a&lt;/div&gt;b
     *
     * This method will return
     *
     * a&lt;/div&gt;b
     *
     * If you need valid HTML, use {@link #getValidHtml} instead.
     */
    getHtmlFragment ( ) : string ;
    /**
     * Returns pastable HTML for this range.  This guarantees that any child items
     * that must have specific ancestors will have them, for instance all TDs will
     * be contained in a TR in a TBODY in a TABLE and all LIs will be contained in
     * a UL or OL as appropriate.  This is semi-fast on all browsers.
     */
    getPastableHtml ( ) : string ;
    getStartNode ( ) : Node | null ;
    getStartOffset ( ) : number ;
    getStartPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    getText ( ) : string ;
    /**
     * Get the i-th text range in this range.  The behavior is undefined if
     * i >= getTextRangeCount or i < 0.
     * @param i The range number to retrieve.
     */
    getTextRange (a : number ) : ಠ_ಠ.clutz.goog.dom.AbstractRange | null ;
    getTextRangeCount ( ) : number ;
    /**
     * Gets an array of all text ranges this range is comprised of.  For non-multi
     * ranges, returns a single element array containing this.
     */
    getTextRanges ( ) : ( ಠ_ಠ.clutz.goog.dom.AbstractRange | null ) [] ;
    getType ( ) : ಠ_ಠ.clutz.goog.dom.RangeType ;
    /**
     * Returns valid HTML for this range.  This is fast on IE, and semi-fast on
     * other browsers.
     */
    getValidHtml ( ) : string ;
    getWindow ( ) : Window ;
    /**
     * Inserts a node before (or after) the range.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     * @param before True to insert before, false to insert after.
     */
    insertNode (a : Node | null , b : boolean ) : Node | null ;
    isCollapsed ( ) : boolean ;
    /**
     * Tests whether this range is valid (i.e. whether its endpoints are still in
     * the document).  A range becomes invalid when, after this object was created,
     * either one or both of its endpoints are removed from the document.  Use of
     * an invalid range can lead to runtime errors, particularly in IE.
     */
    isRangeInDocument ( ) : boolean ;
    isReversed ( ) : boolean ;
    removeContents ( ...a : any [] ) : any ;
    /**
     * Replaces the range contents with (possibly a copy of) the given node.  The
     * range may be disrupted beyond recovery because of the way this splits nodes.
     * @param node The node to insert.
     */
    replaceContentsWithNode (node : Node | null ) : Node | null ;
    /**
     * Saves the range using HTML carets. As long as the carets remained in the
     * HTML, the range can be restored...even when the HTML is copied across
     * documents.
     */
    abstract saveUsingCarets ( ) : ಠ_ಠ.clutz.goog.dom.AbstractSavedCaretRange | null ;
    /**
     * Saves the range so that if the start and end nodes are left alone, it can
     * be restored.
     */
    saveUsingDom ( ) : ಠ_ಠ.clutz.goog.dom.SavedRange ;
    select ( ...a : any [] ) : any ;
    /**
     * Sets the native browser range object, overwriting any state this range was
     * storing.
     * @param nativeRange The native browser range object.
     */
    setBrowserRangeObject (nativeRange : Range | null | ಠ_ಠ.clutz.TextRange ) : boolean ;
    /**
     * Surrounds this range with the two given nodes.  The range may be disrupted
     * beyond recovery because of the way this splits nodes.
     * @param startNode The node to insert at the start.
     * @param endNode The node to insert at the end.
     */
    surroundWithNodes (a : GlobalElement | null , b : GlobalElement | null ) : any ;
    /**
     * Gets the browser native selection object from the given window.
     * @param win The window to get the selection object from.
     */
    static getBrowserSelectionForWindow (win : Window | null ) : GlobalObject | null ;
    /**
     * Tests if the given Object is a controlRange.
     * @param range The range object to test.
     */
    static isNativeControlRange (range : GlobalObject | null ) : boolean ;
  }
}
declare module 'goog:goog.dom.AbstractRange' {
  import AbstractRange = ಠ_ಠ.clutz.goog.dom.AbstractRange;
  export default AbstractRange;
}
// Generated from dom/abstractrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
   * adds functions to determine the portion of each text node that is selected.
   */
  class RangeIterator extends ಠ_ಠ.clutz.goog.dom.TagIterator {
    private noStructuralTyping_goog_dom_RangeIterator : any;
    /**
     * Subclass of goog.dom.TagIterator that iterates over a DOM range.  It
     * adds functions to determine the portion of each text node that is selected.
     * @param node The node to start traversal at.  When null, creates an empty iterator.
     * @param opt_reverse Whether to traverse nodes in reverse.
     */
    constructor (node : Node | null , opt_reverse ? : boolean ) ;
    getEndNode ( ) : Node | null ;
    getEndTextOffset ( ) : number ;
    getStartNode ( ) : Node | null ;
    getStartTextOffset ( ) : number ;
    isLast ( ) : boolean ;
  }
}
declare module 'goog:goog.dom.RangeIterator' {
  import RangeIterator = ಠ_ಠ.clutz.goog.dom.RangeIterator;
  export default RangeIterator;
}
// Generated from dom/abstractrange.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Types of ranges.
   */
  /**
   * Types of ranges.
   */
  enum RangeType {
    CONTROL = 'control' ,
    MULTI = 'mutli' ,
    TEXT = 'text' ,
  }
}
declare module 'goog:goog.dom.RangeType' {
  import RangeType = ಠ_ಠ.clutz.goog.dom.RangeType;
  export default RangeType;
}
