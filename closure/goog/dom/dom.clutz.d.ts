//!! generated by clutz.
// Generated from dom/dom.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Alias for getElement.
   * @param element Element ID or a DOM node.
   */
  function $ (a : string | GlobalElement | null ) : GlobalElement | null ;
  /**
   * Alias for `getElementsByTagNameAndClass`.
   * @param opt_tag Element tag name.
   * @param opt_class Optional class name.
   * @param opt_el Optional element to look in.
   */
  function $$ < T = any , R = any > (a ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , b ? : string | null , c ? : GlobalElement | null ) : ArrayLike < R > ;
  /**
   * Alias for `createDom`.
   * @param tagName Tag to create.
   * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element. If an array, the elements will be joined together as the className of the new element.
   * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array, its children will be added as childNodes instead.
   */
  function $dom < T = any , R = any > (a : string | ಠ_ಠ.clutz.goog.dom.TagName < T > , b ? : GlobalObject | null | string ,  ...c : ( GlobalObject | null | string | NodeList | undefined ) [] ) : R ;
  let ASSUME_QUIRKS_MODE : boolean ;
  let ASSUME_STANDARDS_MODE : boolean ;
  /**
   * Appends a node with text or other nodes.
   * @param parent The node to append nodes to.
   * @param var_args The things to append to the node. If this is a Node it is appended as is. If this is a string then a text node is appended. If this is an array like object then fields 0 to length - 1 are appended.
   */
  function append (parent : Node ,  ...var_args : ( GlobalObject | null | string | NodeList ) [] ) : void ;
  /**
   * Appends a child to a node.
   * @param parent Parent.
   * @param child Child.
   */
  function appendChild (parent : Node | null , child : Node | null ) : void ;
  /**
   * Determines if the given node can contain children, intended to be used for
   * HTML generation.
   *
   * IE natively supports node.canHaveChildren but has inconsistent behavior.
   * Prior to IE8 the base tag allows children and in IE9 all nodes return true
   * for canHaveChildren.
   *
   * In practice all non-IE browsers allow you to add children to any node, but
   * the behavior is inconsistent:
   *
   * <pre>
   * var a = goog.dom.createElement(goog.dom.TagName.BR);
   * a.appendChild(document.createTextNode('foo'));
   * a.appendChild(document.createTextNode('bar'));
   * console.log(a.childNodes.length);  // 2
   * console.log(a.innerHTML);  // Chrome: "", IE9: "foobar", FF3.5: "foobar"
   * </pre>
   *
   * For more information, see:
   * http://dev.w3.org/html5/markup/syntax.html#syntax-elements
   *
   * TODO(user): Rename shouldAllowChildren() ?
   * @param node The node to check.
   */
  function canHaveChildren (node : Node | null ) : boolean ;
  /**
   * Compares the document order of two nodes, returning 0 if they are the same
   * node, a negative number if node1 is before node2, and a positive number if
   * node2 is before node1.  Note that we compare the order the tags appear in the
   * document so in the tree <b><i>text</i></b> the B node is considered to be
   * before the I node.
   * @param node1 The first node to compare.
   * @param node2 The second node to compare.
   */
  function compareNodeOrder (node1 : Node | null , node2 : Node | null ) : number ;
  /**
   * Creates a new Node from constant strings of HTML markup.
   * @param var_args The HTML strings to concatenate then convert into a node.
   */
  function constHtmlToNode ( ...var_args : ಠ_ಠ.clutz.goog.string.Const [] ) : Node ;
  /**
   * Whether a node contains another node.
   * @param parent The node that should contain the other node.
   * @param descendant The node to test presence of.
   */
  function contains (parent : Node | null | undefined , descendant : Node | null | undefined ) : boolean ;
  /**
   * Replaces child nodes of `target` with child nodes of `source`. This is
   * roughly equivalent to `target.innerHTML = source.innerHTML` which is not
   * compatible with Trusted Types.
   * @param target Node to clean and replace its children.
   * @param source Node to get the children from. The nodes will be cloned so they will stay in source.
   */
  function copyContents (target : Node | null , source : Node | null ) : void ;
  /**
   * Returns a dom node with a set of attributes.  This function accepts varargs
   * for subsequent nodes to be added.  Subsequent nodes will be added to the
   * first node as childNodes.
   *
   * So:
   * <code>createDom(goog.dom.TagName.DIV, null, createDom(goog.dom.TagName.P),
   * createDom(goog.dom.TagName.P));</code> would return a div with two child
   * paragraphs
   *
   * This function uses {@link goog.dom.setProperties} to set attributes: the
   * `opt_attributes` parameter follows the same rules.
   * @param tagName Tag to create.
   * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element. If an array, the elements will be joined together as the className of the new element.
   * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array or NodeList, its elements will be added as childNodes instead.
   */
  function createDom < T = any , R = any > (tagName : string | ಠ_ಠ.clutz.goog.dom.TagName < T > , opt_attributes ? : GlobalObject | null | string ,  ...var_args : ( GlobalObject | null | string | NodeList | undefined ) [] ) : R ;
  /**
   * Creates a new element.
   * @param name Tag to create.
   */
  function createElement < T = any , R = any > (name : string | ಠ_ಠ.clutz.goog.dom.TagName < T > ) : R ;
  /**
   * Create a table.
   * @param rows The number of rows in the table.  Must be >= 1.
   * @param columns The number of columns in the table.  Must be >= 1.
   * @param opt_fillWithNbsp If true, fills table entries with `goog.string.Unicode.NBSP` characters.
   */
  function createTable (rows : number , columns : number , opt_fillWithNbsp ? : boolean ) : GlobalElement ;
  /**
   * Creates a new text node.
   * @param content Content.
   */
  function createTextNode (content : number | string ) : Text ;
  /**
   * Find the deepest common ancestor of the given nodes.
   * @param var_args The nodes to find a common ancestor of.
   */
  function findCommonAncestor ( ...var_args : ( Node | null ) [] ) : Node | null ;
  /**
   * Finds the first descendant element (excluding `root`) that matches the filter
   * function, using depth first search. Prefer using `querySelector` if the
   * matching criteria can be expressed as a CSS selector.
   * @param pred Filter function.
   */
  function findElement (root : GlobalElement | Document , pred : (a : GlobalElement ) => boolean ) : GlobalElement | null ;
  /**
   * Finds all the descendant elements (excluding `root`) that match the filter
   * function, using depth first search. Prefer using `querySelectorAll` if the
   * matching criteria can be expressed as a CSS selector.
   * @param pred Filter function.
   */
  function findElements (root : GlobalElement | Document , pred : (a : GlobalElement ) => boolean ) : GlobalElement [] ;
  /**
   * Finds the first descendant node that matches the filter function, using depth
   * first search. This function offers the most general purpose way of finding a
   * matching element.
   *
   * Prefer using `querySelector` if the matching criteria can be expressed as a
   * CSS selector, or `goog.dom.findElement` if you would filter for `nodeType ==
   * Node.ELEMENT_NODE`.
   * @param root The root of the tree to search.
   * @param p The filter function.
   */
  function findNode (root : Node | null , p : (a : Node | null ) => boolean ) : Node | null | undefined ;
  /**
   * Finds all the descendant nodes that match the filter function, using depth
   * first search. This function offers the most general-purpose way
   * of finding a set of matching elements.
   *
   * Prefer using `querySelectorAll` if the matching criteria can be expressed as
   * a CSS selector, or `goog.dom.findElements` if you would filter for
   * `nodeType == Node.ELEMENT_NODE`.
   * @param root The root of the tree to search.
   * @param p The filter function.
   */
  function findNodes (root : Node | null , p : (a : Node | null ) => boolean ) : Node [] ;
  /**
   * Flattens an element. That is, removes it and replace it with its children.
   * Does nothing if the element is not in the document.
   * @param element The element to flatten.
   */
  function flattenElement (element : GlobalElement | null ) : GlobalElement | null | undefined ;
  /**
   * Determines the active element in the given document.
   * @param doc The document to look in.
   */
  function getActiveElement (doc : Document | null ) : GlobalElement | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that passes the
   * matcher function.
   * @param element The DOM node to start with.
   * @param matcher A function that returns true if the passed node matches the desired criteria.
   * @param opt_includeNode If true, the node itself is included in the search (the first call to the matcher will pass startElement as the node to test).
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestor (element : Node | null , matcher : (a : Node ) => boolean , opt_includeNode ? : boolean , opt_maxSearchSteps ? : number ) : Node | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that has the passed
   * class name. If the passed element matches the specified criteria, the
   * element itself is returned.
   * @param element The DOM node to start with.
   * @param className The class name to match.
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestorByClass (element : Node | null , className : string , opt_maxSearchSteps ? : number ) : GlobalElement | null ;
  /**
   * Walks up the DOM hierarchy returning the first ancestor that has the passed
   * tag name and/or class name. If the passed element matches the specified
   * criteria, the element itself is returned.
   * @param element The DOM node to start with.
   * @param opt_tag The tag name to match (or null/undefined to match only based on class name).
   * @param opt_class The class name to match (or null/undefined to match only based on tag name).
   * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
   */
  function getAncestorByTagNameAndClass < T = any , R = any > (element : Node | null , opt_tag ? : ಠ_ಠ.clutz.goog.dom.TagName < T > | null | string , opt_class ? : string | null , opt_maxSearchSteps ? : number ) : R | null ;
  /**
   * Gets '2d' context of a canvas. Shortcut for canvas.getContext('2d') with a
   * type information.
   */
  function getCanvasContext2D (canvas : HTMLCanvasElement | ಠ_ಠ.clutz.OffscreenCanvas ) : CanvasRenderingContext2D ;
  /**
   * Returns an array containing just the element children of the given element.
   * @param element The element whose element children we want.
   */
  function getChildren (element : GlobalElement | null ) : GlobalElement [] | NodeList < GlobalElement > ;
  /**
   * Gets the document object being used by the dom library.
   */
  function getDocument ( ) : Document ;
  /**
   * Calculates the height of the document.
   */
  function getDocumentHeight ( ) : number ;
  /**
   * Calculates the height of the document of the given window.
   * @param win The window whose document height to retrieve.
   */
  function getDocumentHeightForWindow (win : Window ) : number ;
  /**
   * Gets the document scroll distance as a coordinate object.
   */
  function getDocumentScroll ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Gets the document scroll element.
   */
  function getDocumentScrollElement ( ) : GlobalElement ;
  /**
   * Gets the DomHelper object for the document where the element resides.
   * @param opt_element If present, gets the DomHelper for this element.
   */
  function getDomHelper (opt_element ? : Node | null | Window ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
  /**
   * Gets an element from the current document by element id.
   *
   * If an Element is passed in, it is returned.
   * @param element Element ID or a DOM node.
   */
  function getElement (element : string | GlobalElement | null ) : GlobalElement | null ;
  /**
   * Returns the first element with the provided className.
   * @param className the name of the class to look for.
   * @param opt_el Optional element to look in.
   */
  function getElementByClass (className : string , opt_el ? : GlobalElement | null | Document ) : GlobalElement | null ;
  /**
   * Gets the first element matching the tag and the class.
   * @param opt_tag Element tag name.
   * @param opt_class Optional class name.
   * @param opt_el Optional element to look in.
   */
  function getElementByTagNameAndClass < T = any , R = any > (opt_tag ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , opt_class ? : string | null , opt_el ? : Document | null | GlobalElement ) : R | null ;
  /**
   * Returns a static, array-like list of the elements with the provided
   * className.
   * @param className the name of the class to look for.
   * @param opt_el Optional element to look in.
   */
  function getElementsByClass (className : string , opt_el ? : Document | null | GlobalElement ) : ArrayLike < GlobalElement > ;
  /**
   * Gets elements by tag name.
   * @param opt_parent Parent element or document where to look for elements. Defaults to document.
   */
  function getElementsByTagName < T = any , R = any > (tagName : ಠ_ಠ.clutz.goog.dom.TagName < T > , opt_parent ? : Document | GlobalElement ) : NodeList < R > ;
  /**
   * Looks up elements by both tag and class name, using browser native functions
   * (`querySelectorAll`, `getElementsByTagName` or
   * `getElementsByClassName`) where possible. This function
   * is a useful, if limited, way of collecting a list of DOM elements
   * with certain characteristics.  `querySelectorAll` offers a
   * more powerful and general solution which allows matching on CSS3
   * selector expressions.
   *
   * Note that tag names are case sensitive in the SVG namespace, and this
   * function converts opt_tag to uppercase for comparisons. For queries in the
   * SVG namespace you should use querySelector or querySelectorAll instead.
   * https://bugzilla.mozilla.org/show_bug.cgi?id=963870
   * https://bugs.webkit.org/show_bug.cgi?id=83438
   * @param opt_tag Element tag name.
   * @param opt_class Optional class name.
   * @param opt_el Optional element to look in.
   */
  function getElementsByTagNameAndClass < T = any , R = any > (opt_tag ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , opt_class ? : string | null , opt_el ? : Document | null | GlobalElement ) : ArrayLike < R > ;
  /**
   * Returns the first child node that is an element.
   * @param node The node to get the first child element of.
   */
  function getFirstElementChild (node : Node | null ) : GlobalElement | null ;
  /**
   * Cross-browser function for getting the document element of a frame or iframe.
   * @param frame Frame element.
   */
  function getFrameContentDocument (frame : GlobalElement | null ) : Document ;
  /**
   * Cross-browser function for getting the window of a frame or iframe.
   * @param frame Frame element.
   */
  function getFrameContentWindow (frame : GlobalElement | null ) : Window | null ;
  /**
   * Gets an HTML element from the current document by element id.
   */
  function getHTMLElement (id : string ) : HTMLElement | null ;
  /**
   * Returns the first element with the provided className and asserts that it is
   * an HTML element.
   * @param className the name of the class to look for.
   * @param opt_parent Optional element to look in.
   */
  function getHTMLElementByClass (className : string , opt_parent ? : GlobalElement | Document ) : HTMLElement | null ;
  /**
   * Returns the last child node that is an element.
   * @param node The node to get the last child element of.
   */
  function getLastElementChild (node : Node | null ) : GlobalElement | null ;
  /**
   * Returns the first next sibling that is an element.
   * @param node The node to get the next sibling element of.
   */
  function getNextElementSibling (node : Node | null ) : GlobalElement | null ;
  /**
   * Returns the next node in source order from the given node.
   * @param node The node.
   */
  function getNextNode (node : Node | null ) : Node | null ;
  /**
   * Returns the node at a given offset in a parent node.  If an object is
   * provided for the optional third parameter, the node and the remainder of the
   * offset will stored as properties of this object.
   * @param parent The parent node.
   * @param offset The offset into the parent node.
   * @param opt_result Object to be used to store the return value. The return value will be stored in the form {node: Node, remainder: number} if this object is provided.
   */
  function getNodeAtOffset (parent : Node | null , offset : number , opt_result ? : GlobalObject | null ) : Node | null ;
  /**
   * Returns the text length of the text contained in a node, without markup. This
   * is equivalent to the selection length if the node was selected, or the number
   * of cursor movements to traverse the node. Images & BRs take one space.  New
   * lines are ignored.
   * @param node The node whose text content length is being calculated.
   */
  function getNodeTextLength (node : Node | null ) : number ;
  /**
   * Returns the text offset of a node relative to one of its ancestors. The text
   * length is the same as the length calculated by goog.dom.getNodeTextLength.
   * @param node The node whose offset is being calculated.
   * @param opt_offsetParent The node relative to which the offset will be calculated. Defaults to the node's owner document's body.
   */
  function getNodeTextOffset (node : Node | null , opt_offsetParent ? : Node | null ) : number ;
  /**
   * Gets the outerHTML of a node, which is like innerHTML, except that it
   * actually contains the HTML of the node itself.
   * @param element The element to get the HTML of.
   */
  function getOuterHtml (element : GlobalElement | null ) : string ;
  /**
   * Returns the owner document for a node.
   * @param node The node to get the document for.
   */
  function getOwnerDocument (node : Node | null | Window ) : Document ;
  /**
   * Gets the page scroll distance as a coordinate object.
   * @param opt_window Optional window element to test.
   */
  function getPageScroll (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Returns an element's parent, if it's an Element.
   * @param element The DOM element.
   */
  function getParentElement (element : GlobalElement | null ) : GlobalElement | null ;
  /**
   * Gives the current devicePixelRatio.
   *
   * By default, this is the value of window.devicePixelRatio (which should be
   * preferred if present).
   *
   * If window.devicePixelRatio is not present, the ratio is calculated with
   * window.matchMedia, if present. Otherwise, gives 1.0.
   *
   * Some browsers (including Chrome) consider the browser zoom level in the pixel
   * ratio, so the value may change across multiple calls.
   */
  function getPixelRatio ( ) : number ;
  /**
   * Returns the first previous sibling that is an element.
   * @param node The node to get the previous sibling element of.
   */
  function getPreviousElementSibling (node : Node | null ) : GlobalElement | null ;
  /**
   * Returns the previous node in source order from the given node.
   * @param node The node.
   */
  function getPreviousNode (node : Node | null ) : Node | null ;
  /**
   * Returns the text content of the current node, without markup.
   *
   * Unlike `getTextContent` this method does not collapse whitespaces
   * or normalize lines breaks.
   * @param node The node from which we are getting content.
   */
  function getRawTextContent (node : Node | null ) : string ;
  /**
   * Gets an element by id, asserting that the element is found.
   *
   * This is used when an element is expected to exist, and should fail with
   * an assertion error if it does not (if assertions are enabled).
   * @param id Element ID.
   */
  function getRequiredElement (id : string ) : GlobalElement ;
  /**
   * Ensures an element with the given className exists, and then returns the
   * first element with the provided className.
   * @param className the name of the class to look for.
   * @param opt_root Optional element or document to look in.
   */
  function getRequiredElementByClass (className : string , opt_root ? : GlobalElement | Document ) : GlobalElement ;
  /**
   * Gets an HTML element by id, asserting that the element is found.
   *
   * This is used when an element is expected to exist, and should fail with
   * an assertion error if it does not (if assertions are enabled).
   * @param id Element ID.
   */
  function getRequiredHTMLElement (id : string ) : HTMLElement ;
  /**
   * Ensures an element with the given className exists, and then returns the
   * first element with the provided className after asserting that it is an
   * HTML element.
   * @param className the name of the class to look for.
   * @param opt_parent Optional element or document to look in.
   */
  function getRequiredHTMLElementByClass (className : string , opt_parent ? : GlobalElement | Document ) : HTMLElement ;
  /**
   * Returns the text content of the current node, without markup and invisible
   * symbols. New lines are stripped and whitespace is collapsed,
   * such that each character would be visible.
   *
   * In browsers that support it, innerText is used.  Other browsers attempt to
   * simulate it via node traversal.  Line breaks are canonicalized in IE.
   * @param node The node from which we are getting content.
   */
  function getTextContent (node : Node | null ) : string ;
  /**
   * Gets the dimensions of the viewport.
   *
   * Gecko Standards mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of body element.
   *
   * docEl.clientHeight Height of viewport excluding scrollbar.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of document.
   *
   * Gecko Backwards compatible mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight Height of document.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * IE6/7 Standards mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Undefined.
   * body.clientWidth   Width of body element.
   *
   * docEl.clientHeight Height of viewport excluding scrollbar.
   * win.innerHeight    Undefined.
   * body.clientHeight  Height of document element.
   *
   * IE5 + IE6/7 Backwards compatible mode:
   * docEl.clientWidth  0.
   * win.innerWidth     Undefined.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight 0.
   * win.innerHeight    Undefined.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * Opera 9 Standards and backwards compatible mode:
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * win.innerWidth     Width of viewport including scrollbar.
   * body.clientWidth   Width of viewport excluding scrollbar.
   *
   * docEl.clientHeight Height of document.
   * win.innerHeight    Height of viewport including scrollbar.
   * body.clientHeight  Height of viewport excluding scrollbar.
   *
   * WebKit:
   * Safari 2
   * docEl.clientHeight Same as scrollHeight.
   * docEl.clientWidth  Same as innerWidth.
   * win.innerWidth     Width of viewport excluding scrollbar.
   * win.innerHeight    Height of the viewport including scrollbar.
   * frame.innerHeight  Height of the viewport exluding scrollbar.
   *
   * Safari 3 (tested in 522)
   *
   * docEl.clientWidth  Width of viewport excluding scrollbar.
   * docEl.clientHeight Height of viewport excluding scrollbar in strict mode.
   * body.clientHeight  Height of viewport excluding scrollbar in quirks mode.
   * @param opt_window Optional window element to test.
   */
  function getViewportSize (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Size ;
  /**
   * Gets the window object associated with the given document.
   * @param opt_doc Document object to get window for.
   */
  function getWindow (opt_doc ? : Document | null ) : Window ;
  /**
   * Insert a child at a given index. If index is larger than the number of child
   * nodes that the parent currently has, the node is inserted as the last child
   * node.
   * @param parent The element into which to insert the child.
   * @param child The element to insert.
   * @param index The index at which to insert the new child node. Must not be negative.
   */
  function insertChildAt (parent : GlobalElement | null , child : Node | null , index : number ) : void ;
  /**
   * Inserts a new node after an existing reference node (i.e. as the next
   * sibling). If the reference node has no parent, then does nothing.
   * @param newNode Node to insert.
   * @param refNode Reference node to insert after.
   */
  function insertSiblingAfter (newNode : Node | null , refNode : Node | null ) : void ;
  /**
   * Inserts a new node before an existing reference node (i.e. as the previous
   * sibling). If the reference node has no parent, then does nothing.
   * @param newNode Node to insert.
   * @param refNode Reference node to insert before.
   */
  function insertSiblingBefore (newNode : Node | null , refNode : Node | null ) : void ;
  /**
   * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
   * mode, false otherwise.
   */
  function isCss1CompatMode ( ) : boolean ;
  /**
   * Whether the object looks like an Element.
   * @param obj The object being tested for Element likeness.
   */
  function isElement (obj ? : any ) : boolean ;
  /**
   * Returns true if the element can be focused, i.e. it has a tab index that
   * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
   * that natively supports keyboard focus.
   * @param element Element to check.
   */
  function isFocusable (element : GlobalElement ) : boolean ;
  /**
   * Returns true if the element has a tab index that allows it to receive
   * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
   * natively support keyboard focus, even if they have no tab index.
   * @param element Element to check.
   */
  function isFocusableTabIndex (element : GlobalElement ) : boolean ;
  /**
   * Returns whether node is in a document or detached. Throws an error if node
   * itself is a document. This specifically handles two cases beyond naive use of
   * builtins: (1) it works correctly in IE, and (2) it works for elements from
   * different documents/iframes. If neither of these considerations are relevant
   * then a simple `document.contains(node)` may be used instead.
   */
  function isInDocument (node : Node ) : boolean ;
  /**
   * Whether the object looks like a DOM node.
   * @param obj The object being tested for node likeness.
   */
  function isNodeLike (obj ? : any ) : boolean ;
  /**
   * Returns true if the object is a `NodeList`.  To qualify as a NodeList,
   * the object must have a numeric length property and an item function (which
   * has type 'string' on IE for some reason).
   * @param val Object to test.
   */
  function isNodeList (val : GlobalObject | null ) : boolean ;
  /**
   * Returns true if the specified value is a Window object. This includes the
   * global window for HTML pages, and iframe windows.
   * @param obj Variable to test.
   */
  function isWindow (obj ? : any ) : boolean ;
  /**
   * Removes all the child nodes on a DOM node.
   * @param node Node to remove children from.
   */
  function removeChildren (node : Node | null ) : void ;
  /**
   * Removes a node from its parent.
   * @param node The node to remove.
   */
  function removeNode (node : Node | null ) : Node | null ;
  /**
   * Replaces a node in the DOM tree. Will do nothing if `oldNode` has no
   * parent.
   * @param newNode Node to insert.
   * @param oldNode Node to replace.
   */
  function replaceNode (newNode : Node | null , oldNode : Node | null ) : void ;
  /**
   * Converts HTML markup into a node. This is a safe version of
   * `goog.dom.htmlToDocumentFragment` which is now deleted.
   * @param html The HTML markup to convert.
   */
  function safeHtmlToNode (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : Node ;
  /**
   * Enables or disables keyboard focus support on the element via its tab index.
   * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
   * (or elements that natively support keyboard focus, like form elements) can
   * receive keyboard focus.  See http://go/tabindex for more info.
   * @param element Element whose tab index is to be changed.
   * @param enable Whether to set or remove a tab index on the element that supports keyboard focus.
   */
  function setFocusableTabIndex (element : GlobalElement | null , enable : boolean ) : void ;
  /**
   * Sets multiple properties, and sometimes attributes, on an element. Note that
   * properties are simply object properties on the element instance, while
   * attributes are visible in the DOM. Many properties map to attributes with the
   * same names, some with different names, and there are also unmappable cases.
   *
   * This method sets properties by default (which means that custom attributes
   * are not supported). These are the exeptions (some of which is legacy):
   * - "style": Even though this is an attribute name, it is translated to a
   * property, "style.cssText". Note that this property sanitizes and formats
   * its value, unlike the attribute.
   * - "class": This is an attribute name, it is translated to the "className"
   * property.
   * - "for": This is an attribute name, it is translated to the "htmlFor"
   * property.
   * - Entries in {@see goog.dom.DIRECT_ATTRIBUTE_MAP_} are set as attributes,
   * this is probably due to browser quirks.
   * - "aria-*", "data-*": Always set as attributes, they have no property
   * counterparts.
   * @param element DOM node to set properties on.
   * @param properties Hash of property:value pairs. Property values can be strings or goog.string.TypedString values (such as goog.html.SafeUrl).
   */
  function setProperties (element : GlobalElement | null , properties : GlobalObject | null ) : void ;
  /**
   * Sets the text content of a node, with cross-browser support.
   * @param node The node to change the text content of.
   * @param text The value that should replace the node's content.
   */
  function setTextContent (node : Node | null , text : string | number ) : void ;
}
declare module 'goog:goog.dom' {
  import dom = ಠ_ಠ.clutz.goog.dom;
  export = dom;
}
// Generated from dom/dom.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Typedef for use with goog.dom.createDom and goog.dom.append.
   */
  type Appendable = GlobalObject | null | string | NodeList ;
}
declare module 'goog:goog.dom.Appendable' {
  import Appendable = ಠ_ಠ.clutz.goog.dom.Appendable;
  export default Appendable;
}
// Generated from dom/dom.js
declare namespace ಠ_ಠ.clutz.goog.dom {
  /**
   * Create an instance of a DOM helper with a new document object.
   */
  class DomHelper {
    private noStructuralTyping_goog_dom_DomHelper : any;
    /**
     * Create an instance of a DOM helper with a new document object.
     * @param opt_document Document object to associate with this DOM helper.
     */
    constructor (opt_document ? : Document | null ) ;
    /**
     * Alias for `getElement`.
     * @param element Element ID or a DOM node.
     */
    $ (a : string | GlobalElement | null ) : GlobalElement | null ;
    /**
     * Alias for `getElementsByTagNameAndClass`.
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    $$ < T = any , R = any > (a ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , b ? : string | null , c ? : GlobalElement | null ) : ArrayLike < R > ;
    /**
     * Alias for `createDom`.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element. If an array, the elements will be joined together as the className of the new element.
     * @param var_args Further DOM nodes or strings for text nodes.  If one of the var_args is an array, its children will be added as childNodes instead.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    $dom < T = any , R = any > (a : string | ಠ_ಠ.clutz.goog.dom.TagName < T > , b ? : GlobalObject | null | string ,  ...c : ( GlobalObject | null | string | NodeList | undefined ) [] ) : R ;
    /**
     * Appends a node with text or other nodes.
     * @param parent The node to append nodes to.
     * @param var_args The things to append to the node. If this is a Node it is appended as is. If this is a string then a text node is appended. If this is an array like object then fields 0 to length - 1 are appended.
     */
    append (a : Node ,  ...b : ( GlobalObject | null | string | NodeList ) [] ) : any ;
    /**
     * Appends a child to a node.
     * @param parent Parent.
     * @param child Child.
     */
    appendChild (a : Node | null , b : Node | null ) : any ;
    /**
     * Determines if the given node can contain children, intended to be used for
     * HTML generation.
     * @param node The node to check.
     */
    canHaveChildren (a : Node | null ) : boolean ;
    /**
     * Compares the document order of two nodes, returning 0 if they are the same
     * node, a negative number if node1 is before node2, and a positive number if
     * node2 is before node1.  Note that we compare the order the tags appear in the
     * document so in the tree <b><i>text</i></b> the B node is considered to be
     * before the I node.
     * @param node1 The first node to compare.
     * @param node2 The second node to compare.
     */
    compareNodeOrder (a : Node | null , b : Node | null ) : number ;
    /**
     * Whether a node contains another node.
     * @param parent The node that should contain the other node.
     * @param descendant The node to test presence of.
     */
    contains (a : Node | null , b : Node | null ) : boolean ;
    /**
     * Replaces child nodes of `target` with child nodes of `source`. This is
     * roughly equivalent to `target.innerHTML = source.innerHTML` which is not
     * compatible with Trusted Types.
     * @param target Node to clean and replace its children.
     * @param source Node to get the children from. The nodes will be cloned so they will stay in source.
     */
    copyContents (a : Node | null , b : Node | null ) : any ;
    /**
     * Returns a dom node with a set of attributes.  This function accepts varargs
     * for subsequent nodes to be added.  Subsequent nodes will be added to the
     * first node as childNodes.
     *
     * So:
     * <code>createDom(goog.dom.TagName.DIV, null, createDom(goog.dom.TagName.P),
     * createDom(goog.dom.TagName.P));</code> would return a div with two child
     * paragraphs
     *
     * An easy way to move all child nodes of an existing element to a new parent
     * element is:
     * <code>createDom(goog.dom.TagName.DIV, null, oldElement.childNodes);</code>
     * which will remove all child nodes from the old element and add them as
     * child nodes of the new DIV.
     * @param tagName Tag to create.
     * @param opt_attributes If object, then a map of name-value pairs for attributes. If a string, then this is the className of the new element. If an array, the elements will be joined together as the className of the new element.
     * @param var_args Further DOM nodes or strings for text nodes. If one of the var_args is an array or NodeList, its elements will be added as childNodes instead.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    createDom < T = any , R = any > (tagName : string | ಠ_ಠ.clutz.goog.dom.TagName < T > , opt_attributes ? : GlobalObject | null | string ,  ...var_args : ( GlobalObject | null | string | NodeList | undefined ) [] ) : R ;
    /**
     * Creates a new element.
     * @param name Tag to create.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    createElement < T = any , R = any > (name : string | ಠ_ಠ.clutz.goog.dom.TagName < T > ) : R ;
    /**
     * Create a table.
     * @param rows The number of rows in the table.  Must be >= 1.
     * @param columns The number of columns in the table.  Must be >= 1.
     * @param opt_fillWithNbsp If true, fills table entries with `goog.string.Unicode.NBSP` characters.
     */
    createTable (rows : number , columns : number , opt_fillWithNbsp ? : boolean ) : HTMLElement ;
    /**
     * Creates a new text node.
     * @param content Content.
     */
    createTextNode (content : number | string ) : Text ;
    /**
     * Find the deepest common ancestor of the given nodes.
     * @param var_args The nodes to find a common ancestor of.
     */
    findCommonAncestor ( ...a : ( Node | null ) [] ) : Node | null ;
    /**
     * Finds the first descendant node that matches the filter function. This does
     * a depth first search.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    findNode (a : Node | null , b : (a : Node | null ) => boolean ) : Node | null | undefined ;
    /**
     * Finds all the descendant nodes that matches the filter function. This does a
     * depth first search.
     * @param root The root of the tree to search.
     * @param p The filter function.
     */
    findNodes (a : Node | null , b : (a : Node | null ) => boolean ) : ( Node | null ) [] | null ;
    /**
     * Flattens an element. That is, removes it and replace it with its children.
     * @param element The element to flatten.
     */
    flattenElement (a : GlobalElement | null ) : GlobalElement | null | undefined ;
    /**
     * Determines the active element in the given document.
     * @param opt_doc The document to look in.
     */
    getActiveElement (opt_doc ? : Document | null ) : GlobalElement | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that passes the
     * matcher function.
     * @param element The DOM node to start with.
     * @param matcher A function that returns true if the passed node matches the desired criteria.
     * @param opt_includeNode If true, the node itself is included in the search (the first call to the matcher will pass startElement as the node to test).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    getAncestor (a : Node | null , b : (a : Node | null ) => boolean , c ? : boolean , d ? : number ) : Node | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the passed
     * class name. If the passed element matches the specified criteria, the
     * element itself is returned.
     * @param element The DOM node to start with.
     * @param class The class name to match.
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    getAncestorByClass (a : Node | null , b : string , c ? : number ) : GlobalElement | null ;
    /**
     * Walks up the DOM hierarchy returning the first ancestor that has the passed
     * tag name and/or class name. If the passed element matches the specified
     * criteria, the element itself is returned.
     * @param element The DOM node to start with.
     * @param opt_tag The tag name to match (or null/undefined to match only based on class name).
     * @param opt_class The class name to match (or null/undefined to match only based on tag name).
     * @param opt_maxSearchSteps Maximum number of levels to search up the dom.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    getAncestorByTagNameAndClass < T = any , R = any > (a : Node | null , b ? : ಠ_ಠ.clutz.goog.dom.TagName < T > | null | string , c ? : string | null , d ? : number ) : R | null ;
    /**
     * Gets '2d' context of a canvas. Shortcut for canvas.getContext('2d') with a
     * type information.
     */
    getCanvasContext2D (a : HTMLCanvasElement ) : CanvasRenderingContext2D ;
    /**
     * Returns an array containing just the element children of the given element.
     * @param element The element whose element children we want.
     */
    getChildren (a : GlobalElement | null ) : GlobalElement [] | NodeList < GlobalElement > ;
    /**
     * Gets the document object being used by the dom library.
     */
    getDocument ( ) : Document ;
    /**
     * Calculates the height of the document.
     */
    getDocumentHeight ( ) : number ;
    /**
     * Gets the document scroll distance as a coordinate object.
     */
    getDocumentScroll ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Gets the document scroll element.
     */
    getDocumentScrollElement ( ) : GlobalElement ;
    /**
     * Gets the dom helper object for the document where the element resides.
     * @param opt_node If present, gets the DomHelper for this node.
     */
    getDomHelper (a ? : Node | null ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Alias for `getElementById`. If a DOM node is passed in then we just
     * return that.
     * @param element Element ID or a DOM node.
     */
    getElement (element : string | GlobalElement | null ) : GlobalElement | null ;
    /**
     * Returns the first element we find matching the provided class name.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    getElementByClass (className : string , opt_el ? : GlobalElement | null | Document ) : GlobalElement | null ;
    /**
     * Gets the first element matching the tag and the class.
     * @param opt_tag Element tag name.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    getElementByTagNameAndClass < T = any , R = any > (opt_tag ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , opt_class ? : string | null , opt_el ? : Document | null | GlobalElement ) : R | null ;
    /**
     * Returns an array of all the elements with the provided className.
     * @param className the name of the class to look for.
     * @param opt_el Optional element to look in.
     */
    getElementsByClass (className : string , opt_el ? : GlobalElement | null | Document ) : ArrayLike < GlobalElement > ;
    /**
     * Gets elements by tag name.
     * @param opt_parent Parent element or document where to look for elements. Defaults to document of this DomHelper.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    getElementsByTagName < T = any , R = any > (tagName : ಠ_ಠ.clutz.goog.dom.TagName < T > , opt_parent ? : Document | GlobalElement ) : NodeList < R > ;
    /**
     * Looks up elements by both tag and class name, using browser native functions
     * (`querySelectorAll`, `getElementsByTagName` or
     * `getElementsByClassName`) where possible. The returned array is a live
     * NodeList or a static list depending on the code path taken.
     * @param opt_tag Element tag name or * for all tags.
     * @param opt_class Optional class name.
     * @param opt_el Optional element to look in.
     */
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    getElementsByTagNameAndClass < T = any , R = any > (opt_tag ? : string | ಠ_ಠ.clutz.goog.dom.TagName < T > | null , opt_class ? : string | null , opt_el ? : Document | null | GlobalElement ) : ArrayLike < R > ;
    /**
     * Returns the first child node that is an element.
     * @param node The node to get the first child element of.
     */
    getFirstElementChild (a : Node | null ) : GlobalElement | null ;
    /**
     * Cross browser function for getting the document element of an iframe.
     * @param iframe Iframe element.
     */
    getFrameContentDocument (a : GlobalElement | null ) : Document ;
    /**
     * Cross browser function for getting the window of a frame or iframe.
     * @param frame Frame element.
     */
    getFrameContentWindow (a : GlobalElement | null ) : Window | null ;
    /**
     * Returns the last child node that is an element.
     * @param node The node to get the last child element of.
     */
    getLastElementChild (a : Node | null ) : GlobalElement | null ;
    /**
     * Returns the first next sibling that is an element.
     * @param node The node to get the next sibling element of.
     */
    getNextElementSibling (a : Node | null ) : GlobalElement | null ;
    /**
     * Returns the next node in source order from the given node.
     * @param node The node.
     */
    getNextNode (a : Node | null ) : Node | null ;
    /**
     * Returns the node at a given offset in a parent node.  If an object is
     * provided for the optional third parameter, the node and the remainder of the
     * offset will stored as properties of this object.
     * @param parent The parent node.
     * @param offset The offset into the parent node.
     * @param opt_result Object to be used to store the return value. The return value will be stored in the form {node: Node, remainder: number} if this object is provided.
     */
    getNodeAtOffset (a : Node | null , b : number , c ? : GlobalObject | null ) : Node | null ;
    /**
     * Returns the text length of the text contained in a node, without markup. This
     * is equivalent to the selection length if the node was selected, or the number
     * of cursor movements to traverse the node. Images & BRs take one space.  New
     * lines are ignored.
     * @param node The node whose text content length is being calculated.
     */
    getNodeTextLength (a : Node | null ) : number ;
    /**
     * Returns the text offset of a node relative to one of its ancestors. The text
     * length is the same as the length calculated by
     * `goog.dom.getNodeTextLength`.
     * @param node The node whose offset is being calculated.
     * @param opt_offsetParent Defaults to the node's owner document's body.
     */
    getNodeTextOffset (a : Node | null , b ? : Node | null ) : number ;
    /**
     * Gets the outerHTML of a node, which islike innerHTML, except that it
     * actually contains the HTML of the node itself.
     * @param element The element to get the HTML of.
     */
    getOuterHtml (a : GlobalElement | null ) : string ;
    /**
     * Returns the owner document for a node.
     * @param node The node to get the document for.
     */
    getOwnerDocument (a : Node | null ) : Document ;
    /**
     * Returns an element's parent, if it's an Element.
     * @param element The DOM element.
     */
    getParentElement (a : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Returns the first previous sibling that is an element.
     * @param node The node to get the previous sibling element of.
     */
    getPreviousElementSibling (a : Node | null ) : GlobalElement | null ;
    /**
     * Returns the previous node in source order from the given node.
     * @param node The node.
     */
    getPreviousNode (a : Node | null ) : Node | null ;
    /**
     * Gets an element by id, asserting that the element is found.
     *
     * This is used when an element is expected to exist, and should fail with
     * an assertion error if it does not (if assertions are enabled).
     * @param id Element ID.
     */
    getRequiredElement (id : string ) : GlobalElement ;
    /**
     * Ensures an element with the given className exists, and then returns the
     * first element with the provided className.
     * @param className the name of the class to look for.
     * @param opt_root Optional element or document to look in.
     */
    getRequiredElementByClass (className : string , opt_root ? : GlobalElement | Document ) : GlobalElement ;
    /**
     * Returns the text contents of the current node, without markup. New lines are
     * stripped and whitespace is collapsed, such that each character would be
     * visible.
     *
     * In browsers that support it, innerText is used.  Other browsers attempt to
     * simulate it via node traversal.  Line breaks are canonicalized in IE.
     * @param node The node from which we are getting content.
     */
    getTextContent (a : Node | null ) : string ;
    /**
     * Gets the dimensions of the viewport.
     * @param opt_window Optional window element to test. Defaults to the window of the Dom Helper.
     */
    getViewportSize (opt_window ? : Window | null ) : ಠ_ಠ.clutz.goog.math.Size ;
    /**
     * Gets the window object associated with the document.
     */
    getWindow ( ) : Window ;
    /**
     * Insert a child at a given index. If index is larger than the number of child
     * nodes that the parent currently has, the node is inserted as the last child
     * node.
     * @param parent The element into which to insert the child.
     * @param child The element to insert.
     * @param index The index at which to insert the new child node. Must not be negative.
     */
    insertChildAt (a : GlobalElement | null , b : Node | null , c : number ) : any ;
    /**
     * Inserts a new node after an existing reference node (i.e., as the next
     * sibling). If the reference node has no parent, then does nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert after.
     */
    insertSiblingAfter (a : Node | null , b : Node | null ) : any ;
    /**
     * Inserts a new node before an existing reference node (i.e., as the previous
     * sibling). If the reference node has no parent, then does nothing.
     * @param newNode Node to insert.
     * @param refNode Reference node to insert before.
     */
    insertSiblingBefore (a : Node | null , b : Node | null ) : any ;
    /**
     * Returns true if the browser is in "CSS1-compatible" (standards-compliant)
     * mode, false otherwise.
     */
    isCss1CompatMode ( ) : boolean ;
    /**
     * Whether the object looks like an Element.
     * @param obj The object being tested for Element likeness.
     */
    isElement (a ? : any ) : boolean ;
    /**
     * Returns true if the element can be focused, i.e. it has a tab index that
     * allows it to receive keyboard focus (tabIndex >= 0), or it is an element
     * that natively supports keyboard focus.
     * @param element Element to check.
     */
    isFocusable (a : GlobalElement ) : boolean ;
    /**
     * Returns true if the element has a tab index that allows it to receive
     * keyboard focus (tabIndex >= 0), false otherwise.  Note that some elements
     * natively support keyboard focus, even if they have no tab index.
     * @param element Element to check.
     */
    isFocusableTabIndex (a : GlobalElement ) : boolean ;
    /**
     * Whether the object looks like a DOM node.
     * @param obj The object being tested for node likeness.
     */
    isNodeLike (a ? : any ) : boolean ;
    /**
     * Returns true if the object is a `NodeList`.  To qualify as a NodeList,
     * the object must have a numeric length property and an item function (which
     * has type 'string' on IE for some reason).
     * @param val Object to test.
     */
    isNodeList (a : GlobalObject | null ) : boolean ;
    /**
     * Returns true if the specified value is a Window object. This includes the
     * global window for HTML pages, and iframe windows.
     * @param obj Variable to test.
     */
    isWindow (a ? : any ) : boolean ;
    /**
     * Removes all the child nodes on a DOM node.
     * @param node Node to remove children from.
     */
    removeChildren (a : Node | null ) : any ;
    /**
     * Removes a node from its parent.
     * @param node The node to remove.
     */
    removeNode (a : Node | null ) : Node | null ;
    /**
     * Replaces a node in the DOM tree. Will do nothing if `oldNode` has no
     * parent.
     * @param newNode Node to insert.
     * @param oldNode Node to replace.
     */
    replaceNode (a : Node | null , b : Node | null ) : any ;
    /**
     * Converts an HTML into a node or a document fragment. A single Node is used if
     * `html` only generates a single node. If `html` generates multiple
     * nodes then these are put inside a `DocumentFragment`. This is a safe
     * version of `goog.dom.DomHelper#htmlToDocumentFragment` which is now
     * deleted.
     * @param html The HTML markup to convert.
     */
    safeHtmlToNode (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : Node ;
    /**
     * Sets the document object.
     * @param document Document object.
     */
    setDocument (document : Document ) : void ;
    /**
     * Enables or disables keyboard focus support on the element via its tab index.
     * Only elements for which {@link goog.dom.isFocusableTabIndex} returns true
     * (or elements that natively support keyboard focus, like form elements) can
     * receive keyboard focus.  See http://go/tabindex for more info.
     * @param element Element whose tab index is to be changed.
     * @param enable Whether to set or remove a tab index on the element that supports keyboard focus.
     */
    setFocusableTabIndex (a : GlobalElement | null , b : boolean ) : any ;
    /**
     * Sets a number of properties on a node.
     * @param element DOM node to set properties on.
     * @param properties Hash of property:value pairs.
     */
    setProperties (a : GlobalElement | null , b : GlobalObject | null ) : any ;
    /**
     * Sets the text content of a node, with cross-browser support.
     * @param node The node to change the text content of.
     * @param text The value that should replace the node's content.
     */
    setTextContent (a : Node | null , b : string | number ) : any ;
  }
}
declare module 'goog:goog.dom.DomHelper' {
  import DomHelper = ಠ_ಠ.clutz.goog.dom.DomHelper;
  export default DomHelper;
}
