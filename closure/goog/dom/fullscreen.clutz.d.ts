//!! generated by clutz.
// Generated from dom/fullscreen.js
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
  /**
   * Options for fullscreen navigation UI:
   * https://fullscreen.spec.whatwg.org/#dictdef-fullscreenoptions
   */
  /**
   * Options for fullscreen navigation UI:
   * https://fullscreen.spec.whatwg.org/#dictdef-fullscreenoptions
   */
  enum FullscreenNavigationUI {
    AUTO = 'auto' ,
    HIDE = 'hide' ,
    SHOW = 'show' ,
  }
  interface FullscreenOptions extends ಠ_ಠ.clutz.FullscreenOptions {
    navigationUI : ಠ_ಠ.clutz.goog.dom.fullscreen.FullscreenNavigationUI ;
  }
  /**
   * Exits full screen.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function exitFullScreen (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : void ;
  /**
   * Get the root element in full screen mode.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function getFullScreenElement (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : GlobalElement | null ;
  /**
   * Determines if the document is full screen.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function isFullScreen (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : boolean ;
  /**
   * Determines if full screen is supported.
   * @param opt_domHelper The DomHelper for the DOM being queried. If not provided, use the current DOM.
   */
  function isSupported (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper ) : boolean ;
  /**
   * Requests putting the element in full screen.
   * @param element The element to put full screen.
   * @param opt_options Options for full screen. This field will be ignored on older browsers.
   */
  function requestFullScreen (element : GlobalElement , opt_options ? : undefined ) : Promise < undefined > | undefined ;
  /**
   * Requests putting the element in full screen with full keyboard access.
   * @param element The element to put full screen.
   * @param opt_options Options for full screen. This field will be ignored on older browsers.
   */
  function requestFullScreenWithKeys (element : GlobalElement , opt_options ? : undefined ) : Promise < undefined > | undefined ;
}
declare module 'goog:goog.dom.fullscreen' {
  import fullscreen = ಠ_ಠ.clutz.goog.dom.fullscreen;
  export = fullscreen;
}
// Generated from dom/fullscreen.js
declare namespace ಠ_ಠ.clutz.goog.dom.fullscreen {
  /**
   * Event types for full screen.
   */
  type EventType = string &{clutzEnumBrand: never} ;
  let EventType : {
    CHANGE : EventType ,
  };
}
declare module 'goog:goog.dom.fullscreen.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.dom.fullscreen.EventType;
  export default EventType;
}
