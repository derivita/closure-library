//!! generated by clutz.
// Generated from dom/iter.js
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
}
declare module 'goog:goog.dom.iter' {
  import iter = ಠ_ಠ.clutz.goog.dom.iter;
  export = iter;
}
// Generated from dom/iter.js
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over a Node's ancestors, stopping after the document body.
   */
  class AncestorIterator extends ಠ_ಠ.clutz.goog.iter.Iterator {
    private noStructuralTyping_goog_dom_iter_AncestorIterator : any;
    /**
     * Iterator over a Node's ancestors, stopping after the document body.
     * @param node The node to start with.
     * @param opt_includeNode Whether to return the given node as the first return value from next.
     */
    constructor (node : Node | null , opt_includeNode ? : boolean ) ;
    next ( ) : IteratorResult < Node > ;
    /**
     * TODO(user): Please do not remove - this will be cleaned up centrally.
     */
    nextValueOrThrow ( ) : Node ;
  }
}
declare module 'goog:goog.dom.iter.AncestorIterator' {
  import AncestorIterator = ಠ_ಠ.clutz.goog.dom.iter.AncestorIterator;
  export default AncestorIterator;
}
// Generated from dom/iter.js
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over an Element's children.
   */
  class ChildIterator extends ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator {
    private noStructuralTyping_goog_dom_iter_ChildIterator : any;
    /**
     * Iterator over an Element's children.
     * @param element The element to iterate over.
     * @param opt_reverse Optionally traverse children from last to first.
     * @param opt_startIndex Optional starting index.
     */
    constructor (element : GlobalElement | null , opt_reverse ? : boolean , opt_startIndex ? : number ) ;
  }
}
declare module 'goog:goog.dom.iter.ChildIterator' {
  import ChildIterator = ಠ_ಠ.clutz.goog.dom.iter.ChildIterator;
  export default ChildIterator;
}
// Generated from dom/iter.js
declare namespace ಠ_ಠ.clutz.goog.dom.iter {
  /**
   * Iterator over a Node's siblings.
   */
  class SiblingIterator extends ಠ_ಠ.clutz.goog.iter.Iterator {
    private noStructuralTyping_goog_dom_iter_SiblingIterator : any;
    /**
     * Iterator over a Node's siblings.
     * @param node The node to start with.
     * @param opt_includeNode Whether to return the given node as the first return value from next.
     * @param opt_reverse Whether to traverse siblings in reverse document order.
     */
    constructor (node : Node | null , opt_includeNode ? : boolean , opt_reverse ? : boolean ) ;
    next ( ) : IteratorResult < Node > ;
    /**
     * TODO(user): Please do not remove - this will be cleaned up centrally.
     */
    nextValueOrThrow ( ) : Node ;
  }
}
declare module 'goog:goog.dom.iter.SiblingIterator' {
  import SiblingIterator = ಠ_ಠ.clutz.goog.dom.iter.SiblingIterator;
  export default SiblingIterator;
}
