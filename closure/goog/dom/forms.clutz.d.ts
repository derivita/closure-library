//!! generated by clutz.
// Generated from dom/forms.js
declare namespace ಠ_ಠ.clutz.goog.dom.forms {
  /**
   * Focuses, and optionally selects the content of, a form element.
   * @param el The form element.
   */
  function focusAndSelect (el : GlobalElement | null ) : void ;
  /**
   * Returns form data as a map of name to value arrays. This doesn't
   * support file inputs.
   * @param form The form.
   */
  function getFormDataMap (form : HTMLFormElement | null ) : ಠ_ಠ.clutz.goog.structs.Map < string , string [] > ;
  /**
   * Returns the form data as an application/x-www-url-encoded string. This
   * doesn't support file inputs.
   * @param form The form.
   */
  function getFormDataString (form : HTMLFormElement | null ) : string ;
  /**
   * Gets the current value of any element with a type.
   * @param input The element.
   */
  function getValue (input : null | GlobalElement | ಠ_ಠ.clutz.RadioNodeList < any > ) : string | string [] | null ;
  /**
   * Returns the value of the named form field. In the case of radio buttons,
   * returns the value of the checked button with the given name.
   * @param form The form element.
   * @param name Name of an input to the form.
   */
  function getValueByName (form : HTMLFormElement | null , name : string ) : string [] | null | string ;
  /**
   * Whether the form has a file input.
   * @param form The form.
   */
  function hasFileInput (form : HTMLFormElement | null ) : boolean ;
  /**
   * Whether a form element has a value.
   * @param el The element.
   */
  function hasValue (el : GlobalElement | null ) : boolean ;
  /**
   * Whether a named form field has a value.
   * @param form The form element.
   * @param name Name of an input to the form.
   */
  function hasValueByName (form : HTMLFormElement | null , name : string ) : boolean ;
  /**
   * Enables or disables either all elements in a form or a single form element.
   * @param el The element, either a form or an element within a form.
   * @param disabled Whether the element should be disabled.
   */
  function setDisabled (el : GlobalElement | null , disabled : boolean ) : void ;
  /**
   * Sets the current value of any element with a type.
   * @param el The element.
   * @param opt_value The value to give to the element, which will be coerced by the browser in the default case using toString. This value should be an array for setting the value of select multiple elements.
   */
  function setValue (el : GlobalElement | null , opt_value ? : any ) : void ;
  /**
   * Submits form data via a new window. This hides references to the parent
   * window and should be used when submitting forms to untrusted 3rd party urls.
   * @param actionUri uri to submit form content to.
   * @param method HTTP method used to submit the form.
   * @param formData A map of the form data as field name to arrays of values.
   */
  function submitFormDataInNewWindow (actionUri : string , method : string , formData : ಠ_ಠ.clutz.goog.structs.Map < string , string [] > ) : boolean ;
  /**
   * Submits form data via a new window. This hides references to the parent
   * window and should be used when submitting forms to untrusted 3rd party urls.
   * By default, this uses the action and method of the specified form
   * element. It is possible to override the default action and method if an
   * optional submit element with formaction and/or formmethod attributes is
   * provided.
   * @param form The form.
   * @param opt_submitElement The `<button>` or `<input>` element used to submit the form. The element should have a submit type.
   */
  function submitFormInNewWindow (form : HTMLFormElement , opt_submitElement ? : HTMLElement ) : boolean ;
}
declare module 'goog:goog.dom.forms' {
  import forms = ಠ_ಠ.clutz.goog.dom.forms;
  export = forms;
}
