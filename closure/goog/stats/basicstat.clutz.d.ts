//!! generated by clutz.
// Generated from stats/basicstat.js
declare namespace ಠ_ಠ.clutz.goog.stats {
  /**
   * Tracks basic statistics over a specified time interval.
   *
   * Statistics are kept in a fixed number of slots, each representing
   * an equal portion of the time interval.
   *
   * Most methods optionally allow passing in the current time, so that
   * higher level stats can synchronize operations on multiple child
   * objects.  Under normal usage, the default of Date.now() should be
   * sufficient.
   */
  class BasicStat {
    private noStructuralTyping_goog_stats_BasicStat : any;
    /**
     * Tracks basic statistics over a specified time interval.
     *
     * Statistics are kept in a fixed number of slots, each representing
     * an equal portion of the time interval.
     *
     * Most methods optionally allow passing in the current time, so that
     * higher level stats can synchronize operations on multiple child
     * objects.  Under normal usage, the default of Date.now() should be
     * sufficient.
     * @param interval The stat interval, in milliseconds.
     */
    constructor (interval : number ) ;
    /**
     * Returns the count of the statistic over its configured time
     * interval.
     * @param opt_now The time, in milliseconds, to be treated as the "current" time.  The current time must always be greater than or equal to the last time recorded by this stat tracker.
     */
    get (opt_now ? : number ) : number ;
    getInterval ( ) : number ;
    /**
     * Returns the magnitute of the largest atomic increment that occurred
     * during the watched time interval.
     * @param opt_now The time, in milliseconds, to be treated as the "current" time.  The current time must always be greater than or equal to the last time recorded by this stat tracker.
     */
    getMax (opt_now ? : number ) : number ;
    /**
     * Returns the magnitute of the smallest atomic increment that
     * occurred during the watched time interval.
     * @param opt_now The time, in milliseconds, to be treated as the "current" time.  The current time must always be greater than or equal to the last time recorded by this stat tracker.
     */
    getMin (opt_now ? : number ) : number ;
    /**
     * Increments the count of this statistic by the specified amount.
     * @param amt The amount to increase the count by.
     * @param opt_now The time, in milliseconds, to be treated as the "current" time.  The current time must always be greater than or equal to the last time recorded by this stat tracker.
     */
    incBy (amt : number , opt_now ? : number ) : void ;
  }
}
// Generated from stats/basicstat.js
declare namespace ಠ_ಠ.clutz.goog.stats.BasicStat {
  class Slot_ {
    private noStructuralTyping_goog_stats_BasicStat_Slot_ : any;
    /**
     * End time of this slot, exclusive.
     */
    end : number ;
    /**
     * Aggregated count within this slot.
     */
    count : number ;
    /**
     * The largest atomic increment of the count within this slot.
     */
    max : number ;
    /**
     * The smallest atomic increment of the count within this slot.
     */
    min : number ;
  }
}
declare module 'goog:goog.stats.BasicStat' {
  import BasicStat = ಠ_ಠ.clutz.goog.stats.BasicStat;
  export default BasicStat;
}
