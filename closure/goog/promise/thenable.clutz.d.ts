//!! generated by clutz.
// Generated from promise/thenable.js
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Provides a more strict interface for Thenables in terms of
   * http://promisesaplus.com for interop with {@see goog.Promise}.
   */
  namespace Thenable {
    let /**
     * An expando property to indicate that an object implements
     * `goog.Thenable`.
     *
     * {@see addImplementation}.
     */
    IMPLEMENTED_BY_PROP : string ;
    function /**
     * Marks a given class (constructor) as an implementation of Thenable, so
     * that we can query that fact at runtime. The class must have already
     * implemented the interface.
     * Exports a 'then' method on the constructor prototype, so that the objects
     * also implement the extern {@see goog.Thenable} interface for interop with
     * other Promise implementations.
     * @param ctor The class constructor. The corresponding class must have already implemented the interface.
     */
    addImplementation (ctor : { new ( ...a : any [] ) : ಠ_ಠ.clutz.goog.Thenable < any > } ) : void ;
    function isImplementedBy (object ? : any ) : boolean ;
  }
  interface Thenable < TYPE = any > extends PromiseLike < TYPE > {
    /**
     * Adds callbacks that will operate on the result of the Thenable, returning a
     * new child Promise.
     *
     * If the Thenable is fulfilled, the `onFulfilled` callback will be
     * invoked with the fulfillment value as argument, and the child Promise will
     * be fulfilled with the return value of the callback. If the callback throws
     * an exception, the child Promise will be rejected with the thrown value
     * instead.
     *
     * If the Thenable is rejected, the `onRejected` callback will be invoked with
     * the rejection reason as argument. Similar to the fulfilled case, the child
     * Promise will then be resolved with the return value of the callback, or
     * rejected with the thrown value if the callback throws an exception.
     * @param opt_onFulfilled A function that will be invoked with the fulfillment value if the Promise is fulfilled.
     * @param opt_onRejected A function that will be invoked with the rejection reason if the Promise is rejected.
     * @param opt_context An optional context object that will be the execution context for the callbacks. By default, functions are executed with the default this.
     */
    then < RESULT > (opt_onFulfilled ? : ( (a : TYPE ) => PromiseLike < RESULT > | RESULT ) | null , opt_onRejected ? : ( (a : any ) => any ) | null) : ಠ_ಠ.clutz.goog.Thenable < RESULT > ;
  }
}
declare module 'goog:goog.Thenable' {
  import Thenable = ಠ_ಠ.clutz.goog.Thenable;
  export default Thenable;
}
