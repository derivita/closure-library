//!! generated by clutz.
// Generated from editor/link.js
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Wrap an editable link.
   */
  class Link {
    private noStructuralTyping_goog_editor_Link : any;
    /**
     * Wrap an editable link.
     * @param anchor The anchor element.
     * @param isNew Whether this is a new link.
     */
    constructor (anchor : HTMLAnchorElement | null , isNew : boolean ) ;
    /**
     * After link creation, finish creating the link depending on the type
     * of link being created.
     * @param field The field where this link is being created.
     */
    finishLinkCreation (field : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    getAnchor ( ) : HTMLAnchorElement | null ;
    getCurrentText ( ) : string ;
    getExtraAnchors ( ) : ( HTMLAnchorElement | null ) [] ;
    getValidLinkFromText ( ) : string | null ;
    /**
     * Set the url without affecting the isNew() status of the link.
     * @param url A URL.
     */
    initializeUrl (url : string ) : void ;
    isNew ( ) : boolean ;
    placeCursorRightOf ( ) : void ;
    removeLink ( ) : void ;
    /**
     * Change the link.
     * @param newText New text for the link. If the link contains all its text in one descendant, newText will only replace the text in that one node. Otherwise, we'll change the innerHTML of the whole link to newText.
     * @param newUrl A new URL.
     */
    setTextAndUrl (newText : string , newUrl : string ) : void ;
    /**
     * Initialize a new link.
     * @param anchor The anchor element.
     * @param url The initial URL.
     * @param opt_target The target.
     * @param opt_extraAnchors Extra anchors created by the browser when parsing a selection.
     */
    static createNewLink (anchor : HTMLAnchorElement | null , url : string , opt_target ? : string , opt_extraAnchors ? : ( HTMLAnchorElement | null ) [] | null ) : ಠ_ಠ.clutz.goog.editor.Link ;
    /**
     * Initialize a new link using text in anchor, or empty string if there is no
     * likely url in the anchor.
     * @param anchor The anchor element with likely url content.
     * @param opt_target The target.
     */
    static createNewLinkFromText (anchor : HTMLAnchorElement | null , opt_target ? : string ) : ಠ_ಠ.clutz.goog.editor.Link ;
    /**
     * Returns true if str could be an email address, false otherwise
     *
     * Ex: goog.editor.Link.isLikelyEmailAddress_("some word") == false
     * goog.editor.Link.isLikelyEmailAddress_("foo@foo.com") == true
     * @param str String to test for being email address.
     */
    static isLikelyEmailAddress (str : string ) : boolean ;
    /**
     * Returns true if str could be a URL, false otherwise
     *
     * Ex: TR_Util.isLikelyUrl_("http://www.google.com") == true
     * TR_Util.isLikelyUrl_("www.google.com") == true
     * @param str String to check if it looks like a URL.
     */
    static isLikelyUrl (str : string ) : boolean ;
    /**
     * Determines whether or not a url is an email link.
     * @param url A url.
     */
    static isMailto (url : string ) : boolean ;
  }
}
declare module 'goog:goog.editor.Link' {
  import Link = ಠ_ಠ.clutz.goog.editor.Link;
  export default Link;
}
