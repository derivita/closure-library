//!! generated by clutz.
// Generated from editor/plugin_impl.js
declare namespace ಠ_ಠ.clutz.goog.editor {
  /**
   * Abstract API for trogedit plugins.
   */
  class PluginImpl extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_editor_PluginImpl : any;
    /**
     * The field object this plugin is attached to.
     */
    protected fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * The logger for this plugin.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    activeOnUneditableFields ( ) : boolean ;
    /**
     * Cleans the contents of the node passed to it. The node contents are modified
     * directly, and the modifications will subsequently be used, for operations
     * such as saving the innerHTML of the editor etc. Since the plugins act on
     * the DOM directly, this method can be very expensive.
     *
     * This op is invoked even on disabled plugins.
     * @param fieldCopy The copy of the editable field which needs to be cleaned up.
     */
    cleanContentsDom (a : GlobalElement ) : any ;
    /**
     * Cleans the html contents of Trogedit. Both cleanContentsDom and
     * and cleanContentsHtml will be called on contents extracted from Trogedit.
     * The inverse of prepareContentsHtml.
     *
     * This op is invoked even on disabled plugins.
     * @param originalHtml The trogedit HTML.
     */
    cleanContentsHtml (a : string ) : string ;
    /**
     * Disables this plugin for the specified, registered field object.
     * @param fieldObject The field object.
     */
    disable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Enables this plugin for the specified, registered field object. A field
     * object should only be enabled when it is loaded.
     * @param fieldObject The field object.
     */
    enable (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Handles execCommand. This default implementation handles dispatching
     * BEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls
     * execCommandInternal to perform the actual command. Plugins that want to
     * do their own event dispatching should override execCommand, otherwise
     * it is preferred to only override execCommandInternal.
     *
     * This version of execCommand will only work for single field plugins.
     * Multi-field plugins must override execCommand.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * Handles execCommand. This default implementation does nothing, and is
     * called by execCommand, which handles event dispatching. This method should
     * be overriden by plugins that don't need to do their own event dispatching.
     * If custom event dispatching is needed, execCommand shoul be overriden
     * instead.
     *
     * TODO(user): This pattern makes accurate typing impossible.
     * @param command `extends string` The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    protected execCommandInternal (a ? : any ,  ...b : any [] ) : any ;
    getFieldDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Sets the field object for use with this plugin.
     */
    protected getFieldObject ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    getTrogClassId ( ) : string ;
    /**
     * Handles keydown. It is run before handleKeyboardShortcut and if it returns
     * true handleKeyboardShortcut will not be called.
     * @param e The browser event.
     */
    handleKeyDown (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keypress. It is run before handleKeyboardShortcut and if it returns
     * true handleKeyboardShortcut will not be called.
     * @param e The browser event.
     */
    handleKeyPress (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keyup.
     * @param e The browser event.
     */
    handleKeyUp (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles keyboard shortcuts.  Preferred to using handleKey* as it will use
     * the proper event based on browser and will be more performant. If
     * handleKeyPress/handleKeyDown returns true, this will not be called. If the
     * plugin handles the shortcut, it is responsible for dispatching appropriate
     * events (change, selection change at the time of this comment). If the plugin
     * calls execCommand on the editable field, then execCommand already takes care
     * of dispatching events.
     * NOTE: For performance reasons this is only called when any key is pressed
     * in conjunction with ctrl/meta keys OR when a small subset of keys (defined
     * in goog.editor.Field.POTENTIAL_SHORTCUT_KEYCODES_) are pressed without
     * ctrl/meta keys. We specifically don't invoke it when altKey is pressed since
     * alt key is used in many i18n UIs to enter certain characters.
     * @param e The browser event.
     * @param key The key pressed.
     * @param isModifierPressed Whether the ctrl/meta key was pressed or not.
     */
    handleKeyboardShortcut (a : ಠ_ಠ.clutz.goog.events.BrowserEvent , b : string , c : boolean ) : boolean ;
    /**
     * Handles selection change.
     * @param opt_e The browser event.
     * @param opt_target The node the selection changed to.
     */
    handleSelectionChange (a ? : ಠ_ಠ.clutz.goog.events.BrowserEvent , b ? : Node ) : boolean ;
    isAutoDispose ( ) : boolean ;
    /**
     * Returns whether this plugin is enabled for the field object.
     * @param fieldObject The field object.
     */
    isEnabled (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : boolean ;
    isSilentCommand (a : string ) : boolean ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Prepares the given HTML for editing. Strips out content that should not
     * appear in an editor, and normalizes content as appropriate. The inverse
     * of cleanContentsHtml.
     *
     * This op is invoked even on disabled plugins.
     * @param originalHtml The original HTML.
     * @param styles A map of strings. If the plugin wants to add any styles to the field element, it should add them as key-value pairs to this object.
     */
    prepareContentsHtml (a : string , b : GlobalObject | null ) : string ;
    /**
     * Gets the state of this command if this plugin serves that command.
     * @param command The command to check.
     */
    queryCommandValue (a : string ) : any ;
    /**
     * Registers the field object for use with this plugin.
     * @param fieldObject The editable field object.
     */
    registerFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Saves the field's scroll position.  See b/7279077 for context.
     * Currently only does anything in Edge, since all other browsers
     * already seem to work correctly.
     */
    protected saveScrollPosition ( ) : ( ) => any ;
    /**
     * Set if this plugin should automatically be disposed when the registered
     * field is disposed.
     * @param autoDispose Whether to autoDispose.
     */
    setAutoDispose (autoDispose : boolean ) : void ;
    /**
     * Sets the field object for use with this plugin.
     * @param fieldObject The editable field object.
     */
    protected setFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Unregisters and disables this plugin for the current field object.
     * @param fieldObj The field object. For single-field plugins, this parameter is ignored.
     */
    unregisterFieldObject (fieldObj : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    static IRREPRESSIBLE_OPS : any ;
    static OPCODE : any ;
  }
}
// Generated from editor/plugin_impl.js
declare namespace ಠ_ಠ.clutz.goog.editor.PluginImpl {
  /**
   * An enum of operations that plugins may support.
   */
  enum Op {
    CLEAN_CONTENTS_DOM = 11.0 ,
    CLEAN_CONTENTS_HTML = 10.0 ,
    EXEC_COMMAND = 6.0 ,
    KEYDOWN = 1.0 ,
    KEYPRESS = 2.0 ,
    KEYUP = 3.0 ,
    PREPARE_CONTENTS_HTML = 8.0 ,
    QUERY_COMMAND = 7.0 ,
    SELECTION = 4.0 ,
    SHORTCUT = 5.0 ,
  }
}
declare module 'goog:goog.editor.PluginImpl' {
  import PluginImpl = ಠ_ಠ.clutz.goog.editor.PluginImpl;
  export default PluginImpl;
}
