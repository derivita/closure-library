//!! generated by clutz.
// Generated from editor/plugins/tableeditor.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Plugin that adds support for table creation and editing commands.
   */
  class TableEditor extends ಠ_ಠ.clutz.goog.editor.Plugin {
    private noStructuralTyping_goog_editor_plugins_TableEditor : any;
    /**
     * Plugin that adds support for table creation and editing commands.
     */
    constructor ( ) ;
    /**
     * Adds a function to filter out non-user-editable tables.
     * @param func A function to decide whether the table element could be editable by the user or not.
     */
    addIsTableEditableFunction (func : (a : GlobalElement | null ) => boolean ) : void ;
    enable (fieldObject ? : any ) : void ;
    execCommandInternal (command ? : any , opt_arg ? : any ) : any ;
    getTrogClassId ( ) : any ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * Returns the current value of a given command. Currently this plugin
     * only returns a value for goog.editor.plugins.TableEditor.COMMAND.TABLE.
     */
    queryCommandValue (command ? : any ) : any ;
  }
}
// Generated from editor/plugins/tableeditor.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.TableEditor {
  /**
   * Commands supported by goog.editor.plugins.TableEditor.
   */
  enum COMMAND {
    INSERT_COLUMN_AFTER = '+insertColumnAfter' ,
    INSERT_COLUMN_BEFORE = '+insertColumnBefore' ,
    INSERT_ROW_AFTER = '+insertRowAfter' ,
    INSERT_ROW_BEFORE = '+insertRowBefore' ,
    MERGE_CELLS = '+mergeCells' ,
    REMOVE_COLUMNS = '+removeColumns' ,
    REMOVE_ROWS = '+removeRows' ,
    REMOVE_TABLE = '+removeTable' ,
    SPLIT_CELL = '+splitCell' ,
    TABLE = '+table' ,
  }
  class CellSelection_ {
    private noStructuralTyping_goog_editor_plugins_TableEditor_CellSelection_ : any;
    cells_ : any [] ;
    parentTable_ : any ;
    /**
     * Returns a boolean value indicating whether or not there is exactly
     * one cell in this selection. Note that this may not be the same as checking
     * whether getCells().length == 1; if there is a single cell with
     * rowSpan/colSpan set it will appear multiple times.
     */
    containsSingleCell ( ) : boolean ;
    /**
     * Returns the cells in this selection.
     */
    getCells ( ) : ( GlobalElement | null ) [] ;
    /**
     * Returns the column index of the farthest left cell in this selection.
     */
    getFirstColumnIndex ( ) : number ;
    /**
     * Returns the row index of the uppermost cell in this selection.
     */
    getFirstRowIndex ( ) : number ;
    /**
     * Returns the column index of the farthest right cell in this selection.
     */
    getLastColumnIndex ( ) : number ;
    /**
     * Returns the row index of the lowermost cell in this selection.
     */
    getLastRowIndex ( ) : number ;
    /**
     * Returns the EditableTable object of which this selection's cells are a
     * subset.
     */
    getTable ( ) : ಠ_ಠ.clutz.goog.editor.Table ;
    /**
     * Returns a boolean value indicating whether or not the cells in this
     * selection form a rectangle.
     */
    isRectangle ( ) : boolean ;
  }
}
declare module 'goog:goog.editor.plugins.TableEditor' {
  import TableEditor = ಠ_ಠ.clutz.goog.editor.plugins.TableEditor;
  export default TableEditor;
}
