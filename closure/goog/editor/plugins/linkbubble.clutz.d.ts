//!! generated by clutz.
// Generated from editor/plugins/linkbubble.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Property bubble plugin for links.
   */
  class LinkBubble extends ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin {
    private noStructuralTyping_goog_editor_plugins_LinkBubble : any;
    /**
     * Property bubble plugin for links.
     * @param var_args List of extra actions supported by the bubble.
     */
    constructor ( ...var_args : ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action [] ) ;
    createBubbleContents (bubbleContainer ? : any ) : void ;
    execCommandInternal (command ? : any , var_args ? : any ) : void ;
    getBubbleTargetFromSelection (selectedElement ? : any ) : any ;
    getBubbleTitle ( ) : any ;
    getBubbleType ( ) : any ;
    /**
     * Returns the target element url for the bubble.
     */
    protected getTargetUrl ( ) : string ;
    /**
     * Returns the message to display for testing a link.
     */
    protected getTestLinkMessage ( ) : string ;
    getTrogClassId ( ) : any ;
    handleSelectionChangeInternal (selectedElement ? : any ) : any ;
    /**
     * Returns whether the URL should be considered invalid.  This always returns
     * false in the base class, and should be overridden by subclasses that wish
     * to impose validity rules on URLs.
     * @param url The url to check.
     */
    isInvalidUrl (a : string ) : boolean ;
    isSupportedCommand (command ? : any ) : any ;
    /**
     * Sets the proper state for the action links.
     */
    protected onShow ( ) : void ;
    /**
     * Tells the plugin whether to block URLs with schemes not in the whitelist.
     * If blocking is enabled, this plugin will not linkify the link in the bubble
     * popup.
     * @param blockOpeningUnsafeSchemes Whether to block non-whitelisted schemes.
     */
    setBlockOpeningUnsafeSchemes (blockOpeningUnsafeSchemes : boolean ) : void ;
    /**
     * Sets a whitelist of allowed URL schemes that are safe to open.
     * Schemes should all be in lowercase. If the plugin is set to block opening
     * unsafe schemes, user-entered URLs will be converted to lowercase and checked
     * against this list. The whitelist has no effect if blocking is not enabled.
     * @param schemes String array of URL schemes to allow (http, https, etc.).
     */
    setSafeToOpenSchemes (schemes : string [] | null ) : void ;
    /**
     * Set the optional function for getting the "test" link of a url.
     * @param func The function to use.
     */
    setTestLinkUrlFn (func : (a : string ) => string ) : void ;
    /**
     * Checks whether the plugin should open the given url in a new window.
     * @param url The url to check.
     */
    protected shouldOpenUrl (url : string ) : boolean ;
    stopReferrerLeaks ( ) : void ;
    /**
     * Tests the link by opening it in a new tab/window. Should be used as the
     * click event handler for the test pseudo-link.
     * @param opt_event If passed in, the event will be stopped.
     */
    protected testLink (opt_event ? : GlobalEvent ) : void ;
    static MSG_INVALID_URL_LINK_BUBBLE : string ;
    static MSG_LINK_BUBBLE_CHANGE : string ;
    static MSG_LINK_BUBBLE_REMOVE : string ;
    static MSG_LINK_BUBBLE_REMOVE_ANNOUNCEMENT : string ;
    static MSG_LINK_BUBBLE_TEST_LINK : string ;
  }
}
declare module 'goog:goog.editor.plugins.LinkBubble' {
  import LinkBubble = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble;
  export default LinkBubble;
}
// Generated from editor/plugins/linkbubble.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble {
  /**
   * Constructor for extra actions that can be added to the link bubble.
   */
  class Action {
    private noStructuralTyping_goog_editor_plugins_LinkBubble_Action : any;
    /**
     * Constructor for extra actions that can be added to the link bubble.
     * @param spanId The ID for the span showing the action.
     * @param linkId The ID for the link showing the action.
     * @param message The text for the link showing the action.
     * @param toShowFn Test function to determine whether to show the action for the given URL.
     * @param actionFn Action function to run when the action is clicked.  Takes the current target URL as a parameter.
     */
    constructor (spanId : string , linkId : string , message : string , toShowFn : (a : string ) => boolean , actionFn : (a : string ) => void ) ;
    actionFn_ (a : string ) : void ;
    linkId_ : string ;
    message_ : string ;
    spanId_ : string ;
    toShowFn_ (a : string ) : boolean ;
  }
}
declare module 'goog:goog.editor.plugins.LinkBubble.Action' {
  import Action = ಠ_ಠ.clutz.goog.editor.plugins.LinkBubble.Action;
  export default Action;
}
