//!! generated by clutz.
// Generated from editor/plugins/abstractbubbleplugin.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Base class for bubble plugins. This is used for to connect user behavior
   * in the editor to a goog.ui.editor.Bubble UI element that allows
   * the user to modify the properties of an element on their page (e.g. the alt
   * text of an image tag).
   *
   * Subclasses should override the abstract method getBubbleTargetFromSelection()
   * with code to determine if the current selection should activate the bubble
   * type. The other abstract method createBubbleContents() should be overriden
   * with code to create the inside markup of the bubble.  The base class creates
   * the rest of the bubble.
   */
  class AbstractBubblePlugin extends ಠ_ಠ.clutz.goog.editor.Plugin {
    private noStructuralTyping_goog_editor_plugins_AbstractBubblePlugin : any;
    /**
     * Base class for bubble plugins. This is used for to connect user behavior
     * in the editor to a goog.ui.editor.Bubble UI element that allows
     * the user to modify the properties of an element on their page (e.g. the alt
     * text of an image tag).
     *
     * Subclasses should override the abstract method getBubbleTargetFromSelection()
     * with code to determine if the current selection should activate the bubble
     * type. The other abstract method createBubbleContents() should be overriden
     * with code to create the inside markup of the bubble.  The base class creates
     * the rest of the bubble.
     */
    constructor ( ) ;
    /**
     * Place to register events the plugin listens to.
     */
    protected eventRegister : ಠ_ಠ.clutz.goog.events.EventHandler < ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin > | null ;
    /**
     * Called when the bubble is closed or hidden. The default implementation does
     * nothing.
     */
    protected cleanOnBubbleClose ( ) : void ;
    closeBubble ( ) : void ;
    /**
     * Creates and shows the property bubble.
     * @param targetElement The target element of the bubble.
     */
    createBubble (targetElement : GlobalElement | null ) : void ;
    /**
     * Should be overriden by subclasses to add the type specific contents to the
     * bubble.
     * @param bubbleContainer The container element of the bubble to which the contents should be added.
     */
    protected createBubbleContents (a : GlobalElement | null ) : any ;
    /**
     * Helper method that creates a link with text set to linkText and optionally
     * wires up a listener for the CLICK event or the link. The link is navigable by
     * tabs if `enableKeyboardNavigation(true)` was called.
     * @param linkId The id of the link.
     * @param linkText Text of the link.
     * @param opt_onClick Optional function to call when the link is clicked.
     * @param opt_container If specified, location to insert link. If no container is specified, the old link is removed and replaced.
     */
    protected createLink (linkId : string , linkText : string , opt_onClick ? : Function | null , opt_container ? : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Helper method to create a link to insert into the bubble. The link is
     * navigable by tabs if `enableKeyboardNavigation(true)` was called.
     * @param linkId The id of the link.
     * @param linkText Text of the link.
     * @param isAnchor Set to true to create an actual anchor tag instead of a span.  Actual links are right clickable (e.g. to open in a new window) and also update window status on hover.
     * @param opt_container If specified, location to insert link. If no container is specified, the old link is removed and replaced.
     */
    protected createLinkHelper (linkId : string , linkText : string , isAnchor : boolean , opt_container ? : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Helper method that creates option links (such as edit, test, remove)
     * @param id String id for the span id.
     */
    protected createLinkOption (id : string ) : GlobalElement | null ;
    disable (field ? : any ) : void ;
    /**
     * Sets whether the bubble should support tabbing through elements.
     */
    enableKeyboardNavigation (keyboardNavigationEnabled : boolean ) : void ;
    getBubbleDom ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Returns the bubble map.  Subclasses may override to use a separate map.
     */
    protected getBubbleMap ( ) : { [ /* warning: coerced from ? */ key: string ]: ಠ_ಠ.clutz.goog.ui.editor.Bubble | null } ;
    /**
     * Should be overriden by subclasses to return the bubble target element or
     * null if an element of their required type isn't found.
     * @param selectedElement The target of the selection change event or the parent container of the current entire selection.
     */
    getBubbleTargetFromSelection (a : GlobalElement | null ) : GlobalElement | null ;
    protected getBubbleTitle ( ) : string ;
    protected getBubbleType ( ) : string ;
    /**
     * Returns the element whose properties the bubble manipulates.
     */
    getTargetElement ( ) : GlobalElement | null ;
    getTrogClassId ( ) : string ;
    /**
     * In case the keyboard navigation is enabled, this will set focus on the first
     * tabbable element in the bubble when TAB is clicked.
     */
    handleKeyDown (e ? : any ) : any ;
    handleKeyUp (e ? : any ) : any ;
    /**
     * Pops up a property bubble for the given selection if appropriate and closes
     * open property bubbles if no longer needed.  This should not be overridden.
     */
    handleSelectionChange (opt_e ? : any , opt_target ? : any ) : any ;
    /**
     * Pops up a property bubble for the given selection if appropriate and closes
     * open property bubbles if no longer needed.
     * @param selectedElement The selected element.
     */
    protected handleSelectionChangeInternal (selectedElement : GlobalElement | null ) : boolean ;
    isVisible ( ) : boolean ;
    /**
     * Called after the bubble is shown. The default implementation does nothing.
     * Override it to provide your own one.
     */
    protected onShow ( ) : void ;
    /**
     * Register the handler for the target's CLICK and ENTER key events.
     * @param target The event source element.
     * @param handler The event handler.
     */
    protected registerActionHandler (target : GlobalElement | null , handler : Function | null ) : void ;
    /**
     * Register the handler for the target's CLICK event.
     * @param target The event source element.
     * @param handler The event handler.
     */
    protected registerClickHandler (target : GlobalElement | null , handler : Function | null ) : void ;
    reposition ( ) : void ;
    /**
     * Sets the instance bubble factory function.  If set to a non-null value, this
     * function will be used to create a bubble instead of the global factory
     * function.
     * @param bubbleFactory Function that creates a bubble for the given bubble parent element and z index.  Null to reset the factory function.
     */
    setBubbleFactory (bubbleFactory : ( (a : GlobalElement , b : number ) => ಠ_ಠ.clutz.goog.ui.editor.Bubble ) | null ) : void ;
    /**
     * Sets the bubble parent.
     * @param bubbleParent An element where the bubble will be anchored. If null, we will use the application document. This is useful when you have an editor embedded in a scrolling div.
     */
    setBubbleParent (bubbleParent : GlobalElement | null ) : void ;
    /**
     * Makes the given element tabbable.
     *
     * <p>Elements created by createLink[Helper] are tabbable even without
     * calling this method. Call it for other elements if needed.
     *
     * <p>If tabindex is not already set in the element, this function sets it to 0.
     * You'll usually want to also call `enableKeyboardNavigation(true)`.
     */
    protected setTabbable (element : GlobalElement ) : void ;
    /**
     * Inserts a link in the given container if it is specified or removes
     * the old link with this id and replaces it with the new link
     * @param link Html element to insert.
     * @param linkId Id of the link.
     * @param opt_container If specified, location to insert link.
     */
    protected setupLink (link : GlobalElement | null , linkId : string , opt_container ? : GlobalElement | null ) : void ;
    protected shouldPreferBubbleAboveElement ( ) : boolean ;
    /**
     * The constant string used to separate option links.
     */
    protected static DASH_NBSP_STRING : string ;
    /**
     * Sets the global bubble factory function.
     * @param bubbleFactory Function that creates a bubble for the given bubble parent element and z index.
     */
    static setBubbleFactory (bubbleFactory : (a : GlobalElement , b : number ) => ಠ_ಠ.clutz.goog.ui.editor.Bubble ) : void ;
  }
}
declare module 'goog:goog.editor.plugins.AbstractBubblePlugin' {
  import AbstractBubblePlugin = ಠ_ಠ.clutz.goog.editor.plugins.AbstractBubblePlugin;
  export default AbstractBubblePlugin;
}
