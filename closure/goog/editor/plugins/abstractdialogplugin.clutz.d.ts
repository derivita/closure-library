//!! generated by clutz.
// Generated from editor/plugins/abstractdialogplugin.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * An abstract superclass for a Trogedit plugin that creates exactly one
   * dialog. By default dialogs are not reused -- each time execCommand is called,
   * a new instance of the dialog object is created (and the old one disposed of).
   * To enable reusing of the dialog object, subclasses should call
   * setReuseDialog() after calling the superclass constructor.
   */
  class AbstractDialogPlugin extends ಠ_ಠ.clutz.goog.editor.Plugin {
    private noStructuralTyping_goog_editor_plugins_AbstractDialogPlugin : any;
    /**
     * An abstract superclass for a Trogedit plugin that creates exactly one
     * dialog. By default dialogs are not reused -- each time execCommand is called,
     * a new instance of the dialog object is created (and the old one disposed of).
     * To enable reusing of the dialog object, subclasses should call
     * setReuseDialog() after calling the superclass constructor.
     * @param command The command that this plugin handles.
     */
    constructor (command : string ) ;
    /**
     * Creates a new instance of this plugin's dialog. Must be overridden by
     * subclasses.
     * Implementations should expect that the editor is inactive and cannot be
     * focused, nor will its caret position (or selection) be determinable until
     * after the dialogs goog.ui.PopupBase.EventType.HIDE event has been handled.
     * @param dialogDomHelper The dom helper to be used to create the dialog.
     * @param opt_arg The dialog specific argument. Concrete subclasses should declare a specific type.
     */
    protected createDialog (a : ಠ_ಠ.clutz.goog.dom.DomHelper , b ? : any ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ;
    disposeInternal ( ) : void ;
    /**
     * Cleans up the structure used to save the original selection before the dialog
     * was opened. Should be used by subclasses that don't restore the original
     * selection via restoreOriginalSelection.
     */
    protected disposeOriginalSelection ( ) : void ;
    /**
     * Handles execCommand. Dialog plugins don't make any changes when they open a
     * dialog, just when the dialog closes (because only modal dialogs are
     * supported). Hence this method does not dispatch the change events that the
     * superclass method does.
     * @param command The command to execute.
     * @param var_args Any additional parameters needed to execute the command.
     */
    execCommand (command : string ,  ...var_args : any [] ) : any ;
    /**
     * Handles execCommand by opening the dialog. Dispatches
     * {@link goog.editor.plugins.AbstractDialogPlugin.EventType.OPENED} after the
     * dialog is shown.
     * @param command The command to execute.
     * @param opt_arg The dialog specific argument. Should be the same as {@link createDialog}.
     */
    protected execCommandInternal (command : string , opt_arg ? : any ) : any ;
    /**
     * Returns the current dialog that was created and opened by this plugin.
     */
    protected getDialog ( ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ;
    /**
     * Cleans up after the dialog has closed, including restoring the selection to
     * what it was before the dialog was opened. If a subclass modifies the editable
     * field's content such that the original selection is no longer valid (usually
     * the case when the user clicks OK, and sometimes also on Cancel), it is that
     * subclass' responsibility to place the selection in the desired place during
     * the OK or Cancel (or other) handler. In that case, this method will leave the
     * selection in place.
     * @param e The AFTER_HIDE event object.
     */
    protected handleAfterHide (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isSupportedCommand (command ? : any ) : any ;
    /**
     * Restores the selection in the editable field to what it was before the dialog
     * was opened. This is not guaranteed to work if the contents of the field
     * have changed.
     */
    protected restoreOriginalSelection ( ) : void ;
    /**
     * Sets whether this plugin should reuse the same instance of the dialog each
     * time execCommand is called or create a new one. This is intended for use by
     * subclasses only, hence protected.
     * @param reuse Whether to reuse the dialog.
     */
    protected setReuseDialog (reuse : boolean ) : void ;
  }
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin' {
  import AbstractDialogPlugin = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin;
  export default AbstractDialogPlugin;
}
// Generated from editor/plugins/abstractdialogplugin.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin {
  /**
   * Event type constants for events the dialog plugins fire.
   */
  /**
   * Event type constants for events the dialog plugins fire.
   */
  enum EventType {
    CLOSED = 'dialogClosed' ,
    OPENED = 'dialogOpened' ,
  }
}
declare module 'goog:goog.editor.plugins.AbstractDialogPlugin.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.editor.plugins.AbstractDialogPlugin.EventType;
  export default EventType;
}
