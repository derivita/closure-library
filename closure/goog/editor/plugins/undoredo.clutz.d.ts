//!! generated by clutz.
// Generated from editor/plugins/undoredo.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins {
  /**
   * Encapsulates undo/redo logic using a custom undo stack (i.e. not browser
   * built-in). Browser built-in undo stacks are too flaky (e.g. IE's gets
   * clobbered on DOM modifications). Also, this allows interleaving non-editing
   * commands into the undo stack via the UndoRedoManager.
   */
  class UndoRedo extends ಠ_ಠ.clutz.goog.editor.Plugin {
    private noStructuralTyping_goog_editor_plugins_UndoRedo : any;
    /**
     * Encapsulates undo/redo logic using a custom undo stack (i.e. not browser
     * built-in). Browser built-in undo stacks are too flaky (e.g. IE's gets
     * clobbered on DOM modifications). Also, this allows interleaving non-editing
     * commands into the undo stack via the UndoRedoManager.
     * @param opt_manager An undo redo manager to be used by this plugin. If none is provided one is created.
     */
    constructor (opt_manager ? : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager | null ) ;
    currentStates_ : { } ;
    eventHandlers_ : { } ;
    clearHistory ( ) : void ;
    disable (fieldObject ? : any ) : void ;
    disposeInternal ( ) : void ;
    enable (fieldObject ? : any ) : void ;
    execCommand (command ? : any , var_args ? : any ) : void ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     */
    getCurrentEventTarget ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     */
    getCurrentFieldObject ( ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    /**
     * This is so subclasses can deal with multifield undo-redo.
     * @param fieldHashCode The Field's hashcode.
     */
    getFieldObjectForHash (fieldHashCode : string ) : ಠ_ಠ.clutz.goog.editor.Field | null ;
    getTrogClassId ( ) : any ;
    handleKeyboardShortcut (e ? : any , key ? : any , isModifierPressed ? : any ) : any ;
    isEnabled (fieldObject ? : any ) : any ;
    /**
     * Whether the string corresponds to a command this plugin handles.
     * @param command Command string to check.
     */
    isSupportedCommand (command : string ) : boolean ;
    /**
     * The logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    queryCommandValue (command ? : any ) : any ;
    /**
     * Refreshes the current state of the editable field as maintained by undo-redo,
     * without adding any undo-redo states to the stack.
     * @param fieldObject The editable field.
     */
    refreshCurrentState (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
    /**
     * Restores the state of the editable field.
     * @param state The state initiating the restore.
     * @param content The content to restore.
     * @param cursorPosition The cursor position within the content.
     */
    restoreState (state : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.UndoState_ | null , content : string , cursorPosition : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_ | null ) : void ;
    /**
     * Set the max undo stack depth (not the real memory usage).
     * @param depth Depth of the stack.
     */
    setMaxUndoDepth (depth : number ) : void ;
    /**
     * Set the undo-redo manager used by this plugin. Any state on a previous
     * undo-redo manager is lost.
     * @param manager The undo-redo manager.
     */
    setUndoRedoManager (manager : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoManager | null ) : void ;
    /**
     * Unregisters and disables the fieldObject with this plugin. Thie does *not*
     * clobber the undo stack for the fieldObject though.
     * TODO(user): For the multifield version, we really should add a way to
     * ignore undo actions on field's that have been made uneditable.
     * This is probably as simple as skipping over entries in the undo stack
     * that have a hashcode of an uneditable field.
     * @param fieldObject The field to register with the plugin.
     */
    unregisterFieldObject (fieldObject : ಠ_ಠ.clutz.goog.editor.Field | null ) : void ;
  }
}
// Generated from editor/plugins/undoredo.js
declare namespace ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo {
  /**
   * Commands implemented by this plugin.
   */
  enum COMMAND {
    REDO = '+redo' ,
    UNDO = '+undo' ,
  }
  class CursorPosition_ {
    private noStructuralTyping_goog_editor_plugins_UndoRedo_CursorPosition_ : any;
    field_ : ಠ_ಠ.clutz.goog.editor.Field | null ;
    isValid ( ) : boolean ;
    select ( ) : void ;
    toString ( ) : string ;
  }
  class UndoState_ extends ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState {
    private noStructuralTyping_goog_editor_plugins_UndoRedo_UndoState_ : any;
    /**
     * The hash code for the field whose content is being saved.
     */
    fieldHashCode : string ;
    /**
     * Checks if the *contents* of two
     * `goog.editor.plugins.UndoRedo.UndoState_`s are the same.  We don't
     * bother checking the cursor position (that's not something we'd want to save
     * anyway).
     * @param rhs The state to compare.
     */
    equals (rhs : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedoState | null ) : boolean ;
    /**
     * Get the content to restore on redo.
     */
    getRedoContent ( ) : string | undefined ;
    /**
     * Get the content to restore on undo.
     */
    getUndoContent ( ) : string ;
    /**
     * Performs the redo operation represented by this state.
     */
    redo ( ) : void ;
    /**
     * Adds redo information to this state. This method should be called before the
     * state is added onto the undo stack.
     * @param content The content to restore on a redo.
     * @param cursorPosition The cursor position to restore on a redo.
     */
    setRedoState (content : string , cursorPosition : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_ | null ) : void ;
    /**
     * Updates the undo portion of this state. Should only be used to update the
     * current state of an editable field, which is not yet on the undo stack after
     * an undo or redo operation. You should never be modifying states on the stack!
     * @param content The current content.
     * @param cursorPosition The current cursor position.
     */
    setUndoState (content : string , cursorPosition : ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo.CursorPosition_ | null ) : void ;
    /**
     * Performs the undo operation represented by this state.
     */
    undo ( ) : void ;
  }
}
declare module 'goog:goog.editor.plugins.UndoRedo' {
  import UndoRedo = ಠ_ಠ.clutz.goog.editor.plugins.UndoRedo;
  export default UndoRedo;
}
