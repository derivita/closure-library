//!! generated by clutz.
// Generated from fx/dragdropgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Drag/drop implementation for creating drag sources/drop targets consisting of
   * multiple HTML Elements (items). All items share the same drop target(s) but
   * can be dragged individually.
   */
  class DragDropGroup extends ಠ_ಠ.clutz.goog.fx.AbstractDragDrop {
    private noStructuralTyping_goog_fx_DragDropGroup : any;
    /**
     * Drag/drop implementation for creating drag sources/drop targets consisting of
     * multiple HTML Elements (items). All items share the same drop target(s) but
     * can be dragged individually.
     */
    constructor ( ) ;
    /**
     * Add DragDropItem to drag object.
     * @param item DragDropItem being added to the drag object.
     */
    addDragDropItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Add item to drag object.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     * @param opt_data Data associated with the source/target.
     */
    addItem < DRAG_DROP_DATA = any > (element : GlobalElement | null | string , opt_data ? : DRAG_DROP_DATA ) : void ;
    /**
     * Remove item from drag object.
     * @param element Dom Node, or string representation of node id, that was previously added with addItem().
     */
    removeItem (element : GlobalElement | null | string ) : void ;
    /**
     * Marks the supplied list of items as selected. A drag operation for any of the
     * selected items will affect all of them.
     * @param list List of items to select or null to clear selection. TODO(eae): Not yet implemented.
     */
    setSelection (list : ( ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) [] | null ) : void ;
  }
}
declare module 'goog:goog.fx.DragDropGroup' {
  import DragDropGroup = ಠ_ಠ.clutz.goog.fx.DragDropGroup;
  export default DragDropGroup;
}
