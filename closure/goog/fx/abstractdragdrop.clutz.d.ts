//!! generated by clutz.
// Generated from fx/abstractdragdrop.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Abstract class that provides reusable functionality for implementing drag
   * and drop functionality.
   *
   * This class also allows clients to define their own subtargeting function
   * so that drop areas can have finer granularity than a single element. This is
   * accomplished by using a client provided function to map from element and
   * coordinates to a subregion id.
   *
   * This class can also be made aware of scrollable containers that contain
   * drop targets by calling addScrollableContainer. This will cause dnd to
   * take changing scroll positions into account while a drag is occurring.
   */
  class AbstractDragDrop extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_fx_AbstractDragDrop : any;
    /**
     * Abstract class that provides reusable functionality for implementing drag
     * and drop functionality.
     *
     * This class also allows clients to define their own subtargeting function
     * so that drop areas can have finer granularity than a single element. This is
     * accomplished by using a client provided function to map from element and
     * coordinates to a subregion id.
     *
     * This class can also be made aware of scrollable containers that contain
     * drop targets by calling addScrollableContainer. This will cause dnd to
     * take changing scroll positions into account while a drag is occurring.
     */
    constructor ( ) ;
    /**
     * List of items that makes up the drag source or drop target.
     */
    protected items_ : ( ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) [] | null ;
    /**
     * Add item to drag object.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     */
    addItem (a : GlobalElement | null | string ) : any ;
    /**
     * Makes drag and drop aware of a target container that could scroll mid drag.
     * @param element The scroll container.
     */
    addScrollableContainer (element : GlobalElement | null ) : void ;
    /**
     * Associate drop target with drag element.
     * @param target Target to add.
     */
    addTarget (target : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ) : void ;
    /**
     * Called after a drag operation has finished.
     * @param opt_dropTarget Target for successful drop.
     */
    protected afterEndDrag (opt_dropTarget ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Creates an element for the item being dragged.
     * @param sourceEl Drag source element.
     */
    createDragElement (sourceEl : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Generates an element to follow the cursor during dragging, given a drag
     * source element.  The default behavior is simply to clone the source element,
     * but this may be overridden in subclasses.  This method is called by
     * `createDragElement()` before the drag class is added.
     * @param sourceEl Drag source element.
     */
    protected createDragElementInternal (sourceEl : GlobalElement | null ) : GlobalElement ;
    /**
     * Creates the Dragger for the drag element.
     * @param sourceEl Drag source element.
     * @param el the element created by createDragElement().
     * @param event Mouse down event for start of drag.
     */
    protected createDraggerFor (sourceEl : GlobalElement | null , el : GlobalElement | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : ಠ_ಠ.clutz.goog.fx.Dragger ;
    /**
     * Called once a drag operation has finished. Removes event listeners and
     * elements.
     */
    protected disposeDrag ( ) : void ;
    protected disposeInternal ( ) : void ;
    /**
     * Called when removing an item. Removes event listeners and classes.
     * @param item Item to dispose.
     */
    protected disposeItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Event handler that's used to stop drag. Fires a drop event if over a valid
     * target.
     * @param event Drag event.
     */
    endDrag (event : ಠ_ಠ.clutz.goog.fx.DragEvent | null ) : void ;
    /**
     * Returns the position for the drag element.
     * @param el Drag source element.
     * @param dragEl The dragged element created by createDragElement().
     * @param event Mouse down event for start of drag.
     */
    getDragElementPosition (el : GlobalElement | null , dragEl : GlobalElement | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Returns the dragger object.
     */
    getDragger ( ) : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * Calculates the position and dimension of a draggable element.
     * @param item Item that's being dragged.
     * @param element The element to calculate the box.
     */
    protected getElementBox (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , element : GlobalElement | null ) : ಠ_ಠ.clutz.goog.math.Box ;
    /**
     * Get the position of a drag event.
     * @param event Drag event.
     */
    protected getEventPosition (event : ಠ_ಠ.clutz.goog.fx.DragEvent | null ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Gets the scroll distance as a coordinate object, using
     * the window of the current drag element's dom.
     */
    protected getScrollPos ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    init ( ) : void ;
    /**
     * Initializes a single item.
     * @param item Item to initialize.
     */
    protected initItem (item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Whether the control has been initialized.
     */
    isInitialized ( ) : boolean ;
    /**
     * Checks whatever a given point is inside a given box.
     * @param x Cursor position on the x-axis.
     * @param y Cursor position on the y-axis.
     * @param box Box to check position against.
     */
    protected isInside (x : number , y : number , box : ಠ_ಠ.clutz.goog.math.Box | null ) : boolean ;
    /**
     * Starts a drag event for an item if the mouse button stays pressed and the
     * cursor moves a few pixels. Allows dragging of items without first having to
     * register them with addItem.
     * @param event Mouse down event.
     * @param item Item that's being dragged.
     */
    maybeStartDrag (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    recalculateDragTargets ( ) : void ;
    recalculateScrollableContainers ( ) : void ;
    removeAllScrollableContainers ( ) : void ;
    removeItems ( ) : void ;
    /**
     * Removes the specified target from the list of drop targets.
     * @param target Target to remove.
     */
    removeTarget (target : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop ) : void ;
    /**
     * Set class to add to source elements being dragged.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setDragClass (className : string ) : void ;
    /**
     * Sets the SCROLL event target to make drag element follow scrolling.
     * @param scrollTarget The element that dispatches SCROLL events.
     */
    setScrollTarget (scrollTarget : GlobalEventTarget | null ) : void ;
    /**
     * Set class to add to source elements.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setSourceClass (className : string ) : void ;
    /**
     * Set a function that provides subtargets. A subtargeting function
     * returns an arbitrary identifier for each subtarget of an element.
     * DnD code will generate additional drag over / out events when
     * switching from subtarget to subtarget. This is useful for instance
     * if you are interested if you are on the top half or the bottom half
     * of the element.
     * The provided function will be given the DragDropItem, box, x, y
     * box is the current window coordinates occupied by element
     * x, y is the mouse position in window coordinates
     * @param f The new subtarget function.
     */
    setSubtargetFunction (f : Function | null ) : void ;
    /**
     * Set class to add to target elements.
     * @param className Class to be added.  Must be a single, valid classname.
     */
    setTargetClass (className : string ) : void ;
    /**
     * Event handler that's used to start drag.
     * @param event Mouse move event.
     * @param item Item that's being dragged.
     */
    startDrag (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , item : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ) : void ;
    /**
     * Test-only exports.
     */
    static TEST_ONLY : { ActiveDropTarget : { new (box : ಠ_ಠ.clutz.goog.math.Box | null , opt_target ? : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null , opt_item ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , opt_element ? : GlobalElement | null ) : ಠ_ಠ.clutz.goog.fx.ActiveDropTarget_ } } ;
    /**
     * Constant for distance threshold, in pixels, an element has to be moved to
     * initiate a drag operation.
     */
    static initDragDistanceThreshold : number ;
  }
}
declare module 'goog:goog.fx.AbstractDragDrop' {
  import AbstractDragDrop = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop;
  export default AbstractDragDrop;
}
// Generated from fx/abstractdragdrop.js
declare namespace ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType {
  let DRAG : string ;
  let DRAGEND : string ;
  let DRAGOUT : string ;
  let DRAGOVER : string ;
  let DRAGSTART : string ;
  let DROP : string ;
}
declare module 'goog:goog.fx.AbstractDragDrop.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.fx.AbstractDragDrop.EventType;
  export = EventType;
}
// Generated from fx/abstractdragdrop.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Object representing a drag and drop event.
   */
  class DragDropEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_fx_DragDropEvent : any;
    /**
     * Object representing a drag and drop event.
     * @param type Event type.
     * @param source Source drag drop object.
     * @param sourceItem Source item.
     * @param opt_target Target drag drop object.
     * @param opt_targetItem Target item.
     * @param opt_targetElement Target element.
     * @param opt_clientX X-Position relative to the screen.
     * @param opt_clientY Y-Position relative to the screen.
     * @param opt_x X-Position relative to the viewport.
     * @param opt_y Y-Position relative to the viewport.
     * @param opt_subtarget The currently active subtarget.
     * @param opt_browserEvent The browser event that caused this dragdrop event.
     */
    constructor (type : string , source : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null , sourceItem : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , opt_target ? : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null , opt_targetItem ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null , opt_targetElement ? : GlobalElement | null , opt_clientX ? : number , opt_clientY ? : number , opt_x ? : number , opt_y ? : number , opt_subtarget ? : GlobalObject | null , opt_browserEvent ? : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) ;
    /**
     * The browser event that caused this dragdrop event.
     */
    browserEvent ? : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ;
    /**
     * X-Position relative to the screen.
     */
    clientX ? : number ;
    /**
     * Y-Position relative to the screen.
     */
    clientY ? : number ;
    /**
     * Reference to the source goog.fx.AbstractDragDrop object.
     */
    dragSource : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ;
    /**
     * Reference to the source goog.fx.DragDropItem object.
     */
    dragSourceItem : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ;
    /**
     * Reference to the target goog.fx.AbstractDragDrop object.
     */
    dropTarget ? : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ;
    /**
     * The actual element of the drop target that is the target for this event.
     */
    dropTargetElement ? : GlobalElement | null ;
    /**
     * Reference to the target goog.fx.DragDropItem object.
     */
    dropTargetItem ? : ಠ_ಠ.clutz.goog.fx.DragDropItem | null ;
    /**
     * The subtarget that is currently active if a subtargeting function
     * is supplied.
     */
    subtarget ? : GlobalObject | null ;
    /**
     * X-Position relative to the viewport.
     */
    viewportX ? : number ;
    /**
     * Y-Position relative to the viewport.
     */
    viewportY ? : number ;
  }
}
declare module 'goog:goog.fx.DragDropEvent' {
  import DragDropEvent = ಠ_ಠ.clutz.goog.fx.DragDropEvent;
  export default DragDropEvent;
}
// Generated from fx/abstractdragdrop.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Class representing a source or target element for drag and drop operations.
   */
  class DragDropItem extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_fx_DragDropItem : any;
    /**
     * Class representing a source or target element for drag and drop operations.
     * @param element Dom Node, or string representation of node id, to be used as drag source/drop target.
     * @param opt_data Data associated with the source/target.
     */
    constructor (element : GlobalElement | null | string , opt_data ? : GlobalObject | null ) ;
    /**
     * Data associated with element.
     */
    data ? : GlobalObject | null ;
    /**
     * Reference to drag source/target element
     */
    element : GlobalElement | null ;
    /**
     * Gets the element that is currently being dragged.
     */
    getCurrentDragElement ( ) : GlobalElement | null ;
    /**
     * Get the data associated with the source/target.
     */
    getData ( ) : GlobalObject | null | undefined ;
    /**
     * Gets the element that is actually draggable given that the given target was
     * attempted to be dragged. This should be overridden when the element that was
     * given actually contains many items that can be dragged. From the target, you
     * can determine what element should actually be dragged.
     * @param target The target that was attempted to be dragged.
     */
    getDraggableElement (target : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Gets all the elements of this item that are potentially draggable/
     */
    getDraggableElements ( ) : ( GlobalElement | null ) [] ;
    /**
     * Sets the dragdrop to which this item belongs.
     * @param parent The parent dragdrop.
     */
    setParent (parent : ಠ_ಠ.clutz.goog.fx.AbstractDragDrop | null ) : void ;
  }
}
declare module 'goog:goog.fx.DragDropItem' {
  import DragDropItem = ಠ_ಠ.clutz.goog.fx.DragDropItem;
  export default DragDropItem;
}
// Generated from fx/abstractdragdrop.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Class representing an active drop target
   */
  class ActiveDropTarget_ {
    private noStructuralTyping_goog_fx_ActiveDropTarget_ : any;
  }
}
