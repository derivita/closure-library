//!! generated by clutz.
// Generated from fx/animation.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Constructor for an animation object.
   */
  class Animation extends ಠ_ಠ.clutz.goog.fx.TransitionBase implements ಠ_ಠ.clutz.goog.fx.anim.Animated , ಠ_ಠ.clutz.goog.fx.Transition {
    private noStructuralTyping_goog_fx_Animation : any;
    /**
     * Constructor for an animation object.
     * @param start Array for start coordinates.
     * @param end Array for end coordinates.
     * @param duration Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (start : number [] | null , end : number [] | null , duration : number , opt_acc ? : Function | null ) ;
    /**
     * Current coordinate for animation.
     */
    protected coords : number [] | null ;
    /**
     * Duration of animation in milliseconds.
     */
    protected duration : number ;
    /**
     * End point.
     */
    protected endPoint : number [] | null ;
    /**
     * Timestamp for when last frame was run.
     */
    protected lastFrame : number | null ;
    /**
     * Percent of the way through the animation.
     */
    protected progress : number ;
    /**
     * Start point.
     */
    protected startPoint : number [] | null ;
    /**
     * Handles the actual iteration of the animation in a timeout
     * @param now The current time.
     */
    cycle (now : number ) : void ;
    /**
     * Stops an animation, fires a 'destroy' event and then removes all the event
     * handlers to clean up memory.
     */
    destroy ( ) : void ;
    dispatchAnimationEvent (type ? : any ) : void ;
    /**
     * Disposes of the animation.  Stops an animation, fires a 'destroy' event and
     * then removes all the event handlers to clean up memory.
     */
    protected disposeInternal ( ) : void ;
    /**
     * Sets whether the animation should use "right" rather than "left" to position
     * elements.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point "right" will be
     * used for RTL elements by default.
     * @param useRightPositioningForRtl True if "right" should be used for positioning, false if "left" should be used for positioning.
     */
    enableRightPositioningForRtl (useRightPositioningForRtl : boolean ) : void ;
    getDuration ( ) : number ;
    getProgress ( ) : number ;
    /**
     * Whether the animation should use "right" rather than "left" to position
     * elements.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point "right" will be
     * used for RTL elements by default.
     */
    isRightPositioningForRtlEnabled ( ) : boolean ;
    /**
     * Dispatches the ANIMATE event. Sub classes should override this instead
     * of listening to the event.
     */
    protected onAnimate ( ) : void ;
    onAnimationFrame (now ? : any ) : void ;
    /**
     * Dispatches the DESTROY event. Sub classes should override this instead
     * of listening to the event.
     */
    protected onDestroy ( ) : void ;
    /**
     * Pauses the animation (iff it's playing).
     */
    pause ( ) : void ;
    /**
     * Starts or resumes an animation.
     * @param opt_restart Whether to restart the animation from the beginning if it has been paused.
     */
    play (opt_restart ? : boolean ) : boolean ;
    /**
     * Sets the progress of the animation.
     * @param progress The new progress of the animation.
     */
    setProgress (progress : number ) : void ;
    /**
     * Stops the animation.
     * @param opt_gotoEnd If true the animation will move to the end coords.
     */
    stop (opt_gotoEnd ? : boolean ) : void ;
    static TIMEOUT : any ;
    static setAnimationWindow (animationWindow : Window | null ) : void ;
  }
}
declare module 'goog:goog.fx.Animation' {
  import Animation = ಠ_ಠ.clutz.goog.fx.Animation;
  export default Animation;
}
// Generated from fx/animation.js
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
  /**
   * Events fired by the animation.
   */
  type EventType = string &{clutzEnumBrand: never} |'animate' |'destroy' ;
  let EventType : {
    ANIMATE : 'animate' ,
    BEGIN : EventType ,
    DESTROY : 'destroy' ,
    END : EventType ,
    FINISH : EventType ,
    PAUSE : EventType ,
    PLAY : EventType ,
    RESUME : EventType ,
    STOP : EventType ,
  };
}
declare module 'goog:goog.fx.Animation.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.fx.Animation.EventType;
  export default EventType;
}
// Generated from fx/animation.js
declare namespace ಠ_ಠ.clutz.goog.fx.Animation {
  /**
   * Enum for the possible states of an animation.
   */
  //!! goog.fx.Animation.State aliases enum goog.fx.TransitionBase.State
  export import State = goog.fx.TransitionBase.State ;
}
declare module 'goog:goog.fx.Animation.State' {
  import State = ಠ_ಠ.clutz.goog.fx.Animation.State;
  export default State;
}
// Generated from fx/animation.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Class for an animation event object.
   */
  class AnimationEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_fx_AnimationEvent : any;
    /**
     * Class for an animation event object.
     * @param type Event type.
     * @param anim An animation object.
     */
    constructor (type : string , anim : ಠ_ಠ.clutz.goog.fx.Animation | null ) ;
    /**
     * The animation object.
     */
    anim : ಠ_ಠ.clutz.goog.fx.Animation | null ;
    /**
     * The current coordinates.
     */
    coords : number [] | null ;
    /**
     * The current duration.
     */
    duration : number ;
    fps : number ;
    /**
     * The current progress.
     */
    progress : number ;
    /**
     * The state of the animation.
     */
    state : number ;
    /**
     * The x coordinate.
     */
    x : number ;
    /**
     * The y coordinate.
     */
    y : number ;
    /**
     * The z coordinate.
     */
    z : number ;
    /**
     * Returns the coordinates as integers (rounded to nearest integer).
     */
    coordsAsInts ( ) : number [] ;
  }
}
declare module 'goog:goog.fx.AnimationEvent' {
  import AnimationEvent = ಠ_ಠ.clutz.goog.fx.AnimationEvent;
  export default AnimationEvent;
}
