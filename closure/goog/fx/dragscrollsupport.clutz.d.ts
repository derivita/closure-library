//!! generated by clutz.
// Generated from fx/dragscrollsupport.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A scroll support class. Currently this class will automatically scroll
   * a scrollable container node and scroll it by a fixed amount at a timed
   * interval when the mouse is moved above or below the container or in vertical
   * margin areas. Intended for use in drag and drop. This could potentially be
   * made more general and could support horizontal scrolling.
   */
  class DragScrollSupport extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_fx_DragScrollSupport : any;
    /**
     * A scroll support class. Currently this class will automatically scroll
     * a scrollable container node and scroll it by a fixed amount at a timed
     * interval when the mouse is moved above or below the container or in vertical
     * margin areas. Intended for use in drag and drop. This could potentially be
     * made more general and could support horizontal scrolling.
     * @param containerNode A container that can be scrolled.
     * @param opt_margin Optional margin to use while scrolling.
     * @param opt_externalMouseMoveTracking Whether mouse move events are tracked externally by the client object which calls the mouse move event handler, useful when events are generated for more than one source element and/or are not real mousemove events.
     */
    constructor (containerNode : GlobalElement | null , opt_margin ? : number , opt_externalMouseMoveTracking ? : boolean ) ;
    /**
     * Calculates scroll delta.
     * @param coordinate Current mouse pointer coordinate.
     * @param min The coordinate value below which scrolling up should be started.
     * @param rangeLength The length of the range in which scrolling should be disabled and above which scrolling down should be started.
     */
    protected calculateScrollDelta (coordinate : number , min : number , rangeLength : number ) : number ;
    disposeInternal ( ) : void ;
    /**
     * Handler for mouse moves events.
     * @param event Mouse move event.
     */
    onMouseMove (event : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Sets whether scrolling should be constrained to happen only when the cursor
     * is inside the container node.
     * NOTE: If a margin is not set, then it does not make sense to
     * contain the scroll, because in that case scroll will never be triggered.
     * @param constrain Whether scrolling should be constrained to happen only when the cursor is inside the container node.
     */
    setConstrainScroll (constrain : boolean ) : void ;
    /**
     * Sets whether horizontal scrolling is allowed.
     * @param scrolling Whether horizontal scrolling is allowed.
     */
    setHorizontalScrolling (scrolling : boolean ) : void ;
    /**
     * The suggested scrolling margin.
     */
    static MARGIN : number ;
  }
}
declare module 'goog:goog.fx.DragScrollSupport' {
  import DragScrollSupport = ಠ_ಠ.clutz.goog.fx.DragScrollSupport;
  export default DragScrollSupport;
}
