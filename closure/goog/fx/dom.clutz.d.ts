//!! generated by clutz.
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fade elements background color from start color to the element's current
   * background color.
   *
   * Start should be a 3D array representing R,G,B
   * @param element Dom Node to be used in the animation.
   * @param start 3D Array for RGB of start color.
   * @param time Length of animation in milliseconds.
   * @param opt_eventHandler Optional event handler to use when listening for events.
   */
  function bgColorFadeIn (element : GlobalElement | null , start : number [] | null , time : number , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler | null ) : void ;
}
declare module 'goog:goog.fx.dom' {
  import dom = ಠ_ಠ.clutz.goog.fx.dom;
  export = dom;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Provides a transformation of an elements background-color.
   *
   * Start and End should be 3D arrays representing R,G,B
   */
  class BgColorTransform extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_BgColorTransform : any;
    /**
     * Provides a transformation of an elements background-color.
     *
     * Start and End should be 3D arrays representing R,G,B
     * @param element Dom Node to be used in the animation.
     * @param start 3D Array for RGB of start color.
     * @param end 3D Array for RGB of end color.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    setColor ( ) : void ;
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.BgColorTransform' {
  import BgColorTransform = ಠ_ಠ.clutz.goog.fx.dom.BgColorTransform;
  export default BgColorTransform;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Provides a transformation of an elements color.
   */
  class ColorTransform extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_ColorTransform : any;
    /**
     * Provides a transformation of an elements color.
     * @param element Dom Node to be used in the animation.
     * @param start 3D Array representing R,G,B.
     * @param end 3D Array representing R,G,B.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will set the color of an element.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.ColorTransform' {
  import ColorTransform = ಠ_ಠ.clutz.goog.fx.dom.ColorTransform;
  export default ColorTransform;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that fades the opacity of an element between two
   * limits.
   *
   * Start and End should be floats between 0 and 1
   */
  class Fade extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_Fade : any;
    /**
     * Creates an animation object that fades the opacity of an element between two
     * limits.
     *
     * Start and End should be floats between 0 and 1
     * @param element Dom Node to be used in the animation.
     * @param start 1D Array or Number with start opacity.
     * @param end 1D Array or Number for end opacity.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null | number , end : number [] | null | number , time : number , opt_acc ? : Function | null ) ;
    hide ( ) : void ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
    show ( ) : void ;
    /**
     * Animation event handler that will set the opacity of an element.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.Fade' {
  import Fade = ಠ_ಠ.clutz.goog.fx.dom.Fade;
  export default Fade;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element in from completely transparent to fully opacity.
   */
  class FadeIn extends ಠ_ಠ.clutz.goog.fx.dom.Fade {
    private noStructuralTyping_goog_fx_dom_FadeIn : any;
    /**
     * Fades an element in from completely transparent to fully opacity.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , time : number , opt_acc ? : Function | null ) ;
  }
}
declare module 'goog:goog.fx.dom.FadeIn' {
  import FadeIn = ಠ_ಠ.clutz.goog.fx.dom.FadeIn;
  export default FadeIn;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Sets an element's display to be visible and then fades an element in from
   * completely transparent to fully opaque.
   */
  class FadeInAndShow extends ಠ_ಠ.clutz.goog.fx.dom.Fade {
    private noStructuralTyping_goog_fx_dom_FadeInAndShow : any;
    /**
     * Sets an element's display to be visible and then fades an element in from
     * completely transparent to fully opaque.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , time : number , opt_acc ? : Function | null ) ;
    onBegin ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.FadeInAndShow' {
  import FadeInAndShow = ಠ_ಠ.clutz.goog.fx.dom.FadeInAndShow;
  export default FadeInAndShow;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element out from full opacity to completely transparent.
   */
  class FadeOut extends ಠ_ಠ.clutz.goog.fx.dom.Fade {
    private noStructuralTyping_goog_fx_dom_FadeOut : any;
    /**
     * Fades an element out from full opacity to completely transparent.
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , time : number , opt_acc ? : Function | null ) ;
  }
}
declare module 'goog:goog.fx.dom.FadeOut' {
  import FadeOut = ಠ_ಠ.clutz.goog.fx.dom.FadeOut;
  export default FadeOut;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Fades an element out from full opacity to completely transparent and then
   * sets the display to 'none'
   */
  class FadeOutAndHide extends ಠ_ಠ.clutz.goog.fx.dom.Fade {
    private noStructuralTyping_goog_fx_dom_FadeOutAndHide : any;
    /**
     * Fades an element out from full opacity to completely transparent and then
     * sets the display to 'none'
     * @param element Dom Node to be used in the animation.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , time : number , opt_acc ? : Function | null ) ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.FadeOutAndHide' {
  import FadeOutAndHide = ಠ_ಠ.clutz.goog.fx.dom.FadeOutAndHide;
  export default FadeOutAndHide;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Abstract class that provides reusable functionality for predefined animations
   * that manipulate a single DOM element
   */
  class PredefinedEffect extends ಠ_ಠ.clutz.goog.fx.Animation {
    private noStructuralTyping_goog_fx_dom_PredefinedEffect : any;
    /**
     * Abstract class that provides reusable functionality for predefined animations
     * that manipulate a single DOM element
     * @param element Dom Node to be used in the animation.
     * @param start Array for start coordinates.
     * @param end Array for end coordinates.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    /**
     * DOM Node that will be used in the animation
     */
    element : GlobalElement | null ;
    /**
     * Whether the DOM element being manipulated is rendered right-to-left.
     */
    isRightToLeft ( ) : boolean ;
    onAnimate ( ) : void ;
    onBegin ( ) : void ;
    onEnd ( ) : void ;
    /**
     * Called to update the style of the element.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.PredefinedEffect' {
  import PredefinedEffect = ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect;
  export default PredefinedEffect;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two widths
   * and heights.
   *
   * Start and End should be 2 dimensional arrays
   */
  class Resize extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_Resize : any;
    /**
     * Creates an animation object that will resize an element between two widths
     * and heights.
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start width and height.
     * @param end 2D array for end width and height.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width and
     * height.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.Resize' {
  import Resize = ಠ_ಠ.clutz.goog.fx.dom.Resize;
  export default Resize;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two heights
   *
   * Start and End should be numbers
   */
  class ResizeHeight extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_ResizeHeight : any;
    /**
     * Creates an animation object that will resize an element between two heights
     *
     * Start and End should be numbers
     * @param element Dom Node to be used in the animation.
     * @param start Start height.
     * @param end End height.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number , end : number , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will resize an element by setting its height.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.ResizeHeight' {
  import ResizeHeight = ಠ_ಠ.clutz.goog.fx.dom.ResizeHeight;
  export default ResizeHeight;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will resize an element between two widths
   *
   * Start and End should be numbers
   */
  class ResizeWidth extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_ResizeWidth : any;
    /**
     * Creates an animation object that will resize an element between two widths
     *
     * Start and End should be numbers
     * @param element Dom Node to be used in the animation.
     * @param start Start width.
     * @param end End width.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number , end : number , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.ResizeWidth' {
  import ResizeWidth = ಠ_ಠ.clutz.goog.fx.dom.ResizeWidth;
  export default ResizeWidth;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will scroll an element from A to B.
   *
   * Start and End should be 2 dimensional arrays
   */
  class Scroll extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_Scroll : any;
    /**
     * Creates an animation object that will scroll an element from A to B.
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start scroll left and top.
     * @param end 2D array for end scroll left and top.
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will set the scroll position of an element.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.Scroll' {
  import Scroll = ಠ_ಠ.clutz.goog.fx.dom.Scroll;
  export default Scroll;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will slide an element from A to B.  (This
   * in effect automatically sets up the onanimate event for an Animation object)
   *
   * Start and End should be 2 dimensional arrays
   */
  class Slide extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_Slide : any;
    /**
     * Creates an animation object that will slide an element from A to B.  (This
     * in effect automatically sets up the onanimate event for an Animation object)
     *
     * Start and End should be 2 dimensional arrays
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start coordinates (X, Y).
     * @param end 2D array for end coordinates (X, Y).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.Slide' {
  import Slide = ಠ_ಠ.clutz.goog.fx.dom.Slide;
  export default Slide;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Slides an element from its current position.
   */
  class SlideFrom extends ಠ_ಠ.clutz.goog.fx.dom.Slide {
    private noStructuralTyping_goog_fx_dom_SlideFrom : any;
    /**
     * Slides an element from its current position.
     * @param element DOM node to be used in the animation.
     * @param end 2D array for end coordinates (X, Y).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    startPoint : number [] | null ;
    onBegin ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.SlideFrom' {
  import SlideFrom = ಠ_ಠ.clutz.goog.fx.dom.SlideFrom;
  export default SlideFrom;
}
// Generated from fx/dom.js
declare namespace ಠ_ಠ.clutz.goog.fx.dom {
  /**
   * Creates an animation object that will slide an element into its final size.
   * Requires that the element is absolutely positioned.
   */
  class Swipe extends ಠ_ಠ.clutz.goog.fx.dom.PredefinedEffect {
    private noStructuralTyping_goog_fx_dom_Swipe : any;
    /**
     * Creates an animation object that will slide an element into its final size.
     * Requires that the element is absolutely positioned.
     * @param element Dom Node to be used in the animation.
     * @param start 2D array for start size (W, H).
     * @param end 2D array for end size (W, H).
     * @param time Length of animation in milliseconds.
     * @param opt_acc Acceleration function, returns 0-1 for inputs 0-1.
     */
    constructor (element : GlobalElement | null , start : number [] | null , end : number [] | null , time : number , opt_acc ? : Function | null ) ;
    /**
     * Animation event handler that will resize an element by setting its width,
     * height and clipping.
     */
    protected updateStyle ( ) : void ;
  }
}
declare module 'goog:goog.fx.dom.Swipe' {
  import Swipe = ಠ_ಠ.clutz.goog.fx.dom.Swipe;
  export default Swipe;
}
