//!! generated by clutz.
// Generated from fx/dragger.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Object representing a drag event
   */
  class DragEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_fx_DragEvent : any;
    /**
     * Object representing a drag event
     * @param type Event type.
     * @param dragobj Drag object initiating event.
     * @param clientX X-coordinate relative to the viewport.
     * @param clientY Y-coordinate relative to the viewport.
     * @param browserEvent The closure object representing the browser event that caused this drag event.
     * @param opt_actX Optional actual x for drag if it has been limited.
     * @param opt_actY Optional actual y for drag if it has been limited.
     * @param opt_dragCanceled Whether the drag has been canceled.
     */
    constructor (type : string , dragobj : ಠ_ಠ.clutz.goog.fx.Dragger | null , clientX : number , clientY : number , browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , opt_actX ? : number , opt_actY ? : number , opt_dragCanceled ? : boolean ) ;
    /**
     * The closure object representing the browser event that caused this drag
     * event.
     */
    browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ;
    /**
     * X-coordinate relative to the viewport
     */
    clientX : number ;
    /**
     * Y-coordinate relative to the viewport
     */
    clientY : number ;
    /**
     * Whether drag was canceled with this event. Used to differentiate between
     * a legitimate drag END that can result in an action and a drag END which is
     * a result of a drag cancelation. For now it can happen 1) with drag END
     * event on FireFox when user drags the mouse out of the window, 2) with
     * drag END event on IE7 which is generated on MOUSEMOVE event when user
     * moves the mouse into the document after the mouse button has been
     * released, 3) when TOUCHCANCEL is raised instead of TOUCHEND (on touch
     * events).
     */
    dragCanceled : boolean ;
    /**
     * Reference to the drag object for this event
     */
    dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * The real x-position of the drag if it has been limited
     */
    left : number ;
    /**
     * The real y-position of the drag if it has been limited
     */
    top : number ;
  }
}
declare module 'goog:goog.fx.DragEvent' {
  import DragEvent = ಠ_ಠ.clutz.goog.fx.DragEvent;
  export default DragEvent;
}
// Generated from fx/dragger.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A class that allows mouse or touch-based dragging (moving) of an element
   */
  class Dragger extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_fx_Dragger : any;
    /**
     * A class that allows mouse or touch-based dragging (moving) of an element
     * @param target The element that will be dragged.
     * @param opt_handle An optional handle to control the drag, if null the target is used.
     * @param opt_limits Object containing left, top, width, and height.
     */
    constructor (target : GlobalElement | null , opt_handle ? : GlobalElement | null , opt_limits ? : ಠ_ಠ.clutz.goog.math.Rect | null ) ;
    /**
     * Current x position of mouse or touch relative to viewport.
     */
    clientX : number ;
    /**
     * Current y position of mouse or touch relative to viewport.
     */
    clientY : number ;
    /**
     * Current x position of drag relative to target's parent.
     */
    deltaX : number ;
    /**
     * Current y position of drag relative to target's parent.
     */
    deltaY : number ;
    /**
     * Reference to the handler that initiates the drag.
     */
    handle : GlobalElement | null ;
    /**
     * Object representing the limits of the drag region.
     */
    limits : ಠ_ಠ.clutz.goog.math.Rect | null ;
    /**
     * The current page scroll value.
     */
    pageScroll : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * Current x position of mouse or touch relative to screen. Deprecated because
     * it doesn't take into affect zoom level or pixel density.
     */
    screenX : number ;
    /**
     * Current y position of mouse or touch relative to screen. Deprecated because
     * it doesn't take into affect zoom level or pixel density.
     */
    screenY : number ;
    /**
     * The x position where the first mousedown or touchstart occurred.
     */
    startX : number ;
    /**
     * The y position where the first mousedown or touchstart occurred.
     */
    startY : number ;
    /**
     * Reference to drag target element.
     */
    target : GlobalElement | null ;
    /**
     * Overridable function for computing the initial position of the target
     * before dragging begins.
     */
    protected computeInitialPosition ( ) : void ;
    /**
     * Overridable function for handling the default action of the drag behaviour.
     * Normally this is simply moving the element to x,y though in some cases it
     * might be used to resize the layer.  This is basically a shortcut to
     * implementing a default ondrag event handler.
     * @param x X-coordinate for target element. In right-to-left, x this is the number of pixels the target should be moved to from the right.
     * @param y Y-coordinate for target element.
     */
    defaultAction (x : number , y : number ) : void ;
    disposeInternal ( ) : void ;
    protected doDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , x : number , y : number , dragFromScroll : boolean ) : void ;
    /**
     * Turns on/off true RTL behavior.  This should be called immediately after
     * construction.  This is a temporary flag to allow clients to transition
     * to the new component at their convenience.  At some point true will be the
     * default.
     * @param useRightPositioningForRtl True if "right" should be used for positioning, false if "left" should be used for positioning.
     */
    enableRightPositioningForRtl (useRightPositioningForRtl : boolean ) : void ;
    /**
     * Event handler that is used to end the drag.
     * @param e Event object.
     * @param opt_dragCanceled Whether the drag has been canceled.
     */
    endDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null , opt_dragCanceled ? : boolean ) : void ;
    /**
     * Event handler that is used to end the drag by cancelling it.
     * @param e Event object.
     */
    endDragCancel (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    getEnabled ( ) : boolean ;
    /**
     * Returns the event handler, intended for subclass use.
     */
    getHandler < T = any > (this : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > ;
    /**
     * Gets the distance the user has to drag the element before a drag operation is
     * started.
     */
    getHysteresis ( ) : number ;
    isDragging ( ) : boolean ;
    /**
     * Returns the 'real' x after limits are applied (allows for some
     * limits to be undefined).
     * @param x X-coordinate to limit.
     */
    limitX (x : number ) : number ;
    /**
     * Returns the 'real' y after limits are applied (allows for some
     * limits to be undefined).
     * @param y Y-coordinate to limit.
     */
    limitY (y : number ) : number ;
    /**
     * Prevents the dragger from calling setCapture(), even in browsers that support
     * it.  If the draggable item has click handlers, setCapture() can break them.
     * @param allow True to use setCapture if the browser supports it.
     */
    setAllowSetCapture (allow : boolean ) : void ;
    /**
     * Enables cancelling of built-in IE drag events.
     * @param cancelIeDragStart Whether to enable cancelling of IE dragstart event.
     */
    setCancelIeDragStart (cancelIeDragStart : boolean ) : void ;
    /**
     * Set whether dragger is enabled
     * @param enabled Whether dragger is enabled.
     */
    setEnabled (enabled : boolean ) : void ;
    /**
     * Sets the distance the user has to drag the element before a drag operation is
     * started.
     * @param distance The number of pixels after which a mousedown and move is considered a drag.
     */
    setHysteresis (distance : number ) : void ;
    /**
     * Sets (or reset) the Drag limits after a Dragger is created.
     * @param limits Object containing left, top, width, height for new Dragger limits. If target is right-to-left and enableRightPositioningForRtl(true) is called, then rect is interpreted as right, top, width, and height.
     */
    setLimits (limits : ಠ_ಠ.clutz.goog.math.Rect | null ) : void ;
    /**
     * Set whether mousedown should be default prevented.
     * @param preventMouseDown Whether mousedown should be default prevented.
     */
    setPreventMouseDown (preventMouseDown : boolean ) : void ;
    /**
     * Sets the SCROLL event target to make drag element follow scrolling.
     * @param scrollTarget The event target that dispatches SCROLL events.
     */
    setScrollTarget (scrollTarget : GlobalEventTarget | null ) : void ;
    /**
     * Sets up event handlers when dragging starts.
     */
    protected setupDragHandlers ( ) : void ;
    /**
     * Event handler that is used to start the drag
     * @param e Event object.
     */
    startDrag (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Creates copy of node being dragged.  This is a utility function to be used
     * wherever it is inappropriate for the original source to follow the mouse
     * cursor itself.
     * @param sourceEl Element to copy.
     */
    static cloneNode (sourceEl : GlobalElement | null ) : GlobalElement ;
  }
}
declare module 'goog:goog.fx.Dragger' {
  import Dragger = ಠ_ಠ.clutz.goog.fx.Dragger;
  export default Dragger;
}
// Generated from fx/dragger.js
declare namespace ಠ_ಠ.clutz.goog.fx.Dragger {
  /**
   * Constants for event names.
   */
  /**
   * Constants for event names.
   */
  enum EventType {
    BEFOREDRAG = 'beforedrag' ,
    DRAG = 'drag' ,
    EARLY_CANCEL = 'earlycancel' ,
    END = 'end' ,
    START = 'start' ,
  }
}
declare module 'goog:goog.fx.Dragger.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.fx.Dragger.EventType;
  export default EventType;
}
