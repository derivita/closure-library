//!! generated by clutz.
// Generated from fx/draglistgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Enum to indicate the direction that a drag list grows.
   */
  /**
   * Enum to indicate the direction that a drag list grows.
   */
  enum DragListDirection {
    DOWN = 0.0 ,
    LEFT = 3.0 ,
    LEFT_2D = 5.0 ,
    RIGHT = 2.0 ,
    RIGHT_2D = 4.0 ,
  }
}
declare module 'goog:goog.fx.DragListDirection' {
  import DragListDirection = ಠ_ಠ.clutz.goog.fx.DragListDirection;
  export default DragListDirection;
}
// Generated from fx/draglistgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * A class representing a group of one or more "drag lists" with items that can
   * be dragged within them and between them.
   *
   * Example usage:
   * var dragListGroup = new goog.fx.DragListGroup();
   * dragListGroup.setDragItemHandleHoverClass(className1, className2);
   * dragListGroup.setDraggerElClass(className3);
   * dragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);
   * dragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);
   * dragListGroup.init();
   */
  class DragListGroup extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_fx_DragListGroup : any;
    /**
     * A class representing a group of one or more "drag lists" with items that can
     * be dragged within them and between them.
     *
     * Example usage:
     * var dragListGroup = new goog.fx.DragListGroup();
     * dragListGroup.setDragItemHandleHoverClass(className1, className2);
     * dragListGroup.setDraggerElClass(className3);
     * dragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);
     * dragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);
     * dragListGroup.init();
     */
    constructor ( ) ;
    /**
     * Adds a drag list to this DragListGroup.
     * All calls to this method must happen before the call to init().
     * Remember that all child nodes (except text nodes) will be made draggable to
     * any other drag list in this group.
     * @param dragListElement Must be a container for a list of items that should all be made draggable.
     * @param growthDirection The direction that this drag list grows in (i.e. if an item is appended to the DOM, the list's bounding box expands in this direction).
     * @param opt_unused Unused argument.
     * @param opt_dragHoverClass CSS class to apply to this drag list when the draggerEl hovers over it during a drag action.  If present, must be a single, valid classname (not a string of space-separated classnames).
     * @param opt_dragListPermission Defaults to DRAG_OUT_AND_DROP but can be passed in to modify to prevent users from dragging an item out of a list or dropping an item into a list.
     */
    addDragList (dragListElement : GlobalElement | null , growthDirection : ಠ_ಠ.clutz.goog.fx.DragListDirection , opt_unused ? : boolean , opt_dragHoverClass ? : string , opt_dragListPermission ? : ಠ_ಠ.clutz.goog.fx.DragListPermission ) : void ;
    /**
     * Adds a single item to the given drag list and sets up the drag listeners for
     * it.
     * If opt_index is specified the item is inserted at this index, otherwise the
     * item is added as the last child of the list.
     * @param list The drag list where to add item to.
     * @param item The new element to add.
     * @param opt_index Index where to insert the item in the list. If not specified item is inserted as the last child of list.
     */
    addItemToDragList (list : GlobalElement , item : GlobalElement , opt_index ? : number ) : void ;
    /**
     * Generates an element to follow the cursor during dragging, given a drag
     * source element.  The default behavior is simply to clone the source element,
     * but this may be overridden in subclasses.  This method is called by
     * `createDragElement()` before the drag class is added.
     * @param sourceEl Drag source element.
     */
    protected createDragElementInternal (sourceEl : GlobalElement | null ) : GlobalElement ;
    disposeInternal ( ) : void ;
    getHysteresis ( ) : number ;
    init ( ) : void ;
    /**
     * Inserts the currently dragged item in its new place.
     *
     * This method is used for insertion only when updateWhileDragging_ is false
     * (otherwise there is no need for that). In the basic implementation
     * the element is inserted before the currently hovered over item (this can
     * be changed by overriding the method in subclasses).
     */
    protected insertCurrHoverItem ( ) : void ;
    isDragging ( ) : boolean ;
    /**
     * Listens for drag events on the given drag item. This method is currently used
     * to initialize drag items.
     * @param dragItem the element to initialize. This element has to be in one of the drag lists.
     */
    protected listenForDragEvents (dragItem : GlobalElement ) : void ;
    /**
     * Sets the correctDraggedElementInitialPos_ private property. This override the
     * DRAGLISTGROUP_CORRECT_POSITION_DRAG_START compile flag, to allow for a per
     * component control within a project.
     * @param updateInitialPosition Whether to allow/forbid the correction of the currDragEl initial position.
     */
    overrideCorrectDraggedElementInitialPos (updateInitialPosition : boolean ) : void ;
    recacheListAndItemBounds ( ) : void ;
    /**
     * Sets a user-supplied CSS class to add to the current drag item (during a
     * drag action).
     *
     * If not set, the default behavior adds visibility:hidden to the current drag
     * item so that it is a block of empty space in the hover drag list (if any).
     * If this class is set by the user, then the default behavior does not happen
     * (unless, of course, the class also contains visibility:hidden).
     * @param var_args The CSS class or classes.
     */
    setCurrDragItemClass ( ...var_args : string [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to a drag item handle on hover (not
     * during a drag action).
     * @param var_args The CSS class or classes.
     */
    setDragItemHandleHoverClass ( ...var_args : string [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to a drag item on hover (not during a
     * drag action).
     * @param var_args The CSS class or classes.
     */
    setDragItemHoverClass ( ...var_args : string [] ) : void ;
    /**
     * Sets a user-supplied CSS class to add to the clone of the current drag item
     * that's actually being dragged around (during a drag action).
     * @param draggerElClass The CSS class.
     */
    setDraggerElClass (draggerElClass : string ) : void ;
    /**
     * Sets a user-supplied function used to get the "handle" element for a drag
     * item. The function must accept exactly one argument. The argument may be
     * any drag item element.
     *
     * If not set, the default implementation uses the whole drag item as the
     * handle.
     * @param getHandleForDragItemFn A function that, given any drag item, returns a reference to its "handle" element (which may be the drag item element itself).
     */
    setFunctionToGetHandleForDragItem (getHandleForDragItemFn : (a : GlobalElement ) => GlobalElement | null ) : void ;
    /**
     * Sets the distance the user has to drag the element before a drag operation
     * is started.
     * @param distance The number of pixels after which a mousedown and move is considered a drag.
     */
    setHysteresis (distance : number ) : void ;
    setIsCurrDragItemAlwaysDisplayed ( ) : void ;
    setNoUpdateWhileDragging ( ) : void ;
    /**
     * Updates the value of currHoverItem_.
     *
     * This method is used for insertion only when updateWhileDragging_ is false.
     * The below implementation is the basic one. This method can be extended by
     * a subclass to support changes to hovered item (eg: highlighting). Parametr
     * opt_draggerElCenter can be used for more sophisticated effects.
     * @param hoverNextItem element of the list that is hovered over.
     * @param opt_draggerElCenter current position of the dragged element.
     */
    protected updateCurrHoverItem (hoverNextItem : GlobalElement | null , opt_draggerElCenter ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : void ;
    static CORRECT_POSITION_DRAG_START : boolean ;
  }
}
declare module 'goog:goog.fx.DragListGroup' {
  import DragListGroup = ಠ_ಠ.clutz.goog.fx.DragListGroup;
  export default DragListGroup;
}
// Generated from fx/draglistgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx.DragListGroup {
  /**
   * Events dispatched by this class.
   */
  type EventType = ಠ_ಠ.clutz.goog.events.EventId < ಠ_ಠ.clutz.goog.fx.DragListGroupEvent > &{clutzEnumBrand: never} ;
  let EventType : {
    BEFOREDRAGEND : EventType ,
    BEFOREDRAGMOVE : EventType ,
    BEFOREDRAGSTART : EventType ,
    DRAGEND : EventType ,
    DRAGGERCREATED : EventType ,
    DRAGGERREMOVED : EventType ,
    DRAGMOVE : EventType ,
    DRAGSTART : EventType ,
  };
}
declare module 'goog:goog.fx.DragListGroup.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType;
  export default EventType;
}
// Generated from fx/draglistgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * The event object dispatched by DragListGroup.
   * The fields draggerElCenter, hoverList, and hoverNextItem are only available
   * for the BEFOREDRAGMOVE and DRAGMOVE events.
   */
  class DragListGroupEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_fx_DragListGroupEvent : any;
    /**
     * The event object dispatched by DragListGroup.
     * The fields draggerElCenter, hoverList, and hoverNextItem are only available
     * for the BEFOREDRAGMOVE and DRAGMOVE events.
     * @param dragListGroup A reference to the associated DragListGroup object.
     * @param event The event fired by the browser or fired by the dragger.
     * @param currDragItem The current drag item being moved.
     * @param draggerEl The clone of the current drag item that's actually being dragged around.
     * @param dragger The dragger object.
     * @param opt_draggerElCenter The current center position of the draggerEl.
     * @param opt_hoverList The current drag list that's being hovered over, or null if the center of draggerEl is outside of any drag lists. If not null and the drag action ends right now, then currDragItem will end up in this list.
     * @param opt_hoverNextItem The current next item in the hoverList that the draggerEl is hovering over. (I.e. If the drag action ends right now, then this item would become the next item after the new location of currDragItem.) May be null if not applicable or if currDragItem would be added to the end of hoverList.
     */
    constructor (type : ಠ_ಠ.clutz.goog.fx.DragListGroup.EventType , dragListGroup : ಠ_ಠ.clutz.goog.fx.DragListGroup | null , event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null | ಠ_ಠ.clutz.goog.fx.DragEvent , currDragItem : GlobalElement | null , draggerEl : GlobalElement | null , dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null , opt_draggerElCenter ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_hoverList ? : GlobalElement | null , opt_hoverNextItem ? : GlobalElement | null ) ;
    /**
     * The current drag item being move.
     */
    currDragItem : GlobalElement | null ;
    /**
     * A reference to the associated DragListGroup object.
     */
    dragListGroup : ಠ_ಠ.clutz.goog.fx.DragListGroup | null ;
    /**
     * The dragger object.
     */
    dragger : ಠ_ಠ.clutz.goog.fx.Dragger | null ;
    /**
     * The clone of the current drag item that's actually being dragged around.
     */
    draggerEl : GlobalElement | null ;
    /**
     * The current center position of the draggerEl.
     */
    draggerElCenter ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * The event fired by the browser or fired by the dragger.
     */
    event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null | ಠ_ಠ.clutz.goog.fx.DragEvent ;
    /**
     * The current drag list that's being hovered over, or null if the center of
     * draggerEl is outside of any drag lists. (I.e. If not null and the drag
     * action ends right now, then currDragItem will end up in this list.)
     */
    hoverList ? : GlobalElement | null ;
    /**
     * The current next item in the hoverList that the draggerEl is hovering over.
     * (I.e. If the drag action ends right now, then this item would become the
     * next item after the new location of currDragItem.) May be null if not
     * applicable or if currDragItem would be added to the end of hoverList.
     */
    hoverNextItem ? : GlobalElement | null ;
  }
}
declare module 'goog:goog.fx.DragListGroupEvent' {
  import DragListGroupEvent = ಠ_ಠ.clutz.goog.fx.DragListGroupEvent;
  export default DragListGroupEvent;
}
// Generated from fx/draglistgroup.js
declare namespace ಠ_ಠ.clutz.goog.fx {
  /**
   * Enum to indicate the drag and drop permissions for a drag list. Default is
   * DRAG_OUT_AND_DROP.
   */
  /**
   * Enum to indicate the drag and drop permissions for a drag list. Default is
   * DRAG_OUT_AND_DROP.
   */
  enum DragListPermission {
    DRAG_OUT_AND_DROP = 0.0 ,
    ONLY_DRAG_OUT = 1.0 ,
    ONLY_DROP = 2.0 ,
  }
}
declare module 'goog:goog.fx.DragListPermission' {
  import DragListPermission = ಠ_ಠ.clutz.goog.fx.DragListPermission;
  export default DragListPermission;
}
