//!! generated by clutz.
// Generated from events/eventtarget.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * An implementation of `goog.events.Listenable` with full W3C
   * EventTarget-like support (capture/bubble mechanism, stopping event
   * propagation, preventing default actions).
   *
   * You may subclass this class to turn your class into a Listenable.
   *
   * Unless propagation is stopped, an event dispatched by an
   * EventTarget will bubble to the parent returned by
   * `getParentEventTarget`. To set the parent, call
   * `setParentEventTarget`. Subclasses that don't support
   * changing the parent can override the setter to throw an error.
   *
   * Example usage:
   * <pre>
   * var source = new goog.events.EventTarget();
   * function handleEvent(e) {
   * alert('Type: ' + e.type + '; Target: ' + e.target);
   * }
   * source.listen('foo', handleEvent);
   * // Or: goog.events.listen(source, 'foo', handleEvent);
   * ...
   * source.dispatchEvent('foo');  // will call handleEvent
   * ...
   * source.unlisten('foo', handleEvent);
   * // Or: goog.events.unlisten(source, 'foo', handleEvent);
   * </pre>
   */
  class EventTarget extends ಠ_ಠ.clutz.goog.Disposable implements ಠ_ಠ.clutz.goog.events.Listenable {
    private noStructuralTyping_goog_events_EventTarget : any;
    /**
     * An implementation of `goog.events.Listenable` with full W3C
     * EventTarget-like support (capture/bubble mechanism, stopping event
     * propagation, preventing default actions).
     *
     * You may subclass this class to turn your class into a Listenable.
     *
     * Unless propagation is stopped, an event dispatched by an
     * EventTarget will bubble to the parent returned by
     * `getParentEventTarget`. To set the parent, call
     * `setParentEventTarget`. Subclasses that don't support
     * changing the parent can override the setter to throw an error.
     *
     * Example usage:
     * <pre>
     * var source = new goog.events.EventTarget();
     * function handleEvent(e) {
     * alert('Type: ' + e.type + '; Target: ' + e.target);
     * }
     * source.listen('foo', handleEvent);
     * // Or: goog.events.listen(source, 'foo', handleEvent);
     * ...
     * source.dispatchEvent('foo');  // will call handleEvent
     * ...
     * source.unlisten('foo', handleEvent);
     * // Or: goog.events.unlisten(source, 'foo', handleEvent);
     * </pre>
     */
    constructor ( ) ;
    /**
     * Adds an event listener to the event target. The same handler can only be
     * added once per the type. Even if you add the same handler multiple times
     * using the same type then it will only be called once when the event is
     * dispatched.
     * @param type The type of the event to listen for
     * @param handler The function to handle the event. The handler can also be an object that implements the handleEvent method which takes the event object as argument.
     * @param opt_capture In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_handlerScope Object in whose scope to call the listener.
     */
    addEventListener (type : string | ಠ_ಠ.clutz.goog.events.EventId , handler : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : GlobalObject | null ) : void ;
    dispatchEvent (e : ಠ_ಠ.clutz.goog.events.EventLike | null ) : boolean ;
    /**
     * Removes listeners from this object.  Classes that extend EventTarget may
     * need to override this method in order to remove references to DOM Elements
     * and additional listeners.
     */
    protected disposeInternal ( ) : void ;
    fireListeners < EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , capture : boolean , eventObject : EVENTOBJ ) : boolean ;
    getListener < SCOPE = any , EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (this : SCOPE , a : EVENTOBJ ) => boolean | undefined , capture : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    getListeners < EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId , capture : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    /**
     * Returns the parent of this event target to use for bubbling.
     */
    getParentEventTarget ( ) : ಠ_ಠ.clutz.goog.events.EventTarget | null ;
    hasListener < EVENTOBJ = any > (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , opt_capture ? : boolean ) : boolean ;
    listen < SCOPE = any , EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (this : SCOPE , a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    listenOnce < SCOPE = any , EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (this : SCOPE , a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    removeAllListeners (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId ) : number ;
    /**
     * Removes an event listener from the event target. The handler must be the
     * same object as the one added. If the handler has not been added then
     * nothing is done.
     * @param type The type of the event to listen for
     * @param handler The function to handle the event. The handler can also be an object that implements the handleEvent method which takes the event object as argument.
     * @param opt_capture In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_handlerScope Object in whose scope to call the listener.
     */
    removeEventListener (type : string | ಠ_ಠ.clutz.goog.events.EventId , handler : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capture ? : boolean , opt_handlerScope ? : GlobalObject | null ) : void ;
    /**
     * Sets the parent of this event target to use for capture/bubble
     * mechanism.
     * @param parent Parent listenable (null if none).
     */
    setParentEventTarget (parent : ಠ_ಠ.clutz.goog.events.EventTarget | null ) : void ;
    /**
     * Sets the target to be used for `event.target` when firing
     * event. Mainly used for testing. For example, see
     * `goog.testing.events.mixinListenable`.
     * @param target The target.
     */
    setTargetForTesting (target : GlobalObject ) : void ;
    unlisten < SCOPE = any , EVENTOBJ = any > (type : string | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : (this : SCOPE , a : EVENTOBJ ) => boolean | undefined , opt_useCapture ? : boolean , opt_listenerScope ? : SCOPE ) : boolean ;
    unlistenByKey (key : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare module 'goog:goog.events.EventTarget' {
  import EventTarget = ಠ_ಠ.clutz.goog.events.EventTarget;
  export default EventTarget;
}
