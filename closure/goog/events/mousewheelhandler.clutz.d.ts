//!! generated by clutz.
// Generated from events/mousewheelhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A base class for mouse wheel events. This is used with the
   * MouseWheelHandler.
   */
  class MouseWheelEvent extends ಠ_ಠ.clutz.goog.events.BrowserEvent {
    private noStructuralTyping_goog_events_MouseWheelEvent : any;
    /**
     * A base class for mouse wheel events. This is used with the
     * MouseWheelHandler.
     * @param detail The number of rows the user scrolled.
     * @param browserEvent Browser event object.
     * @param deltaX The number of rows the user scrolled in the X direction.
     * @param deltaY The number of rows the user scrolled in the Y direction.
     */
    constructor (detail : number , browserEvent : GlobalEvent | null , deltaX : number , deltaY : number ) ;
    /**
     * The number of "lines" scrolled in the X direction.
     *
     * Note that not all browsers provide enough information to distinguish
     * horizontal and vertical scroll events, so for these unsupported browsers,
     * we will always have a deltaX of 0, even if the user scrolled their mouse
     * wheel or trackpad sideways.
     *
     * Currently supported browsers are Webkit and Firefox 3.1 or later.
     */
    deltaX : number ;
    /**
     * The number of lines scrolled in the Y direction.
     */
    deltaY : number ;
    /**
     * The number of lines the user scrolled
     */
    detail : number ;
    type : ಠ_ಠ.clutz.goog.events.MouseWheelHandler.EventType ;
  }
}
declare module 'goog:goog.events.MouseWheelEvent' {
  import MouseWheelEvent = ಠ_ಠ.clutz.goog.events.MouseWheelEvent;
  export default MouseWheelEvent;
}
// Generated from events/mousewheelhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler allows you to catch mouse wheel events in a consistent
   * manner.
   */
  class MouseWheelHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_events_MouseWheelHandler : any;
    /**
     * This event handler allows you to catch mouse wheel events in a consistent
     * manner.
     * @param element The element to listen to the mouse wheel event on.
     * @param opt_capture Whether to handle the mouse wheel event in capture phase.
     */
    constructor (element : GlobalElement | null | Document , opt_capture ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Handles the events on the element.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    setMaxDeltaX (maxDeltaX : number ) : void ;
    setMaxDeltaY (maxDeltaY : number ) : void ;
  }
}
declare module 'goog:goog.events.MouseWheelHandler' {
  import MouseWheelHandler = ಠ_ಠ.clutz.goog.events.MouseWheelHandler;
  export default MouseWheelHandler;
}
// Generated from events/mousewheelhandler.js
declare namespace ಠ_ಠ.clutz.goog.events.MouseWheelHandler {
  /**
   * Enum type for the events fired by the mouse wheel handler.
   */
  /**
   * Enum type for the events fired by the mouse wheel handler.
   */
  enum EventType {
    MOUSEWHEEL = 'mousewheel' ,
  }
}
declare module 'goog:goog.events.MouseWheelHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.events.MouseWheelHandler.EventType;
  export default EventType;
}
