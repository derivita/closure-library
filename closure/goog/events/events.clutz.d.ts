//!! generated by clutz.
// Generated from events/events.js
declare namespace ಠ_ಠ.clutz.goog.events {
  let CAPTURE_SIMULATION_MODE : number ;
  /**
   * Dispatches an event (or event like object) and calls all listeners
   * listening for events of this type. The type of the event is decided by the
   * type property on the event object.
   *
   * If any of the listeners returns false OR calls preventDefault then this
   * function will return false.  If one of the capture listeners calls
   * stopPropagation, then the bubble listeners won't fire.
   * @param src The event target.
   * @param e Event object.
   */
  function dispatchEvent (src : ಠ_ಠ.clutz.goog.events.Listenable | null , e : ಠ_ಠ.clutz.goog.events.EventLike | null ) : boolean ;
  /**
   * Provides a nice string showing the normalized event objects public members
   * @param e Event Object.
   */
  function expose (e : GlobalObject | null ) : string ;
  /**
   * Fires a listener with a set of arguments
   * @param listener The listener object to call.
   * @param eventObject The event object to pass to the listener.
   */
  function fireListener (listener : ಠ_ಠ.clutz.goog.events.Listener | null , eventObject : GlobalObject | null ) : any ;
  /**
   * Fires an object's listeners of a particular type and phase
   * @param obj Object whose listeners to call.
   * @param type Event type.
   * @param capture Which event phase.
   * @param eventObject Event object to be passed to listener.
   */
  function fireListeners (obj : GlobalObject | null , type : string | ಠ_ಠ.clutz.goog.events.EventId , capture : boolean , eventObject : GlobalObject | null ) : boolean ;
  /**
   * Gets the goog.events.Listener for the event or null if no such listener is
   * in use.
   * @param src The target from which to get listeners.
   * @param type The type of the event.
   * @param listener The listener function to get.
   * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function getListener < EVENTOBJ = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > , listener : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Gets the listeners for a given object, type and capture phase.
   * @param obj Object to get listeners for.
   * @param type Event type.
   * @param capture Capture phase?.
   */
  function getListeners (obj : GlobalObject | null , type : string | ಠ_ಠ.clutz.goog.events.EventId , capture : boolean ) : ಠ_ಠ.clutz.goog.events.Listener [] ;
  /**
   * Helper function for returning a proxy function.
   */
  function getProxy ( ) : Function ;
  /**
   * Gets the total number of listeners currently in the system.
   */
  function getTotalListenerCount ( ) : number ;
  /**
   * Creates a unique event id.
   * @param identifier The identifier.
   */
  function getUniqueId (identifier : string ) : string ;
  /**
   * Returns whether an event target has any active listeners matching the
   * specified signature. If either the type or capture parameters are
   * unspecified, the function will match on the remaining criteria.
   * @param obj Target to get listeners for.
   * @param opt_type Event type.
   * @param opt_capture Whether to check for capture or bubble-phase listeners.
   */
  function hasListener (obj : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId , opt_capture ? : boolean ) : boolean ;
  /**
   * Adds an event listener for a specific event on a native event
   * target (such as a DOM element) or an object that has implemented
   * {@link goog.events.Listenable}. A listener can only be added once
   * to an object and if it is added again the key for the listener is
   * returned. Note that if the existing listener is a one-off listener
   * (registered via listenOnce), it will no longer be a one-off
   * listener after a call to listen().
   * @param src The node to listen to events on.
   * @param type Event type or array of event types.
   * @param listener Callback method, or an object with a handleEvent function. WARNING: passing an Object is now softly deprecated.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listen < T = any , EVENTOBJ = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , listener : ( (this : T , a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | AddEventListenerOptions , opt_handler ? : T ) : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Adds an event listener for a specific event on a native event
   * target (such as a DOM element) or an object that has implemented
   * {@link goog.events.Listenable}. After the event has fired the event
   * listener is removed from the target.
   *
   * If an existing listener already exists, listenOnce will do
   * nothing. In particular, if the listener was previously registered
   * via listen(), listenOnce() will not turn the listener into a
   * one-off listener. Similarly, if there is already an existing
   * one-off listener, listenOnce does not modify the listeners (it is
   * still a once listener).
   * @param src The node to listen to events on.
   * @param type Event type or array of event types.
   * @param listener Callback method.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listenOnce < T = any , EVENTOBJ = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , listener : ( (this : T , a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | AddEventListenerOptions , opt_handler ? : T ) : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
  /**
   * Adds an event listener with a specific event wrapper on a DOM Node or an
   * object that has implemented {@link goog.events.Listenable}. A listener can
   * only be added once to an object.
   * @param src The target to listen to events on.
   * @param wrapper Event wrapper to use.
   * @param listener Callback method, or an object with a handleEvent function.
   * @param opt_capt Whether to fire in capture phase (defaults to false).
   * @param opt_handler Element in whose scope to call the listener.
   */
  function listenWithWrapper < T = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (this : T , a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : T ) : void ;
  /**
   * Installs exception protection for the browser event entry point using the
   * given error handler.
   * @param errorHandler Error handler with which to protect the entry point.
   */
  function protectBrowserEventEntryPoint (errorHandler : ಠ_ಠ.clutz.goog.debug.ErrorHandler | null ) : void ;
  /**
   * Removes all listeners from an object. You can also optionally
   * remove listeners of a particular type.
   * @param obj Object to remove listeners from. Must be an EventTarget or a goog.events.Listenable.
   * @param opt_type Type of event to remove. Default is all types.
   */
  function removeAll (obj : GlobalObject | null | undefined , opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId ) : number ;
  /**
   * Removes an event listener which was added with listen().
   * @param src The target to stop listening to events on.
   * @param type Event type or array of event types to unlisten to.
   * @param listener The listener function to remove.
   * @param opt_options whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function unlisten < EVENTOBJ = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , listener : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | EventListenerOptions , opt_handler ? : GlobalObject | null ) : boolean | null ;
  /**
   * Removes an event listener which was added with listen() by the key
   * returned by listen().
   * @param key The key returned by listen() for this event listener.
   */
  function unlistenByKey (key : number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ) : boolean ;
  /**
   * Removes an event listener which was added with listenWithWrapper().
   * @param src The target to stop listening to events on.
   * @param wrapper Event wrapper to use.
   * @param listener The listener function to remove.
   * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
   * @param opt_handler Element in whose scope to call the listener.
   */
  function unlistenWithWrapper (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_handler ? : GlobalObject | null ) : void ;
  function wrapListener (listener : GlobalObject | null ) : Function ;
}
declare module 'goog:goog.events' {
  import events = ಠ_ಠ.clutz.goog.events;
  export = events;
}
// Generated from events/events.js
declare namespace ಠ_ಠ.clutz.goog.events {
  enum CaptureSimulationMode {
    OFF_AND_FAIL = 0.0 ,
    OFF_AND_SILENT = 1.0 ,
    ON = 2.0 ,
  }
}
declare module 'goog:goog.events.CaptureSimulationMode' {
  import CaptureSimulationMode = ಠ_ಠ.clutz.goog.events.CaptureSimulationMode;
  export default CaptureSimulationMode;
}
// Generated from events/events.js
declare namespace ಠ_ಠ.clutz.goog.events {
  type Key = number | ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
}
declare module 'goog:goog.events.Key' {
  import Key = ಠ_ಠ.clutz.goog.events.Key;
  export default Key;
}
// Generated from events/events.js
declare namespace ಠ_ಠ.clutz.goog.events {
  type ListenableType = GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
}
declare module 'goog:goog.events.ListenableType' {
  import ListenableType = ಠ_ಠ.clutz.goog.events.ListenableType;
  export default ListenableType;
}
