//!! generated by clutz.
// Generated from events/listener.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Simple class that stores information about a listener
   */
  class Listener implements ಠ_ಠ.clutz.goog.events.ListenableKey {
    private noStructuralTyping_goog_events_Listener : any;
    /**
     * Simple class that stores information about a listener
     * @param listener Callback function.
     * @param proxy Wrapper for the listener that patches the event.
     * @param src Source object for the event.
     * @param type Event type.
     * @param capture Whether in capture or bubble phase.
     * @param opt_handler Object in whose context to execute the callback.
     */
    constructor (listener : (a ? : any ) => any , proxy : Function | null , src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable , type : string , capture : boolean , opt_handler ? : GlobalObject | null ) ;
    /**
     * Whether to remove the listener after it has been called.
     */
    callOnce : boolean ;
    /**
     * Whether the listener is being called in the capture or bubble phase
     */
    capture : boolean ;
    /**
     * Optional object whose context to execute the listener in
     */
    handler ? : GlobalObject | null ;
    /**
     * The key of the listener.
     */
    key : number ;
    listener : ( (a ? : any ) => any ) | null ;
    /**
     * A wrapper over the original listener. This is used solely to
     * handle native browser events (it is used to simulate the capture
     * phase and to patch the event object).
     */
    proxy : Function | null ;
    /**
     * Whether the listener has been removed.
     */
    removed : boolean ;
    /**
     * Object or node that callback is listening to
     */
    src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
    /**
     * The event type.
     */
    type : string ;
    /**
     * If monitoring the goog.events.Listener instances is enabled, stores the
     * creation stack trace of the Disposable instance.
     */
    creationStack : string ;
    markAsRemoved ( ) : void ;
    static ENABLE_MONITORING : boolean ;
  }
}
declare module 'goog:goog.events.Listener' {
  import Listener = ಠ_ಠ.clutz.goog.events.Listener;
  export default Listener;
}
