//!! generated by clutz.
// Generated from events/keyhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A wrapper around an element that you want to listen to keyboard events on.
   */
  class KeyHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_events_KeyHandler : any;
    /**
     * A wrapper around an element that you want to listen to keyboard events on.
     * @param opt_element The element or document to listen on.
     * @param opt_capture Whether to listen for browser events in capture phase (defaults to false).
     */
    constructor (opt_element ? : GlobalElement | null | Document , opt_capture ? : boolean ) ;
    /**
     * Adds the proper key event listeners to the element.
     * @param element The element to listen on.
     * @param opt_capture Whether to listen for browser events in capture phase (defaults to false).
     */
    attach (element : GlobalElement | null | Document , opt_capture ? : boolean ) : void ;
    detach ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the element listened on for the real keyboard events.
     */
    getElement ( ) : GlobalElement | null | Document ;
    /**
     * Handles the events on the element.
     * @param e The keyboard event sent from the browser.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    resetState ( ) : void ;
  }
}
declare module 'goog:goog.events.KeyHandler' {
  import KeyHandler = ಠ_ಠ.clutz.goog.events.KeyHandler;
  export default KeyHandler;
}
declare namespace ಠ_ಠ.clutz.goog.events.KeyHandler {
  let EventType : any;
}
declare module 'goog:goog.events.KeyHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.events.KeyHandler.EventType;
  export default EventType;
}
