//!! generated by clutz.
// Generated from events/eventhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Super class for objects that want to easily manage a number of event
   * listeners.  It allows a short cut to listen and also provides a quick way
   * to remove all events listeners belonging to this object.
   */
  class EventHandler < SCOPE = any > extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_events_EventHandler : any;
    /**
     * Super class for objects that want to easily manage a number of event
     * listeners.  It allows a short cut to listen and also provides a quick way
     * to remove all events listeners belonging to this object.
     * @param opt_scope Object in whose scope to call the listeners.
     */
    constructor (opt_scope ? : SCOPE ) ;
    handler_ ? : SCOPE ;
    /**
     * Disposes of this EventHandler and removes all listeners that it registered.
     */
    protected disposeInternal ( ) : void ;
    getListenerCount ( ) : number ;
    /**
     * Default event handler
     * @param e Event object.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted then the
     * EventHandler's handleEvent method will be used.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     */
    listen < EVENTOBJ = any > (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , opt_fn ? : ( (this : SCOPE , a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | AddEventListenerOptions ) : this ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted, then the
     * EventHandler's handleEvent method will be used. After the event has fired the
     * event listener is removed from the target. If an array of event types is
     * provided, each event type will be listened to once.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     */
    listenOnce < EVENTOBJ = any > (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , opt_fn ? : ( (this : SCOPE , a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | AddEventListenerOptions ) : this ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted, then the
     * EventHandler's handleEvent method will be used. After the event has fired the
     * event listener is removed from the target. If an array of event types is
     * provided, each event type will be listened to once.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param capture Optional whether to use capture phase.
     * @param scope Object in whose scope to call the listener.
     */
    listenOnceWithScope < T = any , EVENTOBJ = any > (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , fn : ( (this : T , a : EVENTOBJ ) => any ) | { handleEvent : (this : T , a ? : any ) => any } | null | undefined , capture : boolean | undefined , scope : T ) : this ;
    /**
     * Listen to an event on a Listenable.  If the function is omitted then the
     * EventHandler's handleEvent method will be used.
     * @param src Event source.
     * @param type Event type to listen for or array of event types.
     * @param fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param scope Object in whose scope to call the listener.
     */
    listenWithScope < T = any , EVENTOBJ = any > (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , fn : ( (this : T , a : EVENTOBJ ) => any ) | { handleEvent : (this : T , a ? : any ) => any } | null | undefined , options : boolean | AddEventListenerOptions | undefined , scope : T ) : this ;
    /**
     * Adds an event listener with a specific event wrapper on a DOM Node or an
     * object that has implemented {@link goog.events.EventTarget}. A listener can
     * only be added once to an object.
     * @param src The node to listen to events on.
     * @param wrapper Event wrapper to use.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     */
    listenWithWrapper (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (this : SCOPE , a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean ) : this ;
    /**
     * Adds an event listener with a specific event wrapper on a DOM Node or an
     * object that has implemented {@link goog.events.EventTarget}. A listener can
     * only be added once to an object.
     * @param src The node to listen to events on.
     * @param wrapper Event wrapper to use.
     * @param listener Optional callback function to be used as the listener or an object with handleEvent function.
     * @param capture Optional whether to use capture phase.
     * @param scope Object in whose scope to call the listener.
     */
    listenWithWrapperAndScope < T = any > (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (this : T , a ? : any ) => any ) | { handleEvent : (this : T , a ? : any ) => any } | null , capture : boolean | undefined , scope : T ) : this ;
    removeAll ( ) : void ;
    /**
     * Unlistens on an event.
     * @param src Event source.
     * @param type Event type or array of event types to unlisten to.
     * @param opt_fn Optional callback function to be used as the listener or an object with handleEvent function.
     * @param opt_scope Object in whose scope to call the listener.
     */
    unlisten < EVENTOBJ = any > (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , type : string | null | ಠ_ಠ.clutz.goog.events.EventId < EVENTOBJ > | any [] , opt_fn ? : ( (a : EVENTOBJ ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_options ? : boolean | EventListenerOptions , opt_scope ? : GlobalObject | null ) : this ;
    /**
     * Removes an event listener which was added with listenWithWrapper().
     * @param src The target to stop listening to events on.
     * @param wrapper Event wrapper to use.
     * @param listener The listener function to remove.
     * @param opt_capt In DOM-compliant browsers, this determines whether the listener is fired during the capture or bubble phase of the event.
     * @param opt_scope Element in whose scope to call the listener.
     */
    unlistenWithWrapper (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.EventTarget , wrapper : ಠ_ಠ.clutz.goog.events.EventWrapper | null , listener : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : GlobalObject | null ) : this ;
  }
}
declare module 'goog:goog.events.EventHandler' {
  import EventHandler = ಠ_ಠ.clutz.goog.events.EventHandler;
  export default EventHandler;
}
