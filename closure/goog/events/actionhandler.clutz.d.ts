//!! generated by clutz.
// Generated from events/actionhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This class is used for the goog.events.ActionHandler.EventType.ACTION event.
   */
  class ActionEvent extends ಠ_ಠ.clutz.goog.events.BrowserEvent {
    private noStructuralTyping_goog_events_ActionEvent : any;
    /**
     * This class is used for the goog.events.ActionHandler.EventType.ACTION event.
     * @param browserEvent Browser event object.
     */
    constructor (browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent ) ;
    type : ಠ_ಠ.clutz.goog.events.ActionHandler.EventType ;
  }
}
declare module 'goog:goog.events.ActionEvent' {
  import ActionEvent = ಠ_ಠ.clutz.goog.events.ActionEvent;
  export default ActionEvent;
}
// Generated from events/actionhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A wrapper around an element that you want to listen to ACTION events on.
   */
  class ActionHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_events_ActionHandler : any;
    /**
     * A wrapper around an element that you want to listen to ACTION events on.
     * @param element The element or document to listen on.
     */
    constructor (element : GlobalElement | null | Document ) ;
    disposeInternal ( ) : void ;
  }
}
declare module 'goog:goog.events.ActionHandler' {
  import ActionHandler = ಠ_ಠ.clutz.goog.events.ActionHandler;
  export default ActionHandler;
}
// Generated from events/actionhandler.js
declare namespace ಠ_ಠ.clutz.goog.events.ActionHandler {
  /**
   * Enum type for the events fired by the action handler
   */
  /**
   * Enum type for the events fired by the action handler
   */
  enum EventType {
    ACTION = 'action' ,
    BEFOREACTION = 'beforeaction' ,
  }
}
declare module 'goog:goog.events.ActionHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.events.ActionHandler.EventType;
  export default EventType;
}
// Generated from events/actionhandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This class is used for the goog.events.ActionHandler.EventType.BEFOREACTION
   * event. BEFOREACTION gives a chance to the application so the keyboard focus
   * can be restored back, if required.
   */
  class BeforeActionEvent extends ಠ_ಠ.clutz.goog.events.BrowserEvent {
    private noStructuralTyping_goog_events_BeforeActionEvent : any;
    /**
     * This class is used for the goog.events.ActionHandler.EventType.BEFOREACTION
     * event. BEFOREACTION gives a chance to the application so the keyboard focus
     * can be restored back, if required.
     * @param browserEvent Browser event object.
     */
    constructor (browserEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent ) ;
    type : ಠ_ಠ.clutz.goog.events.ActionHandler.EventType ;
  }
}
declare module 'goog:goog.events.BeforeActionEvent' {
  import BeforeActionEvent = ಠ_ಠ.clutz.goog.events.BeforeActionEvent;
  export default BeforeActionEvent;
}
