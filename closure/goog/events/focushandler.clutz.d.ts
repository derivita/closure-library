//!! generated by clutz.
// Generated from events/focushandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * This event handler allows you to catch focus events when descendants gain or
   * loses focus.
   */
  class FocusHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_events_FocusHandler : any;
    /**
     * This event handler allows you to catch focus events when descendants gain or
     * loses focus.
     * @param element The node to listen on.
     */
    constructor (element : GlobalElement | null | Document ) ;
    disposeInternal ( ) : void ;
    /**
     * This handles the underlying events and dispatches a new event.
     * @param e The underlying browser event.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
  }
}
declare module 'goog:goog.events.FocusHandler' {
  import FocusHandler = ಠ_ಠ.clutz.goog.events.FocusHandler;
  export default FocusHandler;
}
// Generated from events/focushandler.js
declare namespace ಠ_ಠ.clutz.goog.events.FocusHandler {
  /**
   * Enum type for the events fired by the focus handler
   */
  /**
   * Enum type for the events fired by the focus handler
   */
  enum EventType {
    FOCUSIN = 'focusin' ,
    FOCUSOUT = 'focusout' ,
  }
}
declare module 'goog:goog.events.FocusHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.events.FocusHandler.EventType;
  export default EventType;
}
