//!! generated by clutz.
// Generated from events/listenermap.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Creates a new listener map.
   */
  class ListenerMap {
    private noStructuralTyping_goog_events_ListenerMap : any;
    /**
     * Creates a new listener map.
     * @param src The src object.
     */
    constructor (src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ) ;
    /**
     * Maps of event type to an array of listeners.
     */
    listeners : { [ key: string ]: ಠ_ಠ.clutz.goog.events.Listener [] } ;
    src : GlobalEventTarget | null | ಠ_ಠ.clutz.goog.events.Listenable ;
    /**
     * Adds an event listener. A listener can only be added once to an
     * object and if it is added again the key for the listener is
     * returned.
     *
     * Note that a one-off listener will not change an existing listener,
     * if any. On the other hand a normal listener will change existing
     * one-off listener to become a normal listener.
     * @param type The listener event type.
     * @param listener This listener callback method.
     * @param callOnce Whether the listener is a one-off listener.
     * @param opt_useCapture The capture mode of the listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    add (type : string | ಠ_ಠ.clutz.goog.events.EventId , listener : Function , callOnce : boolean , opt_useCapture ? : boolean , opt_listenerScope ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey ;
    /**
     * Gets the goog.events.ListenableKey for the event or null if no such
     * listener is in use.
     * @param type The type of the listener to retrieve.
     * @param listener The listener function to get.
     * @param capture Whether the listener is a capturing listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    getListener (type : string | ಠ_ಠ.clutz.goog.events.EventId , listener : Function , capture : boolean , opt_listenerScope ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.events.ListenableKey | null ;
    getListenerCount ( ) : number ;
    /**
     * Gets all listeners that match the given type and capture mode. The
     * returned array is a copy (but the listener objects are not).
     * @param type The type of the listeners to retrieve.
     * @param capture The capture mode of the listeners to retrieve.
     */
    getListeners (type : string | ಠ_ಠ.clutz.goog.events.EventId , capture : boolean ) : ಠ_ಠ.clutz.goog.events.ListenableKey [] ;
    getTypeCount ( ) : number ;
    /**
     * Whether there is a matching listener. If either the type or capture
     * parameters are unspecified, the function will match on the
     * remaining criteria.
     * @param opt_type The type of the listener.
     * @param opt_capture The capture mode of the listener.
     */
    hasListener (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId , opt_capture ? : boolean ) : boolean ;
    /**
     * Removes a matching listener.
     * @param type The listener event type.
     * @param listener This listener callback method.
     * @param opt_useCapture The capture mode of the listener.
     * @param opt_listenerScope Object in whose scope to call the listener.
     */
    remove (type : string | ಠ_ಠ.clutz.goog.events.EventId , listener : Function , opt_useCapture ? : boolean , opt_listenerScope ? : GlobalObject | null ) : boolean ;
    /**
     * Removes all listeners from this map. If opt_type is provided, only
     * listeners that match the given type are removed.
     * @param opt_type Type of event to remove.
     */
    removeAll (opt_type ? : string | ಠ_ಠ.clutz.goog.events.EventId ) : number ;
    /**
     * Removes the given listener object.
     * @param listener The listener to remove.
     */
    removeByKey (listener : ಠ_ಠ.clutz.goog.events.ListenableKey ) : boolean ;
  }
}
declare module 'goog:goog.events.ListenerMap' {
  import ListenerMap = ಠ_ಠ.clutz.goog.events.ListenerMap;
  export default ListenerMap;
}
