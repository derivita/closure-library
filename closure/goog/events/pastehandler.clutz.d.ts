//!! generated by clutz.
// Generated from events/pastehandler.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * A paste event detector. Gets an `element` as parameter and fires
   * `goog.events.PasteHandler.EventType.PASTE` events when text is
   * pasted in the `element`. Uses heuristics to detect paste events in FF2.
   * See more details of the heuristic on {@link #handleEvent_}.
   */
  class PasteHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_events_PasteHandler : any;
    /**
     * A paste event detector. Gets an `element` as parameter and fires
     * `goog.events.PasteHandler.EventType.PASTE` events when text is
     * pasted in the `element`. Uses heuristics to detect paste events in FF2.
     * See more details of the heuristic on {@link #handleEvent_}.
     * @param element The textarea element we are listening on.
     */
    constructor (element : GlobalElement | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Returns the event handler.
     */
    protected getEventHandler ( ) : ಠ_ಠ.clutz.goog.events.EventHandler < ಠ_ಠ.clutz.goog.events.PasteHandler > | null ;
    /**
     * Returns the current state of the paste detection algorithm. Used mostly for
     * testing.
     */
    getState ( ) : ಠ_ಠ.clutz.goog.events.PasteHandler.State ;
    /**
     * The mandatory delay we expect between two `input` events, used to
     * differentiated between non key paste events and key events.
     */
    static MANDATORY_MS_BETWEEN_INPUT_EVENTS_TIE_BREAKER : number ;
    /**
     * Whether current UA supoprts the native "paste" event type.
     */
    static SUPPORTS_NATIVE_PASTE_EVENT : boolean ;
  }
}
declare module 'goog:goog.events.PasteHandler' {
  import PasteHandler = ಠ_ಠ.clutz.goog.events.PasteHandler;
  export default PasteHandler;
}
// Generated from events/pastehandler.js
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
  /**
   * The types of events fired by this class.
   */
  /**
   * The types of events fired by this class.
   */
  enum EventType {
    AFTER_PASTE = 'after_paste' ,
    PASTE = 'paste' ,
  }
}
declare module 'goog:goog.events.PasteHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.events.PasteHandler.EventType;
  export default EventType;
}
// Generated from events/pastehandler.js
declare namespace ಠ_ಠ.clutz.goog.events.PasteHandler {
  /**
   * The states that this class can be found, on the paste detection algorithm.
   */
  /**
   * The states that this class can be found, on the paste detection algorithm.
   */
  enum State {
    FOCUSED = 'focused' ,
    INIT = 'init' ,
    TYPING = 'typing' ,
  }
}
declare module 'goog:goog.events.PasteHandler.State' {
  import State = ಠ_ಠ.clutz.goog.events.PasteHandler.State;
  export default State;
}
