//!! generated by clutz.
// Generated from events/eventwrapper.js
declare namespace ಠ_ಠ.clutz.goog.events {
  /**
   * Interface for event wrappers.
   */
  interface EventWrapper {
    /**
     * Adds an event listener using the wrapper on a DOM Node or an object that has
     * implemented {@link goog.events.EventTarget}. A listener can only be added
     * once to an object.
     * @param src The node to listen to events on.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     * @param opt_scope Element in whose scope to call the listener.
     * @param opt_eventHandler Event handler to add listener to.
     */
    listen (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , listener : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : GlobalObject | null , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler | null ) : void ;
    /**
     * Removes an event listener added using goog.events.EventWrapper.listen.
     * @param src The node to remove listener from.
     * @param listener Callback method, or an object with a handleEvent function.
     * @param opt_capt Whether to fire in capture phase (defaults to false).
     * @param opt_scope Element in whose scope to call the listener.
     * @param opt_eventHandler Event handler to remove listener from.
     */
    unlisten (src : ಠ_ಠ.clutz.goog.events.ListenableType | null , listener : ( (a ? : any ) => any ) | { handleEvent : (a ? : any ) => any } | null , opt_capt ? : boolean , opt_scope ? : GlobalObject | null , opt_eventHandler ? : ಠ_ಠ.clutz.goog.events.EventHandler | null ) : void ;
  }
}
declare module 'goog:goog.events.EventWrapper' {
  import EventWrapper = ಠ_ಠ.clutz.goog.events.EventWrapper;
  export default EventWrapper;
}
