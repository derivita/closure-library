//!! generated by clutz.
// Generated from a11y/aria/aria.js
declare namespace ಠ_ಠ.clutz.goog.a11y.aria {
  /**
   * Asserts that the element has a role set if it's not an HTML element whose
   * semantics is well supported by most screen readers.
   * Only to be used internally by the ARIA library in goog.a11y.aria.*.
   * @param element The element to assert an ARIA role set.
   * @param allowedRoles The child roles of the roles.
   */
  function assertRoleIsSetInternalUtil (element : GlobalElement , allowedRoles : ArrayLike < string > ) : void ;
  /**
   * Returns the activedescendant element for the input element by
   * using the activedescendant ARIA property of the given element.
   * @param element DOM node to get activedescendant element for.
   */
  function getActiveDescendant (element : GlobalElement ) : GlobalElement | null ;
  /**
   * Gets the label of the given element.
   * @param element DOM node to get label from.
   */
  function getLabel (element : GlobalElement ) : string ;
  /**
   * Gets role of an element.
   * @param element DOM element to get role of.
   */
  function getRole (element : GlobalElement ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ;
  /**
   * Gets value of specified state or property.
   * @param element DOM node to get state from.
   * @param stateName State name.
   */
  function getState (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : string ;
  /**
   * Gets the boolean value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateBoolean (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : boolean | null ;
  /**
   * Gets the number value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateNumber (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : number | null ;
  /**
   * Gets the string value of an ARIA state/property.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function getStateString (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : string | null ;
  /**
   * Gets array of strings value of the specified state or
   * property for the element.
   * Only to be used internally by the ARIA library in goog.a11y.aria.*.
   * @param element DOM node to get state from.
   * @param stateName State name.
   */
  function getStringArrayStateInternalUtil (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State ) : ArrayLike < string > ;
  /**
   * Returns true if element has an ARIA state/property, false otherwise.
   * @param element The element to get the ARIA state for.
   * @param stateName the ARIA state name.
   */
  function hasState (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : boolean ;
  /**
   * Returns whether the element has a container ARIA role.
   * Container roles are ARIA roles that use the aria-activedescendant property
   * to manage their active descendants or children. See
   * {@link http://www.w3.org/TR/wai-aria/states_and_properties
   * #aria-activedescendant} for more information.
   */
  function isContainerRole (element : GlobalElement ) : boolean ;
  /**
   * Removes role of an element.
   * @param element DOM element to remove the role from.
   */
  function removeRole (element : GlobalElement ) : void ;
  /**
   * Remove the state or property for the element.
   * @param element DOM node where we set state.
   * @param stateName State name.
   */
  function removeState (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State ) : void ;
  /**
   * Sets the activedescendant ARIA property value for an element.
   * If the activeElement is not null, it should have an id set.
   * @param element DOM node to set activedescendant ARIA property to.
   * @param activeElement DOM node being set as activedescendant.
   */
  function setActiveDescendant (element : GlobalElement , activeElement : GlobalElement | null ) : void ;
  /**
   * Sets the label of the given element.
   * @param element DOM node to set label to.
   * @param label The label to set.
   */
  function setLabel (element : GlobalElement , label : string ) : void ;
  /**
   * Sets the role of an element. If the roleName is
   * empty string or null, the role for the element is removed.
   * We encourage clients to call the goog.a11y.aria.removeRole
   * method instead of setting null and empty string values.
   * Special handling for this case is added to ensure
   * backword compatibility with existing code.
   * @param element DOM node to set role of.
   * @param roleName role name(s).
   */
  function setRole (element : GlobalElement , roleName : ಠ_ಠ.clutz.goog.a11y.aria.Role | string ) : void ;
  /**
   * Sets the state or property of an element.
   * @param element DOM node where we set state.
   * @param stateName State attribute being set. Automatically adds prefix 'aria-' to the state name if the attribute is not an extra attribute.
   * @param value Value for the state attribute.
   */
  function setState (element : GlobalElement , stateName : ಠ_ಠ.clutz.goog.a11y.aria.State | string , value : string | boolean | number | string [] ) : void ;
  /**
   * Toggles the ARIA attribute of an element.
   * Meant for attributes with a true/false value, but works with any attribute.
   * If the attribute does not have a true/false value, the following rules apply:
   * A not empty attribute will be removed.
   * An empty attribute will be set to true.
   * @param el DOM node for which to set attribute.
   * @param attr ARIA attribute being set. Automatically adds prefix 'aria-' to the attribute name if the attribute is not an extra attribute.
   */
  function toggleState (el : GlobalElement , attr : ಠ_ಠ.clutz.goog.a11y.aria.State | string ) : void ;
}
declare module 'goog:goog.a11y.aria' {
  import aria = ಠ_ಠ.clutz.goog.a11y.aria;
  export = aria;
}
