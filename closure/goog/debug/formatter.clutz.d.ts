//!! generated by clutz.
// Generated from debug/formatter.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  export import Formatter = ಠ_ಠ.clutz.goog.debug.formatter.Formatter ;
}
declare module 'goog:goog.debug.Formatter' {
  import Formatter = ಠ_ಠ.clutz.goog.debug.Formatter;
  export default Formatter;
}
// Generated from debug/formatter.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  export import HtmlFormatter = ಠ_ಠ.clutz.goog.debug.formatter.HtmlFormatter ;
}
declare module 'goog:goog.debug.HtmlFormatter' {
  import HtmlFormatter = ಠ_ಠ.clutz.goog.debug.HtmlFormatter;
  export default HtmlFormatter;
}
// Generated from debug/formatter.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  export import TextFormatter = ಠ_ಠ.clutz.goog.debug.formatter.TextFormatter ;
}
declare module 'goog:goog.debug.TextFormatter' {
  import TextFormatter = ಠ_ಠ.clutz.goog.debug.TextFormatter;
  export default TextFormatter;
}
// Generated from debug/formatter.js
declare namespace ಠ_ಠ.clutz.goog.debug.formatter {
  /**
   * Base class for Formatters. A Formatter is used to format a LogRecord into
   * something that can be displayed to the user.
   */
  class Formatter {
    private noStructuralTyping_goog_debug_formatter_Formatter : any;
    /**
     * Base class for Formatters. A Formatter is used to format a LogRecord into
     * something that can be displayed to the user.
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    prefix_ : string ;
    /**
     * Whether to append newlines to the end of formatted log records.
     */
    appendNewline : boolean ;
    /**
     * Formats a record.
     * @param logRecord the logRecord to format.
     */
    formatRecord (a : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : string ;
    /**
     * Formats a record as SafeHtml.
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (a : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns the start time provider. By default, this is the default instance
     * but can be changed.
     */
    getStartTimeProvider ( ) : ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider | null ;
    resetRelativeTimeStart ( ) : void ;
    /**
     * Sets the start time provider. By default, this is the default instance
     * but can be changed.
     * @param provider The provider to use.
     */
    setStartTimeProvider (provider : ಠ_ಠ.clutz.goog.debug.RelativeTimeProvider | null ) : void ;
    /**
     * Whether to show absolute time in the DebugWindow.
     */
    showAbsoluteTime : boolean ;
    /**
     * Whether to show the logger exception text.
     */
    showExceptionText : boolean ;
    /**
     * Whether to show the logger name in the DebugWindow.
     */
    showLoggerName : boolean ;
    /**
     * Whether to show relative time in the DebugWindow.
     */
    showRelativeTime : boolean ;
    /**
     * Whether to show the severity level.
     */
    showSeverityLevel : boolean ;
  }
  /**
   * Formatter that returns formatted html. See formatRecord for the classes
   * it uses for various types of formatted output.
   */
  class HtmlFormatter extends ಠ_ಠ.clutz.goog.debug.formatter.Formatter {
    private noStructuralTyping_goog_debug_formatter_HtmlFormatter : any;
    /**
     * Formatter that returns formatted html. See formatRecord for the classes
     * it uses for various types of formatted output.
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    /**
     * Formats a record
     * @param logRecord the logRecord to format.
     */
    formatRecord (logRecord : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : string ;
    /**
     * Formats a record.
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (logRecord : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Whether to show the logger exception text
     */
    showExceptionText : boolean ;
    /**
     * Exposes an exception that has been caught by a try...catch and outputs the
     * error as HTML with a stack trace.
     * @param err Error object or string.
     * @param fn If provided, when collecting the stack trace all frames above the topmost call to this function, including that call, will be left out of the stack trace.
     */
    static exposeException (err : any , fn ? : Function | null ) : string ;
    /**
     * Exposes an exception that has been caught by a try...catch and outputs the
     * error with a stack trace.
     * @param err Error object or string.
     * @param fn If provided, when collecting the stack trace all frames above the topmost call to this function, including that call, will be left out of the stack trace.
     */
    static exposeExceptionAsHtml (err : any , fn ? : Function | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  }
  /**
   * Formatter that returns formatted plain text
   */
  class TextFormatter extends ಠ_ಠ.clutz.goog.debug.formatter.Formatter {
    private noStructuralTyping_goog_debug_formatter_TextFormatter : any;
    /**
     * Formatter that returns formatted plain text
     * @param opt_prefix The prefix to place before text records.
     */
    constructor (opt_prefix ? : string ) ;
    /**
     * Formats a record as text
     * @param logRecord the logRecord to format.
     */
    formatRecord (logRecord : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : string ;
    /**
     * Formats a record as text
     * @param logRecord the logRecord to format.
     */
    formatRecordAsHtml (logRecord : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  }
}
declare module 'goog:goog.debug.formatter' {
  import formatter = ಠ_ಠ.clutz.goog.debug.formatter;
  export = formatter;
}
