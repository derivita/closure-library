//!! generated by clutz.
// Generated from debug/tracer.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * The detail of calling the stop callback for a trace.
   */
  interface StopTraceDetail {
    /**
     * The trace should be stopped since it has been cancelled. Note that this
     * field is optional so, not-specifying it is like setting it to false.
     */
    wasCancelled ? : boolean ;
  }
}
declare module 'goog:goog.debug.StopTraceDetail' {
  import StopTraceDetail = ಠ_ಠ.clutz.goog.debug.StopTraceDetail;
  export default StopTraceDetail;
}
// Generated from debug/tracer.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Singleton trace object
   */
  let Trace : ಠ_ಠ.clutz.goog.debug.Trace_ | null ;
}
declare module 'goog:goog.debug.Trace' {
  import Trace = ಠ_ಠ.clutz.goog.debug.Trace;
  export default Trace;
}
// Generated from debug/tracer.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Class used for singleton goog.debug.Trace.  Used for timing slow points in
   * the code. Based on the java Tracer class but optimized for javascript.
   * See com.google.common.tracing.Tracer.
   * It is also possible to bridge from this class to other tracer classes via
   * adding listeners.
   */
  class Trace_ {
    private noStructuralTyping_goog_debug_Trace_ : any;
    /**
     * Maximum size of the trace before we discard events
     */
    MAX_TRACE_SIZE : number ;
    /**
     * Adds a comment to the trace. Makes it possible to see when a specific event
     * happened in relation to the traces.
     * @param comment A comment that is inserted into the trace.
     * @param opt_type Type used to identify the tracer. If a comment is given a type and multiple comments are done on that type then a "TOTAL line will be produced showing the total number of comments of that type.
     * @param opt_timeStamp The timestamp to insert the comment. If not specified, the current time wil be used.
     */
    addComment (comment : string , opt_type ? : string | null , opt_timeStamp ? : number | null ) : void ;
    /**
     * Adds up to three callback functions which are called on `startTracer`,
     * `stopTracer`, `clearOutstandingEvents_` and `addComment` in
     * order to bridge from the Closure tracer singleton object to any tracer class.
     * @param callbacks An object literal containing the callback functions.
     */
    addTraceCallbacks (callbacks : ಠ_ಠ.clutz.goog.debug.Trace_.TracerCallbacks ) : void ;
    clearCurrentTrace ( ) : void ;
    /**
     * Returns a formatted string for the current trace
     */
    getFormattedTrace ( ) : string ;
    /**
     * Initializes and resets the current trace
     * @param defaultThreshold The default threshold below which the tracer output will be suppressed. Can be overridden on a per-Tracer basis.
     */
    initCurrentTrace (defaultThreshold : number ) : void ;
    removeAllListeners ( ) : void ;
    /**
     * Resets the trace.
     * @param defaultThreshold The default threshold below which the tracer output will be suppressed. Can be overridden on a per-Tracer basis.
     */
    reset (defaultThreshold : number ) : void ;
    /**
     * Add the ability to explicitly set the start time. This is useful for example
     * for measuring initial load time where you can set a variable as soon as the
     * main page of the app is loaded and then later call this function when the
     * Tracer code has been loaded.
     * @param startTime The start time to set.
     */
    setStartTime (startTime : number ) : void ;
    /**
     * Starts a tracer
     * @param comment A comment used to identify the tracer. Does not need to be unique.
     * @param opt_type Type used to identify the tracer. If a Trace is given a type (the first argument to the constructor) and multiple Traces are done on that type then a "TOTAL line will be produced showing the total number of traces and the sum of the time ("TOTAL Database 2 (37 ms)" in our example). These traces should be mutually exclusive or else the sum won't make sense (the time will be double counted if the second starts before the first ends).
     */
    startTracer (comment : string , opt_type ? : string ) : number ;
    /**
     * Stops a tracer
     * @param id The id of the tracer that is ending.
     * @param opt_silenceThreshold Threshold below which the tracer is silenced.
     */
    stopTracer (id : number | undefined | null , opt_silenceThreshold ? : number ) : number | null ;
    /**
     * Returns a formatted string that describes the thread trace.
     */
    toString ( ) : string ;
    /**
     * Returns the current time. Done through a wrapper function so it can be
     * overridden by application code. Gmail has an ActiveX extension that provides
     * higher precision timing info.
     */
    static now ( ) : number ;
  }
}
// Generated from debug/tracer.js
declare namespace ಠ_ಠ.clutz.goog.debug.Trace_ {
  /**
   * Event type supported by tracer
   */
  enum EventType {
    COMMENT = 2.0 ,
    START = 0.0 ,
    STOP = 1.0 ,
  }
  class Event_ {
    private noStructuralTyping_goog_debug_Trace__Event_ : any;
    comment ? : string ;
    eventTime ? : number ;
    eventType ? : ಠ_ಠ.clutz.goog.debug.Trace_.EventType ;
    id ? : number ;
    startTime ? : number ;
    stopTime ? : number ;
    toString ( ) : string ;
    /**
     * Returns a formatted string for the event.
     * @param startTime The start time of the trace to generate relative times.
     * @param prevTime The completion time of the previous event or -1.
     * @param indent Extra indent for the message if there was no previous event.
     */
    toTraceString (startTime : number , prevTime : number , indent : string ) : string ;
    type ? : string | null ;
  }
  class Stat_ {
    private noStructuralTyping_goog_debug_Trace__Stat_ : any;
    /**
     * Number of tracers
     */
    count : number ;
    /**
     * Cumulative time of traces
     */
    time : number ;
    toString ( ) : string ;
    type ? : string | null ;
  }
  interface TracerCallbacks {
    /**
     * A callback function to be called at `addComment` with two parameters:
     * a string as the comment on the trace and an optional time stamp number (in
     * milliseconds since epoch) when the comment should be added as a trace.
     */
    comment ? : (a : string , b ? : number ) => any ;
    /**
     * A callback function to be called at `startTrace` with two parameters:
     * a number as the started trace id and a string as the comment on the trace.
     */
    start ? : (a : number , b : string ) => any ;
    /**
     * A callback function to be called when a trace should be stopped either at
     * `startTrace` or `clearOutstandingEvents_` with two parameters:
     * a number as the id of the trace being stopped and an object containing
     * extra information about stopping the trace (e.g. if it is cancelled).
     */
    stop ? : (a : number , b : ಠ_ಠ.clutz.goog.debug.StopTraceDetail ) => any ;
  }
}
