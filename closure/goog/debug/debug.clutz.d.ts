//!! generated by clutz.
// Generated from debug/debug.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  let CHECK_FOR_THROWN_EVENT : boolean ;
  let FORCE_SLOPPY_STACKS : boolean ;
  let LOGGING_ENABLED : boolean ;
  /**
   * Max length of stack to try and output
   */
  let MAX_STACK_DEPTH : number ;
  /**
   * Catches onerror events fired by windows and similar objects.
   * @param logFunc The function to call with the error information.
   * @param opt_cancel Whether to stop the error from reaching the browser.
   * @param opt_target Object that fires onerror events.
   */
  function catchErrors (logFunc : (a : GlobalObject | null ) => any , opt_cancel ? : boolean , opt_target ? : GlobalObject | null ) : void ;
  /**
   * Creates a string representing a given primitive or object, and for an
   * object, all its properties and nested objects. NOTE: The output will include
   * Uids on all objects that were exposed. Any added Uids will be removed before
   * returning.
   * @param obj Object to expose.
   * @param opt_showFn Also show properties that are functions (by default, functions are omitted).
   */
  function deepExpose (obj : any , opt_showFn ? : boolean ) : string ;
  /**
   * Converts an object to an Error using the object's toString if it's not
   * already an Error, adds a stacktrace if there isn't one, and optionally adds
   * an extra message.
   * @param err The original thrown error, object, or string.
   * @param opt_message optional additional message to add to the error.
   */
  function enhanceError (err : any , opt_message ? : string ) : GlobalError ;
  /**
   * Converts an object to an Error using the object's toString if it's not
   * already an Error, adds a stacktrace if there isn't one, and optionally adds
   * context to the Error, which is reported by the closure error reporter.
   * @param err The original thrown error, object, or string.
   * @param opt_context Key-value context to add to the Error.
   */
  function enhanceErrorWithContext (err : any , opt_context ? : { [ key: string ]: string } ) : GlobalError ;
  /**
   * Creates a string representing an object and all its properties.
   * @param obj Object to expose.
   * @param opt_showFn Show the functions as well as the properties, default is false.
   */
  function expose (obj : GlobalObject | null | undefined , opt_showFn ? : boolean ) : string ;
  /**
   * Recursively outputs a nested array as a string.
   * @param arr The array.
   */
  function exposeArray (arr : any [] | null ) : string ;
  /**
   * Freezes the given object, but only in debug mode (and in browsers that
   * support it).  Note that this is a shallow freeze, so for deeply nested
   * objects it must be called at every level to ensure deep immutability.
   */
  function freeze < T = any > (arg : T ) : T ;
  /**
   * Gets a function name
   * @param fn Function to get name of.
   */
  function getFunctionName (fn : Function | null ) : string ;
  /**
   * Gets the current stack trace, either starting from the caller or starting
   * from a specified function that's currently on the call stack.
   * @param fn If provided, when collecting the stack trace all frames above the topmost call to this function, including that call, will be left out of the stack trace.
   */
  function getStacktrace (fn ? : Function | null ) : string ;
  /**
   * Gets the current stack trace. Simple and iterative - doesn't worry about
   * catching circular references or getting the args.
   * @param opt_depth Optional maximum depth to trace back to.
   */
  function getStacktraceSimple (opt_depth ? : number ) : string ;
  /**
   * Makes whitespace visible by replacing it with printable characters.
   * This is useful in finding diffrences between the expected and the actual
   * output strings of a testcase.
   * @param string whose whitespace needs to be made visible.
   */
  function makeWhitespaceVisible (string : string ) : string ;
  /**
   * Normalizes the error/exception object between browsers.
   * @param err Raw error object.
   */
  function normalizeErrorObject (err : any ) : { fileName ? : any , lineNumber ? : any , message ? : any , name ? : any , stack ? : any } ;
  /**
   * Returns the type of a value. If a constructor is passed, and a suitable
   * string cannot be found, 'unknown type name' will be returned.
   *
   * <p>Forked rather than moved from {@link goog.asserts.getType_}
   * to avoid adding a dependency to goog.asserts.
   * @param value A constructor, object, or primitive.
   */
  function runtimeType (value : any ) : string ;
}
declare module 'goog:goog.debug' {
  import debug = ಠ_ಠ.clutz.goog.debug;
  export = debug;
}
