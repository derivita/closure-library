//!! generated by clutz.
// Generated from debug/errorhandler.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * The ErrorHandler can be used to to wrap functions with a try/catch
   * statement. If an exception is thrown, the given error handler function will
   * be called.
   *
   * When this object is disposed, it will stop handling exceptions and tracing.
   * It will also try to restore window.setTimeout and window.setInterval
   * if it wrapped them. Notice that in the general case, it is not technically
   * possible to remove the wrapper, because functions have no knowledge of
   * what they have been assigned to. So the app is responsible for other
   * forms of unwrapping.
   */
  class ErrorHandler extends ಠ_ಠ.clutz.goog.Disposable implements ಠ_ಠ.clutz.goog.debug.EntryPointMonitor {
    private noStructuralTyping_goog_debug_ErrorHandler : any;
    /**
     * The ErrorHandler can be used to to wrap functions with a try/catch
     * statement. If an exception is thrown, the given error handler function will
     * be called.
     *
     * When this object is disposed, it will stop handling exceptions and tracing.
     * It will also try to restore window.setTimeout and window.setInterval
     * if it wrapped them. Notice that in the general case, it is not technically
     * possible to remove the wrapper, because functions have no knowledge of
     * what they have been assigned to. So the app is responsible for other
     * forms of unwrapping.
     * @param handler Handler for exceptions.
     */
    constructor (handler : Function | null ) ;
    /**
     * Install an unhandledrejection event listener that reports rejected promises.
     * Note: this will only work with Chrome 49+ and friends, but so far is the only
     * way to report uncaught errors in aysnc/await functions.
     * @param win the window to instrument, defaults to current window
     */
    catchUnhandledRejections (win ? : Window ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Helps {@link #protectEntryPoint} by actually creating the protected
     * wrapper function, after {@link #protectEntryPoint} determines that one does
     * not already exist for the given function.  Can be overridden by subclasses
     * that may want to implement different error handling, or add additional
     * entry point hooks.
     * @param fn An entry point function to be protected.
     */
    protected getProtectedFunction (fn : Function ) : Function ;
    /**
     * Installs exception protection for an entry point function. When an exception
     * is thrown from a protected function, a handler will be invoked to handle it.
     * @param fn An entry point function to be protected.
     */
    protectEntryPoint (fn : Function | null ) : Function ;
    protectWindowRequestAnimationFrame ( ) : void ;
    protectWindowSetInterval ( ) : void ;
    protectWindowSetTimeout ( ) : void ;
    /**
     * Set whether to add a prefix to all error messages that occur in protected
     * functions.
     * @param prefixErrorMessages Whether to add a prefix to error messages.
     */
    setPrefixErrorMessages (prefixErrorMessages : boolean ) : void ;
    /**
     * Set whether to wrap errors that occur in protected functions in a
     * goog.debug.ErrorHandler.ProtectedFunctionError.
     * @param wrapErrors Whether to wrap errors.
     */
    setWrapErrors (wrapErrors : boolean ) : void ;
    unwrap (fn ? : any ) : any ;
    wrap (fn ? : any ) : any ;
  }
}
declare module 'goog:goog.debug.ErrorHandler' {
  import ErrorHandler = ಠ_ಠ.clutz.goog.debug.ErrorHandler;
  export default ErrorHandler;
}
// Generated from debug/errorhandler.js
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorHandler {
  /**
   * Error thrown to the caller of a protected entry point if the entry point
   * throws an error.
   */
  class ProtectedFunctionError extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_debug_ErrorHandler_ProtectedFunctionError : any;
    /**
     * Error thrown to the caller of a protected entry point if the entry point
     * throws an error.
     * @param cause The error thrown by the entry point.
     */
    constructor (cause : any ) ;
    stack : string ;
    /**
     * Text to prefix the message with.
     */
    static MESSAGE_PREFIX : string ;
  }
}
declare module 'goog:goog.debug.ErrorHandler.ProtectedFunctionError' {
  import ProtectedFunctionError = ಠ_ಠ.clutz.goog.debug.ErrorHandler.ProtectedFunctionError;
  export default ProtectedFunctionError;
}
