//!! generated by clutz.
// Generated from debug/errorreporter.js
declare namespace ಠ_ಠ.clutz.goog.debug {
  /**
   * Constructs an error reporter. Internal Use Only. To install an error
   * reporter see the {@see #install} method below.
   */
  class ErrorReporter extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_debug_ErrorReporter : any;
    /**
     * Constructs an error reporter. Internal Use Only. To install an error
     * reporter see the {@see #install} method below.
     * @param handlerUrl The URL to which all errors will be reported.
     * @param opt_contextProvider When a report is to be sent to the server, this method will be called, and given an opportunity to modify the context object before submission to the server.
     * @param opt_noAutoProtect Whether to automatically add handlers for onerror and to protect entry points.  If apps have other error reporting facilities, it may make sense for them to set these up themselves and use the ErrorReporter just for transmission of reports.
     */
    constructor (handlerUrl : string , opt_contextProvider ? : (a : GlobalError , b : { [ key: string ]: string } ) => any , opt_noAutoProtect ? : boolean ) ;
    disposeInternal ( ) : void ;
    /**
     * Handler for caught exceptions. Sends report to the LoggingServlet and
     * notifies any listeners.
     * @param e The exception.
     * @param opt_context Context values to optionally include in the error report.
     */
    handleException (e : GlobalObject | null , opt_context ? : { [ key: string ]: string } ) : void ;
    /**
     * Installs exception protection for an entry point function in addition
     * to those that are protected by default.
     * Has no effect in IE because window.onerror is used for reporting
     * exceptions in that case.
     * @param fn An entry point function to be protected.
     */
    protectAdditionalEntryPoint (this : ಠ_ಠ.clutz.goog.debug.ErrorReporter , a : Function ) : Function | null ;
    /**
     * Sends an error report to the logging URL.  This will not consult the context
     * provider, the report will be sent exactly as specified.
     * @param message Error description.
     * @param fileName URL of the JavaScript file with the error.
     * @param line Line number of the error.
     * @param opt_trace Call stack trace of the error.
     * @param opt_context Context information to include in the request.
     */
    sendErrorReport (message : string , fileName : string , line : number , opt_trace ? : string , opt_context ? : { [ key: string ]: string } ) : void ;
    setAdditionalArguments (urlArgs : { [ key: string ]: string } ) : void ;
    setContextPrefix (prefix : string ) : void ;
    /**
     * Add headers to the logging url.
     * @param loggingHeaders Extra headers to send to the logging URL.
     */
    setLoggingHeaders (loggingHeaders : GlobalObject | null | Map < string , string > ) : void ;
    setTruncationLimit (limit : number | null ) : void ;
    /**
     * Set the function used to send error reports to the server.
     * @param xhrSender If provided, this will be used to send a report to the server instead of the default method. The function will be given the URI, HTTP method request content, and (optionally) request headers to be added.
     */
    setXhrSender (xhrSender : (a : string , b : string , c : string , d ? : GlobalObject | null | Map < string , string > ) => any ) : void ;
    static ALLOW_AUTO_PROTECT : boolean ;
    /**
     * Default implementation of XHR sender interface.
     * @param uri URI to make request to.
     * @param method Send method.
     * @param content Post data.
     * @param opt_headers Map of headers to add to the request.
     */
    static defaultXhrSender (uri : string , method : string , content : string , opt_headers ? : GlobalObject | null | Map < string , string > ) : void ;
    /**
     * Installs an error reporter to catch all JavaScript errors raised.
     * @param loggingUrl The URL to which the errors caught will be reported.
     * @param opt_contextProvider When a report is to be sent to the server, this method will be called, and given an opportunity to modify the context object before submission to the server.
     * @param opt_noAutoProtect Whether to automatically add handlers for onerror and to protect entry points.  If apps have other error reporting facilities, it may make sense for them to set these up themselves and use the ErrorReporter just for transmission of reports.
     */
    static install (loggingUrl : string , opt_contextProvider ? : (a : GlobalError , b : { [ key: string ]: string } ) => any , opt_noAutoProtect ? : boolean ) : ಠ_ಠ.clutz.goog.debug.ErrorReporter ;
  }
}
declare module 'goog:goog.debug.ErrorReporter' {
  import ErrorReporter = ಠ_ಠ.clutz.goog.debug.ErrorReporter;
  export default ErrorReporter;
}
// Generated from debug/errorreporter.js
declare namespace ಠ_ಠ.clutz.goog.debug.ErrorReporter {
  /**
   * Event broadcast when an exception is logged.
   */
  class ExceptionEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_debug_ErrorReporter_ExceptionEvent : any;
    /**
     * Event broadcast when an exception is logged.
     * @param error The exception that was was reported.
     * @param context The context values sent to the server alongside this error.
     */
    constructor (error : GlobalError | null , context : { [ key: string ]: string } ) ;
    /**
     * Context values sent to the server alongside this report.
     */
    context : { [ key: string ]: string } ;
    /**
     * The error that was reported.
     */
    error : GlobalError | null ;
    /**
     * Event type for notifying of a logged exception.
     */
    static TYPE : string ;
  }
}
declare module 'goog:goog.debug.ErrorReporter.ExceptionEvent' {
  import ExceptionEvent = ಠ_ಠ.clutz.goog.debug.ErrorReporter.ExceptionEvent;
  export default ExceptionEvent;
}
