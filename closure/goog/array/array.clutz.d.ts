//!! generated by clutz.
// Generated from array/array.js
declare namespace ಠ_ಠ.clutz.goog.array {
  let ASSUME_NATIVE_FUNCTIONS : boolean ;
  function binaryInsert < VALUE = any > (array : ArrayLike < VALUE > | null , value : VALUE , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : boolean ;
  function binaryRemove < VALUE = any > (array : ArrayLike < VALUE > , value : VALUE , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : boolean ;
  function binarySearch < TARGET = any , VALUE = any > (arr : ArrayLike < VALUE > | null , target : TARGET , opt_compareFn ? : (a : TARGET , b : VALUE ) => number ) : number ;
  function binarySelect < THIS = any , VALUE = any > (arr : ArrayLike < VALUE > | null , evaluator : (this : THIS , a : VALUE , b : number , c : any ) => number , opt_obj ? : THIS ) : number ;
  function bucket < T = any , S = any > (array : ArrayLike < T > | null , sorter : (this : S , a : T , b : number , c : ArrayLike < T > ) => any , opt_obj ? : S ) : { [ /* warning: coerced from ? */ key: string ]: T [] } ;
  function bucketToMap < K = any , V = any > (array : ArrayLike < V > , sorter : (a : V , b : number , c : ArrayLike < V > ) => K | undefined ) : Map < K , V [] > ;
  function clear (arr : ArrayLike < any > | null ) : void ;
  function clone < T = any > (object : ArrayLike < T > | null | string ) : T [] ;
  function compare3 < VALUE = any > (arr1 : ArrayLike < VALUE > , arr2 : ArrayLike < VALUE > , opt_compareFn ? : (a : VALUE , b : VALUE ) => number ) : number ;
  function concat ( ...var_args : any [] ) : any [] ;
  function concatMap < THIS = any , VALUE = any , RESULT = any > (arr : ArrayLike < VALUE > | string , f : (this : THIS , a : VALUE , b : number , c : any ) => RESULT [] , opt_obj ? : THIS ) : RESULT [] ;
  function contains (arr : ArrayLike < any > | null | string , obj : any ) : boolean ;
  function copyByIndex < T = any > (arr : ArrayLike < T > , index_arr : ArrayLike < number > ) : T [] ;
  function count < T = any , S = any > (arr : ArrayLike < T > | string , f : (this : S , a : T , b : number , c : any ) => boolean , opt_obj ? : S ) : number ;
  function defaultCompare < VALUE = any > (a : VALUE , b : VALUE ) : number ;
  function defaultCompareEquality (a : any , b : any ) : boolean ;
  function equals < A = any , B = any > (arr1 : ArrayLike < A > | null , arr2 : ArrayLike < B > | null , opt_equalsFn ? : ( (a : A , b : B ) => boolean ) | null ) : boolean ;
  function every < T = any , S = any > (a : ArrayLike < T > | null | string , b : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : boolean ;
  function extend < VALUE = any > (arr1 : VALUE [] | null ,  ...var_args : ( ArrayLike < VALUE > | null | VALUE ) [] ) : void ;
  function filter < T = any , S = any > (a : ArrayLike < T > | null | string , b : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : T [] ;
  function find < T = any , S = any > (arr : ArrayLike < T > | null | string , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : T | null ;
  function findIndex < T = any , S = any > (arr : ArrayLike < T > | null | string , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  function findIndexRight < T = any , S = any > (arr : ArrayLike < T > | null | string , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  function findRight < T = any , S = any > (arr : ArrayLike < T > | null | string , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : T | null ;
  function flatten ( ...var_args : any [] ) : any [] ;
  function forEach < T = any , S = any > (a : ArrayLike < T > | null | string , b : ( (this : S , a : T , b : number , c : any ) => any ) | null , c ? : S ) : any ;
  function forEachRight < T = any , S = any > (arr : ArrayLike < T > | null | string , f : ( (this : S , a : T , b : number , c : any ) => any ) | null , opt_obj ? : S ) : void ;
  function indexOf < T = any > (a : ArrayLike < T > | null | string , b : T , c ? : number ) : number ;
  function insert < T = any > (arr : T [] | null , obj : T ) : void ;
  function insertArrayAt (arr : ArrayLike < any > | null , elementsToAdd : ArrayLike < any > | null , opt_i ? : number ) : void ;
  function insertAt (arr : ArrayLike < any > | null , obj : any , opt_i ? : number ) : void ;
  function insertBefore < T = any > (arr : T [] | null , obj : T , opt_obj2 ? : T ) : void ;
  function inverseDefaultCompare < VALUE = any > (a : VALUE , b : VALUE ) : number ;
  function isEmpty (arr : ArrayLike < any > | null | string ) : boolean ;
  function isSorted < T = any > (arr : ArrayLike < T > , opt_compareFn ? : ( (a : T , b : T ) => number ) | null , opt_strict ? : boolean ) : boolean ;
  function join < T = any > ( ...var_args : T [] [] ) : T [] ;
  /**
   * Returns the last element in an array without removing it.
   * Same as {@link goog.array.peek}.
   * @param array The array.
   */
  function last < T = any > (array : ArrayLike < T > | null | string ) : T ;
  function lastIndexOf < T = any > (a : ArrayLike < T > | string , b : T , c ? : number | null ) : number ;
  function map < THIS = any , VALUE = any , RESULT = any > (a : ArrayLike < VALUE > | null | string , b : (this : THIS , a : VALUE , b : number , c : any ) => RESULT , c ? : THIS ) : RESULT [] ;
  function moveItem (arr : ArrayLike < any > , fromIndex : number , toIndex : number ) : void ;
  function peek < T = any > (array : ArrayLike < T > | null | string ) : T ;
  function range (startOrEnd : number , opt_end ? : number , opt_step ? : number ) : number [] ;
  function reduce < T = any , S = any , R = any > (a : ArrayLike < T > | null | string , b : (this : S , a : R , b : T , c : number , d : any ) => R , c : any , d ? : S ) : R ;
  function reduceRight < T = any , S = any , R = any > (a : ArrayLike < T > | null | string , b : ( (this : S , a : R , b : T , c : number , d : any ) => R ) | null , c : any , d ? : S ) : R ;
  function remove < T = any > (arr : ArrayLike < T > | null , obj : T ) : boolean ;
  function removeAllIf < T = any , S = any > (arr : ArrayLike < T > | null , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : number ;
  function removeAt (arr : ArrayLike < any > | null , i : number ) : boolean ;
  function removeDuplicates < T = any > (arr : ArrayLike < T > | null , opt_rv ? : any [] | null , opt_hashFn ? : (a : T ) => string ) : void ;
  function removeIf < T = any , S = any > (arr : ArrayLike < T > | null , f : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , opt_obj ? : S ) : boolean ;
  function removeLast < T = any > (arr : ArrayLike < T > , obj : T ) : boolean ;
  function repeat < VALUE = any > (value : VALUE , n : number ) : VALUE [] ;
  function rotate < T = any > (array : T [] , n : number ) : T [] ;
  function shuffle (arr : any [] , opt_randFn ? : ( ) => number ) : void ;
  function slice < T = any > (arr : ArrayLike < T > | null | string , start : number , opt_end ? : number ) : T [] ;
  function some < T = any , S = any > (a : ArrayLike < T > | null | string , b : ( (this : S , a : T , b : number , c : any ) => boolean ) | null , c ? : S ) : boolean ;
  function sort < T = any > (arr : T [] | null , opt_compareFn ? : ( (a : T , b : T ) => number ) | null ) : void ;
  function sortByKey < T = any , K = any > (arr : T [] | null , keyFn : (a : T ) => K , opt_compareFn ? : ( (a : K , b : K ) => number ) | null ) : void ;
  function sortObjectsByKey (arr : ( GlobalObject | null ) [] | null , key : string , opt_compareFn ? : Function | null ) : void ;
  function splice < T = any > (arr : ArrayLike < T > | null , index : number | undefined , howMany : number ,  ...var_args : T [] ) : T [] ;
  function stableSort < T = any > (arr : T [] | null , opt_compareFn ? : ( (a : T , b : T ) => number ) | null ) : void ;
  function toArray < T = any > (object : ArrayLike < T > | null | string ) : T [] ;
  function toMap < K = any , V = any > (arr : ArrayLike < V > , keyFunc : ( (a : V , b : number , c : any ) => K ) | null ) : Map < K , V > ;
  function toObject < T = any , S = any > (arr : ArrayLike < T > | null , keyFunc : ( (this : S , a : T , b : number , c : any ) => string ) | null , opt_obj ? : S ) : { [ /* warning: coerced from ? */ key: string ]: T } ;
  function zip ( ...var_args : ArrayLike < any > [] ) : any [] [] ;
}
declare module 'goog:goog.array' {
  import array = ಠ_ಠ.clutz.goog.array;
  export = array;
}
