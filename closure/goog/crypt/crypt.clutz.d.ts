//!! generated by clutz.
// Generated from crypt/crypt.js
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Turns an array of numbers into the hex string given by the concatenation of
   * the hex values to which the numbers correspond.
   * @param array Array of numbers representing characters.
   * @param opt_separator Optional separator between values
   */
  function byteArrayToHex (array : Uint8Array | null | number [] , opt_separator ? : string ) : string ;
  /**
   * Turns an array of numbers into the string given by the concatenation of the
   * characters to which the numbers correspond.
   * @param bytes Array of numbers representing characters.
   */
  function byteArrayToString (bytes : Uint8Array | number [] ) : string ;
  /**
   * Converts a hex string into an integer array.
   * @param hexString Hex string of 16-bit integers (two characters per integer).
   */
  function hexToByteArray (hexString : string ) : number [] ;
  /**
   * Turns a string into an array of bytes; a "byte" being a JS number in the
   * range 0-255. Multi-byte characters are written as little-endian.
   * @param str String value to arrify.
   */
  function stringToByteArray (str : string ) : number [] ;
  /**
   * Converts a JS string to a UTF-8 "byte" array.
   * @param str 16-bit unicode string.
   */
  function stringToUtf8ByteArray (str : string ) : number [] ;
  /**
   * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
   * @param bytes UTF-8 byte array.
   */
  function utf8ByteArrayToString (bytes : Uint8Array | null | number [] ) : string ;
  /**
   * XOR two byte arrays.
   * @param bytes1 Byte array 1.
   * @param bytes2 Byte array 2.
   */
  function xorByteArray (bytes1 : Uint8Array | Int8Array | number [] , bytes2 : Uint8Array | Int8Array | number [] ) : number [] ;
}
declare module 'goog:goog.crypt' {
  import crypt = ಠ_ಠ.clutz.goog.crypt;
  export = crypt;
}
