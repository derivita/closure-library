//!! generated by clutz.
// Generated from crypt/cbc.js
declare namespace ಠ_ಠ.clutz.goog.crypt {
  /**
   * Implements the CBC mode for block ciphers. See
   * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
   * #Cipher-block_chaining_.28CBC.29
   */
  class Cbc {
    private noStructuralTyping_goog_crypt_Cbc : any;
    /**
     * Implements the CBC mode for block ciphers. See
     * http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
     * #Cipher-block_chaining_.28CBC.29
     * @param cipher The block cipher to use.
     */
    constructor (cipher : ಠ_ಠ.clutz.goog.crypt.BlockCipher ) ;
    /**
     * Decrypt a message.
     * @param cipherText Message to decrypt. An array of bytes. The length should be a multiple of the block size.
     * @param initialVector Initial vector for the CBC mode. An array of bytes with the same length as the block size.
     */
    decrypt (cipherText : number [] | Uint8Array , initialVector : number [] | Uint8Array ) : number [] ;
    /**
     * Encrypt a message.
     * @param plainText Message to encrypt. An array of bytes. The length should be a multiple of the block size.
     * @param initialVector Initial vector for the CBC mode. An array of bytes with the same length as the block size.
     */
    encrypt (plainText : number [] | Uint8Array , initialVector : number [] | Uint8Array ) : number [] ;
  }
}
declare module 'goog:goog.crypt.Cbc' {
  import Cbc = ಠ_ಠ.clutz.goog.crypt.Cbc;
  export default Cbc;
}
