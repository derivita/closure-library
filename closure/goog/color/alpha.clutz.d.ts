//!! generated by clutz.
// Generated from color/alpha.js
declare namespace ಠ_ಠ.clutz.goog.color.alpha {
  /**
   * Gets the alpha color part of an alpha hex color. For example, both '#123A'
   * and '#123456aa' return 'aa'. The result is always two characters long.
   * @param colorWithAlpha The alpha hex color to get the hex color from.
   */
  function extractAlpha (colorWithAlpha : string ) : string ;
  /**
   * Gets the hex color part of an alpha hex color. For example, both '#abcd' and
   * '#AABBCC12' return '#aabbcc'.
   * @param colorWithAlpha The alpha hex color to get the hex color from.
   */
  function extractHexColor (colorWithAlpha : string ) : string ;
  /**
   * Converts an 8-hex representation of a color to RGBA.
   * @param hexColor Color to convert.
   */
  function hexToRgba (hexColor : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGBA.
   * @param hexColor Color to convert.
   */
  function hexToRgbaStyle (hexColor : string ) : string ;
  /**
   * Converts a color from HSLA to hex representation.
   * @param hsla Array of [h, s, l, a], where h is an integer in [0, 360], s and l are integers in [0, 100], and a is in [0, 1].
   */
  function hslaArrayToHex (hsla : number [] ) : string ;
  /**
   * Converts a color from HSLA to an RGBA style string.
   * @param hsla Array of [h, s, l, a], where h is and integer in [0, 360], s and l are integers in [0, 100], and a is in [0, 1].
   */
  function hslaArrayToRgbaStyle (hsla : number [] ) : string ;
  /**
   * Converts a color from HSLA to hex representation.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToHex (h : number , s : number , l : number , a : number ) : string ;
  /**
   * Converts a color from HSLA color space to RGBA color space.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToRgba (h : number , s : number , l : number , a : number ) : number [] ;
  /**
   * Converts a color from HSLA to an RGBA style string.
   * @param h Amount of hue, int between 0 and 360.
   * @param s Amount of saturation, int between 0 and 100.
   * @param l Amount of lightness, int between 0 and 100.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function hslaToRgbaStyle (h : number , s : number , l : number , a : number ) : string ;
  /**
   * Converts from an HSVA array to a hex string
   * @param hsva Array of [h, s, v, a] in [[0, 1], [0, 1], [0, 255], [0, 1]].
   */
  function hsvaArrayToHex (hsva : number [] ) : string ;
  /**
   * Converts from h,s,v,a values to a hex string
   * @param h Hue, in [0, 1].
   * @param s Saturation, in [0, 1].
   * @param v Value, in [0, 255].
   * @param a Alpha, in [0, 1].
   */
  function hsvaToHex (h : number , s : number , v : number , a : number ) : string ;
  /**
   * Parses an alpha color out of a string.
   * @param str Color in some format.
   */
  function parse (str : string ) : { hex : string , type : string } ;
  /**
   * Converts a color from RGBA to hex representation.
   * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0, 1].
   */
  function rgbaArrayToHex (rgba : number [] ) : string ;
  /**
   * Converts a color from RGBA color space to HSLA color space.
   * @param rgba [r, g, b, a] values for the color, each in [0, 255].
   */
  function rgbaArrayToHsla (rgba : number [] ) : number [] ;
  /**
   * Converts a color from RGBA to an RGBA style string.
   * @param rgba Array of [r, g, b, a], with r, g, b in [0, 255] and a in [0, 1].
   */
  function rgbaArrayToRgbaStyle (rgba : number [] | GlobalFloat32Array ) : string ;
  /**
   * Converts a color from RGBA to hex representation.
   * @param r Amount of red, int between 0 and 255.
   * @param g Amount of green, int between 0 and 255.
   * @param b Amount of blue, int between 0 and 255.
   * @param a Amount of alpha, float between 0 and 1.
   */
  function rgbaToHex (r : number , g : number , b : number , a : number ) : string ;
  /**
   * Converts a color from RGBA color space to HSLA color space.
   * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   * @param a Value of alpha, in [0, 255].
   */
  function rgbaToHsla (r : number , g : number , b : number , a : number ) : number [] ;
  /**
   * Converts a color from RGBA to an RGBA style string.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   * @param a Value of alpha, in [0, 1].
   */
  function rgbaToRgbaStyle (r : number , g : number , b : number , a : number ) : string ;
}
declare module 'goog:goog.color.alpha' {
  import alpha = ಠ_ಠ.clutz.goog.color.alpha;
  export = alpha;
}
