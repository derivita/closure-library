//!! generated by clutz.
// Generated from color/color.js
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * Blend two colors together, using the specified factor to indicate the weight
   * given to the first color
   * @param rgb1 First color represented in rgb.
   * @param rgb2 Second color represented in rgb.
   * @param factor The weight to be given to rgb1 over rgb2. Values should be in the range [0, 1]. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function blend (rgb1 : number [] | null , rgb2 : number [] | null , factor : number ) : number [] ;
  /**
   * Adds black to the specified color, darkening it
   * @param rgb rgb representation of the color.
   * @param factor Number in the range [0, 1]. 0 will do nothing, while 1 will return black. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function darken (rgb : number [] | null , factor : number ) : number [] ;
  /**
   * Converts a hex representation of a color to HSL.
   * @param hex Color to convert.
   */
  function hexToHsl (hex : string ) : number [] ;
  /**
   * Converts a hex representation of a color to HSV
   * @param hex Color to convert.
   */
  function hexToHsv (hex : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGB.
   * @param hexColor Color to convert.
   */
  function hexToRgb (hexColor : string ) : number [] ;
  /**
   * Converts a hex representation of a color to RGB.
   * @param hexColor Color to convert.
   */
  function hexToRgbStyle (hexColor : string ) : string ;
  /**
   * Find the "best" (highest-contrast) of the suggested colors for the prime
   * color. Uses W3C formula for judging readability and visual accessibility:
   * http://www.w3.org/TR/AERT#color-contrast
   * @param prime Color represented as a rgb array.
   * @param suggestions Array of colors, each representing a rgb array.
   */
  function highContrast (prime : number [] | null , suggestions : ( number [] | null ) [] | null ) : number [] ;
  /**
   * Converts from an hsl array to a hex string
   * @param hsl hsl representation of the color.
   */
  function hslArrayToHex (hsl : number [] | null ) : string ;
  /**
   * Converts a color from HSL color space to RGB color space.
   * @param hsl hsl representation of the color.
   */
  function hslArrayToRgb (hsl : number [] | null ) : number [] ;
  /**
   * Calculates the Euclidean distance between two color vectors on an HSL sphere.
   * A demo of the sphere can be found at:
   * http://en.wikipedia.org/wiki/HSL_color_space
   * In short, a vector for color (H, S, L) in this system can be expressed as
   * (S*L'*cos(2*PI*H), S*L'*sin(2*PI*H), L), where L' = abs(L - 0.5), and we
   * simply calculate the 1-2 distance using these coordinates
   * @param hsl1 First color in hsl representation.
   * @param hsl2 Second color in hsl representation.
   */
  function hslDistance (hsl1 : number [] | null , hsl2 : number [] | null ) : number ;
  /**
   * Converts from h,s,l values to a hex string
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param l Luminosity, in [0, 1].
   */
  function hslToHex (h : number , s : number , l : number ) : string ;
  /**
   * Converts a color from HSL color space to RGB color space.
   * Modified from {@link http://www.easyrgb.com/math.html}
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param l Luminosity, in [0, 1].
   */
  function hslToRgb (h : number , s : number , l : number ) : number [] ;
  /**
   * Converts from an HSV array to a hex string
   * @param hsv hsv representation of the color.
   */
  function hsvArrayToHex (hsv : number [] | null ) : string ;
  /**
   * Converts an HSV triplet to an RGB array.
   * @param hsv hsv representation of the color.
   */
  function hsvArrayToRgb (hsv : number [] | null ) : number [] ;
  /**
   * Converts from h,s,v values to a hex string
   * @param h Hue, in [0, 360].
   * @param s Saturation, in [0, 1].
   * @param v Value, in [0, 255].
   */
  function hsvToHex (h : number , s : number , v : number ) : string ;
  /**
   * Converts an HSV triplet to an RGB array.  V is brightness because b is
   * reserved for blue in RGB.
   * @param h Hue value in [0, 360].
   * @param s Saturation value in [0, 1].
   * @param brightness brightness in [0, 255].
   */
  function hsvToRgb (h : number , s : number , brightness : number ) : number [] ;
  /**
   * Determines if the given string can be parsed as a color.
   * {@see goog.color.parse}.
   * @param str Potential color string.
   */
  function isValidColor (str : string ) : boolean ;
  /**
   * Adds white to the specified color, lightening it
   * @param rgb rgb representation of the color.
   * @param factor Number in the range [0, 1].  0 will do nothing, while 1 will return white. If less than 0, factor will be set to 0. If greater than 1, factor will be set to 1.
   */
  function lighten (rgb : number [] | null , factor : number ) : number [] ;
  /**
   * Normalize an hex representation of a color
   * @param hexColor an hex color string.
   */
  function normalizeHex (hexColor : string ) : string ;
  /**
   * Parses a color out of a string.
   * @param str Color in some format.
   */
  function parse (str : string ) : { hex : string , type : string } ;
  /**
   * Parses red, green, blue components out of a valid rgb color string.
   * Throws Error if the color string is invalid.
   * @param str RGB representation of a color. {@see goog.color.isValidRgbColor_}.
   */
  function parseRgb (str : string ) : number [] ;
  /**
   * Takes a string a prepends a '#' sign if one doesn't exist.
   * Small helper method for use by goog.color and friends.
   * @param str String to check.
   */
  function prependHashIfNecessaryHelper (str : string ) : string ;
  /**
   * Takes a hex value and prepends a zero if it's a single digit.
   * Small helper method for use by goog.color and friends.
   * @param hex Hex value to prepend if single digit.
   */
  function prependZeroIfNecessaryHelper (hex : string ) : string ;
  /**
   * Converts a color from RGB to hex representation.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHex (rgb : number [] | null ) : string ;
  /**
   * Converts a color from RGB color space to HSL color space.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHsl (rgb : number [] | null ) : number [] ;
  /**
   * Converts from an array of RGB values to an array of HSV values.
   * @param rgb rgb representation of the color.
   */
  function rgbArrayToHsv (rgb : number [] | null ) : number [] ;
  /**
   * Converts a color from RGB to hex representation.
   * @param r Amount of red, int between 0 and 255.
   * @param g Amount of green, int between 0 and 255.
   * @param b Amount of blue, int between 0 and 255.
   */
  function rgbToHex (r : number , g : number , b : number ) : string ;
  /**
   * Converts a color from RGB color space to HSL color space.
   * Modified from {@link http://en.wikipedia.org/wiki/HLS_color_space}.
   * @param r Value of red, in [0, 255].
   * @param g Value of green, in [0, 255].
   * @param b Value of blue, in [0, 255].
   */
  function rgbToHsl (r : number , g : number , b : number ) : number [] ;
  /**
   * Converts from RGB values to an array of HSV values.
   * @param red Red value in [0, 255].
   * @param green Green value in [0, 255].
   * @param blue Blue value in [0, 255].
   */
  function rgbToHsv (red : number , green : number , blue : number ) : number [] ;
}
declare module 'goog:goog.color' {
  import color = ಠ_ಠ.clutz.goog.color;
  export = color;
}
// Generated from color/color.js
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * HSL color representation. An array containing three elements [h, s, l]:
   * h (hue) must be an integer in [0, 360], cyclic.
   * s (saturation) must be a number in [0, 1].
   * l (lightness) must be a number in [0, 1].
   */
  type Hsl = number [] | null ;
}
declare module 'goog:goog.color.Hsl' {
  import Hsl = ಠ_ಠ.clutz.goog.color.Hsl;
  export default Hsl;
}
// Generated from color/color.js
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * HSV color representation. An array containing three elements [h, s, v]:
   * h (hue) must be an integer in [0, 360], cyclic.
   * s (saturation) must be a number in [0, 1].
   * v (value/brightness) must be an integer in [0, 255].
   */
  type Hsv = number [] | null ;
}
declare module 'goog:goog.color.Hsv' {
  import Hsv = ಠ_ಠ.clutz.goog.color.Hsv;
  export default Hsv;
}
// Generated from color/color.js
declare namespace ಠ_ಠ.clutz.goog.color {
  /**
   * RGB color representation. An array containing three elements [r, g, b],
   * each an integer in [0, 255], representing the red, green, and blue components
   * of the color respectively.
   */
  type Rgb = number [] | null ;
}
declare module 'goog:goog.color.Rgb' {
  import Rgb = ಠ_ಠ.clutz.goog.color.Rgb;
  export default Rgb;
}
