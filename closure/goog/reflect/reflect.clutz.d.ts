//!! generated by clutz.
// Generated from reflect/reflect.js
declare namespace ಠ_ಠ.clutz.goog.reflect {
  /**
   * Retrieves a value from a cache given a key. The compiler provides special
   * consideration for this call such that it is generally considered side-effect
   * free. However, if the `opt_keyFn` or `valueFn` have side-effects
   * then the entire call is considered to have side-effects.
   *
   * Conventionally storing the value on the cache would be considered a
   * side-effect and preclude unused calls from being pruned, ie. even if
   * the value was never used, it would still always be stored in the cache.
   *
   * Providing a side-effect free `valueFn` and `opt_keyFn`
   * allows unused calls to `goog.reflect.cache` to be pruned.
   * @param cacheObj The object that contains the cached values.
   * @param key The key to lookup in the cache. If it is not string or number then a `opt_keyFn` should be provided. The key is also used as the parameter to the `valueFn`.
   * @param valueFn The value provider to use to calculate the value to store in the cache. This function should be side-effect free to take advantage of the optimization.
   * @param opt_keyFn The key provider to determine the cache map key. This should be used if the given key is not a string or number. If not provided then the given key is used. This function should be side-effect free to take advantage of the optimization.
   */
  function cache < K = any , V = any > (cacheObj : { [ /* warning: coerced from K */ key: string ]: V } , key : any , valueFn : (a ? : any ) => V , opt_keyFn ? : (a ? : any ) => K ) : V ;
  /**
   * Check if a property can be accessed without throwing an exception.
   * @param obj The owner of the property.
   * @param prop The property name.
   */
  function canAccessProperty (obj : GlobalObject | null , prop : string ) : boolean ;
  /**
   * Syntax for object literal casts.
   * @param type Type to cast to.
   * @param object Object literal to cast.
   */
  function object (type : Function , object : GlobalObject | null ) : GlobalObject | null ;
  /**
   * Syntax for renaming property strings.
   * @param prop Name of the property
   * @param object Instance of the object whose type will be used for renaming
   */
  function objectProperty (prop : string , object : GlobalObject ) : string ;
  /**
   * To assert to the compiler that an operation is needed when it would
   * otherwise be stripped. For example:
   * <code>
   * // Force a layout
   * goog.reflect.sinkValue(dialog.offsetHeight);
   * </code>
   */
  function sinkValue < T = any > (x : T ) : T ;
}
declare module 'goog:goog.reflect' {
  import reflect = ಠ_ಠ.clutz.goog.reflect;
  export = reflect;
}
