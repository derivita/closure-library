//!! generated by clutz.
// Generated from async/delay.js
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A Delay object invokes the associated function after a specified delay. The
   * interval duration can be specified once in the constructor, or can be defined
   * each time the delay is started. Calling start on an active delay will reset
   * the timer.
   */
  class Delay < THIS = any > extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_async_Delay : any;
    /**
     * A Delay object invokes the associated function after a specified delay. The
     * interval duration can be specified once in the constructor, or can be defined
     * each time the delay is started. Calling start on an active delay will reset
     * the timer.
     * @param listener Function to call when the delay completes.
     * @param opt_interval The default length of the invocation delay (in milliseconds).
     * @param opt_handler The object scope to invoke the function in.
     */
    constructor (listener : (this : THIS ) => any , opt_interval ? : number , opt_handler ? : THIS ) ;
    /**
     * Disposes of the object, cancelling the timeout if it is still outstanding and
     * removing all object references.
     */
    protected disposeInternal ( ) : void ;
    fire ( ) : void ;
    fireIfActive ( ) : void ;
    isActive ( ) : boolean ;
    /**
     * Starts the delay timer. The provided listener function will be called after
     * the specified interval. Calling start on an active timer will reset the
     * delay interval.
     * @param opt_interval If specified, overrides the object's default interval with this one (in milliseconds).
     */
    start (opt_interval ? : number ) : void ;
    /**
     * Starts the delay timer if it's not already active.
     * @param opt_interval If specified and the timer is not already active, overrides the object's default interval with this one (in milliseconds).
     */
    startIfNotActive (opt_interval ? : number ) : void ;
    stop ( ) : void ;
  }
}
declare module 'goog:goog.async.Delay' {
  import Delay = ಠ_ಠ.clutz.goog.async.Delay;
  export default Delay;
}
