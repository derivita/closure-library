//!! generated by clutz.
// Generated from async/conditionaldelay.js
declare namespace ಠ_ಠ.clutz.goog.async {
  /**
   * A ConditionalDelay object invokes the associated function after a specified
   * interval delay and checks its return value. If the function returns
   * `true` the conditional delay is cancelled and {@see #onSuccess}
   * is called. Otherwise this object keeps to invoke the deferred function until
   * either it returns `true` or the timeout is exceeded. In the latter case
   * the {@see #onFailure} method will be called.
   *
   * The interval duration and timeout can be specified each time the delay is
   * started. Calling start on an active delay will reset the timer.
   */
  class ConditionalDelay extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_async_ConditionalDelay : any;
    /**
     * A ConditionalDelay object invokes the associated function after a specified
     * interval delay and checks its return value. If the function returns
     * `true` the conditional delay is cancelled and {@see #onSuccess}
     * is called. Otherwise this object keeps to invoke the deferred function until
     * either it returns `true` or the timeout is exceeded. In the latter case
     * the {@see #onFailure} method will be called.
     *
     * The interval duration and timeout can be specified each time the delay is
     * started. Calling start on an active delay will reset the timer.
     * @param listener Function to call when the delay completes. Should return a value that type-converts to `true` if the call succeeded and this delay should be stopped.
     * @param opt_handler The object scope to invoke the function in.
     */
    constructor (listener : ( ) => boolean , opt_handler ? : GlobalObject | null ) ;
    disposeInternal ( ) : void ;
    isActive ( ) : boolean ;
    isDone ( ) : boolean ;
    onFailure ( ) : void ;
    onSuccess ( ) : void ;
    /**
     * Starts the delay timer. The provided listener function will be called
     * repeatedly after the specified interval until the function returns
     * `true` or the timeout is exceeded. Calling start on an active timer
     * will stop the timer first.
     * @param opt_interval The time interval between the function invocations (in milliseconds). Default is 0.
     * @param opt_timeout The timeout interval (in milliseconds). Takes precedence over the `opt_interval`, i.e. if the timeout is less than the invocation interval, the function will be called when the timeout is exceeded. A negative value means no timeout. Default is 0.
     */
    start (opt_interval ? : number , opt_timeout ? : number ) : void ;
    stop ( ) : void ;
  }
}
declare module 'goog:goog.async.ConditionalDelay' {
  import ConditionalDelay = ಠ_ಠ.clutz.goog.async.ConditionalDelay;
  export default ConditionalDelay;
}
