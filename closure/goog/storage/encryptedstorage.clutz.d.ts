//!! generated by clutz.
// Generated from storage/encryptedstorage.js
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides an encrypted storage. The keys are hashed with a secret, so
   * their existence cannot be verified without the knowledge of the secret.
   * The values are encrypted using the key, a salt, and the secret, so
   * stream cipher initialization varies for each stored value.
   */
  class EncryptedStorage extends ಠ_ಠ.clutz.goog.storage.CollectableStorage {
    private noStructuralTyping_goog_storage_EncryptedStorage : any;
    /**
     * Provides an encrypted storage. The keys are hashed with a secret, so
     * their existence cannot be verified without the knowledge of the secret.
     * The values are encrypted using the key, a salt, and the secret, so
     * stream cipher initialization varies for each stored value.
     * @param mechanism The underlying storage mechanism.
     * @param secret The secret key used to encrypt the storage.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.IterableMechanism , secret : string ) ;
    getWrapper (key ? : any , opt_expired ? : any ) : any ;
    remove (key ? : any ) : void ;
    set (key ? : any , value ? : any , opt_expiration ? : any ) : void ;
    /**
     * Metadata key under which the salt is stored.
     */
    protected static SALT_KEY : string ;
  }
}
declare module 'goog:goog.storage.EncryptedStorage' {
  import EncryptedStorage = ಠ_ಠ.clutz.goog.storage.EncryptedStorage;
  export default EncryptedStorage;
}
