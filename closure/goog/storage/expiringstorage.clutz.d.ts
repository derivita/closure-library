//!! generated by clutz.
// Generated from storage/expiringstorage.js
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides a storage with expiring keys.
   */
  class ExpiringStorage extends ಠ_ಠ.clutz.goog.storage.RichStorage {
    private noStructuralTyping_goog_storage_ExpiringStorage : any;
    /**
     * Provides a storage with expiring keys.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism ) ;
    /**
     * Get an item wrapper (the item and its metadata) from the storage.
     * @param key The key to get.
     * @param opt_expired If true, return expired wrappers as well.
     */
    getWrapper (key : string , opt_expired ? : boolean ) : GlobalObject | undefined ;
    /**
     * Set an item in the storage.
     * @param key The key to set.
     * @param value The value to serialize to a string and save.
     * @param opt_expiration The number of miliseconds since epoch (as in goog.now()) when the value is to expire. If the expiration time is not provided, the value will persist as long as possible.
     */
    set (key : string , value : any , opt_expiration ? : number ) : void ;
    /**
     * Metadata key under which the creation time is stored.
     */
    protected static CREATION_TIME_KEY : string ;
    /**
     * Metadata key under which the expiration time is stored.
     */
    protected static EXPIRATION_TIME_KEY : string ;
    /**
     * Returns the wrapper creation time.
     * @param wrapper The wrapper.
     */
    static getCreationTime (wrapper : GlobalObject ) : number | undefined ;
    /**
     * Returns the wrapper expiration time.
     * @param wrapper The wrapper.
     */
    static getExpirationTime (wrapper : GlobalObject ) : number | undefined ;
    /**
     * Checks if the data item has expired.
     * @param wrapper The wrapper.
     */
    static isExpired (wrapper : GlobalObject ) : boolean ;
  }
}
declare module 'goog:goog.storage.ExpiringStorage' {
  import ExpiringStorage = ಠ_ಠ.clutz.goog.storage.ExpiringStorage;
  export default ExpiringStorage;
}
