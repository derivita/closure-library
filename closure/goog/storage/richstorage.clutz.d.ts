//!! generated by clutz.
// Generated from storage/richstorage.js
declare namespace ಠ_ಠ.clutz.goog.storage {
  /**
   * Provides a storage for data with attached metadata.
   */
  class RichStorage extends ಠ_ಠ.clutz.goog.storage.Storage {
    private noStructuralTyping_goog_storage_RichStorage : any;
    /**
     * Provides a storage for data with attached metadata.
     * @param mechanism The underlying storage mechanism.
     */
    constructor (mechanism : ಠ_ಠ.clutz.goog.storage.mechanism.Mechanism ) ;
    get (key ? : any ) : any ;
    /**
     * Get an item wrapper (the item and its metadata) from the storage.
     *
     * WARNING: This returns an Object, which once used to be
     * goog.storage.RichStorage.Wrapper. This is due to the fact
     * that deserialized objects lose type information and it
     * is hard to do proper typecasting in JavaScript. Be sure
     * you know what you are doing when using the returned value.
     * @param key The key to get.
     */
    getWrapper (key : string ) : GlobalObject | undefined ;
    set (key ? : any , value ? : any ) : void ;
    /**
     * Metadata key under which the actual data is stored.
     */
    protected static DATA_KEY : string ;
  }
}
declare module 'goog:goog.storage.RichStorage' {
  import RichStorage = ಠ_ಠ.clutz.goog.storage.RichStorage;
  export default RichStorage;
}
// Generated from storage/richstorage.js
declare namespace ಠ_ಠ.clutz.goog.storage.RichStorage {
  /**
   * Wraps a value so metadata can be associated with it. You probably want
   * to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid multiple
   * embeddings.
   */
  class Wrapper {
    private noStructuralTyping_goog_storage_RichStorage_Wrapper : any;
    /**
     * Wraps a value so metadata can be associated with it. You probably want
     * to use goog.storage.RichStorage.Wrapper.wrapIfNecessary to avoid multiple
     * embeddings.
     * @param value The value to wrap.
     */
    constructor (value : any ) ;
    /**
     * Unwraps a value, any metadata is discarded (not returned). You might want to
     * use goog.storage.RichStorage.Wrapper.unwrapIfPossible to handle cases where
     * the wrapper is missing.
     * @param wrapper The wrapper.
     */
    static unwrap (wrapper : GlobalObject ) : any ;
    /**
     * Convenience method for unwrapping a value. Returns undefined if the
     * wrapper is missing.
     * @param wrapper The wrapper.
     */
    static unwrapIfPossible (wrapper : GlobalObject | undefined ) : any ;
    /**
     * Convenience method for wrapping a value so metadata can be associated with
     * it. No-op if the value is already wrapped or is undefined.
     * @param value The value to wrap.
     */
    static wrapIfNecessary (value : any ) : ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper | undefined ;
  }
}
declare module 'goog:goog.storage.RichStorage.Wrapper' {
  import Wrapper = ಠ_ಠ.clutz.goog.storage.RichStorage.Wrapper;
  export default Wrapper;
}
