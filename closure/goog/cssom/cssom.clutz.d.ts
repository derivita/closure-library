//!! generated by clutz.
// Generated from cssom/cssom.js
declare namespace ಠ_ಠ.clutz.goog.cssom {
  /**
   * Cross browser function to add a CSSRule into a StyleSheet, optionally
   * at a given index.
   * @param cssStyleSheet The CSSRule's parentStyleSheet.
   * @param cssText The text for the new CSSRule.
   * @param opt_index The index of the cssRule in its parentStylesheet.
   */
  function addCssRule (cssStyleSheet : StyleSheet | null , cssText : string , opt_index ? : number ) : void ;
  /**
   * Appends a DOM node to HEAD containing the css text that's passed in.
   * @param cssText CSS to add to the end of the document.
   * @param opt_domHelper Optional DOM helper user for document interactions.
   */
  function addCssText (cssText : string , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : GlobalElement ;
  /**
   * Recursively gets all CSSStyleRules, optionally starting from a given
   * StyleSheet.
   * Note that this excludes any CSSImportRules, CSSMediaRules, etc..
   */
  function getAllCssStyleRules (opt_styleSheet ? : StyleSheet | null | StyleSheetList ) : ( CSSStyleRule | null ) [] ;
  /**
   * Gets all StyleSheet objects starting from some StyleSheet. Note that we
   * want to return the sheets in the order of the cascade, therefore if we
   * encounter an import, we will splice that StyleSheet object in front of
   * the StyleSheet that contains it in the returned array of StyleSheets.
   * @param opt_styleSheet A StyleSheet.
   * @param opt_includeDisabled If true, includes disabled stylesheets, defaults to false.
   */
  function getAllCssStyleSheets (opt_styleSheet ? : StyleSheet | null | StyleSheetList , opt_includeDisabled ? : boolean ) : ( StyleSheet | null ) [] ;
  /**
   * Recursively gets all CSS as text, optionally starting from a given
   * StyleSheet.
   */
  function getAllCssText (opt_styleSheet ? : StyleSheet | null | StyleSheetList ) : string ;
  /**
   * Get the index of the CSSRule in it's StyleSheet.
   * @param cssRule A CSSRule.
   * @param opt_parentStyleSheet A reference to the stylesheet object this cssRule belongs to.
   */
  function getCssRuleIndexInParentStyleSheet (cssRule : CSSRule | null , opt_parentStyleSheet ? : StyleSheet | null ) : number ;
  /**
   * Returns the CSSRules from a styleSheet.
   * Worth noting here is that IE and FF differ in terms of what they will return.
   * Firefox will return styleSheet.cssRules, which includes ImportRules and
   * anything which implements the CSSRules interface. IE returns simply a list of
   * CSSRules.
   */
  function getCssRulesFromStyleSheet (styleSheet : StyleSheet | null ) : CSSRuleList | null ;
  /**
   * Gets the cssText from a CSSRule object cross-browserly.
   * @param cssRule A CSSRule.
   */
  function getCssTextFromCssRule (cssRule : CSSRule | null ) : string ;
  /**
   * Cross browser method to get the filename from the StyleSheet's href.
   * Explorer only returns the filename in the href, while other agents return
   * the full path.
   * @param styleSheet Any valid StyleSheet object with an href.
   */
  function getFileNameFromStyleSheet (styleSheet : StyleSheet ) : string | null ;
  /**
   * We do some trickery in getAllCssStyleRules that hacks this in for IE.
   * If the cssRule object isn't coming from a result of that function call, this
   * method will return undefined in IE.
   * @param cssRule The CSSRule.
   */
  function getParentStyleSheet (cssRule : CSSRule | null ) : StyleSheet | null ;
  /**
   * Cross browser function to remove a CSSRule in a StyleSheet at an index.
   * @param cssStyleSheet The CSSRule's parentStyleSheet.
   * @param index The CSSRule's index in the parentStyleSheet.
   */
  function removeCssRule (cssStyleSheet : StyleSheet | null , index : number ) : void ;
  /**
   * Replace a cssRule with some cssText for a new rule.
   * If the cssRule object is not one of objects returned by
   * getAllCssStyleRules, then you'll need to provide both the styleSheet and
   * possibly the index, since we can't infer them from the standard cssRule
   * object in IE. We do some trickery in getAllCssStyleRules to hack this in.
   * @param cssRule A CSSRule.
   * @param cssText The text for the new CSSRule.
   * @param opt_parentStyleSheet A reference to the stylesheet object this cssRule belongs to.
   * @param opt_index The index of the cssRule in its parentStylesheet.
   */
  function replaceCssRule (cssRule : CSSRule | null , cssText : string , opt_parentStyleSheet ? : StyleSheet | null , opt_index ? : number ) : void ;
}
declare module 'goog:goog.cssom' {
  import cssom = ಠ_ಠ.clutz.goog.cssom;
  export = cssom;
}
// Generated from cssom/cssom.js
declare namespace ಠ_ಠ.clutz.goog.cssom {
  /**
   * Enumeration of `CSSRule` types.
   */
  /**
   * Enumeration of `CSSRule` types.
   */
  enum CssRuleType {
    FONT_FACE = 5.0 ,
    IMPORT = 3.0 ,
    MEDIA = 4.0 ,
    NAMESPACE = 7.0 ,
    PAGE = 6.0 ,
    STYLE = 1.0 ,
  }
}
declare module 'goog:goog.cssom.CssRuleType' {
  import CssRuleType = ಠ_ಠ.clutz.goog.cssom.CssRuleType;
  export default CssRuleType;
}
