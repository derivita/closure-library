//!! generated by clutz.
// Generated from cssom/iframe/style.js
declare namespace ಠ_ಠ.clutz.goog.cssom.iframe.style {
  /**
   * Class representing a CSS rule set. A rule set is something like this:
   * h1, h2 { font-family: Arial; color: red; }
   */
  class CssRuleSet_ {
    private noStructuralTyping_goog_cssom_iframe_style_CssRuleSet_ : any;
    /**
     * Text of the declarations inside the rule set.
     * For example: 'font-family: Arial; color: red;'
     */
    declarationText : string ;
    /**
     * Array of CssSelector objects, one for each selector.
     * Example: [h1, h2]
     */
    selectors : ( ಠ_ಠ.clutz.goog.cssom.iframe.style.CssSelector_ | null ) [] | null ;
    /**
     * Make a copy of this ruleset.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.cssom.iframe.style.CssRuleSet_ ;
    /**
     * Initializes the rule set from a `CSSRule`.
     * @param cssRule The `CSSRule` to initialize from.
     */
    initializeFromCssRule (cssRule : CSSRule | null ) : boolean ;
    /**
     * Set the declaration text with properties from a given object.
     * @param sourceObject Object whose properties and values should be used to generate the declaration text.
     * @param opt_important Whether !important should be added to each declaration.
     */
    setDeclarationTextFromObject (sourceObject : GlobalObject | null , opt_important ? : boolean ) : void ;
    /**
     * Parses a selectors string (which may contain multiple comma-delimited
     * selectors) and loads the results into this.selectors.
     * @param selectorsString String containing selectors.
     */
    setSelectorsFromString (selectorsString : string ) : void ;
    /**
     * Serializes this CssRuleSet_ into an array as a series of strings.
     * The array can then be join()-ed to get a string representation
     * of this ruleset.
     * @param array The array to which to append strings.
     */
    writeToArray (array : string [] | null ) : void ;
  }
  /**
   * Represents one part of a CSS Selector. For example in the selector
   * 'body #foo .bar', body, #foo, and .bar would be considered selector parts.
   * In the official CSS spec these are called "simple selectors".
   */
  class CssSelectorPart_ {
    private noStructuralTyping_goog_cssom_iframe_style_CssSelectorPart_ : any;
    inputString_ : string ;
    matchProperties_ : { className : any , id : any , tagName : any } ;
    testedElements_ : { } ;
    /**
     * Test whether an element matches this selector part, considered in isolation.
     * @param elementInfo Element properties to test.
     */
    testElement (elementInfo : GlobalObject | null ) : boolean ;
  }
  /**
   * Represents a single CSS selector, as described in
   * http://www.w3.org/TR/REC-CSS2/selector.html
   * Currently UNSUPPORTED are the following selector features:
   * <ul>
   * <li>pseudo-classes (:hover)
   * <li>child selectors (div > h1)
   * <li>adjacent sibling selectors (div + h1)
   * <li>attribute selectors (input[type=submit])
   * </ul>
   */
  class CssSelector_ {
    private noStructuralTyping_goog_cssom_iframe_style_CssSelector_ : any;
    parts ? : ಠ_ಠ.clutz.goog.cssom.iframe.style.CssSelectorPart_ [] ;
    /**
     * Tests to see what part of a DOM element hierarchy would be matched by
     * this selector, and returns the indexes of the matching element and matching
     * selector part.
     * <p>
     * For example, given this hierarchy:
     * document > html > body > div.content > div.sidebar > p
     * and this CSS selector:
     * body div.sidebar h1
     * This would return {elementIndex: 4, selectorPartIndex: 1},
     * indicating that the element at index 4 matched
     * the css selector at index 1.
     * </p>
     * @param elementAncestry Object representing an element and its ancestors.
     */
    matchElementAncestry (elementAncestry : ಠ_ಠ.clutz.goog.cssom.iframe.style.NodeAncestry_ | null ) : GlobalObject | null ;
  }
  /**
   * Represents an element and all its parent/ancestor nodes.
   * This class exists as an optimization so we run tests on an element
   * hierarchy multiple times without walking the dom each time.
   */
  class NodeAncestry_ {
    private noStructuralTyping_goog_cssom_iframe_style_NodeAncestry_ : any;
    /**
     * Array of nodes in order of hierarchy from the top of the document
     * to the node passed to the constructor
     */
    nodes : ( Node | null ) [] | null ;
    uid : number ;
  }
  /**
   * Generates a set of CSS properties that can be used to make another
   * element's background look like the background of a given element.
   * This is useful when you want to copy the CSS context of an element,
   * but the element's background is transparent. In the original context
   * you would see the ancestor's backround color/image showing through,
   * but in the new context there might be a something different underneath.
   * Note that this assumes the element you're copying context from has a
   * fairly standard positioning/layout - it assumes that when the element
   * has a transparent background what you're going to see through it is its
   * ancestors.
   * @param element The element from which to copy background styles.
   */
  function getBackgroundContext (element : GlobalElement | null ) : GlobalObject ;
  /**
   * Reads the current css rules from element's document, and returns them
   * rewriting selectors so that any rules that formerly applied to element will
   * be applied to doc.body. This makes it possible to replace a block in a page
   * with an iframe and preserve the css styling of the contents.
   * @param element The element for which context should be calculated.
   * @param opt_forceRuleSetCacheUpdate Flag to force the internal cache of rulesets to refresh itself before we read the same.
   * @param opt_copyBackgroundContext Flag indicating that if the `element` has a transparent background, background rules from the nearest ancestor element(s) that have background-color and/or background-image set should be copied.
   */
  function getElementContext (element : GlobalElement | null , opt_forceRuleSetCacheUpdate ? : boolean , opt_copyBackgroundContext ? : boolean ) : string ;
  /**
   * Throw away all cached dom information. Call this if you've modified
   * the structure or class/id attributes of your document and you want
   * to recalculate the currently applied CSS rules.
   */
  function resetDomCache ( ) : void ;
}
declare module 'goog:goog.cssom.iframe.style' {
  import style = ಠ_ಠ.clutz.goog.cssom.iframe.style;
  export = style;
}
