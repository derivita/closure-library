//!! generated by clutz.
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML ellipse elements.
   * This is an implementation of the goog.graphics.EllipseElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlEllipseElement extends ಠ_ಠ.clutz.goog.graphics.EllipseElement {
    private noStructuralTyping_goog_graphics_VmlEllipseElement : any;
    /**
     * Thin wrapper for VML ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * X coordinate of the ellipse center.
     */
    cx : number ;
    /**
     * Y coordinate of the ellipse center.
     */
    cy : number ;
    id_ : any ;
    /**
     * Radius length for the x-axis.
     */
    rx : number ;
    /**
     * Radius length for the y-axis.
     */
    ry : number ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (cx : number , cy : number ) : void ;
    /**
     * Update the radius of the ellipse.
     * @param rx Center X coordinate.
     * @param ry Center Y coordinate.
     */
    setRadius (rx : number , ry : number ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlEllipseElement' {
  import VmlEllipseElement = ಠ_ಠ.clutz.goog.graphics.VmlEllipseElement;
  export default VmlEllipseElement;
}
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML group elements.
   * This is an implementation of the goog.graphics.GroupElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlGroupElement extends ಠ_ಠ.clutz.goog.graphics.GroupElement {
    private noStructuralTyping_goog_graphics_VmlGroupElement : any;
    /**
     * Thin wrapper for VML group elements.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null ) ;
    id_ : any ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (width : number | string , height : number | string ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlGroupElement' {
  import VmlGroupElement = ಠ_ಠ.clutz.goog.graphics.VmlGroupElement;
  export default VmlGroupElement;
}
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML image elements.
   * This is an implementation of the goog.graphics.ImageElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlImageElement extends ಠ_ಠ.clutz.goog.graphics.ImageElement {
    private noStructuralTyping_goog_graphics_VmlImageElement : any;
    /**
     * Thin wrapper for VML image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null ) ;
    id_ : any ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : void ;
    /**
     * Update the size of the image.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : void ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlImageElement' {
  import VmlImageElement = ಠ_ಠ.clutz.goog.graphics.VmlImageElement;
  export default VmlImageElement;
}
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML path elements.
   * This is an implementation of the goog.graphics.PathElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlPathElement extends ಠ_ಠ.clutz.goog.graphics.PathElement {
    private noStructuralTyping_goog_graphics_VmlPathElement : any;
    /**
     * Thin wrapper for VML path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : any ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlPathElement' {
  import VmlPathElement = ಠ_ಠ.clutz.goog.graphics.VmlPathElement;
  export default VmlPathElement;
}
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML rectangle elements.
   * This is an implementation of the goog.graphics.RectElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlRectElement extends ಠ_ಠ.clutz.goog.graphics.RectElement {
    private noStructuralTyping_goog_graphics_VmlRectElement : any;
    /**
     * Thin wrapper for VML rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : any ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : void ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlRectElement' {
  import VmlRectElement = ಠ_ಠ.clutz.goog.graphics.VmlRectElement;
  export default VmlRectElement;
}
// Generated from graphics/vmlelement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for VML text elements.
   * This is an implementation of the goog.graphics.TextElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class VmlTextElement extends ಠ_ಠ.clutz.goog.graphics.TextElement {
    private noStructuralTyping_goog_graphics_VmlTextElement : any;
    /**
     * Thin wrapper for VML text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.VmlGraphics | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    id_ : any ;
    getElement ( ) : GlobalElement | null ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (text : string ) : void ;
  }
}
declare module 'goog:goog.graphics.VmlTextElement' {
  import VmlTextElement = ಠ_ಠ.clutz.goog.graphics.VmlTextElement;
  export default VmlTextElement;
}
