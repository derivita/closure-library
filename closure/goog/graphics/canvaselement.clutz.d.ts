//!! generated by clutz.
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas ellipse elements.
   * This is an implementation of the goog.graphics.EllipseElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasEllipseElement extends ಠ_ಠ.clutz.goog.graphics.EllipseElement {
    private noStructuralTyping_goog_graphics_CanvasEllipseElement : any;
    /**
     * Thin wrapper for canvas ellipse elements.
     * This is an implementation of the goog.graphics.EllipseElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , cx : number , cy : number , rx : number , ry : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the ellipse.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the center point of the ellipse.
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     */
    setCenter (cx : number , cy : number ) : void ;
    /**
     * Update the radius of the ellipse.
     * @param rx Center X coordinate.
     * @param ry Center Y coordinate.
     */
    setRadius (rx : number , ry : number ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasEllipseElement' {
  import CanvasEllipseElement = ಠ_ಠ.clutz.goog.graphics.CanvasEllipseElement;
  export default CanvasEllipseElement;
}
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Object representing a group of objects in a canvas.
   * This is an implementation of the goog.graphics.GroupElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasGroupElement extends ಠ_ಠ.clutz.goog.graphics.GroupElement {
    private noStructuralTyping_goog_graphics_CanvasGroupElement : any;
    /**
     * Object representing a group of objects in a canvas.
     * This is an implementation of the goog.graphics.GroupElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param graphics The graphics creating this element.
     */
    constructor (graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null ) ;
    /**
     * Append a child to the group.  Does not draw it
     * @param element The child to append.
     */
    appendChild (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    /**
     * Remove all drawing elements from the group.
     */
    clear ( ) : void ;
    /**
     * Draw the group.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Removes an element from the group.
     * @param elem the element to remove.
     */
    removeElement (elem : ಠ_ಠ.clutz.goog.graphics.Element ) : void ;
    /**
     * Set the size of the group element.
     * @param width The width of the group element.
     * @param height The height of the group element.
     */
    setSize (width : number | string , height : number | string ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasGroupElement' {
  import CanvasGroupElement = ಠ_ಠ.clutz.goog.graphics.CanvasGroupElement;
  export default CanvasGroupElement;
}
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas image elements.
   * This is an implementation of the goog.graphics.ImageElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasImageElement extends ಠ_ಠ.clutz.goog.graphics.ImageElement {
    private noStructuralTyping_goog_graphics_CanvasImageElement : any;
    /**
     * Thin wrapper for canvas image elements.
     * This is an implementation of the goog.graphics.ImageElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param w Width of rectangle.
     * @param h Height of rectangle.
     * @param src Source of the image.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , x : number , y : number , w : number , h : number , src : string ) ;
    /**
     * Draw the image.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the position of the image.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : void ;
    /**
     * Update the size of the image.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : void ;
    /**
     * Update the source of the image.
     * @param src Source of the image.
     */
    setSource (src : string ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasImageElement' {
  import CanvasImageElement = ಠ_ಠ.clutz.goog.graphics.CanvasImageElement;
  export default CanvasImageElement;
}
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas path elements.
   * This is an implementation of the goog.graphics.PathElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasPathElement extends ಠ_ಠ.clutz.goog.graphics.PathElement {
    private noStructuralTyping_goog_graphics_CanvasPathElement : any;
    /**
     * Thin wrapper for canvas path elements.
     * This is an implementation of the goog.graphics.PathElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param path The path object to draw.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , path : ಠ_ಠ.clutz.goog.graphics.Path , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the path.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the underlying path.
     * @param path The path object to draw.
     */
    setPath (path : ಠ_ಠ.clutz.goog.graphics.Path ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasPathElement' {
  import CanvasPathElement = ಠ_ಠ.clutz.goog.graphics.CanvasPathElement;
  export default CanvasPathElement;
}
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas rectangle elements.
   * This is an implementation of the goog.graphics.RectElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasRectElement extends ಠ_ಠ.clutz.goog.graphics.RectElement {
    private noStructuralTyping_goog_graphics_CanvasRectElement : any;
    /**
     * Thin wrapper for canvas rectangle elements.
     * This is an implementation of the goog.graphics.RectElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param w Width of rectangle.
     * @param h Height of rectangle.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics | null , x : number , y : number , w : number , h : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the rectangle.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Update the position of the rectangle.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     */
    setPosition (x : number , y : number ) : void ;
    /**
     * Update the size of the rectangle.
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     */
    setSize (width : number , height : number ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasRectElement' {
  import CanvasRectElement = ಠ_ಠ.clutz.goog.graphics.CanvasRectElement;
  export default CanvasRectElement;
}
// Generated from graphics/canvaselement.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Thin wrapper for canvas text elements.
   * This is an implementation of the goog.graphics.TextElement interface.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class CanvasTextElement extends ಠ_ಠ.clutz.goog.graphics.TextElement {
    private noStructuralTyping_goog_graphics_CanvasTextElement : any;
    /**
     * Thin wrapper for canvas text elements.
     * This is an implementation of the goog.graphics.TextElement interface.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param graphics The graphics creating this element.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alignment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke The stroke to use for this element.
     * @param fill The fill to use for this element.
     */
    constructor (graphics : ಠ_ಠ.clutz.goog.graphics.CanvasGraphics , text : string , x1 : number , y1 : number , x2 : number , y2 : number , align : string | null , font : ಠ_ಠ.clutz.goog.graphics.Font , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) ;
    /**
     * Draw the text.  Should be treated as package scope.
     * @param ctx The context to draw the element in.
     */
    draw (ctx : CanvasRenderingContext2D | null ) : void ;
    /**
     * Sets the fill for this element.
     * @param fill The fill object.
     */
    setFill (fill : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : void ;
    /**
     * Sets the stroke for this element.
     * @param stroke The stroke object.
     */
    setStroke (stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : void ;
    /**
     * Update the displayed text of the element.
     * @param text The text to draw.
     */
    setText (text : string ) : void ;
  }
}
declare module 'goog:goog.graphics.CanvasTextElement' {
  import CanvasTextElement = ಠ_ಠ.clutz.goog.graphics.CanvasTextElement;
  export default CanvasTextElement;
}
