//!! generated by clutz.
// Generated from graphics/abstractgraphics.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Base class for the different graphics. You should never construct objects
   * of this class. Instead us goog.graphics.createGraphics
   */
  class AbstractGraphics extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_graphics_AbstractGraphics : any;
    /**
     * Base class for the different graphics. You should never construct objects
     * of this class. Instead us goog.graphics.createGraphics
     * @param width The width in pixels or percent.
     * @param height The height in pixels or percent.
     * @param opt_coordWidth Optional coordinate system width - if omitted or null, defaults to same as width.
     * @param opt_coordHeight Optional coordinate system height - if omitted or null, defaults to same as height.
     * @param opt_domHelper The DOM helper object for the document we want to render in.
     */
    constructor (width : number | string , height : number | string , opt_coordWidth ? : number | null , opt_coordHeight ? : number | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Height of coordinate system in units.
     */
    protected coordHeight : number | null ;
    /**
     * Width of coordinate system in units.
     */
    protected coordWidth : number | null ;
    /**
     * Height of graphics in pixels or percentage points.
     */
    protected height : number | string ;
    /**
     * Width of graphics in pixels or percentage points.
     */
    protected width : number | string ;
    /**
     * The root level group element.
     */
    protected canvasElement : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    clear ( ...a : any [] ) : any ;
    /**
     * Left coordinate of the view box
     */
    protected coordLeft : number ;
    /**
     * Top coordinate of the view box
     */
    protected coordTop : number ;
    /**
     * Create an empty group of drawing elements.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    createGroup (a ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    /**
     * Create an empty path.
     */
    createPath ( ) : ಠ_ಠ.clutz.goog.graphics.Path ;
    /**
     * Draw a circle
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param r Radius length.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawCircle (cx : number , cy : number , r : number , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement | null ;
    /**
     * Draw an ellipse
     * @param cx Center X coordinate.
     * @param cy Center Y coordinate.
     * @param rx Radius length for the x-axis.
     * @param ry Radius length for the y-axis.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawEllipse (a : number , b : number , c : number , d : number , e : ಠ_ಠ.clutz.goog.graphics.Stroke | null , f : ಠ_ಠ.clutz.goog.graphics.Fill | null , g ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.EllipseElement | null ;
    /**
     * Draw a path.
     * @param path The path object to draw.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawPath (a : ಠ_ಠ.clutz.goog.graphics.Path , b : ಠ_ಠ.clutz.goog.graphics.Stroke | null , c : ಠ_ಠ.clutz.goog.graphics.Fill | null , d ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.PathElement | null ;
    /**
     * Draw a rectangle
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawRect (a : number , b : number , c : number , d : number , e : ಠ_ಠ.clutz.goog.graphics.Stroke | null , f : ಠ_ಠ.clutz.goog.graphics.Fill | null , g ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.RectElement | null ;
    /**
     * Draw a text string within a rectangle (drawing is horizontal)
     * @param text The text to draw.
     * @param x X coordinate (left).
     * @param y Y coordinate (top).
     * @param width Width of rectangle.
     * @param height Height of rectangle.
     * @param align Horizontal alignment: left (default), center, right.
     * @param vAlign Vertical alignment: top (default), center, bottom.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawText (text : string , x : number , y : number , width : number , height : number , align : string , vAlign : string , font : ಠ_ಠ.clutz.goog.graphics.Font | null , stroke : ಠ_ಠ.clutz.goog.graphics.Stroke | null , fill : ಠ_ಠ.clutz.goog.graphics.Fill | null , opt_group ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement | null ;
    /**
     * Draw a text string vertically centered on a given line.
     * @param text The text to draw.
     * @param x1 X coordinate of start of line.
     * @param y1 Y coordinate of start of line.
     * @param x2 X coordinate of end of line.
     * @param y2 Y coordinate of end of line.
     * @param align Horizontal alingnment: left (default), center, right.
     * @param font Font describing the font properties.
     * @param stroke Stroke object describing the stroke.
     * @param fill Fill object describing the fill.
     * @param opt_group The group wrapper element to append to. If not specified, appends to the main canvas.
     */
    drawTextOnLine (a : string , b : number , c : number , d : number , e : number , f : string , g : ಠ_ಠ.clutz.goog.graphics.Font | null , h : ಠ_ಠ.clutz.goog.graphics.Stroke | null , i : ಠ_ಠ.clutz.goog.graphics.Fill | null , j ? : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ) : ಠ_ಠ.clutz.goog.graphics.TextElement | null ;
    getCanvasElement ( ) : ಠ_ಠ.clutz.goog.graphics.GroupElement | null ;
    getCoordOrigin ( ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
    getCoordSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getPixelScaleX ( ) : number ;
    getPixelScaleY ( ) : number ;
    getPixelSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Measure and return the width (in pixels) of a given text string.
     * Text measurement is needed to make sure a text can fit in the allocated
     * area. The way text length is measured is by writing it into a div that is
     * after the visible area, measure the div width, and immediately erase the
     * written value.
     * @param text The text string to measure.
     * @param font The font object describing the font style.
     */
    getTextWidth (a : string , b : ಠ_ಠ.clutz.goog.graphics.Font | null ) : number ;
    isDomClonable ( ) : boolean ;
    /**
     * Remove a single drawing element from the surface.  The default implementation
     * assumes a DOM based drawing surface.
     * @param element The element to remove.
     */
    removeElement (element : ಠ_ಠ.clutz.goog.graphics.Element | null ) : void ;
    resume ( ) : void ;
    /**
     * Changes the coordinate system position.
     * @param left The coordinate system left bound.
     * @param top The coordinate system top bound.
     */
    setCoordOrigin (a : number , b : number ) : any ;
    /**
     * Changes the coordinate size.
     * @param coordWidth The coordinate width.
     * @param coordHeight The coordinate height.
     */
    setCoordSize (coordWidth : number , coordHeight : number ) : void ;
    /**
     * Set the affine transform of an element.
     * @param element The element wrapper.
     * @param affineTransform The transformation applied to this element.
     */
    setElementAffineTransform (a : ಠ_ಠ.clutz.goog.graphics.Element , b : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : any ;
    /**
     * Sets the fill for the given element.
     * @param element The element wrapper.
     * @param fill The fill object.
     */
    setElementFill (a : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , b : ಠ_ಠ.clutz.goog.graphics.Fill | null ) : any ;
    /**
     * Sets the stroke for the given element.
     * @param element The element wrapper.
     * @param stroke The stroke object.
     */
    setElementStroke (a : ಠ_ಠ.clutz.goog.graphics.StrokeAndFillElement | null , b : ಠ_ಠ.clutz.goog.graphics.Stroke | null ) : any ;
    /**
     * Set the transformation of an element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setElementAffineTransform.
     * @param element The element wrapper.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param angle The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setElementTransform (a : ಠ_ಠ.clutz.goog.graphics.Element | null , b : number , c : number , d : number , e : number , f : number ) : any ;
    /**
     * Change the size of the canvas.
     * @param pixelWidth The width in pixels.
     * @param pixelHeight The height in pixels.
     */
    setSize (a : number , b : number ) : any ;
    suspend ( ) : void ;
  }
}
declare module 'goog:goog.graphics.AbstractGraphics' {
  import AbstractGraphics = ಠ_ಠ.clutz.goog.graphics.AbstractGraphics;
  export default AbstractGraphics;
}
