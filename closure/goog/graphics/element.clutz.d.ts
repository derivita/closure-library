//!! generated by clutz.
// Generated from graphics/element.js
declare namespace ಠ_ಠ.clutz.goog.graphics {
  /**
   * Base class for a thin wrapper around the DOM element returned from
   * the different draw methods of the graphics.
   * You should not construct objects from this constructor. The graphics
   * will return the object for you.
   */
  class Element extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_graphics_Element : any;
    /**
     * Base class for a thin wrapper around the DOM element returned from
     * the different draw methods of the graphics.
     * You should not construct objects from this constructor. The graphics
     * will return the object for you.
     * @param element The DOM element to wrap.
     * @param graphics The graphics creating this element.
     */
    constructor (element : GlobalElement | null , graphics : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ) ;
    addEventListener (type ? : any , handler ? : any , opt_capture ? : any , opt_handlerScope ? : any ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the underlying object.
     */
    getElement ( ) : GlobalElement | null ;
    /**
     * Returns the graphics.
     */
    getGraphics ( ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ;
    getTransform ( ) : ಠ_ಠ.clutz.goog.graphics.AffineTransform ;
    removeEventListener (type ? : any , handler ? : any , opt_capture ? : any , opt_handlerScope ? : any ) : void ;
    /**
     * Set the affine transform of the element.
     * @param affineTransform The transformation applied to this element.
     */
    setTransform (affineTransform : ಠ_ಠ.clutz.goog.graphics.AffineTransform ) : void ;
    /**
     * Set the translation and rotation of the element.
     *
     * If a more general affine transform is needed than this provides
     * (e.g. skew and scale) then use setTransform.
     * @param x The x coordinate of the translation transform.
     * @param y The y coordinate of the translation transform.
     * @param rotate The angle of the rotation transform.
     * @param centerX The horizontal center of the rotation transform.
     * @param centerY The vertical center of the rotation transform.
     */
    setTransformation (x : number , y : number , rotate : number , centerX : number , centerY : number ) : void ;
  }
}
declare module 'goog:goog.graphics.Element' {
  import Element = ಠ_ಠ.clutz.goog.graphics.Element;
  export default Element;
}
