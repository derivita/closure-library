//!! generated by clutz.
// Generated from graphics/ext/element.js
declare namespace ಠ_ಠ.clutz.goog.graphics.ext {
  /**
   * Base class for a wrapper around the goog.graphics wrapper that enables
   * more advanced functionality.
   */
  class Element extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_graphics_ext_Element : any;
    /**
     * Base class for a wrapper around the goog.graphics wrapper that enables
     * more advanced functionality.
     * @param group Parent for this element.
     * @param wrapper The thin wrapper to wrap.
     */
    constructor (group : ಠ_ಠ.clutz.goog.graphics.ext.Group | null , wrapper : ಠ_ಠ.clutz.goog.graphics.Element | null ) ;
    /**
     * Overridable function for subclass specific parent dependency.
     */
    protected checkParentDependent ( ) : boolean ;
    disposeInternal ( ) : void ;
    getBottom ( ) : number ;
    getCenter ( ) : number ;
    getGraphics ( ) : ಠ_ಠ.clutz.goog.graphics.ext.Element | null | ಠ_ಠ.clutz.goog.graphics.ext.Graphics ;
    /**
     * Returns the graphics implementation.
     */
    protected getGraphicsImplementation ( ) : ಠ_ಠ.clutz.goog.graphics.AbstractGraphics | null ;
    getHeight ( ) : number ;
    getLeft ( ) : number ;
    getMaxX ( ) : number ;
    getMaxY ( ) : number ;
    getMiddle ( ) : number ;
    getMinHeight ( ) : number ;
    getMinWidth ( ) : number ;
    getParent ( ) : ಠ_ಠ.clutz.goog.graphics.ext.Group | null | undefined ;
    getPixelScaleX ( ) : number ;
    getPixelScaleY ( ) : number ;
    getRight ( ) : number ;
    getRotation ( ) : number ;
    getTop ( ) : number ;
    getWidth ( ) : number ;
    getWrapper ( ) : ಠ_ಠ.clutz.goog.graphics.Element | null ;
    /**
     * Returns whether this element's bounds depend on its parents.
     *
     * This function should be treated as if it has package scope.
     */
    isParentDependent ( ) : boolean ;
    isPendingTransform ( ) : boolean ;
    parentTransform ( ) : void ;
    /**
     * Overridable function for subclass specific reset.
     */
    protected redraw ( ) : void ;
    reset ( ) : void ;
    /**
     * Sets the bottom coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element.
     * @param bottom The bottom coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setBottom (bottom : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Shortcut for setting the left, top, width, and height.
     * @param left The left coordinate.
     * @param top The top coordinate.
     * @param width The new width value.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setBounds (left : string | number , top : string | number , width : string | number , height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the center coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param center The center coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setCenter (center : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the height of the element.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setHeight (height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the left coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param left The left coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setLeft (left : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the middle coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element
     * @param middle The middle coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setMiddle (middle : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the minimum height of the element.
     * @param minHeight The minimum height of the element.
     */
    setMinHeight (minHeight : string | number ) : void ;
    /**
     * Sets the minimum width of the element.
     * @param minWidth The minimum width of the element.
     */
    setMinWidth (minWidth : string | number ) : void ;
    /**
     * Shortcut for setting the left and top position.
     * @param left The left coordinate.
     * @param top The top coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setPosition (left : string | number , top : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the right coordinate of the element.  Overwrites any previous value of
     * left, center, or right for this element.
     * @param right The right coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setRight (right : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Set the rotation of this element.
     * @param angle The angle of rotation, in degrees.
     */
    setRotation (angle : number ) : void ;
    /**
     * Shortcut for setting the width and height.
     * @param width The new width value.
     * @param height The new height value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setSize (width : string | number , height : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the top coordinate of the element.  Overwrites any previous value of
     * top, middle, or bottom for this element.
     * @param top The top coordinate.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setTop (top : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Sets the width of the element.
     * @param width The new width value.
     * @param opt_chain Optional flag to specify this function is part of a chain of calls and therefore transformations should be set as pending but not yet performed.
     */
    setWidth (width : string | number , opt_chain ? : boolean ) : void ;
    /**
     * Performs a pending transform.
     */
    protected transform ( ) : void ;
  }
}
// Generated from graphics/ext/element.js
declare namespace ಠ_ಠ.clutz.goog.graphics.ext.Element {
  class Position_ {
    private noStructuralTyping_goog_graphics_ext_Element_Position_ : any;
    element_ : ಠ_ಠ.clutz.goog.graphics.ext.Element | null ;
    horizontal_ : boolean ;
    getEnd ( ) : number ;
    getMaxPosition ( ) : number ;
    getMiddle ( ) : number ;
    getMinSize ( ) : number ;
    getSize ( ) : number ;
    getStart ( ) : number ;
    isParentDependent ( ) : boolean ;
    resetCache ( ) : void ;
    /**
     * Sets the minimum width/height of the element.
     * @param minSize The minimum width/height of the element.
     */
    setMinSize (minSize : string | number ) : void ;
    /**
     * Sets the position, either as a left/top, center/middle, or right/bottom
     * value.
     * @param value The value of the coordinate.
     * @param type The type of the coordinate.
     */
    setPosition (value : number | string , type : PrivateType ) : void ;
    /**
     * Sets the width/height of the element.
     * @param size The width/height of the element.
     */
    setSize (size : string | number ) : boolean ;
  }
}
declare module 'goog:goog.graphics.ext.Element' {
  import Element = ಠ_ಠ.clutz.goog.graphics.ext.Element;
  export default Element;
}
