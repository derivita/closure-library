//!! generated by clutz.
// Generated from messaging/abstractchannel.js
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates an abstract message channel.
   */
  class AbstractChannel extends ಠ_ಠ.clutz.goog.Disposable implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    private noStructuralTyping_goog_messaging_AbstractChannel : any;
    /**
     * Creates an abstract message channel.
     */
    constructor ( ) ;
    /**
     * Immediately calls opt_connectCb if given, and is otherwise a no-op. If
     * subclasses have configuration that needs to happen before the channel is
     * connected, they should override this and {@link #isConnected}.
     */
    connect (opt_connectCb ? : any ) : void ;
    /**
     * Converts the message payload into the format expected by the registered
     * service (either JSON or string).
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     * @param objectPayload Whether the service expects an object or a plain string.
     */
    protected decodePayload (serviceName : string , payload : string | GlobalObject , objectPayload : boolean ) : string | GlobalObject | null ;
    /**
     * Delivers a message to the appropriate service. This is meant to be called by
     * subclasses when they receive messages.
     *
     * This method takes into account both explicitly-registered and default
     * services, as well as making sure that JSON payloads are decoded when
     * necessary. If the subclass is capable of passing objects as payloads, those
     * objects can be passed in to this method directly. Otherwise, the (potentially
     * JSON-encoded) strings should be passed in.
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     */
    protected deliver (serviceName : string , payload : string | GlobalObject ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Find the service object for a given service name. If there's no service
     * explicitly registered, but there is a default service, a service object is
     * constructed for it.
     * @param serviceName The name of the service receiving the message.
     * @param payload The contents of the message.
     */
    protected getService (serviceName : string , payload : string | GlobalObject ) : { callback : (a : string | GlobalObject ) => any , objectPayload : boolean } | null ;
    /**
     * Always returns true. If subclasses have configuration that needs to happen
     * before the channel is connected, they should override this and
     * {@link #connect}.
     */
    isConnected ( ) : any ;
    /**
     * Logger for this class.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    registerDefaultService (callback ? : any ) : void ;
    registerService (serviceName ? : any , callback ? : any , opt_objectPayload ? : any ) : void ;
    send ( ...a : any [] ) : any ;
  }
}
declare module 'goog:goog.messaging.AbstractChannel' {
  import AbstractChannel = ಠ_ಠ.clutz.goog.messaging.AbstractChannel;
  export default AbstractChannel;
}
