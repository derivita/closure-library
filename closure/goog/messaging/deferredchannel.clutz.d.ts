//!! generated by clutz.
// Generated from messaging/deferredchannel.js
declare namespace ಠ_ಠ.clutz.goog.messaging {
  /**
   * Creates a new DeferredChannel, which wraps a deferred MessageChannel and
   * enqueues messages to be sent once the wrapped channel is resolved.
   */
  class DeferredChannel extends ಠ_ಠ.clutz.goog.Disposable implements ಠ_ಠ.clutz.goog.messaging.MessageChannel {
    private noStructuralTyping_goog_messaging_DeferredChannel : any;
    /**
     * Creates a new DeferredChannel, which wraps a deferred MessageChannel and
     * enqueues messages to be sent once the wrapped channel is resolved.
     * @param deferredChannel The underlying deferred MessageChannel.
     */
    constructor (deferredChannel : ಠ_ಠ.clutz.goog.async.Deferred < ಠ_ಠ.clutz.goog.messaging.MessageChannel > ) ;
    cancel ( ) : void ;
    connect (opt_connectCb ? : any ) : void ;
    disposeInternal ( ) : void ;
    isConnected ( ) : any ;
    registerDefaultService (callback ? : any ) : void ;
    registerService (serviceName ? : any , callback ? : any , opt_objectPayload ? : any ) : void ;
    send (serviceName ? : any , payload ? : any ) : void ;
  }
}
declare module 'goog:goog.messaging.DeferredChannel' {
  import DeferredChannel = ಠ_ಠ.clutz.goog.messaging.DeferredChannel;
  export default DeferredChannel;
}
