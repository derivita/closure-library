//!! generated by clutz.
// Generated from i18n/datetimeformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Construct a DateTimeFormat object based on current locale.
   */
  class DateTimeFormat {
    private noStructuralTyping_goog_i18n_DateTimeFormat : any;
    /**
     * Construct a DateTimeFormat object based on current locale.
     * @param pattern pattern specification or pattern type.
     * @param opt_dateTimeSymbols Optional symbols to use for this instance rather than the global symbols. You can use some of the predefined SHORT / MEDIUM / LONG / FULL patterns, or the common patterns defined in goog.i18n.DateTimePatterns. Examples: <code><pre> let fmt = new goog.i18n.DateTimeFormat( goog.i18n.DateTimeFormat.Format.FULL_DATE); let fmt = new goog.i18n.DateTimeFormat( goog.i18n.DateTimePatterns.MONTH_DAY_YEAR_MEDIUM); </pre></code> {@see goog.i18n.DateTimeFormat.Format} {@see goog.i18n.DateTimePatterns}
     */
    constructor (pattern : string | number , opt_dateTimeSymbols ? : GlobalObject ) ;
    patternParts_ : any [] ;
    /**
     * Format the given date object according to preset pattern and current locale.
     * @param date The Date object that is being formatted.
     * @param opt_timeZone optional, if specified, time related fields will be formatted based on its setting. When this field is not specified, "undefined" will be pass around and those function that really need time zone service will create a default one.
     */
    format (date : ಠ_ಠ.clutz.goog.date.DateLike | null | undefined , opt_timeZone ? : ಠ_ಠ.clutz.goog.i18n.TimeZone | null ) : string ;
    static isEnforceAsciiDigits ( ) : boolean ;
    /**
     * Localizes a string potentially containing numbers, replacing ASCII digits
     * with native digits if specified so by the locale. Leaves other characters.
     * @param input the string to be localized, using ASCII digits.
     * @param opt_dateTimeSymbols Optional symbols to use rather than the global symbols.
     */
    static localizeNumbers (input : number | string , opt_dateTimeSymbols ? : GlobalObject ) : string ;
    /**
     * Sets if the usage of Ascii digits in formatting should be enforced in
     * formatted date/time even for locales where native digits are indicated.
     * Also sets whether to remove RLM unicode control characters when using
     * standard enumerated patterns (they exist e.g. in standard d/M/y for Arabic).
     * Production code should call this once before any `DateTimeFormat`
     * object is instantiated.
     * Caveats:
     * * Enforcing ASCII digits affects all future formatting by new or existing
     * `DateTimeFormat` objects.
     * * Removal of RLM characters only applies to `DateTimeFormat` objects
     * instantiated after this call.
     * @param enforceAsciiDigits Whether Ascii digits should be enforced.
     */
    static setEnforceAsciiDigits (enforceAsciiDigits : boolean ) : void ;
  }
}
declare module 'goog:goog.i18n.DateTimeFormat' {
  import DateTimeFormat = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat;
  export default DateTimeFormat;
}
// Generated from i18n/datetimeformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n.DateTimeFormat {
  /**
   * Enum to identify predefined Date/Time format pattern. The format pattern to
   * output mapping can be found at go/closure-localization#fconst.
   */
  /**
   * Enum to identify predefined Date/Time format pattern. The format pattern to
   * output mapping can be found at go/closure-localization#fconst.
   */
  enum Format {
    FULL_DATE = 0.0 ,
    FULL_DATETIME = 8.0 ,
    FULL_TIME = 4.0 ,
    LONG_DATE = 1.0 ,
    LONG_DATETIME = 9.0 ,
    LONG_TIME = 5.0 ,
    MEDIUM_DATE = 2.0 ,
    MEDIUM_DATETIME = 10.0 ,
    MEDIUM_TIME = 6.0 ,
    SHORT_DATE = 3.0 ,
    SHORT_DATETIME = 11.0 ,
    SHORT_TIME = 7.0 ,
    WEEKDAY_MONTH_DAY_FULL = 12.0 ,
  }
}
declare module 'goog:goog.i18n.DateTimeFormat.Format' {
  import Format = ಠ_ಠ.clutz.goog.i18n.DateTimeFormat.Format;
  export default Format;
}
