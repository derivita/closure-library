//!! generated by clutz.
// Generated from i18n/numberformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n {
  /**
   * Constructor of NumberFormat.
   */
  class NumberFormat {
    private noStructuralTyping_goog_i18n_NumberFormat : any;
    /**
     * Constructor of NumberFormat.
     * @param pattern The number that indicates a predefined number format pattern.
     * @param opt_currency Optional international currency code. This determines the currency code/symbol used in format/parse. If not given, the currency code for the current locale will be used.
     * @param opt_currencyStyle currency style, value defined in goog.i18n.NumberFormat.CurrencyStyle. If not given, the currency style for the current locale will be used.
     * @param opt_symbols Optional number format symbols map, analogous to goog.i18n.NumberFormatSymbols. If present, this overrides the symbols from the current locale, such as the percent sign and minus sign.
     */
    constructor (pattern : number | string , opt_currency ? : string , opt_currencyStyle ? : number , opt_symbols ? : ಠ_ಠ.clutz.goog.i18n.NumberFormatSymbolsType.Type ) ;
    /**
     * Checks options to see if the native formatter needs to be
     * remade.
     */
    NativeOptionsChanged_ ( ) : boolean ;
    /**
     * Formats a Number to produce a string.
     * @param number The Number to be formatted.
     */
    format (number : number ) : string ;
    /**
     * Gets the number on which compact formatting is currently based, or null if
     * no such number is set. See setBaseFormatting() for more information.
     */
    getBaseFormatting ( ) : number | null ;
    /**
     * Gets maximum number of fraction digits.
     */
    getMaximumFractionDigits ( ) : number ;
    /**
     * Gets minimum number of fraction digits.
     */
    getMinimumFractionDigits ( ) : number ;
    /**
     * Gets number of significant digits to show. Only fractions will be rounded.
     */
    getSignificantDigits ( ) : number ;
    /**
     * Checks if the currency symbol comes before the value ($12) or after (12$)
     * Handy for applications that need to have separate UI fields for the currency
     * value and symbol, especially for input: Price: [USD] [123.45]
     * The currency symbol might be a combo box, or a label.
     */
    isCurrencyCodeBeforeValue ( ) : boolean ;
    /**
     * Parses text string to produce a Number.
     *
     * This method attempts to parse text starting from position "opt_pos" if it
     * is given. Otherwise the parse will start from the beginning of the text.
     * When opt_pos presents, opt_pos will be updated to the character next to where
     * parsing stops after the call. If an error occurs, opt_pos won't be updated.
     * @param text The string to be parsed.
     * @param opt_pos Position to pass in and get back.
     */
    parse (text : string , opt_pos ? : number [] | null ) : number ;
    /**
     * Sets a number to base the formatting on when compact style formatting is
     * used. If this is null, the formatting should be based only on the number to
     * be formatting.
     *
     * This base formatting number can be used to format the target number as
     * another number would be formatted. For example, 100,000 is normally formatted
     * as "100K" in the COMPACT_SHORT format. To instead format it as '0.1M', the
     * base number could be set to 1,000,000 in order to force all numbers to be
     * formatted in millions. Similarly, 1,000,000,000 would normally be formatted
     * as '1B' and setting the base formatting number to 1,000,000, would cause it
     * to be formatted instead as '1,000M'.
     * @param baseFormattingNumber The number to base formatting on, or null if formatting should not be based on another number.
     */
    setBaseFormatting (baseFormattingNumber : number | null ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets maximum number of fraction digits.
     * @param max the maximum.
     */
    setMaximumFractionDigits (max : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets minimum number of fraction digits.
     * @param min the minimum.
     */
    setMinimumFractionDigits (min : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets whether trailing fraction zeros should be shown when significantDigits_
     * is positive. If this is true and significantDigits_ is 2, 1 will be formatted
     * as '1.0'.
     * @param showTrailingZeros Whether trailing zeros should be shown.
     */
    setShowTrailingZeros (showTrailingZeros : boolean ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    /**
     * Sets number of significant digits to show. Only fractions will be rounded.
     * Regardless of the number of significant digits set, the number of fractional
     * digits shown will always be capped by the maximum number of fractional digits
     * set on {@link #setMaximumFractionDigits}.
     * @param number The number of significant digits to include.
     */
    setSignificantDigits (number : number ) : ಠ_ಠ.clutz.goog.i18n.NumberFormat ;
    static USE_ECMASCRIPT_I18N_NUMFORMAT : boolean ;
    /**
     * Return if Ascii digits is enforced.
     */
    static isEnforceAsciiDigits ( ) : boolean ;
    /**
     * Set if the usage of Ascii digits in formatting should be enforced.
     * NOTE: This function must be called before constructing NumberFormat.
     * @param doEnforce Boolean value about if Ascii digits should be enforced.
     */
    static setEnforceAsciiDigits (doEnforce : boolean ) : void ;
  }
}
// Generated from i18n/numberformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  type CompactNumberUnit = { divisorBase : number , negative_prefix : string , negative_suffix : string , prefix : string , suffix : string } ;
  /**
   * Compacting styles.
   */
  enum CompactStyle {
    LONG = 2.0 ,
    NONE = 0.0 ,
    SHORT = 1.0 ,
  }
}
declare module 'goog:goog.i18n.NumberFormat' {
  import NumberFormat = ಠ_ಠ.clutz.goog.i18n.NumberFormat;
  export default NumberFormat;
}
// Generated from i18n/numberformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  /**
   * Currency styles.
   */
  /**
   * Currency styles.
   */
  enum CurrencyStyle {
    GLOBAL = 2.0 ,
    LOCAL = 0.0 ,
    PORTABLE = 1.0 ,
  }
}
declare module 'goog:goog.i18n.NumberFormat.CurrencyStyle' {
  import CurrencyStyle = ಠ_ಠ.clutz.goog.i18n.NumberFormat.CurrencyStyle;
  export default CurrencyStyle;
}
// Generated from i18n/numberformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n.NumberFormat {
  /**
   * Standard number formatting patterns.
   */
  /**
   * Standard number formatting patterns.
   */
  enum Format {
    COMPACT_LONG = 6.0 ,
    COMPACT_SHORT = 5.0 ,
    CURRENCY = 4.0 ,
    DECIMAL = 1.0 ,
    PERCENT = 3.0 ,
    SCIENTIFIC = 2.0 ,
  }
}
declare module 'goog:goog.i18n.NumberFormat.Format' {
  import Format = ಠ_ಠ.clutz.goog.i18n.NumberFormat.Format;
  export default Format;
}
