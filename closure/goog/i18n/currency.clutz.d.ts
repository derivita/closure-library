//!! generated by clutz.
// Generated from i18n/currency.js
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * This function will add tier2 currency support. Be default, only tier1
   * (most popular currencies) are supported. If an application really needs
   * to support some of the rarely used currencies, it should call this function
   * before any other functions in this namespace.
   */
  function addTier2Support ( ) : void ;
  /**
   * Modify currency pattern string by adjusting precision for given currency.
   * Standard currency pattern will have 2 digit after decimal point.
   * Examples:
   * $#,##0.00 ->  $#,##0    (precision == 0)
   * $#,##0.00 ->  $#,##0.0  (precision == 1)
   * $#,##0.00 ->  $#,##0.000  (precision == 3)
   * @param pattern currency pattern string.
   * @param currencyCode 3-letter currency code.
   */
  function adjustPrecision (pattern : string , currencyCode : string ) : string ;
  /**
   * Deprecated.
   * Global currency pattern always uses ISO-4217 currency code as prefix. Local
   * currency sign is added if it is different from currency code. Each currency
   * is unique in this form. The negative side is that ISO code looks weird in
   * some countries as people normally do not use it. Local currency sign
   * alleviates the problem, but also makes it a little verbose.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getGlobalCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Return global currency sign string for those applications
   * that want to handle currency sign themselves.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getGlobalCurrencySign (currencyCode : string ) : string ;
  /**
   * Return global currency sign string for those applications
   * that want to handle currency sign themselves.
   *
   * This function does not throw an exception if there is no data for the
   * currency. Instead, it falls back to the ISO code.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getGlobalCurrencySignWithFallback (currencyCode : string ) : string ;
  /**
   * Deprecated.
   * Local currency pattern is the most frequently used pattern in currency's
   * native region. It does not care about how it is distinguished from other
   * currencies.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getLocalCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Returns local currency sign string for those applications that need to
   * handle currency sign separately.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getLocalCurrencySign (currencyCode : string ) : string ;
  /**
   * Returns local currency sign string for those applications that need to
   * handle currency sign separately.
   *
   * This function does not throw an exception if there is no data for the
   * currency. Instead, it falls back to the ISO code.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getLocalCurrencySignWithFallback (currencyCode : string ) : string ;
  /**
   * Deprecated.
   * Portable currency pattern is a compromise between local and global. It is
   * not a mere blend or mid-way between the two. Currency sign is chosen so that
   * it looks familiar to native users. It also has enough information to
   * distinguish itself from other popular currencies in its native region.
   * In this pattern, currency sign symbols that has availability problem in
   * popular fonts are also avoided.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getPortableCurrencyPattern (currencyCode : string ) : string ;
  /**
   * Return portable currency sign string for those applications that need to
   * handle currency sign themselves.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getPortableCurrencySign (currencyCode : string ) : string ;
  /**
   * Return portable currency sign string for those applications that need to
   * handle currency sign themselves.
   *
   * This function does not throw an exception if there is no data for the
   * currency. Instead, it falls back to the ISO code.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function getPortableCurrencySignWithFallback (currencyCode : string ) : string ;
  /**
   * Tests if currency is available.
   *
   * Note: If the currency is not available it might be in the tier2 currency set:
   * {@link goog.i18n.currency.CurrencyInfoTier2}. If that is the case call
   * {@link goog.i18n.currency.addTier2Support} before calling any other function
   * in this namespace.
   * @param currencyCode Currency code to tested.
   */
  function isAvailable (currencyCode : string ) : boolean ;
  /**
   * This function returns the default currency sign's position. Some applications
   * may want to handle currency sign and currency amount separately. This
   * function can be used in such situations to correctly position the currency
   * sign relative to the amount.
   *
   * Use {@link goog.i18n.NumberFormat#isCurrencyCodeBeforeValue} for a locale
   * aware version of this API (recommended). isPrefixSignPosition() returns the
   * default currency sign's position in the currency's default locale (e.g. 'en'
   * for 'USD'), but most commonly the position is needed for the locale in which
   * the number is going to be displayed. For example, in 'fr' 10.10 USD would be
   * displayed as '10,10 $'.
   * @param currencyCode ISO-4217 3-letter currency code.
   */
  function isPrefixSignPosition (currencyCode : string ) : boolean ;
  /**
   * Returns whether the string represents a valid ISO-4217 currency code.
   * @param currencyCode String to check.
   */
  function isValid (currencyCode : string ) : boolean ;
}
declare module 'goog:goog.i18n.currency' {
  import currency = ಠ_ಠ.clutz.goog.i18n.currency;
  export = currency;
}
// Generated from i18n/currency.js
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * Tier 1 currency information.
   *
   * Format of the info array:
   * 0. {number} the sum of "decimal precision", the "space" bit, and the
   * "currency sign last" bit.
   * 1. {string} The global currency sign. See `getGlobalCurrencySign`.
   * 2. {string} The portable currency sign. See `getPortableCurrencySign`.
   *
   * "Decimal precision" is an integer [0..7]; the count of digits to display past
   * the decimal point.
   *
   * "Space" bit mask = 32; whether a space should be inserted between the
   * currency sign and number.
   *
   * "Currency sign last" bit mask = 16; whether the currency sign should be
   * positioned after the number.
   *
   * Examples for info[0]:
   * 0: no precision (0), currency sign first (0), no space (0)
   * 2: two decimals precision (2), currency sign first (0), no space (0)
   * 18: two decimals precision (2), currency sign last (16), no space (0)
   * 50: two decimals precision (2), currency sign last (16), space (32)
   *
   * It's not recommended to read this data directly. Format numbers using
   * {@link goog.i18n.NumberFormat} with
   * {@link goog.i18n.NumberFormat.Format.CURRENCY} instead.
   */
  let CurrencyInfo : { [ /* warning: coerced from ? */ key: string ]: any [] } ;
}
declare module 'goog:goog.i18n.currency.CurrencyInfo' {
  import CurrencyInfo = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfo;
  export default CurrencyInfo;
}
// Generated from i18n/currency.js
declare namespace ಠ_ಠ.clutz.goog.i18n.currency {
  /**
   * Tier 2 currency information.
   *
   * It's not recommended to read this data directly. Format numbers using
   * {@link goog.i18n.NumberFormat} with
   * {@link goog.i18n.NumberFormat.Format.CURRENCY} instead.
   */
  let CurrencyInfoTier2 : { [ /* warning: coerced from ? */ key: string ]: any [] } ;
}
declare module 'goog:goog.i18n.currency.CurrencyInfoTier2' {
  import CurrencyInfoTier2 = ಠ_ಠ.clutz.goog.i18n.currency.CurrencyInfoTier2;
  export default CurrencyInfoTier2;
}
