//!! generated by clutz.
// Generated from i18n/listformat.js
declare namespace ಠ_ಠ.clutz.goog.i18n.listFormat {
  export import ListFormat = ಠ_ಠ.clutz.module$contents$goog$i18n$listFormat_ListFormat ;
  //!! goog.i18n.listFormat.ListFormatStyle aliases enum module$contents$goog$i18n$listFormat_ListFormatStyle
  export import ListFormatStyle = module$contents$goog$i18n$listFormat_ListFormatStyle ;
  //!! goog.i18n.listFormat.ListFormatType aliases enum module$contents$goog$i18n$listFormat_ListFormatType
  export import ListFormatType = module$contents$goog$i18n$listFormat_ListFormatType ;
}
declare module 'goog:goog.i18n.listFormat' {
  import listFormat = ಠ_ಠ.clutz.goog.i18n.listFormat;
  export = listFormat;
}
// Generated from i18n/listformat.js
declare namespace ಠ_ಠ.clutz {
  class module$contents$goog$i18n$listFormat_ListFormat {
    private noStructuralTyping_module$contents$goog$i18n$listFormat_ListFormat : any;
    constructor (listOptions ? : ಠ_ಠ.clutz.module$contents$goog$i18n$listFormat_ListOptions | null ) ;
    /**
     * Formats a list of items in either conjunctive or disjunctive form
     * with locale-specific punctuation and joining words.
     * @param items list of strings to be formatted
     */
    format (items : ( string | number ) [] ) : string ;
  }
}
// Generated from i18n/listformat.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Options bag parameter for constructor.
   */
  type module$contents$goog$i18n$listFormat_ListOptions = { style ? : module$contents$goog$i18n$listFormat_ListFormatStyle , type ? : module$contents$goog$i18n$listFormat_ListFormatType } ;
}
// Generated from i18n/listformat.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Choices for options bag 'type' in ListFormat's constructor.
   */
  /**
   * Choices for options bag 'type' in ListFormat's constructor.
   */
  enum module$contents$goog$i18n$listFormat_ListFormatType {
    AND = 'conjunction' ,
    OR = 'disjunction' ,
    UNIT = 'unit' ,
  }
}
// Generated from i18n/listformat.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Choices for options bag 'style' in ListFormat's constructor,
   * applied for type UNIT.
   */
  /**
   * Choices for options bag 'style' in ListFormat's constructor,
   * applied for type UNIT.
   */
  enum module$contents$goog$i18n$listFormat_ListFormatStyle {
    LONG = 'long' ,
    NARROW = 'narrow' ,
    SHORT = 'short' ,
  }
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$i18n$listFormat {
  export import ListFormatType = ಠ_ಠ.clutz.module$contents$goog$i18n$listFormat_ListFormatType ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$i18n$listFormat {
  export import ListFormatStyle = ಠ_ಠ.clutz.module$contents$goog$i18n$listFormat_ListFormatStyle ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$i18n$listFormat {
  export import ListFormat = ಠ_ಠ.clutz.module$contents$goog$i18n$listFormat_ListFormat ;
}
