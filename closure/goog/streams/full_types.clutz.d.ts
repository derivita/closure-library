//!! generated by clutz.
// Generated from streams/full_types.js
declare namespace ಠ_ಠ.clutz.module$exports$goog$streams$fullTypes {
  /**
   * The implemenation of ReadableStream.
   */
  interface ReadableStream < T = any > extends ಠ_ಠ.clutz.module$exports$goog$streams$liteTypes.ReadableStream < T > , AsyncIterable < T > {
    /**
     * Cancels the ReadableStream with an optional reason.
     * https://streams.spec.whatwg.org/#rs-cancel
     */
    cancel (reason : any ) : Promise < undefined > ;
    /**
     * Returns an AyncIterator over the ReadableStream.
     *
     * If preventCancel is passed as an option, calling the return() method on the
     * iterator will terminate the iterator, but will not cancel the
     * ReadableStream.
     * https://streams.spec.whatwg.org/#rs-get-iterator
     */
    getIterator (a ? : { preventCancel : boolean } ) : AsyncIterator < T > ;
    /**
     * Returns a ReadableStreamDefaultReader that enables reading chunks from
     * the source.
     * https://streams.spec.whatwg.org/#rs-get-reader
     */
    getReader ( ) : ಠ_ಠ.clutz.module$exports$goog$streams$fullTypes.ReadableStreamDefaultReader < T > ;
    /**
     * Returns an Array with two elements, both new ReadableStreams that contain
     * the same data as this ReadableStream. This stream will become permanently
     * locked.
     * https://streams.spec.whatwg.org/#rs-tee
     */
    tee ( ) : ಠ_ಠ.clutz.module$exports$goog$streams$fullTypes.ReadableStream < any > [] ;
  }
  interface ReadableStreamAsyncIterator < T = any > extends AsyncIterator < T > {
    /**
     * Gets the next value from the ReadableStream.
     * https://streams.spec.whatwg.org/#rs-asynciterator-prototype-next
     */
    next ( ) : void ;
    /**
     * Cancels the underlying stream and resolves with the value.
     */
    return (value : any ) : Promise < IteratorResult < T > > ;
  }
  /**
   * The controller for a ReadableStream. Adds cancellation and backpressure.
   */
  interface ReadableStreamDefaultController < T = any > extends ಠ_ಠ.clutz.module$exports$goog$streams$liteTypes.ReadableStreamDefaultController < T > {
    /**
     * The desired size to fill the controlled stream's internal queue.
     * It can be negative if the queue is full.
     * https://streams.spec.whatwg.org/#rs-default-controller-desired-size
     */
    desiredSize : number | null ;
  }
  /**
   * The DefaultReader for a ReadableStream.
   */
  interface ReadableStreamDefaultReader < T = any > extends ಠ_ಠ.clutz.module$exports$goog$streams$liteTypes.ReadableStreamDefaultReader < T > {
    /**
     * Cancels the ReadableStream with an optional reason.
     * https://streams.spec.whatwg.org/#default-reader-cancel
     */
    cancel (reason : any ) : Promise < undefined > ;
  }
  /**
   * The strategy for the ReadableStream queue.
   */
  interface ReadableStreamStrategy < T = any > {
    /**
     * Used to calculate the desired size of the ReadableStream. The high-water
     * mark minus the sum of the sizes of chunks currently in the queue is the
     * desired size.
     * https://streams.spec.whatwg.org/#qs-api
     */
    highWaterMark ? : number ;
    /**
     * A sizing algorithm that takes a chunk of the ReadableStream and returns
     * a size.
     * https://streams.spec.whatwg.org/#qs-api
     */
    size ? : (a : T ) => number ;
  }
  /**
   * The underlying source for a ReadableStream.
   */
  interface ReadableStreamUnderlyingSource < T = any > extends ಠ_ಠ.clutz.module$exports$goog$streams$liteTypes.ReadableStreamUnderlyingSource {
    /**
     * Called when the ReadableStream is cancelled.
     */
    cancel ? : (a : any ) => Promise < undefined > | undefined ;
    /**
     * A pull method that is called when the ReadableStream's internal queue
     * becomes not full.
     */
    pull ? : (a : ಠ_ಠ.clutz.module$exports$goog$streams$fullTypes.ReadableStreamDefaultController < any > ) => Promise < undefined > | undefined ;
  }
}
declare module 'goog:goog.streams.fullTypes' {
  import fullTypes = ಠ_ಠ.clutz.module$exports$goog$streams$fullTypes;
  export = fullTypes;
}
