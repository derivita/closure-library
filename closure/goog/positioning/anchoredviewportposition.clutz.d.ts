//!! generated by clutz.
// Generated from positioning/anchoredviewportposition.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Encapsulates a popup position where the popup is anchored at a corner of
   * an element. The corners are swapped if dictated by the viewport. For instance
   * if a popup is anchored with its top left corner to the bottom left corner of
   * the anchor the popup is either displayed below the anchor (as specified) or
   * above it if there's not enough room to display it below.
   *
   * When using this positioning object it's recommended that the movable element
   * be absolutely positioned.
   */
  class AnchoredViewportPosition extends ಠ_ಠ.clutz.goog.positioning.AnchoredPosition {
    private noStructuralTyping_goog_positioning_AnchoredViewportPosition : any;
    /**
     * Encapsulates a popup position where the popup is anchored at a corner of
     * an element. The corners are swapped if dictated by the viewport. For instance
     * if a popup is anchored with its top left corner to the bottom left corner of
     * the anchor the popup is either displayed below the anchor (as specified) or
     * above it if there's not enough room to display it below.
     *
     * When using this positioning object it's recommended that the movable element
     * be absolutely positioned.
     * @param anchorElement Element the movable element should be anchored against.
     * @param corner Corner of anchored element the movable element should be positioned at.
     * @param opt_adjust Whether the positioning should be adjusted until the element fits inside the viewport even if that means that the anchored corners are ignored.
     * @param opt_overflowConstraint Box object describing the dimensions in which the movable element could be shown.
     */
    constructor (anchorElement : GlobalElement | null , corner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_adjust ? : boolean , opt_overflowConstraint ? : ಠ_ಠ.clutz.goog.math.Box | null ) ;
    /**
     * Adjusts the corner if X or Y positioning failed.
     * @param status The status of the last positionAtAnchor call.
     * @param corner The corner to adjust.
     */
    protected adjustCorner (status : number , corner : ಠ_ಠ.clutz.goog.positioning.Corner | null ) : ಠ_ಠ.clutz.goog.positioning.Corner | null ;
    getLastResortOverflow ( ) : number ;
    getOverflowConstraint ( ) : ಠ_ಠ.clutz.goog.math.Box | null | undefined ;
    /**
     * Repositions the movable element.
     * @param movableElement Element to position.
     * @param movableCorner Corner of the movable element that should be positioned adjacent to the anchored element.
     * @param opt_margin A margin specified in pixels.
     * @param opt_preferredSize The preferred size of the movableElement.
     */
    reposition (movableElement : GlobalElement | null , movableCorner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null ) : void ;
    setLastResortOverflow (lastResortOverflow : number ) : void ;
    setOverflowConstraint (overflowConstraint : ಠ_ಠ.clutz.goog.math.Box | null | undefined ) : void ;
  }
}
declare module 'goog:goog.positioning.AnchoredViewportPosition' {
  import AnchoredViewportPosition = ಠ_ಠ.clutz.goog.positioning.AnchoredViewportPosition;
  export default AnchoredViewportPosition;
}
