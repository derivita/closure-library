//!! generated by clutz.
// Generated from positioning/positioning.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Returns the corner opposite the given one horizontally and vertically.
   * @param corner The popup corner used to flip.
   */
  function flipCorner (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns the corner opposite the given one horizontally.
   * @param corner The popup corner used to flip.
   */
  function flipCornerHorizontal (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns the corner opposite the given one vertically.
   * @param corner The popup corner used to flip.
   */
  function flipCornerVertical (corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Returns an absolute corner (top/bottom left/right) given an absolute
   * or relative (top/bottom start/end) corner and the direction of an element.
   * Absolute corners remain unchanged.
   * @param element DOM element to test for RTL direction.
   * @param corner The popup corner used for positioning.
   */
  function getEffectiveCorner (element : GlobalElement | null , corner : ಠ_ಠ.clutz.goog.positioning.Corner ) : ಠ_ಠ.clutz.goog.positioning.Corner ;
  /**
   * Calculates the page offset of the given element's
   * offsetParent. This value can be used to translate any x- and
   * y-offset relative to the page to an offset relative to the
   * offsetParent, which can then be used directly with as position
   * coordinate for `positionWithCoordinate`.
   * @param movableElement The element to calculate.
   */
  function getOffsetParentPageOffset (movableElement : GlobalElement ) : ಠ_ಠ.clutz.goog.math.Coordinate ;
  /**
   * Computes the position for an element to be placed on-screen at the
   * specified coordinates. Returns an object containing both the resulting
   * rectangle, and the overflow status bitmap.
   * @param absolutePos The coordinate to position the element at.
   * @param elementSize The size of the element to be positioned.
   * @param elementCorner The corner of the movableElement that that should be positioned.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_viewport Box object describing the dimensions of the viewport. Required if opt_overflow is specified.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
   */
  function getPositionAtCoordinate (absolutePos : ಠ_ಠ.clutz.goog.math.Coordinate , elementSize : ಠ_ಠ.clutz.goog.math.Size , elementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null ) : { rect : ಠ_ಠ.clutz.goog.math.Rect , status : ಠ_ಠ.clutz.goog.positioning.OverflowStatus } ;
  /**
   * Positions a movable element relative to an anchor element. The caller
   * specifies the corners that should touch. This functions then moves the
   * movable element accordingly.
   * @param anchorElement The element that is the anchor for where the movable element should position itself.
   * @param anchorElementCorner The corner of the anchorElement for positioning the movable element.
   * @param movableElement The element to move.
   * @param movableElementCorner The corner of the movableElement that that should be positioned adjacent to the anchor element.
   * @param opt_offset An offset specified in pixels. After the normal positioning algorithm is applied, the offset is then applied. Positive coordinates move the popup closer to the center of the anchor element. Negative coordinates move the popup away from the center of the anchor element.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified. Bitmap, {@see goog.positioning.Overflow}.
   * @param opt_preferredSize The preferred size of the movableElement.
   * @param opt_viewport Box object describing the dimensions of the viewport. The viewport is specified relative to offsetParent of `movableElement`. In other words, the viewport can be thought of as describing a "position: absolute" element contained in the offsetParent. It defaults to visible area of nearest scrollable ancestor of `movableElement` (see `goog.style.getVisibleRectForElement`).
   */
  function positionAtAnchor (anchorElement : GlobalElement | null , anchorElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , movableElement : GlobalElement | null , movableElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_offset ? : ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null ) : ಠ_ಠ.clutz.goog.positioning.OverflowStatus ;
  /**
   * Positions the specified corner of the movable element at the
   * specified coordinate.
   * @param absolutePos The coordinate to position the element at.
   * @param movableElement The element to be positioned.
   * @param movableElementCorner The corner of the movableElement that that should be positioned.
   * @param opt_margin A margin specified in pixels. After the normal positioning algorithm is applied and any offset, the margin is then applied. Positive coordinates move the popup away from the spot it was positioned towards its center. Negative coordinates move it towards the spot it was positioned away from its center.
   * @param opt_viewport Box object describing the dimensions of the viewport. Required if opt_overflow is specified.
   * @param opt_overflow Overflow handling mode. Defaults to IGNORE if not specified, {@see goog.positioning.Overflow}.
   * @param opt_preferredSize The preferred size of the movableElement. Defaults to the current size.
   */
  function positionAtCoordinate (absolutePos : ಠ_ಠ.clutz.goog.math.Coordinate | null , movableElement : GlobalElement | null , movableElementCorner : ಠ_ಠ.clutz.goog.positioning.Corner , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_viewport ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_overflow ? : number | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null ) : ಠ_ಠ.clutz.goog.positioning.OverflowStatus ;
}
declare module 'goog:goog.positioning' {
  import positioning = ಠ_ಠ.clutz.goog.positioning;
  export = positioning;
}
// Generated from positioning/positioning.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing an element corner for positioning the popup.
   *
   * The START constants map to LEFT if element directionality is left
   * to right and RIGHT if the directionality is right to left.
   * Likewise END maps to RIGHT or LEFT depending on the directionality.
   */
  /**
   * Enum for representing an element corner for positioning the popup.
   *
   * The START constants map to LEFT if element directionality is left
   * to right and RIGHT if the directionality is right to left.
   * Likewise END maps to RIGHT or LEFT depending on the directionality.
   */
  enum Corner {
    BOTTOM_CENTER ,
    BOTTOM_END ,
    BOTTOM_LEFT ,
    BOTTOM_RIGHT ,
    BOTTOM_START ,
    TOP_CENTER ,
    TOP_END ,
    TOP_LEFT = 0.0 ,
    TOP_RIGHT ,
    TOP_START ,
  }
}
declare module 'goog:goog.positioning.Corner' {
  import Corner = ಠ_ಠ.clutz.goog.positioning.Corner;
  export default Corner;
}
// Generated from positioning/positioning.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for bits in the {@see goog.positioning.Corner) bitmap.
   */
  /**
   * Enum for bits in the {@see goog.positioning.Corner) bitmap.
   */
  enum CornerBit {
    BOTTOM = 1.0 ,
    CENTER = 2.0 ,
    FLIP_RTL = 8.0 ,
    RIGHT = 4.0 ,
  }
}
declare module 'goog:goog.positioning.CornerBit' {
  import CornerBit = ಠ_ಠ.clutz.goog.positioning.CornerBit;
  export default CornerBit;
}
// Generated from positioning/positioning.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing position handling in cases where the element would be
   * positioned outside the viewport.
   */
  /**
   * Enum for representing position handling in cases where the element would be
   * positioned outside the viewport.
   */
  enum Overflow {
    ADJUST_X = 1.0 ,
    ADJUST_X_EXCEPT_OFFSCREEN ,
    ADJUST_Y = 4.0 ,
    ADJUST_Y_EXCEPT_OFFSCREEN ,
    FAIL_X = 2.0 ,
    FAIL_Y = 8.0 ,
    IGNORE = 0.0 ,
    RESIZE_HEIGHT = 32.0 ,
    RESIZE_WIDTH = 16.0 ,
  }
}
declare module 'goog:goog.positioning.Overflow' {
  import Overflow = ಠ_ಠ.clutz.goog.positioning.Overflow;
  export default Overflow;
}
// Generated from positioning/positioning.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Enum for representing the outcome of a positioning call.
   */
  /**
   * Enum for representing the outcome of a positioning call.
   */
  enum OverflowStatus {
    ADJUSTED_X = 1.0 ,
    ADJUSTED_Y = 2.0 ,
    FAILED ,
    FAILED_BOTTOM = 128.0 ,
    FAILED_HORIZONTAL ,
    FAILED_LEFT = 16.0 ,
    FAILED_OUTSIDE_VIEWPORT = 256.0 ,
    FAILED_RIGHT = 32.0 ,
    FAILED_TOP = 64.0 ,
    FAILED_VERTICAL ,
    HEIGHT_ADJUSTED = 8.0 ,
    NONE = 0.0 ,
    WIDTH_ADJUSTED = 4.0 ,
  }
}
declare module 'goog:goog.positioning.OverflowStatus' {
  import OverflowStatus = ಠ_ಠ.clutz.goog.positioning.OverflowStatus;
  export default OverflowStatus;
}
