//!! generated by clutz.
// Generated from positioning/viewportclientposition.js
declare namespace ಠ_ಠ.clutz.goog.positioning {
  /**
   * Encapsulates a popup position where the popup is positioned relative to the
   * window (client) coordinates, and made to stay within the viewport.
   */
  class ViewportClientPosition extends ಠ_ಠ.clutz.goog.positioning.ClientPosition {
    private noStructuralTyping_goog_positioning_ViewportClientPosition : any;
    /**
     * Encapsulates a popup position where the popup is positioned relative to the
     * window (client) coordinates, and made to stay within the viewport.
     * @param arg1 Left position or coordinate.
     * @param opt_arg2 Top position if arg1 is a number representing the left position, ignored otherwise.
     */
    constructor (arg1 : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_arg2 ? : number ) ;
    /**
     * Repositions the popup according to the current state.
     * @param element The DOM element of the popup.
     * @param popupCorner The corner of the popup element that that should be positioned adjacent to the anchorElement. One of the goog.positioning.Corner constants.
     * @param opt_margin A margin specified in pixels.
     * @param opt_preferredSize Preferred size fo the element.
     */
    reposition (element : GlobalElement | null , popupCorner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_preferredSize ? : ಠ_ಠ.clutz.goog.math.Size | null ) : void ;
    /**
     * Set the last-resort overflow strategy, if the popup fails to fit.
     * @param overflow A bitmask of goog.positioning.Overflow strategies.
     */
    setLastResortOverflow (overflow : number ) : void ;
  }
}
declare module 'goog:goog.positioning.ViewportClientPosition' {
  import ViewportClientPosition = ಠ_ಠ.clutz.goog.positioning.ViewportClientPosition;
  export default ViewportClientPosition;
}
