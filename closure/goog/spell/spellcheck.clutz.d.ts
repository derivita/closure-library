//!! generated by clutz.
// Generated from spell/spellcheck.js
declare namespace ಠ_ಠ.clutz.goog.spell {
  /**
   * Support class for spell checker components. Provides basic functionality
   * such as word lookup and caching.
   */
  class SpellCheck extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_spell_SpellCheck : any;
    /**
     * Support class for spell checker components. Provides basic functionality
     * such as word lookup and caching.
     * @param opt_lookupFunction Function to use for word lookup. Must accept an array of words, an object reference and a callback function as parameters. It must also call the callback function (as a method on the object), once ready, with an array containing the original words, their spelling status and optionally an array of suggestions.
     * @param opt_language Content language.
     */
    constructor (opt_lookupFunction ? : (a : string [] , b : ಠ_ಠ.clutz.goog.spell.SpellCheck , c : Function ) => any , opt_language ? : string ) ;
    /**
     * Checks spelling for a block of text.
     * @param text Block of text to spell check.
     */
    checkBlock (text : string ) : void ;
    /**
     * Checks spelling for a single word. Returns the status of the supplied word,
     * or UNKNOWN if it's not cached. If it's not cached the word is added to a
     * queue and checked with the verification implementation with a short delay.
     * @param word Word to check spelling of.
     */
    checkWord (word : string ) : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus ;
    /**
     * Returns language.
     */
    getLanguage ( ) : string ;
    /**
     * Returns suggestions for the given word.
     * @param word Word to get suggestions for.
     */
    getSuggestions (word : string ) : string [] | null ;
    processPending ( ) : void ;
    /**
     * Sets language.
     * @param opt_language Content language.
     */
    setLanguage (opt_language ? : string ) : void ;
    /**
     * Sets the lookup function.
     * @param f Function to use for word lookup. Must accept an array of words, an object reference and a callback function as parameters. It must also call the callback function (as a method on the object), once ready, with an array containing the original words, their spelling status and optionally an array of suggestions.
     */
    setLookupFunction (f : Function | null ) : void ;
    /**
     * Sets a words spelling status.
     * @param word Word to set status for.
     * @param status Status of word.
     * @param opt_suggestions Suggestions. Example: obj.setWordStatus('word', VALID); obj.setWordStatus('wrod', INVALID, ['word', 'wood', 'rod']);.
     */
    setWordStatus (word : string , status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus , opt_suggestions ? : string [] | null ) : void ;
    /**
     * Regular expression for splitting a string into individual words and blocks of
     * separators. Matches zero or one word followed by zero or more separators.
     */
    static SPLIT_REGEX : RegExp | null ;
    /**
     * Regular expression for identifying word boundaries.
     */
    static WORD_BOUNDARY_CHARS : string ;
    /**
     * Regular expression for identifying word boundaries.
     */
    static WORD_BOUNDARY_REGEX : RegExp | null ;
  }
}
// Generated from spell/spellcheck.js
declare namespace ಠ_ಠ.clutz.goog.spell.SpellCheck {
  /**
   * Fields for word array in cache.
   */
  enum CacheIndex {
    STATUS = 0.0 ,
    SUGGESTIONS = 1.0 ,
  }
  /**
   * Constants for event names
   */
  enum EventType {
    ERROR = 'error' ,
    READY = 'ready' ,
    WORD_CHANGED = 'wordchanged' ,
  }
  /**
   * Codes representing the status of an individual word.
   */
  enum WordStatus {
    CORRECTED = 4.0 ,
    IGNORED = 3.0 ,
    INVALID = 2.0 ,
    UNKNOWN = 0.0 ,
    VALID = 1.0 ,
  }
}
declare module 'goog:goog.spell.SpellCheck' {
  import SpellCheck = ಠ_ಠ.clutz.goog.spell.SpellCheck;
  export default SpellCheck;
}
// Generated from spell/spellcheck.js
declare namespace ಠ_ಠ.clutz.goog.spell.SpellCheck {
  /**
   * Object representing a word changed event. Fired when the status of a word
   * changes.
   */
  class WordChangedEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_spell_SpellCheck_WordChangedEvent : any;
    /**
     * Object representing a word changed event. Fired when the status of a word
     * changes.
     * @param target Spellcheck object initiating event.
     * @param word Word to set status for.
     * @param status Status of word.
     */
    constructor (target : ಠ_ಠ.clutz.goog.spell.SpellCheck | null , word : string , status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus ) ;
    /**
     * New status
     */
    status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus ;
    /**
     * Word the status has changed for.
     */
    word : string ;
  }
}
declare module 'goog:goog.spell.SpellCheck.WordChangedEvent' {
  import WordChangedEvent = ಠ_ಠ.clutz.goog.spell.SpellCheck.WordChangedEvent;
  export default WordChangedEvent;
}
