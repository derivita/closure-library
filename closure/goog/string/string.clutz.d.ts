//!! generated by clutz.
// Generated from string/string.js
declare namespace ಠ_ಠ.clutz.goog.string {
  let DETECT_DOUBLE_ESCAPING : boolean ;
  let FORCE_NON_DOM_HTML_UNESCAPING : boolean ;
  /**
   * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
   * @param str The string to in which to canonicalize newlines.
   */
  function canonicalizeNewlines (str : string ) : string ;
  /**
   * Capitalizes a string, i.e. converts the first letter to uppercase
   * and all other letters to lowercase, e.g.:
   *
   * goog.string.capitalize('one')     => 'One'
   * goog.string.capitalize('ONE')     => 'One'
   * goog.string.capitalize('one two') => 'One two'
   *
   * Note that this function does not trim initial whitespace.
   * @param str String value to capitalize.
   */
  function capitalize (str : string ) : string ;
  /**
   * A string comparator that ignores case.
   * -1 = str1 less than str2
   * 0 = str1 equals str2
   * 1 = str1 greater than str2
   * @param str1 The string to compare.
   * @param str2 The string to compare `str1` to.
   */
  function caseInsensitiveCompare (a : string , b : string ) : number ;
  /**
   * Determines whether a string contains a substring, ignoring case.
   * @param str The string to search.
   * @param subString The substring to search for.
   */
  function caseInsensitiveContains (a : string , b : string ) : boolean ;
  /**
   * Case-insensitive suffix-checker.
   * @param str The string to check.
   * @param suffix A string to look for at the end of `str`.
   */
  function caseInsensitiveEndsWith (a : string , b : string ) : boolean ;
  /**
   * Case-insensitive equality checker.
   * @param str1 First string to check.
   * @param str2 Second string to check.
   */
  function caseInsensitiveEquals (a : string , b : string ) : boolean ;
  /**
   * Case-insensitive prefix-checker.
   * @param str The string to check.
   * @param prefix A string to look for at the end of `str`.
   */
  function caseInsensitiveStartsWith (a : string , b : string ) : boolean ;
  /**
   * Removes the breaking spaces from the left and right of the string and
   * collapses the sequences of breaking spaces in the middle into single spaces.
   * The original and the result strings render the same way in HTML.
   * @param str A string in which to collapse spaces.
   */
  function collapseBreakingSpaces (str : string ) : string ;
  /**
   * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines
   * and tabs) to a single space, and strips leading and trailing whitespace.
   * @param str Input string.
   */
  function collapseWhitespace (str : string ) : string ;
  /**
   * Compares two version numbers.
   * @param version1 Version of first item.
   * @param version2 Version of second item.
   */
  function compareVersions (a : string | number , b : string | number ) : number ;
  /**
   * Determines whether a string contains a substring.
   * @param str The string to search.
   * @param subString The substring to search for.
   */
  function contains (a : string , b : string ) : boolean ;
  /**
   * Returns the non-overlapping occurrences of ss in s.
   * If either s or ss evalutes to false, then returns zero.
   * @param s The string to look in.
   * @param ss The string to look for.
   */
  function countOf (s : string , ss : string ) : number ;
  /**
   * Generates and returns a string which is unique in the current document.
   * This is useful, for example, to create unique IDs for DOM elements.
   */
  function createUniqueString ( ) : string ;
  /**
   * Computes the Levenshtein edit distance between two strings.
   */
  function editDistance (a : string , b : string ) : number ;
  /**
   * Fast suffix-checker.
   * @param str The string to check.
   * @param suffix A string to look for at the end of `str`.
   */
  function endsWith (a : string , b : string ) : boolean ;
  /**
   * Takes a character and returns the escaped string for that character. For
   * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
   * @param c The character to escape.
   */
  function escapeChar (c : string ) : string ;
  /**
   * Takes a string and returns the escaped string for that input string.
   * @param str The string to escape.
   */
  function escapeString (str : string ) : string ;
  /**
   * String comparison function that handles non-negative integer and fractional
   * numbers in a way humans might expect. Using this function, the string
   * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent
   * to {@link goog.string.intAwareCompare} apart from the way how it interprets
   * dots.
   * @param str1 The string to compare in a numerically sensitive way.
   * @param str2 The string to compare `str1` to.
   */
  function floatAwareCompare (str1 : string , str2 : string ) : number ;
  /**
   * Returns a string with at least 64-bits of randomness.
   *
   * Doesn't trust JavaScript's random function entirely. Uses a combination of
   * random and current timestamp, and then encodes the string in base-36 to
   * make it shorter.
   */
  function getRandomString ( ) : string ;
  /**
   * String hash function similar to java.lang.String.hashCode().
   * The hash code for a string is computed as
   * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
   * where s[i] is the ith character of the string and n is the length of
   * the string. We mod the result to make it between 0 (inclusive) and 2^32
   * (exclusive).
   * @param str A string.
   */
  function hashCode (str : string ) : number ;
  /**
   * Escapes double quote '"' and single quote '\'' characters in addition to
   * '&', '<', and '>' so that a string can be included in an HTML tag attribute
   * value within double or single quotes.
   *
   * It should be noted that > doesn't need to be escaped for the HTML or XML to
   * be valid, but it has been decided to escape it for consistency with other
   * implementations.
   *
   * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
   * lowercase letter "e".
   *
   * NOTE(user):
   * HtmlEscape is often called during the generation of large blocks of HTML.
   * Using statics for the regular expressions and strings is an optimization
   * that can more than half the amount of time IE spends in this function for
   * large apps, since strings and regexes both contribute to GC allocations.
   *
   * Testing for the presence of a character before escaping increases the number
   * of function calls, but actually provides a speed increase for the average
   * case -- since the average case often doesn't require the escaping of all 4
   * characters and indexOf() is much cheaper than replace().
   * The worst case does suffer slightly from the additional calls, therefore the
   * opt_isLikelyToContainHtmlChars option has been included for situations
   * where all 4 HTML entities are very likely to be present and need escaping.
   *
   * Some benchmarks (times tended to fluctuate +-0.05ms):
   * FireFox                     IE6
   * (no chars / average (mix of cases) / all 4 chars)
   * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80
   * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84
   * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85
   *
   * An additional advantage of checking if replace actually needs to be called
   * is a reduction in the number of object allocations, so as the size of the
   * application grows the difference between the various methods would increase.
   * @param str string to be escaped.
   * @param opt_isLikelyToContainHtmlChars Don't perform a check to see if the character needs replacing - use this option if you expect each of the characters to appear often. Leave false if you expect few html characters to occur in your strings, such as if you are escaping HTML.
   */
  function htmlEscape (str : string , opt_isLikelyToContainHtmlChars ? : boolean ) : string ;
  /**
   * String comparison function that handles non-negative integer numbers in a
   * way humans might expect. Using this function, the string 'File 2.jpg' sorts
   * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison
   * is mostly case-insensitive, though strings that are identical except for case
   * are sorted with the upper-case strings before lower-case.
   *
   * This comparison function is up to 50x slower than either the default or the
   * case-insensitive compare. It should not be used in time-critical code, but
   * should be fast enough to sort several hundred short strings (like filenames)
   * with a reasonable delay.
   * @param str1 The string to compare in a numerically sensitive way.
   * @param str2 The string to compare `str1` to.
   */
  function intAwareCompare (str1 : string , str2 : string ) : number ;
  /**
   * Checks if a string contains all letters.
   * @param str string to check.
   */
  function isAlpha (str : string ) : boolean ;
  /**
   * Checks if a string contains only numbers or letters.
   * @param str string to check.
   */
  function isAlphaNumeric (str : string ) : boolean ;
  /**
   * Checks if a string is all breaking whitespace.
   * @param str The string to check.
   */
  function isBreakingWhitespace (str : string ) : boolean ;
  /**
   * Checks if a string is empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmpty (a : string ) : boolean ;
  /**
   * Checks if a string is empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmptyOrWhitespace (a : string ) : boolean ;
  /**
   * Checks if a string is null, undefined, empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmptyOrWhitespaceSafe (str : any ) : boolean ;
  /**
   * Checks if a string is null, undefined, empty or contains only whitespaces.
   * @param str The string to check.
   */
  function isEmptySafe (a : any ) : boolean ;
  /**
   * Checks if a string is empty.
   * @param str The string to check.
   */
  function isEmptyString (str : string ) : boolean ;
  /**
   * Returns whether the given string is lower camel case (e.g. "isFooBar").
   *
   * Note that this assumes the string is entirely letters.
   * @param str String to test.
   */
  function isLowerCamelCase (str : string ) : boolean ;
  /**
   * Checks if a string contains only numbers.
   * @param str string to check. If not a string, it will be casted to one.
   */
  function isNumeric (str : any ) : boolean ;
  /**
   * Checks if a character is a space character.
   * @param ch Character to check.
   */
  function isSpace (ch : string ) : boolean ;
  /**
   * Checks if a character is a valid unicode character.
   * @param ch Character to check.
   */
  function isUnicodeChar (ch : string ) : boolean ;
  /**
   * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
   *
   * Note that this assumes the string is entirely letters.
   * @param str String to test.
   */
  function isUpperCamelCase (str : string ) : boolean ;
  /**
   * Finds the characters to the right of the last instance of any separator
   *
   * This function is similar to goog.string.path.baseName, except it can take a
   * list of characters to split the string on. It will return the rightmost
   * grouping of characters to the right of any separator as a left-to-right
   * oriented string.
   * @param str The string
   * @param separators A list of separator characters
   */
  function lastComponent (str : string , separators : string | string [] ) : string ;
  /**
   * Returns a string representation of the given object, with
   * null and undefined being returned as the empty string.
   * @param obj The object to convert.
   */
  function makeSafe (obj : any ) : string ;
  /**
   * Converts \n to <br>s or <br />s.
   * @param str The string in which to convert newlines.
   * @param opt_xml Whether to use XML compatible tags.
   */
  function newLineToBr (a : string , b ? : boolean ) : string ;
  /**
   * Normalizes spaces in a string, replacing all consecutive spaces and tabs
   * with a single space. Replaces non-breaking space with a space.
   * @param str The string in which to normalize spaces.
   */
  function normalizeSpaces (str : string ) : string ;
  /**
   * Normalizes whitespace in a string, replacing all whitespace chars with
   * a space.
   * @param str The string in which to normalize whitespace.
   */
  function normalizeWhitespace (str : string ) : string ;
  /**
   * Alias for {@link goog.string.floatAwareCompare}.
   */
  function numerateCompare (a : string , b : string ) : number ;
  /**
   * Pads number to given length and optionally rounds it to a given precision.
   * For example:
   * <pre>padNumber(1.25, 2, 3) -> '01.250'
   * padNumber(1.25, 2) -> '01.25'
   * padNumber(1.25, 2, 1) -> '01.3'
   * padNumber(1.25, 0) -> '1.25'</pre>
   * @param num The number to pad.
   * @param length The desired length.
   * @param opt_precision The desired precision.
   */
  function padNumber (num : number , length : number , opt_precision ? : number ) : string ;
  /**
   * Parse a string in decimal or hexidecimal ('0xFFFF') form.
   *
   * To parse a particular radix, please use parseInt(string, radix) directly. See
   * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
   *
   * This is a wrapper for the built-in parseInt function that will only parse
   * numbers as base 10 or base 16.  Some JS implementations assume strings
   * starting with "0" are intended to be octal. ES3 allowed but discouraged
   * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
   *
   * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
   * @param value The value to be parsed.
   */
  function parseInt (value : string | number | null | undefined ) : number ;
  /**
   * Preserve spaces that would be otherwise collapsed in HTML by replacing them
   * with non-breaking space Unicode characters.
   * @param str The string in which to preserve whitespace.
   */
  function preserveSpaces (str : string ) : string ;
  /**
   * Encloses a string in double quotes and escapes characters so that the
   * string is a valid JS string. The resulting string is safe to embed in
   * `<script>` tags as "<" is escaped.
   * @param s The string to quote.
   */
  function quote (s : string ) : string ;
  /**
   * Escapes characters in the string that are not safe to use in a RegExp.
   * @param s The string to escape. If not a string, it will be casted to one.
   */
  function regExpEscape (s : any ) : string ;
  /**
   * Removes the first occurrence of a substring from a string.
   * @param str The base string from which to remove.
   * @param substr The string to remove.
   */
  function remove (str : string , substr : string ) : string ;
  /**
   * Removes all occurrences of a substring from a string.
   * @param s The base string from which to remove.
   * @param ss The string to remove.
   */
  function removeAll (s : string , ss : string ) : string ;
  /**
   * Removes a substring of a specified length at a specific
   * index in a string.
   * @param s The base string from which to remove.
   * @param index The index at which to remove the substring.
   * @param stringLength The length of the substring to remove.
   */
  function removeAt (s : string , index : number , stringLength : number ) : string ;
  /**
   * Repeats a string n times.
   * @param string The string to repeat.
   * @param length The number of times to repeat.
   */
  function repeat (a : string , b : number ) : string ;
  /**
   * Replaces all occurrences of a substring of a string with a new substring.
   * @param s The base string from which to remove.
   * @param ss The string to replace.
   * @param replacement The replacement string.
   */
  function replaceAll (s : string , ss : string , replacement : string ) : string ;
  /**
   * Splits a string on a separator a limited number of times.
   *
   * This implementation is more similar to Python or Java, where the limit
   * parameter specifies the maximum number of splits rather than truncating
   * the number of results.
   *
   * See http://docs.python.org/2/library/stdtypes.html#str.split
   * See JavaDoc: http://goo.gl/F2AsY
   * See Mozilla reference: http://goo.gl/dZdZs
   * @param str String to split.
   * @param separator The separator.
   * @param limit The limit to the number of splits. The resulting array will have a maximum length of limit+1.  Negative numbers are the same as zero.
   */
  function splitLimit (str : string , separator : string , limit : number ) : string [] ;
  /**
   * Fast prefix-checker.
   * @param str The string to check.
   * @param prefix A string to look for at the start of `str`.
   */
  function startsWith (a : string , b : string ) : boolean ;
  /**
   * Takes a string and replaces newlines with a space. Multiple lines are
   * replaced with a single space.
   * @param str The string from which to strip newlines.
   */
  function stripNewlines (str : string ) : string ;
  /**
   * Strip quote characters around a string.  The second argument is a string of
   * characters to treat as quotes.  This can be a single character or a string of
   * multiple character and in that case each of those are treated as possible
   * quote characters. For example:
   *
   * <pre>
   * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
   * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
   * </pre>
   * @param str The string to strip.
   * @param quoteChars The quote characters to strip.
   */
  function stripQuotes (str : string , quoteChars : string ) : string ;
  /**
   * Does simple python-style string substitution.
   * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
   * @param str The string containing the pattern.
   * @param var_args The items to substitute into the pattern.
   */
  function subs (str : string ,  ...var_args : any [] ) : string ;
  /**
   * Converts a string from selector-case to camelCase (e.g. from
   * "multi-part-string" to "multiPartString"), useful for converting
   * CSS selectors and HTML dataset keys to their equivalent JS properties.
   * @param str The string in selector-case form.
   */
  function toCamelCase (str : string ) : string ;
  /**
   * Converts the supplied string to a number, which may be Infinity or NaN.
   * This function strips whitespace: (toNumber(' 123') === 123)
   * This function accepts scientific notation: (toNumber('1e1') === 10)
   *
   * This is better than JavaScript's built-in conversions because, sadly:
   * (Number(' ') === 0) and (parseFloat('123a') === 123)
   * @param str The string to convert.
   */
  function toNumber (str : string ) : number ;
  /**
   * Converts a string from camelCase to selector-case (e.g. from
   * "multiPartString" to "multi-part-string"), useful for converting JS
   * style and dataset properties to equivalent CSS selectors and HTML keys.
   * @param str The string in camelCase form.
   */
  function toSelectorCase (str : string ) : string ;
  /**
   * Converts a string into TitleCase. First character of the string is always
   * capitalized in addition to the first letter of every subsequent word.
   * Words are delimited by one or more whitespaces by default. Custom delimiters
   * can optionally be specified to replace the default, which doesn't preserve
   * whitespace delimiters and instead must be explicitly included if needed.
   *
   * Default delimiter => " ":
   * goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
   * goog.string.toTitleCase('one two three')  => 'One Two Three'
   * goog.string.toTitleCase('  one   two   ') => '  One   Two   '
   * goog.string.toTitleCase('one_two_three')  => 'One_two_three'
   * goog.string.toTitleCase('one-two-three')  => 'One-two-three'
   *
   * Custom delimiter => "_-.":
   * goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
   * goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
   * goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
   * goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
   * goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
   * goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'
   * goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'
   * goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'
   * @param str String value in camelCase form.
   * @param opt_delimiters Custom delimiter character set used to distinguish words in the string value. Each character represents a single delimiter. When provided, default whitespace delimiter is overridden and must be explicitly included if needed.
   */
  function toTitleCase (str : string , opt_delimiters ? : string ) : string ;
  /**
   * Trims white spaces to the left and right of a string.
   * @param str The string to trim.
   */
  function trim (a : string ) : string ;
  /**
   * Trims whitespaces at the left end of a string.
   * @param str The string to left trim.
   */
  function trimLeft (str : string ) : string ;
  /**
   * Trims whitespaces at the right end of a string.
   * @param str The string to right trim.
   */
  function trimRight (str : string ) : string ;
  /**
   * Truncates a string to a certain length and adds '...' if necessary.  The
   * length also accounts for the ellipsis, so a maximum length of 10 and a string
   * 'Hello World!' produces 'Hello W...'.
   * @param str The string to truncate.
   * @param chars Max number of characters.
   * @param opt_protectEscapedCharacters Whether to protect escaped characters from being cut off in the middle.
   */
  function truncate (str : string , chars : number , opt_protectEscapedCharacters ? : boolean ) : string ;
  /**
   * Truncate a string in the middle, adding "..." if necessary,
   * and favoring the beginning of the string.
   * @param str The string to truncate the middle of.
   * @param chars Max number of characters.
   * @param opt_protectEscapedCharacters Whether to protect escaped characters from being cutoff in the middle.
   * @param opt_trailingChars Optional number of trailing characters to leave at the end of the string, instead of truncating as close to the middle as possible.
   */
  function truncateMiddle (str : string , chars : number , opt_protectEscapedCharacters ? : boolean , opt_trailingChars ? : number ) : string ;
  /**
   * Unescapes an HTML string.
   * @param str The string to unescape.
   */
  function unescapeEntities (str : string ) : string ;
  /**
   * Unescapes a HTML string using the provided document.
   * @param str The string to unescape.
   * @param document A document to use in escaping the string.
   */
  function unescapeEntitiesWithDocument (str : string , document : Document ) : string ;
  /**
   * URL-decodes the string. We need to specially handle '+'s because
   * the javascript library doesn't convert them to spaces.
   * @param str The string to url decode.
   */
  function urlDecode (str : string ) : string ;
  /**
   * URL-encodes a string
   * @param str The string to url-encode.
   */
  function urlEncode (str : any ) : string ;
  /**
   * Do escaping of whitespace to preserve spatial formatting. We use character
   * entity #160 to make it safer for xml.
   * @param str The string in which to escape whitespace.
   * @param opt_xml Whether to use XML compatible tags.
   */
  function whitespaceEscape (str : string , opt_xml ? : boolean ) : string ;
}
declare module 'goog:goog.string' {
  import string = ಠ_ಠ.clutz.goog.string;
  export = string;
}
// Generated from string/string.js
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Common Unicode string characters.
   */
  /**
   * Common Unicode string characters.
   */
  enum Unicode {
    NBSP = '\u00A0' ,
    ZERO_WIDTH_SPACE = '\u200B' ,
  }
}
declare module 'goog:goog.string.Unicode' {
  import Unicode = ಠ_ಠ.clutz.goog.string.Unicode;
  export default Unicode;
}
