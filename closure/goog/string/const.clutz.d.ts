//!! generated by clutz.
// Generated from string/const.js
declare namespace ಠ_ಠ.clutz.goog.string {
  /**
   * Wrapper for compile-time-constant strings.
   *
   * Const is a wrapper for strings that can only be created from program
   * constants (i.e., string literals).  This property relies on a custom Closure
   * compiler check that `goog.string.Const.from` is only invoked on
   * compile-time-constant expressions.
   *
   * Const is useful in APIs whose correct and secure use requires that certain
   * arguments are not attacker controlled: Compile-time constants are inherently
   * under the control of the application and not under control of external
   * attackers, and hence are safe to use in such contexts.
   *
   * Instances of this type must be created via its factory method
   * `goog.string.Const.from` and not by invoking its constructor.  The
   * constructor intentionally takes no parameters and the type is immutable;
   * hence only a default instance corresponding to the empty string can be
   * obtained via constructor invocation.  Use goog.string.Const.EMPTY
   * instead of using this constructor to get an empty Const string.
   */
  class Const implements ಠ_ಠ.clutz.goog.string.TypedString {
    private noStructuralTyping_goog_string_Const : any;
    /**
     * Wrapper for compile-time-constant strings.
     *
     * Const is a wrapper for strings that can only be created from program
     * constants (i.e., string literals).  This property relies on a custom Closure
     * compiler check that `goog.string.Const.from` is only invoked on
     * compile-time-constant expressions.
     *
     * Const is useful in APIs whose correct and secure use requires that certain
     * arguments are not attacker controlled: Compile-time constants are inherently
     * under the control of the application and not under control of external
     * attackers, and hence are safe to use in such contexts.
     *
     * Instances of this type must be created via its factory method
     * `goog.string.Const.from` and not by invoking its constructor.  The
     * constructor intentionally takes no parameters and the type is immutable;
     * hence only a default instance corresponding to the empty string can be
     * obtained via constructor invocation.  Use goog.string.Const.EMPTY
     * instead of using this constructor to get an empty Const string.
     * @param opt_token package-internal implementation detail.
     * @param opt_content package-internal implementation detail.
     */
    constructor (opt_token ? : GlobalObject | null , opt_content ? : string ) ;
    /**
     * Returns this Const's value as a string.
     *
     * IMPORTANT: In code where it is security-relevant that an object's type is
     * indeed `goog.string.Const`, use `goog.string.Const.unwrap`
     * instead of this method.
     */
    getTypedStringValue ( ) : string ;
    implementsGoogStringTypedString : boolean ;
    /**
     * Returns a debug-string representation of this value.
     *
     * To obtain the actual string value wrapped inside an object of this type,
     * use `goog.string.Const.unwrap`.
     */
    toString ( ) : string ;
    /**
     * A Const instance wrapping the empty string.
     */
    static EMPTY : ಠ_ಠ.clutz.goog.string.Const ;
    /**
     * Creates a Const object from a compile-time constant string.
     *
     * It is illegal to invoke this function on an expression whose
     * compile-time-constant value cannot be determined by the Closure compiler.
     *
     * Correct invocations include,
     * <pre>
     * var s = goog.string.Const.from('hello');
     * var t = goog.string.Const.from('hello' + 'world');
     * </pre>
     *
     * In contrast, the following are illegal:
     * <pre>
     * var s = goog.string.Const.from(getHello());
     * var t = goog.string.Const.from('hello' + world);
     * </pre>
     * @param s A constant string from which to create a Const.
     */
    static from (s : string ) : ಠ_ಠ.clutz.goog.string.Const ;
    /**
     * Performs a runtime check that the provided object is indeed an instance
     * of `goog.string.Const`, and returns its value.
     * @param stringConst The object to extract from.
     */
    static unwrap (stringConst : ಠ_ಠ.clutz.goog.string.Const ) : string ;
  }
}
declare module 'goog:goog.string.Const' {
  import Const = ಠ_ಠ.clutz.goog.string.Const;
  export default Const;
}
