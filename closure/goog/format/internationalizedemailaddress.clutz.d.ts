//!! generated by clutz.
// Generated from format/internationalizedemailaddress.js
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Formats an email address string for display, and allows for extraction of
   * the individual components of the address.
   */
  class InternationalizedEmailAddress extends ಠ_ಠ.clutz.goog.format.EmailAddress {
    private noStructuralTyping_goog_format_InternationalizedEmailAddress : any;
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     * @param opt_address The email address.
     * @param opt_name The name associated with the email address.
     */
    constructor (opt_address ? : string , opt_name ? : string ) ;
    isValid ( ) : any ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     */
    toString ( ) : string ;
    static isAddressSeparator (ch : string ) : boolean ;
    /**
     * Checks if the provided string is a valid address spec (local@domain.com).
     * @param str The email address to check.
     */
    static isValidAddrSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid email address. Supports both
     * simple email addresses (address specs) and addresses that contain display
     * names.
     * @param str The email address to check.
     */
    static isValidAddress (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid domain part (part after the '@') of
     * an EAI email address.
     * @param str The domain part to check.
     */
    static isValidDomainPartSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid local part (part before the '@') of
     * an EAI email address.
     * @param str The local part to check.
     */
    static isValidLocalPartSpec (str : string ) : boolean ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; into
     * an email address.
     * @param addr The address string.
     */
    static parse (addr : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     */
    static parseList (str : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
  }
}
declare module 'goog:goog.format.InternationalizedEmailAddress' {
  import InternationalizedEmailAddress = ಠ_ಠ.clutz.goog.format.InternationalizedEmailAddress;
  export default InternationalizedEmailAddress;
}
