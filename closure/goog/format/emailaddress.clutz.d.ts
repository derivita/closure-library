//!! generated by clutz.
// Generated from format/emailaddress.js
declare namespace ಠ_ಠ.clutz.goog.format {
  /**
   * Formats an email address string for display, and allows for extraction of
   * the individual components of the address.
   */
  class EmailAddress {
    private noStructuralTyping_goog_format_EmailAddress : any;
    /**
     * Formats an email address string for display, and allows for extraction of
     * the individual components of the address.
     * @param opt_address The email address.
     * @param opt_name The name associated with the email address.
     */
    constructor (opt_address ? : string , opt_name ? : string ) ;
    /**
     * The email address.
     */
    protected address : string ;
    /**
     * Get the email address.
     */
    getAddress ( ) : string ;
    /**
     * Get the name associated with the email address.
     */
    getName ( ) : string ;
    /**
     * Determines if the current object is a valid email address.
     */
    isValid ( ) : boolean ;
    /**
     * Set the email address.
     * @param address The email address.
     */
    setAddress (address : string ) : void ;
    /**
     * Set the name associated with the email address.
     * @param name The name to associate.
     */
    setName (name : string ) : void ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     */
    toString ( ) : string ;
    /**
     * Return the address in a standard format:
     * - remove extra spaces.
     * - Surround name with quotes if it contains special characters.
     * @param specialChars String that contains the characters that require the display name to be quoted.
     */
    protected toStringInternal (specialChars : string ) : string ;
    static isAddressSeparator (ch : string ) : boolean ;
    /**
     * Checks if the provided string is a valid address spec (local@domain.com).
     * @param str The email address to check.
     */
    static isValidAddrSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid email address. Supports both
     * simple email addresses (address specs) and addresses that contain display
     * names.
     * @param str The email address to check.
     */
    static isValidAddress (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid domain part (part after the '@') of
     * an email address.
     * @param str The domain part to check.
     */
    static isValidDomainPartSpec (str : string ) : boolean ;
    /**
     * Checks if the provided string is a valid local part (part before the '@') of
     * an email address.
     * @param str The local part to check.
     */
    static isValidLocalPartSpec (str : string ) : boolean ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; into
     * an email address.
     * @param addr The address string.
     */
    static parse (addr : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses an email address of the form "name" &lt;address&gt; ("name" is
     * optional) into an email address.
     * @param addr The address string.
     * @param ctor EmailAddress constructor to instantiate the output address.
     */
    protected static parseInternal (addr : string , ctor : { new (a ? : string , b ? : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress } ) : ಠ_ಠ.clutz.goog.format.EmailAddress ;
    /**
     * Parses a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     */
    static parseList (str : string ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
    /**
     * Parse a string containing email addresses of the form
     * "name" &lt;address&gt; into an array of email addresses.
     * @param str The address list.
     * @param parser The parser to employ.
     * @param separatorChecker Accepts a character and returns whether it should be considered an address separator.
     */
    protected static parseListInternal (str : string , parser : (a : string ) => any , separatorChecker : (a : string ) => boolean ) : ಠ_ಠ.clutz.goog.format.EmailAddress [] ;
  }
}
declare module 'goog:goog.format.EmailAddress' {
  import EmailAddress = ಠ_ಠ.clutz.goog.format.EmailAddress;
  export default EmailAddress;
}
