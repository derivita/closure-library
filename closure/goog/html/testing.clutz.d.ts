//!! generated by clutz.
// Generated from html/testing.js
declare namespace ಠ_ಠ.clutz.goog.html.testing {
  /**
   * Equality tester to be used in Jasmine tests. Example:
   *
   * beforeEach(function() {
   * jasmine.addCustomEqualityTester(
   * goog.html.testing.checkTypedStringEquality);
   * });
   *
   * it('typed string value matches same string', function() {
   * expect(f).toHaveBeenCalledWith('expected');
   * });
   *
   * it('typed string value matches same type and string', function() {
   * expect(f).toHaveBeenCalledWith(goog.string.Const.from('expected'));
   * });
   * @param actual Handles goog.string.TypedString.
   * @param expected Handles goog.string.TypedString or string.
   */
  function checkTypedStringEquality (actual : any , expected : any ) : boolean | undefined ;
  /**
   * Creates an argument matcher for SafeHtml.
   */
  function matchSafeHtml (expected : string | ಠ_ಠ.clutz.goog.html.SafeHtml ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates an argument matcher for SafeScript.
   */
  function matchSafeScript (expected : string | ಠ_ಠ.clutz.goog.html.SafeScript ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates an argument matcher for SafeStyle.
   */
  function matchSafeStyle (expected : string | ಠ_ಠ.clutz.goog.html.SafeStyle ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates an argument matcher for SafeStyleSheet.
   */
  function matchSafeStyleSheet (expected : string | ಠ_ಠ.clutz.goog.html.SafeStyleSheet ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates an argument matcher for SafeUrl.
   */
  function matchSafeUrl (expected : string | ಠ_ಠ.clutz.goog.html.SafeUrl ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates an argument matcher for TrustedResourceUrl.
   */
  function matchTrustedResourceUrl (expected : string | ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ) : ಠ_ಠ.clutz.goog.testing.mockmatchers.ArgumentMatcher ;
  /**
   * Creates a SafeHtml wrapping the given value. No validation is performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param html The string to wrap into a SafeHtml.
   */
  function newSafeHtmlForTest (html : string ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
  /**
   * Creates a SafeScript wrapping the given value. No validation is performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param script The string to wrap into a SafeScript.
   */
  function newSafeScriptForTest (script : string ) : ಠ_ಠ.clutz.goog.html.SafeScript ;
  /**
   * Creates a SafeStyle wrapping the given value. No validation is performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param style String to wrap into a SafeStyle.
   */
  function newSafeStyleForTest (style : string ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
  /**
   * Creates a SafeStyleSheet wrapping the given value. No validation is
   * performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param styleSheet String to wrap into a SafeStyleSheet.
   */
  function newSafeStyleSheetForTest (styleSheet : string ) : ಠ_ಠ.clutz.goog.html.SafeStyleSheet ;
  /**
   * Creates a SafeUrl wrapping the given value. No validation is performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param url String to wrap into a SafeUrl.
   */
  function newSafeUrlForTest (url : string ) : ಠ_ಠ.clutz.goog.html.SafeUrl ;
  /**
   * Creates a TrustedResourceUrl wrapping the given value. No validation is
   * performed.
   *
   * This function is for use in tests only and must never be used in production
   * code.
   * @param url String to wrap into a TrustedResourceUrl.
   */
  function newTrustedResourceUrlForTest (url : string ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl ;
}
declare module 'goog:goog.html.testing' {
  import testing = ಠ_ಠ.clutz.goog.html.testing;
  export = testing;
}
