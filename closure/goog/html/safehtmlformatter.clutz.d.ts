//!! generated by clutz.
// Generated from html/safehtmlformatter.js
declare namespace ಠ_ಠ.clutz.goog.html {
  export import SafeHtmlFormatter = ಠ_ಠ.clutz.module$contents$goog$html$SafeHtmlFormatter_SafeHtmlFormatter ;
}
declare module 'goog:goog.html.SafeHtmlFormatter' {
  import SafeHtmlFormatter = ಠ_ಠ.clutz.goog.html.SafeHtmlFormatter;
  export default SafeHtmlFormatter;
}
// Generated from html/safehtmlformatter.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Formatter producing SafeHtml from a plain text format and HTML fragments.
   * Example usage:
   * var formatter = new SafeHtmlFormatter();
   * var safeHtml = formatter.format(
   * formatter.startTag('b') +
   * 'User input:' +
   * formatter.endTag('b') +
   * ' ' +
   * formatter.text(userInput));
   * The most common usage is with goog.getMsg:
   * var MSG_USER_INPUT = goog.getMsg(
   * '{$startLink}Learn more{$endLink} about {$userInput}', {
   * 'startLink': formatter.startTag('a', {'href': url}),
   * 'endLink': formatter.endTag('a'),
   * 'userInput': formatter.text(userInput)
   * });
   * var safeHtml = formatter.format(MSG_USER_INPUT);
   * The formatting string should be constant with all variables processed by
   * formatter.text().
   */
  class module$contents$goog$html$SafeHtmlFormatter_SafeHtmlFormatter {
    private noStructuralTyping_module$contents$goog$html$SafeHtmlFormatter_SafeHtmlFormatter : any;
    /**
     * Saves an end tag and returns its marker.
     */
    endTag (tagName : string ) : string ;
    /**
     * Formats a plain text string with markers holding HTML fragments to
     * SafeHtml.
     * @param format Plain text format, will be HTML-escaped.
     */
    format (format : string ) : ಠ_ಠ.clutz.module$exports$goog$html$SafeHtml ;
    /**
     * Saves SafeHtml and returns its marker.
     */
    safeHtml (safeHtml : ಠ_ಠ.clutz.module$exports$goog$html$SafeHtml ) : string ;
    /**
     * Saves a start tag and returns its marker.
     * @param attributes Mapping from attribute names to their values. Only attribute names consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the attribute to be omitted.
     */
    startTag (tagName : string , attributes ? : { [ key: string ]: ಠ_ಠ.clutz.module$exports$goog$html$SafeHtml.AttributeValue | null } | null ) : string ;
    /**
     * Escapes a text, saves it and returns its marker.
     *
     * Wrapping any user input to .text() prevents the attacker with access to
     * the random number generator to duplicate tags used elsewhere in the format.
     */
    text (text : string ) : string ;
  }
}
// Generated from html/safehtmlformatter.js
declare namespace ಠ_ಠ.clutz.module$contents$goog$html$SafeHtmlFormatter_SafeHtmlFormatter {
  type Replacement = { attributes ? : string , endTag ? : string , html ? : string , startTag ? : string } | null ;
}
declare namespace ಠ_ಠ.clutz {
  export import module$exports$goog$html$SafeHtmlFormatter = ಠ_ಠ.clutz.module$contents$goog$html$SafeHtmlFormatter_SafeHtmlFormatter ;
}
