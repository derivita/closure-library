//!! generated by clutz.
// Generated from module/moduleinfo.js
declare namespace ಠ_ಠ.clutz.goog.module {
  /**
   * A ModuleInfo object is used by the ModuleManager to hold information about a
   * module of js code that may or may not yet be loaded into the environment.
   */
  class ModuleInfo extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_module_ModuleInfo : any;
    /**
     * A ModuleInfo object is used by the ModuleManager to hold information about a
     * module of js code that may or may not yet be loaded into the environment.
     * @param deps Ids of the modules that must be loaded before this one. The ids must be in dependency order (i.e. if the ith module depends on the jth module, then i > j).
     * @param id The module's ID.
     */
    constructor (deps : string [] , id : string ) ;
    disposeInternal ( ) : void ;
    /**
     * Gets the dependencies of this module.
     */
    getDependencies ( ) : string [] ;
    /**
     * Gets the ID of this module.
     */
    getId ( ) : string ;
    /**
     * Gets the module.
     */
    getModule ( ) : ಠ_ಠ.clutz.goog.module.BaseModule | null ;
    /**
     * Gets the uris of this module.
     */
    getUris ( ) : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl [] ;
    /**
     * Determines whether the module has been loaded.
     */
    isLoaded ( ) : boolean ;
    /**
     * Calls the error callbacks for the module.
     * @param cause What caused the error.
     */
    onError (cause : ಠ_ಠ.clutz.goog.module.ModuleLoadFailureType | null ) : void ;
    /**
     * Sets this module as loaded.
     * @param contextProvider A function that provides the module context.
     */
    onLoad (contextProvider : ( ) => GlobalObject | null ) : boolean ;
    /**
     * Registers a function that should be called after the module is loaded.
     * @param fn A callback function that takes a single argument which is the module context.
     * @param opt_handler Optional handler under whose scope to execute the callback.
     */
    registerCallback (fn : Function | null , opt_handler ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.module.ModuleLoadCallback ;
    /**
     * Registers a function that should be called after the module is loaded. These
     * early callbacks are called after {@link Module#initialize} is called but
     * before the other callbacks are called.
     * @param fn A callback function that takes a single argument which is the module context.
     * @param opt_handler Optional handler under whose scope to execute the callback.
     */
    registerEarlyCallback (fn : Function | null , opt_handler ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.module.ModuleLoadCallback ;
    /**
     * Registers a function that should be called if the module load fails.
     * @param fn A callback function that takes a single argument which is the failure type.
     * @param opt_handler Optional handler under whose scope to execute the callback.
     */
    registerErrback (fn : Function | null , opt_handler ? : GlobalObject | null ) : ಠ_ಠ.clutz.goog.module.ModuleLoadCallback ;
    setLoaded ( ) : void ;
    /**
     * Sets the constructor to use to instantiate the module object after the
     * module code is loaded.
     * @param constructor The constructor of a goog.module.BaseModule subclass.
     */
    setModuleConstructor (constructor : Function | null ) : void ;
    /**
     * Sets the uris of this module.
     * @param uris Uris for this module's code.
     */
    setTrustedUris (uris : ಠ_ಠ.clutz.goog.html.TrustedResourceUrl [] ) : void ;
  }
}
declare module 'goog:goog.module.ModuleInfo' {
  import ModuleInfo = ಠ_ಠ.clutz.goog.module.ModuleInfo;
  export default ModuleInfo;
}
