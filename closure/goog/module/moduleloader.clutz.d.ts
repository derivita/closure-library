//!! generated by clutz.
// Generated from module/moduleloader.js
declare namespace ಠ_ಠ.clutz {
  /**
   * A class that loads JavaScript modules.
   */
  class module$exports$goog$module$ModuleLoader extends ಠ_ಠ.clutz.module$exports$goog$events$EventTarget implements ಠ_ಠ.clutz.module$exports$goog$module$AbstractModuleLoader {
    private noStructuralTyping_module$exports$goog$module$ModuleLoader : any;
    /**
     * A class that loads JavaScript modules.
     */
    constructor ( ) ;
    /**
     * Gets the debug mode for the loader.
     */
    getDebugMode ( ) : boolean ;
    /**
     * Gets whether we're using non-async script tags for loading.
     */
    getUseScriptTags ( ) : boolean ;
    loadModules (ids ? : any , moduleInfoMap ? : any , c ? : any ) : void ;
    /**
     * A logger.
     */
    protected logger : ಠ_ಠ.clutz.module$exports$goog$log.Logger | null ;
    prefetchModule (id ? : any , moduleInfo ? : any ) : void ;
    /**
     * Sets whether we're using non-async script tags for loading.
     * @param debugMode Whether the debug mode is enabled.
     */
    setDebugMode (debugMode : boolean ) : void ;
    /**
     * When enabled, we will add a sourceURL comment to the end of all scripts
     * to mark their origin.
     *
     * On WebKit, stack traces will reflect the sourceURL comment, so this is
     * useful for debugging webkit stack traces in production.
     *
     * Notice that in debug mode, we will use source url injection + eval rather
     * then appending script nodes to the DOM, because the scripts will load far
     * faster.  (Appending script nodes is very slow, because we can't parallelize
     * the downloading and evaling of the script).
     *
     * The cost of appending sourceURL information is negligible when compared to
     * the cost of evaling the script. Almost all clients will want this on.
     *
     * TODO(nicksantos): Turn this on by default. We may want to turn this off
     * for clients that inject their own sourceURL.
     * @param enabled Whether source url injection is enabled.
     */
    setSourceUrlInjection (enabled : boolean ) : void ;
    setUseScriptTags (useScriptTags : boolean ) : void ;
    /**
     * Events dispatched by the ModuleLoader.
     */
    static EventType : { EVALUATE_CODE : ಠ_ಠ.clutz.module$exports$goog$events$EventId < ಠ_ಠ.clutz.module$exports$goog$module$ModuleLoader.EvaluateCodeEvent > , REQUEST_ERROR : ಠ_ಠ.clutz.module$exports$goog$events$EventId < ಠ_ಠ.clutz.module$exports$goog$module$ModuleLoader.RequestErrorEvent > , REQUEST_SUCCESS : ಠ_ಠ.clutz.module$exports$goog$events$EventId < ಠ_ಠ.clutz.module$exports$goog$module$ModuleLoader.RequestSuccessEvent > } ;
    static supportsSourceUrlDebugger ( ) : boolean ;
    static supportsSourceUrlStackTraces ( ) : boolean ;
  }
}
// Generated from module/moduleloader.js
declare namespace ಠ_ಠ.clutz.module$exports$goog$module$ModuleLoader {
  class EvaluateCodeEvent extends ಠ_ಠ.clutz.module$exports$goog$events$Event {
    private noStructuralTyping_module$exports$goog$module$ModuleLoader_EvaluateCodeEvent : any;
    constructor (moduleIds : string [] ) ;
    moduleIds : string [] ;
  }
  class LoadStatus {
    private noStructuralTyping_module$exports$goog$module$ModuleLoader_LoadStatus : any;
    /**
     * A class that keeps the state of the module during the loading process. It is
     * used to save loading information between modules download and evaluation.
     * @param trustedRequestUris the uris containing the modules implementing ids.
     */
    constructor (trustedRequestUris : ಠ_ಠ.clutz.module$exports$goog$html$TrustedResourceUrl [] ) ;
    /**
     * Error callback.
     */
    errorFn : ( (a : number | null ) => any ) | null ;
    /**
     * Whether loadModules was called for the set of modules referred by this
     * status.
     */
    loadRequested : boolean ;
    /**
     * The request uris.
     */
    requestUris : string [] ;
    /**
     * The response texts.
     */
    responseTexts : string [] | null ;
    /**
     * Success callback.
     */
    successFn : ( ( ) => any ) | null ;
    /**
     * A TrustedResourceUrl version of `this.requestUris`
     */
    trustedRequestUris : ಠ_ಠ.clutz.module$exports$goog$html$TrustedResourceUrl [] ;
  }
  class RequestErrorEvent extends ಠ_ಠ.clutz.module$exports$goog$events$Event {
    private noStructuralTyping_module$exports$goog$module$ModuleLoader_RequestErrorEvent : any;
    constructor (moduleIds : string [] , status : number | null , opt_error ? : GlobalError ) ;
    error : GlobalError | null ;
    moduleIds : string [] | null ;
    status : number | null ;
  }
  class RequestSuccessEvent extends ಠ_ಠ.clutz.module$exports$goog$events$Event {
    private noStructuralTyping_module$exports$goog$module$ModuleLoader_RequestSuccessEvent : any;
    constructor (moduleIds : string [] ) ;
    moduleIds : string [] ;
  }
}
declare module 'goog:goog.module.ModuleLoader' {
  import ModuleLoader = ಠ_ಠ.clutz.module$exports$goog$module$ModuleLoader;
  export default ModuleLoader;
}
