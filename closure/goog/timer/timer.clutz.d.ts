//!! generated by clutz.
// Generated from timer/timer.js
declare namespace ಠ_ಠ.clutz.goog {
  /**
   * Class for handling timing events.
   */
  class Timer extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_Timer : any;
    /**
     * Class for handling timing events.
     * @param opt_interval Number of ms between ticks (default: 1ms).
     * @param opt_timerObject An object that has `setTimeout`, `setInterval`, `clearTimeout` and `clearInterval` (e.g., `window`).
     */
    constructor (opt_interval ? : number , opt_timerObject ? : GlobalObject | null ) ;
    dispatchTick ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Whether this timer is enabled
     */
    enabled : boolean ;
    /**
     * Gets the interval of the timer.
     */
    getInterval ( ) : number ;
    /**
     * Sets the interval of the timer.
     * @param interval Number of ms between ticks.
     */
    setInterval (interval : number ) : void ;
    start ( ) : void ;
    stop ( ) : void ;
    /**
     * Constant for the timer's event type.
     */
    static TICK : string ;
    /**
     * Calls the given function once, after the optional pause.
     * <p>
     * The function is always called asynchronously, even if the delay is 0. This
     * is a common trick to schedule a function to run after a batch of browser
     * event processing.
     * @param listener Function or object that has a handleEvent method.
     * @param opt_delay Milliseconds to wait; default is 0.
     * @param opt_handler Object in whose scope to call the listener.
     */
    static callOnce < SCOPE = any > (listener : ( (this : SCOPE ) => any ) | { handleEvent : ( ) => any } | null , opt_delay ? : number , opt_handler ? : SCOPE ) : number ;
    /**
     * Clears a timeout initiated by {@link #callOnce}.
     * @param timerId A timer ID.
     */
    static clear (timerId : number | null ) : void ;
    /**
     * An object that implements `setTimeout`, `setInterval`,
     * `clearTimeout` and `clearInterval`. We default to the global
     * object. Changing `goog.Timer.defaultTimerObject` changes the object for
     * all timer instances which can be useful if your environment has some other
     * implementation of timers you'd like to use.
     */
    static defaultTimerObject : { clearTimeout : any , setTimeout : any } ;
    /**
     * Variable that controls the timer error correction. If the timer is called
     * before the requested interval times `intervalScale`, which often
     * happens on Mozilla, the timer is rescheduled.
     */
    static intervalScale : number ;
    static promise < RESULT = any > (delay : number , opt_result ? : RESULT | ಠ_ಠ.clutz.goog.Thenable < RESULT > | null | { then : any } ) : ಠ_ಠ.clutz.goog.Promise < RESULT > ;
  }
}
declare module 'goog:goog.Timer' {
  import Timer = ಠ_ಠ.clutz.goog.Timer;
  export default Timer;
}
