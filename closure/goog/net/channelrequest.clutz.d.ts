//!! generated by clutz.
// Generated from net/channelrequest.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Creates a ChannelRequest object which encapsulates a request to the server.
   * A new ChannelRequest is created for each request to the server.
   */
  class ChannelRequest {
    private noStructuralTyping_goog_net_ChannelRequest : any;
    /**
     * Creates a ChannelRequest object which encapsulates a request to the server.
     * A new ChannelRequest is created for each request to the server.
     * @param channel The BrowserChannel that owns this request.
     * @param channelDebug A ChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null | ಠ_ಠ.clutz.goog.net.BrowserTestChannel , channelDebug : ಠ_ಠ.clutz.goog.net.ChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) ;
    cancel ( ) : void ;
    /**
     * If the request was not successful, returns the reason.
     */
    getLastError ( ) : ಠ_ಠ.clutz.goog.net.ChannelRequest.Error | null ;
    /**
     * Returns the status code of the last request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Returns the data for a post, if this request is a post.
     */
    getPostData ( ) : string | null ;
    /**
     * Returns the request id for this request. Each request has a unique request
     * id and the request IDs are a sequential increasing count.
     */
    getRequestId ( ) : string | number | undefined ;
    /**
     * Returns the time that the request started, if it has started.
     */
    getRequestStartTime ( ) : number | null ;
    /**
     * Returns the session id for this channel.
     */
    getSessionId ( ) : string | undefined ;
    /**
     * Indicates whether the request was successful. Only valid after the handler
     * is called to indicate completion of the request.
     */
    getSuccess ( ) : boolean ;
    /**
     * Uses an IMG tag to send an HTTP get to the server. This is only currently
     * used to terminate the connection, as an IMG tag is the most reliable way to
     * send something to the server while the page is getting torn down.
     * @param uri The uri to send a request to.
     */
    sendUsingImgTag (uri : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers.
     */
    setExtraHeaders (extraHeaders : GlobalObject | null ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    /**
     * Sets the timeout for a request
     * @param timeout The timeout in MS for when we fail the request.
     */
    setTimeout (timeout : number ) : void ;
    /**
     * Uses the Trident htmlfile ActiveX control to send a GET request in IE. This
     * is the innovation discovered that lets us get intermediate results in
     * Internet Explorer.  Thanks to http://go/kev
     * @param uri The uri to request from.
     * @param usingSecondaryDomain Whether to use a secondary domain.
     */
    tridentGet (uri : ಠ_ಠ.clutz.goog.Uri | null , usingSecondaryDomain : boolean ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP GET to the server.
     * @param uri The uri of the request.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     * @param hostPrefix The host prefix, if we might be using a secondary domain.  Note that it should also be in the URL, adding this won't cause it to be added to the URL.
     * @param opt_noClose Whether to request that the tcp/ip connection should be closed.
     */
    xmlHttpGet (uri : ಠ_ಠ.clutz.goog.Uri | null , decodeChunks : boolean , hostPrefix : string | null , opt_noClose ? : boolean ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP POST to the server.
     * @param uri The uri of the request.
     * @param postData The data for the post body.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     */
    xmlHttpPost (uri : ಠ_ಠ.clutz.goog.Uri | null , postData : string , decodeChunks : boolean ) : void ;
    /**
     * How often to poll (in MS) for changes to responseText in browsers that don't
     * fire onreadystatechange during incremental loading of responseText.
     */
    static POLLING_INTERVAL_MS : number ;
    /**
     * Default timeout in MS for a request. The server must return data within this
     * time limit for the request to not timeout.
     */
    static TIMEOUT_MS : number ;
    /**
     * Instantiates a ChannelRequest with the given parameters. Overidden in tests.
     * @param channel The BrowserChannel that owns this request.
     * @param channelDebug A ChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    static createChannelRequest (channel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null | ಠ_ಠ.clutz.goog.net.BrowserTestChannel , channelDebug : ಠ_ಠ.clutz.goog.net.ChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) : ಠ_ಠ.clutz.goog.net.ChannelRequest ;
    /**
     * Returns a useful error string for debugging based on the specified error
     * code.
     * @param errorCode The error code.
     * @param statusCode The HTTP status code.
     */
    static errorStringFromCode (errorCode : ಠ_ಠ.clutz.goog.net.ChannelRequest.Error , statusCode : number ) : string ;
    /**
     * Returns whether XHR streaming is supported on this browser.
     *
     * If XHR streaming is not supported, we will try to use an ActiveXObject
     * to create a Forever IFrame.
     */
    static supportsXhrStreaming ( ) : boolean ;
  }
}
declare module 'goog:goog.net.ChannelRequest' {
  import ChannelRequest = ಠ_ಠ.clutz.goog.net.ChannelRequest;
  export default ChannelRequest;
}
// Generated from net/channelrequest.js
declare namespace ಠ_ಠ.clutz.goog.net.ChannelRequest {
  /**
   * Enum type for identifying a ChannelRequest error.
   */
  /**
   * Enum type for identifying a ChannelRequest error.
   */
  enum Error {
    ACTIVE_X_BLOCKED = 7.0 ,
    BAD_DATA = 4.0 ,
    BROWSER_OFFLINE = 6.0 ,
    HANDLER_EXCEPTION = 5.0 ,
    NO_DATA = 1.0 ,
    STATUS = 0.0 ,
    TIMEOUT = 2.0 ,
    UNKNOWN_SESSION_ID = 3.0 ,
  }
}
declare module 'goog:goog.net.ChannelRequest.Error' {
  import Error = ಠ_ಠ.clutz.goog.net.ChannelRequest.Error;
  export default Error;
}
