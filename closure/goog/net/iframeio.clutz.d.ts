//!! generated by clutz.
// Generated from net/iframeio.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Class for managing requests via iFrames.
   */
  class IframeIo extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_net_IframeIo : any;
    /**
     * Class for managing requests via iFrames.
     */
    constructor ( ) ;
    /**
     * Abort the current Iframe request
     * @param opt_failureCode Optional error code to use - defaults to ABORT.
     */
    abort (opt_failureCode ? : ಠ_ಠ.clutz.goog.net.ErrorCode | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Gets the callback function used to check if a loaded IFrame is in an error
     * state.
     */
    getErrorChecker ( ) : Function | null ;
    /**
     * Gets the last custom error.
     */
    getLastCustomError ( ) : GlobalObject | null ;
    /**
     * Gets the last error message.
     */
    getLastError ( ) : string ;
    /**
     * Gets the last error code.
     */
    getLastErrorCode ( ) : ಠ_ಠ.clutz.goog.net.ErrorCode | null ;
    /**
     * Get the uri of the last request.
     */
    getLastUri ( ) : ಠ_ಠ.clutz.goog.Uri | null ;
    getRequestIframe ( ) : HTMLIFrameElement | null ;
    /**
     * Returns the last response html (i.e. the innerHtml of the iframe).
     */
    getResponseHtml ( ) : string | null ;
    /**
     * Parses the content as JSON. This is a legacy method for browsers without
     * JSON.parse or for responses that are not valid JSON (e.g. containing NaN).
     * Use JSON.parse(this.getResponseText()) in the other cases.
     */
    getResponseJson ( ) : GlobalObject | null ;
    /**
     * Returns the last response text (i.e. the text content of the iframe).
     * Assumes plain text!
     */
    getResponseText ( ) : string | null ;
    /**
     * Returns the document object from the last request.  Not truly XML, but
     * used to mirror the XhrIo interface.
     */
    getResponseXml ( ) : HTMLDocument | null ;
    isActive ( ) : boolean ;
    isComplete ( ) : boolean ;
    isIgnoringResponse ( ) : boolean ;
    isSuccess ( ) : boolean ;
    /**
     * Sends a request via an iframe.
     *
     * A HTML form is used and submitted to the iframe, this simplifies the
     * difference between GET and POST requests. The iframe needs to be created and
     * destroyed for each request otherwise the request will contribute to the
     * history stack.
     *
     * sendFromForm does some clever trickery (thanks jlim) in non-IE browsers to
     * stop a history entry being added for POST requests.
     * @param uri Uri of the request.
     * @param opt_method Default is GET, POST uses a form to submit the request.
     * @param opt_noCache Append a timestamp to the request to avoid caching.
     * @param opt_data Map of key-value pairs.
     */
    send (uri : ಠ_ಠ.clutz.goog.Uri | null | string , opt_method ? : string , opt_noCache ? : boolean , opt_data ? : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map ) : void ;
    /**
     * Sends the data stored in an existing form to the server. The HTTP method
     * should be specified on the form, the action can also be specified but can
     * be overridden by the optional URI param.
     *
     * This can be used in conjunction will a file-upload input to upload a file in
     * the background without affecting history.
     *
     * Example form:
     * <pre>
     * &lt;form action="/server/" enctype="multipart/form-data" method="POST"&gt;
     * &lt;input name="userfile" type="file"&gt;
     * &lt;/form&gt;
     * </pre>
     * @param form Form element used to send the request to the server.
     * @param opt_uri Uri to set for the destination of the request, by default the uri will come from the form.
     * @param opt_noCache Append a timestamp to the request to avoid caching.
     */
    sendFromForm (form : HTMLFormElement | null , opt_uri ? : string , opt_noCache ? : boolean ) : void ;
    /**
     * Sets the callback function used to check if a loaded IFrame is in an error
     * state.
     * @param fn Callback that expects a document object as it's single argument.
     */
    setErrorChecker (fn : Function | null ) : void ;
    /**
     * Sets whether to ignore the response from the server by not adding any event
     * handlers to fire when the iframe loads. This is necessary when using IframeIo
     * to submit to a server on another domain, to avoid same-origin violations when
     * trying to access the response. If this is set to true, the IframeIo instance
     * will be a single-use instance that is only usable for one request.  It will
     * only clean up its resources (iframes and forms) when it is disposed.
     * @param ignore Whether to ignore the server response.
     */
    setIgnoreResponse (ignore : boolean ) : void ;
    /**
     * Prefix for frame names
     */
    static FRAME_NAME_PREFIX : string ;
    /**
     * The number of milliseconds after a request is completed to dispose the
     * iframes.  This can be done lazily so we wait long enough for any processing
     * that occurred as a result of the response to finish.
     */
    static IFRAME_DISPOSE_DELAY_MS : number ;
    /**
     * Suffix that is added to inner frames used for sending requests in non-IE
     * browsers
     */
    static INNER_FRAME_SUFFIX : string ;
    /**
     * Find an iframe by name (assumes the context is goog.global since that is
     * where IframeIo's iframes are kept).
     * @param fname The name to find.
     */
    static getIframeByName (fname : string ) : HTMLIFrameElement | null ;
    /**
     * Find an instance of the IframeIo object by name.
     * @param fname The name to find.
     */
    static getInstanceByName (fname : string ) : ಠ_ಠ.clutz.goog.net.IframeIo | null ;
    /**
     * Handles incremental data and routes it to the correct iframeIo instance.
     * The HTML page requested by the IframeIo instance should contain script blocks
     * that call an externed reference to this method.
     * @param win The window object.
     * @param data The data object.
     */
    static handleIncrementalData (win : Window | null , data : GlobalObject | null ) : void ;
    /**
     * Static send that creates a short lived instance of IframeIo to send the
     * request.
     * @param uri Uri of the request, it is up the caller to manage query string params.
     * @param opt_callback Event handler for when request is completed.
     * @param opt_method Default is GET, POST uses a form to submit the request.
     * @param opt_noCache Append a timestamp to the request to avoid caching.
     * @param opt_data Map of key-value pairs that will be posted to the server via the iframe's form.
     */
    static send (uri : ಠ_ಠ.clutz.goog.Uri | null | string , opt_callback ? : Function | null , opt_method ? : string , opt_noCache ? : boolean , opt_data ? : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map ) : void ;
  }
}
declare module 'goog:goog.net.IframeIo' {
  import IframeIo = ಠ_ಠ.clutz.goog.net.IframeIo;
  export default IframeIo;
}
// Generated from net/iframeio.js
declare namespace ಠ_ಠ.clutz.goog.net.IframeIo {
  /**
   * Class for representing incremental data events.
   */
  class IncrementalDataEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_IframeIo_IncrementalDataEvent : any;
    /**
     * Class for representing incremental data events.
     * @param data The data associated with the event.
     */
    constructor (data : GlobalObject | null ) ;
    /**
     * The data associated with the event.
     */
    data : GlobalObject | null ;
  }
}
declare module 'goog:goog.net.IframeIo.IncrementalDataEvent' {
  import IncrementalDataEvent = ಠ_ಠ.clutz.goog.net.IframeIo.IncrementalDataEvent;
  export default IncrementalDataEvent;
}
// Generated from net/iframeio.js
declare namespace ಠ_ಠ.clutz.goog.net.IframeIo.TEST_ONLY {
  function getForm ( ) : HTMLFormElement ;
}
declare module 'goog:goog.net.IframeIo.TEST_ONLY' {
  import TEST_ONLY = ಠ_ಠ.clutz.goog.net.IframeIo.TEST_ONLY;
  export = TEST_ONLY;
}
