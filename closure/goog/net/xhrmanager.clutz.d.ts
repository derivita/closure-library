//!! generated by clutz.
// Generated from net/xhrmanager.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * A manager of an XhrIoPool.
   */
  class XhrManager extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_net_XhrManager : any;
    /**
     * A manager of an XhrIoPool.
     * @param opt_maxRetries Max. number of retries (Default: 1).
     * @param opt_headers Map of default headers to add to every request.
     * @param opt_minCount Min. number of objects (Default: 0).
     * @param opt_maxCount Max. number of objects (Default: 10).
     * @param opt_timeoutInterval Timeout (in ms) before aborting an attempt (Default: 0ms).
     * @param opt_withCredentials Add credentials to every request (Default: false).
     */
    constructor (opt_maxRetries ? : number , opt_headers ? : ಠ_ಠ.clutz.goog.structs.Map | null , opt_minCount ? : number , opt_maxCount ? : number , opt_timeoutInterval ? : number , opt_withCredentials ? : boolean ) ;
    /**
     * Aborts the request associated with id.
     * @param id The id of the request to abort.
     * @param opt_force If true, remove the id now so it can be reused. No events are fired and the callback is not called when forced.
     */
    abort (id : string , opt_force ? : boolean ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the number of requests either in flight, or waiting to be sent.
     * The count will include the current request if used within a COMPLETE event
     * handler or callback.
     */
    getOutstandingCount ( ) : number ;
    /**
     * Returns an array of request ids that are either in flight, or waiting to
     * be sent. The id of the current request will be included if used within a
     * COMPLETE event handler or callback.
     */
    getOutstandingRequestIds ( ) : string [] ;
    /**
     * Registers the given request to be sent. Throws an error if a request
     * already exists with the given ID.
     * NOTE: It is not sent immediately. It is buffered and will be sent when an
     * XhrIo object becomes available, taking into account the request's
     * priority. Note also that requests of equal priority are sent in an
     * implementation specific order - to get FIFO queue semantics use a
     * monotonically increasing priority for successive requests.
     * @param id The id of the request.
     * @param url Uri to make the request to.
     * @param opt_method Send method, default: GET.
     * @param opt_content Post data.
     * @param opt_headers Map of headers to add to the request.
     * @param opt_priority The priority of the request. A smaller value means a higher priority.
     * @param opt_callback Callback function for when request is complete. The only param is the event object from the COMPLETE event.
     * @param opt_maxRetries The maximum number of times the request should be retried.
     * @param opt_responseType The response type of this request; defaults to goog.net.XhrIo.ResponseType.DEFAULT.
     * @param opt_withCredentials Add credentials to this request, default: false.
     */
    send (id : string , url : string , opt_method ? : string , opt_content ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string , opt_headers ? : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map , opt_priority ? : number , opt_callback ? : Function | null , opt_maxRetries ? : number , opt_responseType ? : ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType | null , opt_withCredentials ? : boolean ) : ಠ_ಠ.clutz.goog.net.XhrManager.Request ;
    /**
     * Sets the number of milliseconds after which an incomplete request will be
     * aborted. Zero means no timeout is set.
     * @param ms Timeout interval in milliseconds; 0 means none.
     */
    setTimeoutInterval (ms : number ) : void ;
  }
}
declare module 'goog:goog.net.XhrManager' {
  import XhrManager = ಠ_ಠ.clutz.goog.net.XhrManager;
  export default XhrManager;
}
// Generated from net/xhrmanager.js
declare namespace ಠ_ಠ.clutz.goog.net.XhrManager {
  /**
   * An event dispatched by XhrManager.
   */
  class Event extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_XhrManager_Event : any;
    /**
     * An event dispatched by XhrManager.
     * @param type Event Type.
     * @param target Reference to the object that is the target of this event.
     * @param id The id of the request this event is for.
     * @param xhrIo The XhrIo object of the request.
     */
    constructor (type : ಠ_ಠ.clutz.goog.net.EventType | null , target : ಠ_ಠ.clutz.goog.net.XhrManager | null , id : string , xhrIo : ಠ_ಠ.clutz.goog.net.XhrIo | null ) ;
    /**
     * The id of the request this event is for.
     */
    id : string ;
    /**
     * The XhrIo object of the request.
     */
    xhrIo : ಠ_ಠ.clutz.goog.net.XhrIo | null ;
  }
}
declare module 'goog:goog.net.XhrManager.Event' {
  import Event = ಠ_ಠ.clutz.goog.net.XhrManager.Event;
  export default Event;
}
// Generated from net/xhrmanager.js
declare namespace ಠ_ಠ.clutz.goog.net.XhrManager {
  /**
   * An encapsulation of everything needed to make a Xhr request.
   * NOTE: This is used internal to the XhrManager.
   */
  class Request {
    private noStructuralTyping_goog_net_XhrManager_Request : any;
    /**
     * An encapsulation of everything needed to make a Xhr request.
     * NOTE: This is used internal to the XhrManager.
     * @param url Uri to make the request too.
     * @param xhrEventCallback Callback attached to the events of the XhrIo object of the request.
     * @param opt_method Send method, default: GET.
     * @param opt_content Post data.
     * @param opt_headers Map of headers to add to the request.
     * @param opt_callback Callback function for when request is complete. NOTE: Only 1 callback supported across all events.
     * @param opt_maxRetries The maximum number of times the request should be retried (Default: 1).
     * @param opt_responseType The response type of this request; defaults to goog.net.XhrIo.ResponseType.DEFAULT.
     * @param opt_withCredentials Add credentials to this request, default: false.
     */
    constructor (url : string , xhrEventCallback : Function | null , opt_method ? : string , opt_content ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string , opt_headers ? : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map , opt_callback ? : Function | null , opt_maxRetries ? : number , opt_responseType ? : ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType | null , opt_withCredentials ? : boolean ) ;
    /**
     * The XhrIo instance handling this request. Set in handleAvailableXhr.
     */
    xhrIo : ಠ_ಠ.clutz.goog.net.XhrIo | null ;
    /**
     * Gets the aborted status.
     */
    getAborted ( ) : boolean ;
    /**
     * Gets the number of attempts so far.
     */
    getAttemptCount ( ) : number ;
    /**
     * Gets the callback for when the request is complete.
     */
    getCompleteCallback ( ) : Function | null | undefined ;
    /**
     * Gets the completed status.
     */
    getCompleted ( ) : boolean ;
    /**
     * Gets the post data.
     */
    getContent ( ) : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string | undefined ;
    /**
     * Gets the map of headers.
     */
    getHeaders ( ) : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map ;
    /**
     * Gets the maximum number of times the request should be retried.
     */
    getMaxRetries ( ) : number ;
    /**
     * Gets the send method.
     */
    getMethod ( ) : string ;
    /**
     * Gets the response type that will be set on this request's XhrIo when it's
     * available.
     */
    getResponseType ( ) : ಠ_ಠ.clutz.goog.net.XhrIo.ResponseType ;
    /**
     * Gets the uri.
     */
    getUrl ( ) : string ;
    /**
     * Gets the withCredentials flag.
     */
    getWithCredentials ( ) : boolean ;
    /**
     * Gets the callback attached to the events of the XhrIo object.
     */
    getXhrEventCallback ( ) : Function | null ;
    /**
     * Returns whether the request has reached the maximum number of retries.
     */
    hasReachedMaxRetries ( ) : boolean ;
    increaseAttemptCount ( ) : void ;
    /**
     * Sets the aborted status.
     * @param aborted True if the request was aborted, otherwise False.
     */
    setAborted (aborted : boolean ) : void ;
    /**
     * Sets the completed status.
     * @param complete The completed status.
     */
    setCompleted (complete : boolean ) : void ;
  }
}
declare module 'goog:goog.net.XhrManager.Request' {
  import Request = ಠ_ಠ.clutz.goog.net.XhrManager.Request;
  export default Request;
}
