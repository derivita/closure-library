//!! generated by clutz.
// Generated from net/corsxmlhttpfactory.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * A factory of XML http request objects that supports cross domain requests.
   * This class should be instantiated and passed as the parameter of a
   * goog.net.XhrIo constructor to allow cross-domain requests in every browser.
   */
  class CorsXmlHttpFactory extends ಠ_ಠ.clutz.goog.net.XmlHttpFactory {
    private noStructuralTyping_goog_net_CorsXmlHttpFactory : any;
    /**
     * A factory of XML http request objects that supports cross domain requests.
     * This class should be instantiated and passed as the parameter of a
     * goog.net.XhrIo constructor to allow cross-domain requests in every browser.
     */
    constructor ( ) ;
    createInstance ( ) : any ;
    internalGetOptions ( ) : any ;
  }
}
declare module 'goog:goog.net.CorsXmlHttpFactory' {
  import CorsXmlHttpFactory = ಠ_ಠ.clutz.goog.net.CorsXmlHttpFactory;
  export default CorsXmlHttpFactory;
}
// Generated from net/corsxmlhttpfactory.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * An adapter around Internet Explorer's XDomainRequest object that makes it
   * look like a standard XMLHttpRequest. This can be used instead of
   * XMLHttpRequest to support CORS.
   */
  class IeCorsXhrAdapter implements ಠ_ಠ.clutz.goog.net.XhrLike {
    private noStructuralTyping_goog_net_IeCorsXhrAdapter : any;
    /**
     * The simulated ready state change callback function.
     */
    onreadystatechange ? : ( ( ) => any ) | null ;
    /**
     * The simulated ready state.
     */
    readyState : number ;
    response : any ;
    /**
     * The simulated response text parameter.
     */
    responseText : string ;
    /**
     * This implementation only supports text response.
     */
    responseType : string ;
    responseXML : null ;
    /**
     * The simulated status code
     */
    status : number ;
    statusText : string ;
    abort ( ) : void ;
    /**
     * Returns the response headers from the server. This implemntation only returns
     * the 'content-type' header.
     */
    getAllResponseHeaders ( ) : string ;
    /**
     * Returns the value of the response header identified by key. This
     * implementation only supports the 'content-type' header.
     * @param key The request header to fetch. If this parameter is set to 'content-type' (case-insensitive), this function returns the value of the 'content-type' request header. If this parameter is set to any other value, this function always returns an empty string.
     */
    getResponseHeader (key : string ) : string ;
    /**
     * Opens a connection to the provided URL.
     * @param method The HTTP method to use. Valid methods include GET and POST.
     * @param url The URL to contact. The authority of this URL must match the authority of the current page's URL (e.g. http or https).
     * @param opt_async Whether the request is asynchronous, defaulting to true. XDomainRequest does not support syncronous requests, so setting it to false will actually raise an exception.
     */
    open (method : string , url : string , opt_async ? : boolean | null ) : void ;
    /**
     * Sends the request to the remote server. Before calling this function, always
     * call {@link open}.
     * @param opt_content The content to send as POSTDATA, if any. Only string data is supported by this implementation.
     */
    send (opt_content ? : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string ) : void ;
    /**
     * Sets a request header to send to the remote server. Because this
     * implementation does not support request headers, this function does nothing.
     * @param key The name of the HTTP header to set. Ignored.
     * @param value The value to set for the HTTP header. Ignored.
     */
    setRequestHeader (key : string , value : string ) : void ;
  }
}
declare module 'goog:goog.net.IeCorsXhrAdapter' {
  import IeCorsXhrAdapter = ಠ_ಠ.clutz.goog.net.IeCorsXhrAdapter;
  export default IeCorsXhrAdapter;
}
