//!! generated by clutz.
// Generated from net/rpc/httpcors.js
declare namespace ಠ_ಠ.clutz.module$exports$goog$net$rpc$HttpCors {
  /**
   * The default URL parameter name to overwrite http headers with a URL param
   * to avoid CORS preflight.
   *
   * See https://github.com/whatwg/fetch/issues/210#issue-129531743 for the spec.
   */
  let HTTP_HEADERS_PARAM_NAME : string ;
  /**
   * The default URL parameter name to overwrite http method with a URL param
   * to avoid CORS preflight.
   *
   * See https://github.com/whatwg/fetch/issues/210#issue-129531743 for the spec.
   */
  let HTTP_METHOD_PARAM_NAME : string ;
  /**
   * Generates the URL-encoded URL parameter value with custom headers encoded as
   * HTTP/1.1 headers block.
   * @param headers The custom headers.
   */
  function generateEncodedHttpHeadersOverwriteParam (headers : { [ key: string ]: string } ) : string ;
  /**
   * Generates the URL parameter value with custom headers encoded as
   * HTTP/1.1 headers block.
   * @param headers The custom headers.
   */
  function generateHttpHeadersOverwriteParam (headers : { [ key: string ]: string } ) : string ;
  /**
   * Sets custom HTTP headers via an overwrite URL param.
   * @param url The URI object or a string path.
   * @param urlParam The URL param name.
   * @param extraHeaders The HTTP headers.
   */
  function setHttpHeadersWithOverwriteParam (url : ಠ_ಠ.clutz.module$exports$goog$Uri | string , urlParam : string , extraHeaders : { [ key: string ]: string } ) : ಠ_ಠ.clutz.module$exports$goog$Uri | string ;
}
declare module 'goog:goog.net.rpc.HttpCors' {
  import HttpCors = ಠ_ಠ.clutz.module$exports$goog$net$rpc$HttpCors;
  export = HttpCors;
}
