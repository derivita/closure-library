//!! generated by clutz.
// Generated from net/xpc/crosspagechannel.js
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
  /**
   * A communication channel between two documents from different domains.
   * Provides asynchronous messaging.
   */
  class CrossPageChannel extends ಠ_ಠ.clutz.goog.messaging.AbstractChannel {
    private noStructuralTyping_goog_net_xpc_CrossPageChannel : any;
    /**
     * A communication channel between two documents from different domains.
     * Provides asynchronous messaging.
     * @param cfg Channel configuration object.
     * @param opt_domHelper The optional dom helper to use for looking up elements in the dom.
     */
    constructor (cfg : GlobalObject | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * The name of the channel. Please use
     * <code>updateChannelNameAndCatalog</code> to change this from the transports
     * vs changing the property directly.
     */
    name : string ;
    close ( ) : void ;
    /**
     * Initiates connecting the channel. When this method is called, all the
     * information needed to connect the channel has to be available.
     * @param opt_connectCb The function to be called when the channel has been connected and is ready to be used.
     */
    connect (opt_connectCb ? : Function | null ) : void ;
    /**
     * Creates the iframe containing the peer page in a specified parent element.
     * This method does not connect the channel, connect() still has to be called
     * separately.
     * @param parentElm The container element the iframe is appended to.
     * @param opt_configureIframeCb If present, this function gets called with the iframe element as parameter to allow setting properties on it before it gets added to the DOM. If absent, the iframe's width and height are set to '100%'.
     * @param opt_addCfgParam Whether to add the peer configuration as URL parameter (default: true).
     */
    createPeerIframe (parentElm : GlobalElement , opt_configureIframeCb ? : Function | null , opt_addCfgParam ? : boolean ) : HTMLIFrameElement ;
    disposeInternal ( ) : void ;
    /**
     * Returns the configuration object for this channel.
     * Package private. Do not call from outside goog.net.xpc.
     */
    getConfig ( ) : GlobalObject | null ;
    /**
     * Returns a reference to the iframe-element.
     * Package private. Do not call from outside goog.net.xpc.
     */
    getIframeElement ( ) : HTMLIFrameElement | null ;
    getPeerConfiguration ( ) : GlobalObject ;
    /**
     * Returns the peer URI, with an optional URL parameter for configuring the peer
     * window.
     * @param opt_addCfgParam Whether to add the peer configuration as URL parameter (default: true).
     */
    getPeerUri (opt_addCfgParam ? : boolean ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Returns the role of this channel (either inner or outer).
     */
    getRole ( ) : number ;
    /**
     * Returns the tranport name in use for this channel.
     */
    getTransportName ( ) : string ;
    /**
     * Returns the transport type in use for this channel.
     */
    getTransportType ( ) : number ;
    isConnected ( ) : boolean ;
    /**
     * Package-private.
     * Called by the transport when the channel is connected.
     * @param opt_delay Delay this number of milliseconds before calling the connection callback. Usage is discouraged, but can be used to paper over timing vulnerabilities when there is no alternative.
     */
    notifyConnected (opt_delay ? : number ) : void ;
    notifyTransportError ( ) : void ;
    send (serviceName ? : any , payload ? : any ) : void ;
    /**
     * Sets the window object the foreign document resides in.
     * @param peerWindowObject The window object of the peer.
     */
    setPeerWindowObject (peerWindowObject : GlobalObject | null ) : void ;
    /**
     * Sets the channel name. Note, this doesn't establish a unique channel to
     * communicate on.
     * @param name The new channel name.
     */
    updateChannelNameAndCatalog (name : string ) : void ;
  }
}
declare module 'goog:goog.net.xpc.CrossPageChannel' {
  import CrossPageChannel = ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel;
  export default CrossPageChannel;
}
