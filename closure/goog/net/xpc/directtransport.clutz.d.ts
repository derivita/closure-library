//!! generated by clutz.
// Generated from net/xpc/directtransport.js
declare namespace ಠ_ಠ.clutz.goog.net.xpc {
  /**
   * A direct window to window method transport.
   *
   * If the windows are in the same security context, this transport calls
   * directly into the other window without using any additional mechanism. This
   * is mainly used in scenarios where you want to optionally use a cross domain
   * transport in cross security context situations, or optionally use a direct
   * transport in same security context situations.
   *
   * Note: Global properties are exported by using this transport. One to
   * communicate with the other window by, currently crosswindowmessaging.channel,
   * and by using goog.getUid on window, currently closure_uid_[0-9]+.
   */
  class DirectTransport extends ಠ_ಠ.clutz.goog.net.xpc.Transport {
    private noStructuralTyping_goog_net_xpc_DirectTransport : any;
    /**
     * A direct window to window method transport.
     *
     * If the windows are in the same security context, this transport calls
     * directly into the other window without using any additional mechanism. This
     * is mainly used in scenarios where you want to optionally use a cross domain
     * transport in cross security context situations, or optionally use a direct
     * transport in same security context situations.
     *
     * Note: Global properties are exported by using this transport. One to
     * communicate with the other window by, currently crosswindowmessaging.channel,
     * and by using goog.getUid on window, currently closure_uid_[0-9]+.
     * @param channel The channel this transport belongs to.
     * @param opt_domHelper The dom helper to use for finding the correct window/document. If omitted, uses the current document.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.net.xpc.CrossPageChannel , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    connect ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Prepares to send a message.
     * @param service The name of the service the message is to be delivered to.
     * @param payload The message content.
     */
    send (service : string , payload : string ) : void ;
    /**
     * Handles transport service messages.
     * @param payload The message content.
     */
    transportServiceHandler (payload : string ) : void ;
    /**
     * The transport type.
     */
    transportType : number ;
    static isSupported (peerWindow : Window ) : boolean ;
  }
}
// Generated from net/xpc/directtransport.js
declare namespace ಠ_ಠ.clutz.goog.net.xpc.DirectTransport {
  class Message_ {
    private noStructuralTyping_goog_net_xpc_DirectTransport_Message_ : any;
    /**
     * The name of the channel.
     */
    channelName : string ;
    /**
     * The payload.
     */
    payload : string ;
    /**
     * The service on the channel.
     */
    service : string ;
    /**
     * Converts a message to a literal object.
     */
    toLiteral ( ) : GlobalObject ;
    /**
     * Creates a Message_ from a literal object.
     * @param literal The literal to convert to Message.
     */
    static fromLiteral (literal : GlobalObject ) : ಠ_ಠ.clutz.goog.net.xpc.DirectTransport.Message_ ;
  }
}
declare module 'goog:goog.net.xpc.DirectTransport' {
  import DirectTransport = ಠ_ಠ.clutz.goog.net.xpc.DirectTransport;
  export default DirectTransport;
}
