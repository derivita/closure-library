//!! generated by clutz.
// Generated from net/streams/nodereadablestream.js
declare namespace ಠ_ಠ.clutz.goog.net.streams {
  /**
   * This interface represents a readable stream.
   */
  interface NodeReadableStream {
    /**
     * Register a callback to handle I/O events. This is an alias to on().
     * @param eventType The event type
     * @param callback The call back to handle the event with an optional input object
     */
    addListener (a : string , b : (a ? : GlobalObject ) => any ) : ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream | null ;
    /**
     * Register a callback to handle I/O events.
     *
     * See https://iojs.org/api/events.html
     *
     * Note that under the object mode, an event of DATA will deliver a message
     * of 1) JSON compliant JS object, including arrays; or 2) an ArrayBuffer.
     *
     * Ordering: messages will be delivered to callbacks in their registration
     * order. There is no ordering between on() and once() callbacks.
     *
     * Exceptions from callbacks will be caught and ignored.
     * @param eventType The event type
     * @param callback The call back to handle the event with an optional input object
     */
    on (a : string , b : (a ? : GlobalObject ) => any ) : ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream | null ;
    /**
     * Register a one-time callback to handle I/O events.
     * @param eventType The event type
     * @param callback The call back to handle the event with an optional input object
     */
    once (a : string , b : (a ? : GlobalObject ) => any ) : ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream | null ;
    /**
     * Unregister an existing callback, including one-time callbacks.
     * @param eventType The event type
     * @param callback The call back to unregister
     */
    removeListener (a : string , b : (a ? : GlobalObject ) => any ) : ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream | null ;
  }
}
// Generated from net/streams/nodereadablestream.js
declare namespace ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream {
  /**
   * Read events for the stream.
   */
  enum EventType {
    CLOSE = 'close' ,
    DATA = 'data' ,
    END = 'end' ,
    ERROR = 'error' ,
    READABLE = 'readable' ,
  }
}
declare module 'goog:goog.net.streams.NodeReadableStream' {
  import NodeReadableStream = ಠ_ಠ.clutz.goog.net.streams.NodeReadableStream;
  export default NodeReadableStream;
}
