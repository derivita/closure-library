//!! generated by clutz.
// Generated from net/ipaddress.js
declare namespace ಠ_ಠ.clutz.goog.net.ipaddress {
  /**
   * Abstract class defining an IP Address.
   *
   * Please use goog.net.ipaddress.IpAddress static methods or
   * goog.net.ipaddress.Ipv4Address/Ipv6Address classes.
   */
  class IpAddress {
    private noStructuralTyping_goog_net_ipaddress_IpAddress : any;
    /**
     * Abstract class defining an IP Address.
     *
     * Please use goog.net.ipaddress.IpAddress static methods or
     * goog.net.ipaddress.Ipv4Address/Ipv6Address classes.
     * @param address The Ip Address.
     * @param version The version number (4, 6).
     */
    constructor (address : ಠ_ಠ.clutz.goog.math.Integer , version : number ) ;
    equals (other : ಠ_ಠ.clutz.goog.net.ipaddress.IpAddress ) : boolean ;
    getVersion ( ) : number ;
    isLinkLocal ( ) : boolean ;
    isSiteLocal ( ) : boolean ;
    toInteger ( ) : ಠ_ಠ.clutz.goog.math.Integer ;
    toString ( ) : string ;
    toUriString ( ) : string ;
    /**
     * Parses an IP Address in a string.
     * If the string is malformed, the function will simply return null
     * instead of raising an exception.
     * @param address The IP Address.
     */
    static fromString (address : string ) : ಠ_ಠ.clutz.goog.net.ipaddress.IpAddress | null ;
    /**
     * Tries to parse a string represented as a host portion of an URI.
     * See RFC 3986 for more details on IPv6 addresses inside URI.
     * If the string is malformed, the function will simply return null
     * instead of raising an exception.
     * @param address A RFC 3986 encoded IP address.
     */
    static fromUriString (address : string ) : ಠ_ಠ.clutz.goog.net.ipaddress.IpAddress | null ;
  }
  /**
   * Takes a string or a number and returns a IPv4 Address.
   *
   * This constructor accepts strings and instance of goog.math.Integer.
   * If you pass a goog.math.Integer, make sure that its sign is set to positive.
   */
  class Ipv4Address extends ಠ_ಠ.clutz.goog.net.ipaddress.IpAddress {
    private noStructuralTyping_goog_net_ipaddress_Ipv4Address : any;
    /**
     * Takes a string or a number and returns a IPv4 Address.
     *
     * This constructor accepts strings and instance of goog.math.Integer.
     * If you pass a goog.math.Integer, make sure that its sign is set to positive.
     * @param address The address to store.
     */
    constructor (address : string | ಠ_ಠ.clutz.goog.math.Integer ) ;
    isLinkLocal ( ) : boolean ;
    isSiteLocal ( ) : boolean ;
    toString ( ) : string ;
    toUriString ( ) : string ;
    /**
     * The Maximum length for a netmask (aka, the number of bits for IPv4).
     */
    static MAX_NETMASK_LENGTH : number ;
  }
  /**
   * Takes a string or a number and returns an IPv6 Address.
   *
   * This constructor accepts strings and instance of goog.math.Integer.
   * If you pass a goog.math.Integer, make sure that its sign is set to positive.
   */
  class Ipv6Address extends ಠ_ಠ.clutz.goog.net.ipaddress.IpAddress {
    private noStructuralTyping_goog_net_ipaddress_Ipv6Address : any;
    /**
     * Takes a string or a number and returns an IPv6 Address.
     *
     * This constructor accepts strings and instance of goog.math.Integer.
     * If you pass a goog.math.Integer, make sure that its sign is set to positive.
     * @param address The address to store.
     */
    constructor (address : string | ಠ_ಠ.clutz.goog.math.Integer ) ;
    /**
     * Will return the mapped IPv4 address in this IPv6 address.
     */
    getMappedIpv4Address ( ) : ಠ_ಠ.clutz.goog.net.ipaddress.Ipv4Address | null ;
    isLinkLocal ( ) : boolean ;
    isMappedIpv4Address ( ) : boolean ;
    isSiteLocal ( ) : boolean ;
    toString ( ) : string ;
    toUriString ( ) : string ;
    /**
     * The Maximum length for a netmask (aka, the number of bits for IPv6).
     */
    static MAX_NETMASK_LENGTH : number ;
  }
}
declare module 'goog:goog.net.ipaddress' {
  import ipaddress = ಠ_ಠ.clutz.goog.net.ipaddress;
  export = ipaddress;
}
