//!! generated by clutz.
// Generated from net/iframeloadmonitor.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * The correct way to determine whether a same-domain iframe has completed
   * loading is different in IE and Firefox.  This class abstracts above these
   * differences, providing a consistent interface for:
   * <ol>
   * <li> Determing if an iframe is currently loaded
   * <li> Listening for an iframe that is not currently loaded, to finish loading
   * </ol>
   */
  class IframeLoadMonitor extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_net_IframeLoadMonitor : any;
    /**
     * The correct way to determine whether a same-domain iframe has completed
     * loading is different in IE and Firefox.  This class abstracts above these
     * differences, providing a consistent interface for:
     * <ol>
     * <li> Determing if an iframe is currently loaded
     * <li> Listening for an iframe that is not currently loaded, to finish loading
     * </ol>
     * @param iframe An iframe.
     * @param opt_hasContent Whether to wait for the loaded iframe to have content in its document body.
     */
    constructor (iframe : HTMLIFrameElement | null , opt_hasContent ? : boolean ) ;
    intervalId_ : any ;
    disposeInternal ( ) : void ;
    /**
     * Returns the iframe whose load state this IframeLoader monitors.
     */
    getIframe ( ) : HTMLIFrameElement | null ;
    /**
     * Returns whether or not the iframe is loaded.
     */
    isLoaded ( ) : boolean ;
    /**
     * Event type dispatched by a goog.net.IframeLoadMonitor when it internal iframe
     * finishes loading for the first time after construction of the
     * goog.net.IframeLoadMonitor
     */
    static LOAD_EVENT : string ;
  }
}
declare module 'goog:goog.net.IframeLoadMonitor' {
  import IframeLoadMonitor = ಠ_ಠ.clutz.goog.net.IframeLoadMonitor;
  export default IframeLoadMonitor;
}
