//!! generated by clutz.
// Generated from net/browsertestchannel.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Encapsulates the logic for a single BrowserTestChannel.
   */
  class BrowserTestChannel {
    private noStructuralTyping_goog_net_BrowserTestChannel : any;
    /**
     * Encapsulates the logic for a single BrowserTestChannel.
     * @param channel The BrowserChannel that owns this test channel.
     * @param channelDebug A ChannelDebug to use for logging.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , channelDebug : ಠ_ಠ.clutz.goog.net.ChannelDebug | null ) ;
    abort ( ) : void ;
    /**
     * Starts the test channel. This initiates connections to the server.
     * @param path The relative uri for the test connection.
     */
    connect (path : string ) : void ;
    /**
     * Factory method for XhrIo objects.
     * @param hostPrefix The host prefix, if we need an XhrIo object capable of calling a secondary domain.
     */
    createXhrIo (hostPrefix : string | null ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    /**
     * Returns the last status code received for a request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying.
     * @param browserChannel The browser channel.
     */
    isActive (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : boolean ;
    /**
     * Returns whether the test channel is closed. The ChannelRequest object expects
     * this method to be implemented on its handler.
     */
    isClosed ( ) : boolean ;
    /**
     * Notifies the channel of a fine grained network event.
     * @param reachabilityType The reachability event type.
     */
    notifyServerReachabilityEvent (reachabilityType : ಠ_ಠ.clutz.goog.net.browserchannelinternal.ServerReachability | null ) : void ;
    /**
     * Callback from ChannelRequest that indicates a request has completed.
     * @param req The request object.
     */
    onRequestComplete (req : ಠ_ಠ.clutz.goog.net.ChannelRequest | null ) : void ;
    /**
     * Callback from ChannelRequest for when new data is received
     * @param req The request object.
     * @param responseText The text of the response.
     */
    onRequestData (req : ಠ_ಠ.clutz.goog.net.ChannelRequest | null , responseText : string ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers.
     */
    setExtraHeaders (extraHeaders : GlobalObject | null ) : void ;
    /**
     * Sets a new parser for the response payload.
     * @param parser Parser.
     */
    setParser (parser : ಠ_ಠ.clutz.goog.string.Parser ) : void ;
    shouldUseSecondaryDomains ( ) : boolean ;
  }
}
declare module 'goog:goog.net.BrowserTestChannel' {
  import BrowserTestChannel = ಠ_ಠ.clutz.goog.net.BrowserTestChannel;
  export default BrowserTestChannel;
}
