//!! generated by clutz.
// Generated from net/mockiframeio.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Mock implementation of goog.net.IframeIo. This doesn't provide a mock
   * implementation for all cases, but it's not too hard to add them as needed.
   */
  class MockIFrameIo extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_net_MockIFrameIo : any;
    /**
     * Mock implementation of goog.net.IframeIo. This doesn't provide a mock
     * implementation for all cases, but it's not too hard to add them as needed.
     * @param testQueue Test queue for inserting test events.
     */
    constructor (testQueue : ಠ_ಠ.clutz.goog.testing.TestQueue | null ) ;
    /**
     * Simulates aborting the current Iframe request.
     * @param opt_failureCode Optional error code to use - defaults to ABORT.
     */
    abort (opt_failureCode ? : ಠ_ಠ.clutz.goog.net.ErrorCode | null ) : void ;
    /**
     * Gets the callback function used to check if a loaded IFrame is in an error
     * state.
     */
    getErrorChecker ( ) : Function | null ;
    /**
     * Gets the last custom error.
     */
    getLastCustomError ( ) : GlobalObject | null ;
    /**
     * Gets the last error message.
     */
    getLastError ( ) : string ;
    /**
     * Gets the last error code.
     */
    getLastErrorCode ( ) : ಠ_ಠ.clutz.goog.net.ErrorCode | null ;
    /**
     * Get the uri of the last request.
     */
    getLastUri ( ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Parses the content as JSON. This is a safe parse and may throw an error
     * if the response is malformed.
     */
    getResponseJson ( ) : GlobalObject ;
    /**
     * Returns the last response text (i.e. the text content of the iframe).
     * Assumes plain text!
     */
    getResponseText ( ) : string ;
    isActive ( ) : boolean ;
    isComplete ( ) : boolean ;
    isSuccess ( ) : boolean ;
    /**
     * Simulates the iframe send.
     * @param uri Uri of the request.
     * @param opt_method Default is GET, POST uses a form to submit the request.
     * @param opt_noCache Append a timestamp to the request to avoid caching.
     * @param opt_data Map of key-value pairs.
     */
    send (uri : ಠ_ಠ.clutz.goog.Uri | null | string , opt_method ? : string , opt_noCache ? : boolean , opt_data ? : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map ) : void ;
    /**
     * Simulates the iframe send from a form.
     * @param form Form element used to send the request to the server.
     * @param opt_uri Uri to set for the destination of the request, by default the uri will come from the form.
     * @param opt_noCache Append a timestamp to the request to avoid caching.
     */
    sendFromForm (form : GlobalElement | null , opt_uri ? : string , opt_noCache ? : boolean ) : void ;
    /**
     * Sets the callback function used to check if a loaded IFrame is in an error
     * state.
     * @param fn Callback that expects a document object as it's single argument.
     */
    setErrorChecker (fn : Function | null ) : void ;
    /**
     * Simulates the iframe is done.
     * @param errorCode The error code for any error that should be simulated.
     */
    simulateDone (errorCode : ಠ_ಠ.clutz.goog.net.ErrorCode | null ) : void ;
    /**
     * Simulates receive of incremental data.
     * @param data Data.
     */
    simulateIncrementalData (data : GlobalObject | null ) : void ;
    simulateReady ( ) : void ;
  }
}
declare module 'goog:goog.net.MockIFrameIo' {
  import MockIFrameIo = ಠ_ಠ.clutz.goog.net.MockIFrameIo;
  export default MockIFrameIo;
}
