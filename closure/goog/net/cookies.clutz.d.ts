//!! generated by clutz.
// Generated from net/cookies.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * A class for handling browser cookies.
   */
  class Cookies {
    private noStructuralTyping_goog_net_Cookies : any;
    /**
     * A class for handling browser cookies.
     * @param context The context document to get/set cookies on.
     */
    constructor (context : Document | null ) ;
    clear ( ) : void ;
    /**
     * Returns whether there is a cookie with the given name.
     * @param key The name of the cookie to test for.
     */
    containsKey (key : string ) : boolean ;
    /**
     * Returns whether there is a cookie with the given value. (This is an O(n)
     * operation.)
     * @param value The value to check for.
     */
    containsValue (value : string ) : boolean ;
    /**
     * Returns the value for the first cookie with the given name.
     * @param name The name of the cookie to get.
     * @param opt_default If not found this is returned instead.
     */
    get (name : string , opt_default ? : string ) : string | undefined ;
    getCount ( ) : number ;
    /**
     * Gets the names for all the cookies.
     */
    getKeys ( ) : string [] ;
    /**
     * Gets the values for all the cookies.
     */
    getValues ( ) : string [] ;
    isEmpty ( ) : boolean ;
    /**
     * Returns true if cookies are enabled.
     *
     * navigator.cookieEnabled is an unreliable API in some browsers such as
     * Internet Explorer. It will return true even when cookies are actually
     * blocked. To work around this, check for the presence of cookies, or attempt
     * to manually set and retrieve a cookie, which is the ultimate test of whether
     * or not a browser supports cookies.
     */
    isEnabled ( ) : boolean ;
    /**
     * We do not allow '=', ';', or white space in the name.
     *
     * NOTE: The following are allowed by this method, but should be avoided for
     * cookies handled by the server.
     * - any name starting with '$'
     * - 'Comment'
     * - 'Domain'
     * - 'Expires'
     * - 'Max-Age'
     * - 'Path'
     * - 'Secure'
     * - 'Version'
     * @param name Cookie name.
     */
    isValidName (name : string ) : boolean ;
    /**
     * We do not allow ';' or line break in the value.
     *
     * Spec does not mention any illegal characters, but in practice semi-colons
     * break parsing and line breaks truncate the name.
     * @param value Cookie value.
     */
    isValidValue (value : string ) : boolean ;
    /**
     * Removes and expires a cookie.
     * @param name The cookie name.
     * @param opt_path The path of the cookie. If null or not present, expires the cookie set at the full request path.
     * @param opt_domain The domain of the cookie, or null to expire a cookie set at the full request host name. If not provided, the default is null (i.e. cookie at full request host name).
     */
    remove (name : string , opt_path ? : string | null , opt_domain ? : string | null ) : boolean ;
    /**
     * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and
     * expire cookies, use remove() instead.
     *
     * Neither the `name` nor the `value` are encoded in any way. It is
     * up to the callers of `get` and `set` (as well as all the other
     * methods) to handle any possible encoding and decoding.
     * @param name The cookie name.
     * @param value The cookie value.
     * @param options The options object.
     */
    set (name : string , value : string , options ? : ಠ_ಠ.clutz.goog.net.Cookies.SetOptions ) : void ;
    /**
     * Static constant for the size of cookies. Per the spec, there's a 4K limit
     * to the size of a cookie. To make sure users can't break this limit, we
     * should truncate long cookies at 3950 bytes, to be extra careful with dumb
     * browsers/proxies that interpret 4K as 4000 rather than 4096.
     */
    static MAX_COOKIE_LENGTH : number ;
    /**
     * Getter for the static instance of goog.net.Cookies.
     */
    static getInstance ( ) : ಠ_ಠ.clutz.goog.net.Cookies ;
  }
}
// Generated from net/cookies.js
declare namespace ಠ_ಠ.clutz.goog.net.Cookies {
  /**
   * Valid values for the SameSite cookie attribute.  In 2019, browsers began the
   * process of changing the default from NONE to LAX.
   */
  enum SameSite {
    LAX = 'lax' ,
    NONE = 'none' ,
    STRICT = 'strict' ,
  }
  interface SetOptions {
    /**
     * The domain of the cookie, or null to not specify a domain attribute
     * (browser will use the full request host name). If not provided, the default
     * is null (i.e. let browser use full request host name).
     */
    domain ? : string | null ;
    /**
     * The max age in seconds (from now). Use -1 to set a session cookie. If not
     * provided, the default is -1 (i.e. set a session cookie).
     */
    maxAge ? : number ;
    /**
     * The path of the cookie. If not present then this uses the full request
     * path.
     */
    path ? : string | null ;
    /**
     * The SameSite attribute for the cookie (default is NONE).
     */
    sameSite ? : ಠ_ಠ.clutz.goog.net.Cookies.SameSite ;
    /**
     * Whether the cookie should only be sent over a secure channel.
     */
    secure ? : boolean ;
  }
}
declare module 'goog:goog.net.Cookies' {
  import Cookies = ಠ_ಠ.clutz.goog.net.Cookies;
  export default Cookies;
}
