//!! generated by clutz.
// Generated from net/websocket.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Class encapsulating the logic for using a WebSocket.
   */
  class WebSocket extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_net_WebSocket : any;
    /**
     * Class encapsulating the logic for using a WebSocket.
     * @param opt_params Parameters describing behavior of the WebSocket.
     */
    constructor (opt_params ? : ಠ_ಠ.clutz.goog.net.WebSocket.Options ) ;
    close ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Gets the number of bytes of data that have been queued using calls to send()
     * but not yet transmitted to the network.
     */
    getBufferedAmount ( ) : number ;
    /**
     * Checks to see if the web socket is open or not.
     */
    isOpen ( ) : boolean ;
    /**
     * Creates and opens the actual WebSocket.  Only call this after attaching the
     * appropriate listeners to this object.  If listeners aren't registered, then
     * the `goog.net.WebSocket.EventType.OPENED` event might be missed.
     * @param url The URL to which to connect.
     * @param opt_protocol The subprotocol to use.  The connection will only be established if the server reports that it has selected this subprotocol. The subprotocol name must all be a non-empty ASCII string with no control characters and no spaces in them (i.e. only characters in the range U+0021 to U+007E).
     */
    open (url : string , opt_protocol ? : string ) : void ;
    /**
     * Sends the message over the web socket.
     * @param message The message to send.
     */
    send (message : string | ArrayBuffer | ArrayBufferView ) : void ;
    /**
     * Installs exception protection for all entry points introduced by
     * goog.net.WebSocket instances which are not protected by
     * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},
     * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or
     * {@link goog.events.protectBrowserEventEntryPoint}.
     * @param errorHandler Error handler with which to protect the entry points.
     */
    static protectEntryPoints (errorHandler : ಠ_ಠ.clutz.goog.debug.ErrorHandler ) : void ;
  }
}
// Generated from net/websocket.js
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
  enum BinaryType {
    ARRAY_BUFFER = 'arraybuffer' ,
    BLOB = 'blob' ,
  }
  class ClosedEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_WebSocket_ClosedEvent : any;
    /**
     * Object representing a closed event.
     */
    constructor (code : number , reason : string , wasClean : boolean ) ;
    code : number ;
    reason : string ;
    wasClean : boolean ;
  }
  interface Options {
    /**
     * True if the web socket should automatically reconnect or not.  This is
     * true by default.
     */
    autoReconnect ? : boolean ;
    /**
     * Specifies the type of incoming binary messages, either Blob or
     * ArrayBuffer.
     */
    binaryType ? : ಠ_ಠ.clutz.goog.net.WebSocket.BinaryType ;
    /**
     * A function for obtaining the time until the next reconnect attempt. Given
     * the reconnect attempt count (which is a positive integer), the function
     * should return a positive integer representing the milliseconds to the
     * next reconnect attempt.  The default function used is an exponential
     * back-off. Note that this function is never called if auto reconnect is
     * disabled.
     */
    getNextReconnect ? : (a : number ) => number ;
  }
}
declare module 'goog:goog.net.WebSocket' {
  import WebSocket = ಠ_ಠ.clutz.goog.net.WebSocket;
  export default WebSocket;
}
// Generated from net/websocket.js
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
  /**
   * Object representing an error event. This is fired whenever an error occurs
   * on the web socket.
   */
  class ErrorEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_WebSocket_ErrorEvent : any;
    /**
     * Object representing an error event. This is fired whenever an error occurs
     * on the web socket.
     * @param data The error data.
     */
    constructor (data : string ) ;
    /**
     * The error data coming from the web socket.
     */
    data : string ;
  }
}
declare module 'goog:goog.net.WebSocket.ErrorEvent' {
  import ErrorEvent = ಠ_ಠ.clutz.goog.net.WebSocket.ErrorEvent;
  export default ErrorEvent;
}
// Generated from net/websocket.js
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
  /**
   * The events fired by the web socket.
   */
  type EventType = string &{clutzEnumBrand: never} ;
  let EventType : {
    CLOSED : EventType ,
    ERROR : EventType ,
    MESSAGE : EventType ,
    OPENED : EventType ,
  };
}
declare module 'goog:goog.net.WebSocket.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.net.WebSocket.EventType;
  export default EventType;
}
// Generated from net/websocket.js
declare namespace ಠ_ಠ.clutz.goog.net.WebSocket {
  /**
   * Object representing a new incoming message event.
   */
  class MessageEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_WebSocket_MessageEvent : any;
    /**
     * Object representing a new incoming message event.
     * @param message The raw message coming from the web socket.
     */
    constructor (message : string | ArrayBuffer | Blob ) ;
    /**
     * The new message from the web socket.
     */
    message : any ;
  }
}
declare module 'goog:goog.net.WebSocket.MessageEvent' {
  import MessageEvent = ಠ_ಠ.clutz.goog.net.WebSocket.MessageEvent;
  export default MessageEvent;
}
