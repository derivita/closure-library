//!! generated by clutz.
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net {
  /**
   * Encapsulates the logic for a single BrowserChannel.
   */
  class BrowserChannel {
    private noStructuralTyping_goog_net_BrowserChannel : any;
    /**
     * Encapsulates the logic for a single BrowserChannel.
     * @param opt_clientVersion An application-specific version number that is sent to the server when connected.
     * @param opt_firstTestResults Previously determined results of the first browser channel test.
     * @param opt_secondTestResults Previously determined results of the second browser channel test.
     * @param opt_asyncTest Whether to perform the test requests asynchronously. While the test is performed, we'll assume the worst (connection is buffered), in order to avoid delaying the connection until the test is performed.
     */
    constructor (opt_clientVersion ? : string , opt_firstTestResults ? : string [] | null , opt_secondTestResults ? : boolean , opt_asyncTest ? : boolean ) ;
    allowChunkedMode_ : boolean ;
    allowHostPrefix_ : boolean ;
    /**
     * Starts the channel. This initiates connections to the server.
     * @param testPath The path for the test connection.
     * @param channelPath The path for the channel connection.
     * @param opt_extraParams Extra parameter keys and values to add to the requests.
     * @param opt_oldSessionId Session ID from a previous session.
     * @param opt_oldArrayId The last array ID from a previous session.
     */
    connect (testPath : string , channelPath : string , opt_extraParams ? : GlobalObject | null , opt_oldSessionId ? : string , opt_oldArrayId ? : number ) : void ;
    /**
     * Decides which host prefix should be used, if any.  If there is a handler,
     * allows the handler to validate a host prefix provided by the server, and
     * optionally override it.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    /**
     * Creates a data Uri applying logic for secondary hostprefix, port
     * overrides, and versioning.
     * @param hostPrefix The host prefix.
     * @param path The path on the host (may be absolute or relative).
     * @param opt_overridePort Optional override port.
     */
    createDataUri (hostPrefix : string | null , path : string , opt_overridePort ? : number ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Called when BC needs to create an XhrIo object.  Override in a subclass if
     * you need to customize the behavior, for example to enable the creation of
     * XHR's capable of calling a secondary domain. Will also allow calling
     * a secondary domain if withCredentials (CORS) is enabled.
     * @param hostPrefix The host prefix, if we need an XhrIo object capable of calling a secondary domain.
     */
    createXhrIo (hostPrefix : string | null ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    disconnect ( ) : void ;
    /**
     * Returns whether chunked mode is allowed. In certain debugging situations,
     * it's useful for the application to have a way to disable chunked mode for a
     * user.
     */
    getAllowChunkedMode ( ) : boolean ;
    /**
     * Returns whether the channel allows the use of a subdomain. There may be
     * cases where this isn't allowed.
     */
    getAllowHostPrefix ( ) : boolean ;
    getBackChannelMaxRetries ( ) : number ;
    /**
     * Gets the Uri used for the connection that receives data from the server.
     * @param hostPrefix The host prefix.
     * @param path The path on the host.
     */
    getBackChannelUri (hostPrefix : string | null , path : string ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Returns the browserchannel logger.
     */
    getChannelDebug ( ) : ಠ_ಠ.clutz.goog.net.ChannelDebug ;
    /**
     * Returns the extra HTTP headers to add to all the requests sent to the server.
     */
    getExtraHeaders ( ) : GlobalObject | null ;
    /**
     * Gets the results for the first browser channel test
     */
    getFirstTestResults ( ) : string [] | null ;
    getForwardChannelMaxRetries ( ) : number ;
    /**
     * Gets the Uri used for the connection that sends data to the server.
     * @param path The path on the host.
     */
    getForwardChannelUri (path : string ) : ಠ_ಠ.clutz.goog.Uri ;
    /**
     * Returns the handler used for channel callback events.
     */
    getHandler ( ) : ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler | null ;
    getLastArrayId ( ) : number ;
    /**
     * Return the last status code received for a request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Gets the results for the second browser channel test
     */
    getSecondTestResults ( ) : boolean | null ;
    /**
     * Returns the session id of the channel. Only available after the
     * channel has been opened.
     */
    getSessionId ( ) : string ;
    /**
     * Returns the browser channel state.
     */
    getState ( ) : ಠ_ಠ.clutz.goog.net.BrowserChannel.State ;
    /**
     * Returns whether there are outstanding requests servicing the channel.
     */
    hasOutstandingRequests ( ) : boolean ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying. This call delegates to the handler.
     */
    isActive ( ) : boolean ;
    /**
     * Returns whether the channel is buffered or not. This state is valid for
     * querying only after the test connection has completed. This may be
     * queried in the goog.net.BrowserChannel.okToMakeRequest() callback.
     * A channel may be buffered if the test connection determines that
     * a chunked response could not be sent down within a suitable time.
     */
    isBuffered ( ) : boolean ;
    /**
     * Returns whether the channel is closed
     */
    isClosed ( ) : boolean ;
    /**
     * Notify the channel that a particular fine grained network event has occurred.
     * Should be considered package-private.
     * @param reachabilityType The reachability event type.
     */
    notifyServerReachabilityEvent (reachabilityType : ಠ_ಠ.clutz.goog.net.browserchannelinternal.ServerReachability | null ) : void ;
    /**
     * Callback from ChannelRequest that indicates a request has completed.
     * @param request The request object.
     */
    onRequestComplete (request : ಠ_ಠ.clutz.goog.net.ChannelRequest | null ) : void ;
    /**
     * Callback from ChannelRequest for when new data is received
     * @param request The request object.
     * @param responseText The text of the response.
     */
    onRequestData (request : ಠ_ಠ.clutz.goog.net.ChannelRequest | null , responseText : string ) : void ;
    /**
     * Sends a request to the server. The format of the request is a Map data
     * structure of key/value pairs. These maps are then encoded in a format
     * suitable for the wire and then reconstituted as a Map data structure that
     * the server can process.
     * @param map The map to send.
     * @param opt_context The context associated with the map.
     */
    sendMap (map : GlobalObject | null , opt_context ? : GlobalObject | null ) : void ;
    /**
     * Sets whether chunked mode is allowed. In certain debugging situations, it's
     * useful for the application to have a way to disable chunked mode for a user.
     * @param allowChunkedMode Whether chunked mode is allowed.
     */
    setAllowChunkedMode (allowChunkedMode : boolean ) : void ;
    /**
     * Sets whether the channel allows the use of a subdomain. There may be cases
     * where this isn't allowed, for example, logging in with troutboard where
     * using a subdomain causes Apache to force the user to authenticate twice.
     * @param allowHostPrefix Whether a host prefix is allowed.
     */
    setAllowHostPrefix (allowHostPrefix : boolean ) : void ;
    /**
     * Set the browserchannel logger.
     * TODO(user): Add interface for channel loggers or remove this function.
     * @param channelDebug The channel debug object.
     */
    setChannelDebug (channelDebug : ಠ_ಠ.clutz.goog.net.ChannelDebug | null ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers, or null.
     */
    setExtraHeaders (extraHeaders : GlobalObject | null ) : void ;
    /**
     * When set to true, this changes the behavior of the forward channel so it
     * will not retry requests; it will fail after one network failure, and if
     * there was already one network failure, the request will fail immediately.
     * @param failFast Whether or not to fail fast.
     */
    setFailFast (failFast : boolean ) : void ;
    /**
     * Sets the maximum number of attempts to connect to the server for forward
     * channel requests.
     * @param retries The maximum number of attempts.
     */
    setForwardChannelMaxRetries (retries : number ) : void ;
    /**
     * Sets the timeout for a forward channel request.
     * @param timeoutMs The timeout in milliseconds.
     */
    setForwardChannelRequestTimeout (timeoutMs : number ) : void ;
    /**
     * Sets the handler used for channel callback events.
     * @param handler The handler to set.
     */
    setHandler (handler : ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler | null ) : void ;
    /**
     * Sets a new parser for the response payload.
     * @param parser Parser.
     */
    setParser (parser : ಠ_ಠ.clutz.goog.string.Parser ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    setRetryDelay (baseDelayMs : number , delaySeedMs : number ) : void ;
    /**
     * Sets whether cross origin requests are supported for the browser channel.
     *
     * Setting this allows the creation of requests to secondary domains and
     * sends XHRs with the CORS withCredentials bit set to true.
     *
     * In order for cross-origin requests to work, the server will also need to set
     * CORS response headers as per:
     * https://developer.mozilla.org/en-US/docs/HTTP_access_control
     *
     * See {@link goog.net.XhrIo#setWithCredentials}.
     * @param supportCrossDomain Whether cross domain XHRs are supported.
     */
    setSupportsCrossDomainXhrs (supportCrossDomain : boolean ) : void ;
    /**
     * Determines whether to use a secondary domain when the server gives us
     * a host prefix. This allows us to work around browser per-domain
     * connection limits.
     *
     * Currently, we  use secondary domains when using Trident's ActiveXObject,
     * because it supports cross-domain requests out of the box.  Note that in IE10
     * we no longer use ActiveX since it's not supported in Metro mode and IE10
     * supports XHR streaming.
     *
     * If you need to use secondary domains on other browsers and IE10,
     * you have two choices:
     * 1) If you only care about browsers that support CORS
     * (https://developer.mozilla.org/en-US/docs/HTTP_access_control), you
     * can use {@link #setSupportsCrossDomainXhrs} and set the appropriate
     * CORS response headers on the server.
     * 2) Or, override this method in a subclass, and make sure that those
     * browsers use some messaging mechanism that works cross-domain (e.g
     * iframes and window.postMessage).
     */
    shouldUseSecondaryDomains ( ) : boolean ;
    /**
     * Callback from BrowserTestChannel for when the channel is blocked.
     * @param testChannel The BrowserTestChannel.
     */
    testConnectionBlocked (testChannel : ಠ_ಠ.clutz.goog.net.BrowserTestChannel | null ) : void ;
    /**
     * Callback from BrowserTestChannel for when the channel has an error.
     * @param testChannel The BrowserTestChannel.
     * @param errorCode The error code of the failure.
     */
    testConnectionFailure (testChannel : ಠ_ಠ.clutz.goog.net.BrowserTestChannel | null , errorCode : ಠ_ಠ.clutz.goog.net.ChannelRequest.Error | null ) : void ;
    /**
     * Callback from BrowserTestChannel for when the channel is finished.
     * @param testChannel The BrowserTestChannel.
     * @param useChunked Whether we can chunk responses.
     */
    testConnectionFinished (testChannel : ಠ_ಠ.clutz.goog.net.BrowserTestChannel | null , useChunked : boolean ) : void ;
    /**
     * Maximum number of attempts to connect to the server for back channel
     * requests.
     */
    static BACK_CHANNEL_MAX_RETRIES : number ;
    /**
     * The timeout in milliseconds for a forward channel request.
     */
    static FORWARD_CHANNEL_RETRY_TIMEOUT : number ;
    /**
     * When retrying for an inactive channel, we will multiply the total delay by
     * this number.
     */
    static INACTIVE_CHANNEL_RETRY_FACTOR : number ;
    /**
     * The latest protocol version that this class supports. We request this version
     * from the server when opening the connection. Should match
     * com.google.net.browserchannel.BrowserChannel.LATEST_CHANNEL_VERSION.
     */
    static LATEST_CHANNEL_VERSION : number ;
    /**
     * A guess at a cutoff at which to no longer assume the backchannel is dead
     * when we are slow to receive data. Number in bytes.
     *
     * Assumption: The worst bandwidth we work on is 50 kilobits/sec
     * 50kbits/sec * (1 byte / 8 bits) * 6 sec dead backchannel timeout
     */
    static OUTSTANDING_DATA_BACKCHANNEL_RETRY_CUTOFF : number ;
    /**
     * A number in MS of how long we guess the maxmium amount of time a round trip
     * to the server should take. In the future this could be substituted with a
     * real measurement of the RTT.
     */
    static RTT_ESTIMATE : number ;
    /**
     * Alias createChannelRequest from the internal Hooks module, as it was
     * previously available as a top-level export here.
     */
    static createChannelRequest : any ;
    /**
     * Alias getStatEventTarget as it used to be provided from the main
     * BrowserChannel module.
     */
    static getStatEventTarget : any ;
    /**
     * Helper function to notify listeners about POST request performance.
     * @param size Number of characters in the POST data.
     * @param rtt The amount of time from POST start to response.
     * @param retries The number of times the POST had to be retried.
     */
    static notifyTimingEvent (size : number , rtt : number , retries : number ) : void ;
    /**
     * Alias setEndThreadExecutionHook from the internal Hooks module, as it was
     * previously available as a top-level export here.
     */
    static setEndThreadExecutionHook : any ;
    /**
     * Alias setStartThreadExecutionHook from the internal Hooks module, as it was
     * previously available as a top-level export here.
     */
    static setStartThreadExecutionHook : any ;
  }
}
declare module 'goog:goog.net.BrowserChannel' {
  import BrowserChannel = ಠ_ಠ.clutz.goog.net.BrowserChannel;
  export default BrowserChannel;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Enum type for identifying a BrowserChannel error.
   */
  /**
   * Enum type for identifying a BrowserChannel error.
   */
  enum Error {
    ACTIVE_X_BLOCKED = 12.0 ,
    BAD_DATA = 10.0 ,
    BAD_RESPONSE = 11.0 ,
    BLOCKED = 9.0 ,
    LOGGED_OUT = 4.0 ,
    NETWORK = 8.0 ,
    NO_DATA = 5.0 ,
    OK = 0.0 ,
    REQUEST_FAILED = 2.0 ,
    STOP = 7.0 ,
    UNKNOWN_SESSION_ID = 6.0 ,
  }
}
declare module 'goog:goog.net.BrowserChannel.Error' {
  import Error = ಠ_ಠ.clutz.goog.net.BrowserChannel.Error;
  export default Error;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel.Event {
  /**
   * The type of event that occurs every time some information about how reachable
   * the server is is discovered.
   */
  let SERVER_REACHABILITY_EVENT : string ;
  let STAT_EVENT : string ;
  let TIMING_EVENT : string ;
}
declare module 'goog:goog.net.BrowserChannel.Event' {
  import Event = ಠ_ಠ.clutz.goog.net.BrowserChannel.Event;
  export = Event;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Abstract base class for the browser channel handler
   */
  class Handler {
    private noStructuralTyping_goog_net_BrowserChannel_Handler : any;
    /**
     * Called by the channel if enumeration of the map throws an exception.
     * @param browserChannel The browser channel.
     * @param map The map that can't be enumerated.
     */
    badMapError (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , map : GlobalObject | null ) : void ;
    /**
     * Indicates the BrowserChannel is closed. Also notifies about which maps,
     * if any, that may not have been delivered to the server.
     * @param browserChannel The browser channel.
     * @param opt_pendingMaps The array of pending maps, which may or may not have been delivered to the server.
     * @param opt_undeliveredMaps The array of undelivered maps, which have definitely not been delivered to the server.
     */
    channelClosed (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , opt_pendingMaps ? : ( ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap | null ) [] | null , opt_undeliveredMaps ? : ( ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap | null ) [] | null ) : void ;
    /**
     * Indicates an error occurred on the BrowserChannel.
     * @param browserChannel The browser channel.
     * @param error The error code.
     */
    channelError (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , error : ಠ_ಠ.clutz.goog.net.BrowserChannel.Error ) : void ;
    /**
     * New input is available for the application to process.
     * @param browserChannel The browser channel.
     * @param array The data array.
     */
    channelHandleArray (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , array : any [] | null ) : void ;
    /**
     * Callback handler for when a batch of response arrays is received from the
     * server.
     */
    channelHandleMultipleArrays : ( (a : ಠ_ಠ.clutz.goog.net.BrowserChannel , b : any [] [] ) => any ) | null ;
    /**
     * Indicates the BrowserChannel has successfully negotiated with the server
     * and can now send and receive data.
     * @param browserChannel The browser channel.
     */
    channelOpened (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : void ;
    /**
     * Indicates maps were successfully sent on the BrowserChannel.
     * @param browserChannel The browser channel.
     * @param deliveredMaps The array of maps that have been delivered to the server. This is a direct reference to the internal BrowserChannel array, so a copy should be made if the caller desires a reference to the data.
     */
    channelSuccess (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null , deliveredMaps : ( ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap | null ) [] | null ) : void ;
    /**
     * Allows the handler to override a host prefix provided by the server.  Will
     * be called whenever the channel has received such a prefix and is considering
     * its use.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    /**
     * Gets any parameters that should be added at the time another connection is
     * made to the server.
     * @param browserChannel The browser channel.
     */
    getAdditionalParams (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : GlobalObject ;
    /**
     * Gets the URI of an image that can be used to test network connectivity.
     * @param browserChannel The browser channel.
     */
    getNetworkTestImageUri (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying.
     * @param browserChannel The browser channel.
     */
    isActive (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : boolean ;
    /**
     * Whether it's okay to make a request to the server. A handler can return
     * false if the channel should fail. For example, if the user has logged out,
     * the handler may want all requests to fail immediately.
     * @param browserChannel The browser channel.
     */
    okToMakeRequest (browserChannel : ಠ_ಠ.clutz.goog.net.BrowserChannel | null ) : ಠ_ಠ.clutz.goog.net.BrowserChannel.Error ;
  }
}
declare module 'goog:goog.net.BrowserChannel.Handler' {
  import Handler = ಠ_ಠ.clutz.goog.net.BrowserChannel.Handler;
  export default Handler;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  let Hooks : any;
}
declare module 'goog:goog.net.BrowserChannel.Hooks' {
  import Hooks = ಠ_ಠ.clutz.goog.net.BrowserChannel.Hooks;
  export default Hooks;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel.LogSaver {
  /**
   * Adds a log record.
   * @param logRecord the LogRecord.
   */
  function addLogRecord (logRecord : ಠ_ಠ.clutz.goog.log.LogRecord | null ) : void ;
  /**
   * Clears the buffer
   */
  function clearBuffer ( ) : void ;
  /**
   * Returns the log as a single string.
   */
  function getBuffer ( ) : string ;
  /**
   * Returns whether the LogSaver is enabled.
   */
  function isEnabled ( ) : boolean ;
  /**
   * Enables of disables the LogSaver.
   * @param enable Whether to enable or disable saving.
   */
  function setEnabled (enable : boolean ) : void ;
}
declare module 'goog:goog.net.BrowserChannel.LogSaver' {
  import LogSaver = ಠ_ಠ.clutz.goog.net.BrowserChannel.LogSaver;
  export = LogSaver;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Simple container class for a (mapId, map) pair.
   */
  class QueuedMap {
    private noStructuralTyping_goog_net_BrowserChannel_QueuedMap : any;
    /**
     * Simple container class for a (mapId, map) pair.
     * @param mapId The id for this map.
     * @param map The map itself.
     * @param opt_context The context associated with the map.
     */
    constructor (mapId : number , map : GlobalObject | null | ಠ_ಠ.clutz.goog.structs.Map , opt_context ? : GlobalObject | null ) ;
    /**
     * The context for the map.
     */
    context : GlobalObject | null ;
    /**
     * The map itself.
     */
    map : GlobalObject | null ;
    /**
     * The id for this map.
     */
    mapId : number ;
  }
}
declare module 'goog:goog.net.BrowserChannel.QueuedMap' {
  import QueuedMap = ಠ_ಠ.clutz.goog.net.BrowserChannel.QueuedMap;
  export default QueuedMap;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  let ServerReachability : any;
}
declare module 'goog:goog.net.BrowserChannel.ServerReachability' {
  import ServerReachability = ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachability;
  export default ServerReachability;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Event class for goog.net.BrowserChannel.Event.SERVER_REACHABILITY_EVENT.
   */
  class ServerReachabilityEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_BrowserChannel_ServerReachabilityEvent : any;
    /**
     * Event class for goog.net.BrowserChannel.Event.SERVER_REACHABILITY_EVENT.
     * @param target The stat event target for the browser channel.
     * @param reachabilityType The reachability event type.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , reachabilityType : ಠ_ಠ.clutz.goog.net.browserchannelinternal.ServerReachability | null ) ;
    reachabilityType : ಠ_ಠ.clutz.goog.net.browserchannelinternal.ServerReachability | null ;
  }
}
declare module 'goog:goog.net.BrowserChannel.ServerReachabilityEvent' {
  import ServerReachabilityEvent = ಠ_ಠ.clutz.goog.net.BrowserChannel.ServerReachabilityEvent;
  export default ServerReachabilityEvent;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  let Stat : any;
}
declare module 'goog:goog.net.BrowserChannel.Stat' {
  import Stat = ಠ_ಠ.clutz.goog.net.BrowserChannel.Stat;
  export default Stat;
}
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  let StatEvent : any;
}
declare module 'goog:goog.net.BrowserChannel.StatEvent' {
  import StatEvent = ಠ_ಠ.clutz.goog.net.BrowserChannel.StatEvent;
  export default StatEvent;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Enum type for the browser channel state machine.
   */
  /**
   * Enum type for the browser channel state machine.
   */
  enum State {
    CLOSED = 0.0 ,
    INIT = 1.0 ,
    OPENED = 3.0 ,
    OPENING = 2.0 ,
  }
}
declare module 'goog:goog.net.BrowserChannel.State' {
  import State = ಠ_ಠ.clutz.goog.net.BrowserChannel.State;
  export default State;
}
// Generated from net/browserchannel.js
declare namespace ಠ_ಠ.clutz.goog.net.BrowserChannel {
  /**
   * Event class for goog.net.BrowserChannel.Event.TIMING_EVENT
   */
  class TimingEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_net_BrowserChannel_TimingEvent : any;
    /**
     * Event class for goog.net.BrowserChannel.Event.TIMING_EVENT
     * @param target The stat event target for the browser channel.
     * @param size The number of characters in the POST data.
     * @param rtt The total round trip time from POST to response in MS.
     * @param retries The number of times the POST had to be retried.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , size : number , rtt : number , retries : number ) ;
    retries : number ;
    rtt : number ;
    size : number ;
  }
}
declare module 'goog:goog.net.BrowserChannel.TimingEvent' {
  import TimingEvent = ಠ_ಠ.clutz.goog.net.BrowserChannel.TimingEvent;
  export default TimingEvent;
}
