//!! generated by clutz.
// Generated from collections/sets.js
declare namespace ಠ_ಠ.clutz.module$exports$goog$collections$sets {
  /**
   * A SetLike implements the same public interface as an ES6 Set, without tying
   * the underlying code directly to the implementation. Any additions to this
   * type should also be present on ES6 Sets.
   */
  interface SetLike < T = any > extends Iterable < T > {
    size : number ;
    add (val : T ) : void ;
    delete (val : T ) : boolean ;
    has (val : T ) : boolean ;
  }
  /**
   * Adds all the values in the given iterable to the given set.
   * @param set The set to add items to.
   * @param col A collection containing items to add.
   */
  function addAll < T = any > (set : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , col : Iterable < T > ) : void ;
  /**
   * Creates a new ES6 Set containing the elements that appear in the first
   * collection but not in the second.
   */
  function difference < T = any > (a : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , b : Iterable < T > ) : Set < T > ;
  /**
   * Tests whether the given collection consists of the same elements as the
   * given set, regardless of order, without repetition. This operation is O(n).
   * @param set The first set which might be equal to the given collection.
   * @param col The second collection of items.
   */
  function equals < T = any > (set : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , col : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > | T [] ) : boolean ;
  /**
   * Checks the given set contains all members of the given collection.
   * @param set The set to check for item presence.
   * @param col The collection of items to check for.
   */
  function hasAll < T = any > (set : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , col : Iterable < T > ) : boolean ;
  /**
   * Creates a new ES6 Set containing the elements that appear in both given
   * collections.
   */
  function intersection < T = any > (a : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , b : Iterable < T > ) : Set < T > ;
  /**
   * Tests whether all elements in the set are contained in the given collection.
   * This operation is O(n).
   * @param set The set which might be a subset of the given collection.
   * @param col The second collection of items.
   */
  function isSubsetOf < T = any > (set : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , col : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > | T [] ) : boolean ;
  /**
   * Removes all values in the given collection from the given set.
   * @param set The set to remove items from.
   * @param col A collection containing the elements to remove.
   */
  function removeAll < T = any > (set : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , col : Iterable < T > ) : void ;
  /**
   * Creates a new set containing the elements that appear in a or b but not
   * both.
   */
  function symmetricDifference < T = any > (a : Set < T > , b : Set < T > ) : Set < T > ;
  /**
   * Creates a new ES6 Set containing the elements that appear in both given
   * collections.
   */
  function union < T = any > (a : ಠ_ಠ.clutz.module$exports$goog$collections$sets.SetLike < T > , b : Iterable < T > ) : Set < T > ;
}
declare module 'goog:goog.collections.sets' {
  import sets = ಠ_ಠ.clutz.module$exports$goog$collections$sets;
  export = sets;
}
