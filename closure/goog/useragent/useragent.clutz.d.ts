//!! generated by clutz.
// Generated from useragent/useragent.js
declare namespace ಠ_ಠ.clutz.goog.userAgent {
  /**
   * Whether the user agent is running on Android.
   */
  let ANDROID : boolean ;
  let ASSUME_ANDROID : boolean ;
  let ASSUME_ANY_VERSION : boolean ;
  let ASSUME_EDGE : boolean ;
  let ASSUME_GECKO : boolean ;
  let ASSUME_IE : boolean ;
  let ASSUME_IPAD : boolean ;
  let ASSUME_IPHONE : boolean ;
  let ASSUME_IPOD : boolean ;
  let ASSUME_KAIOS : boolean ;
  let ASSUME_LINUX : boolean ;
  let ASSUME_MAC : boolean ;
  let ASSUME_MOBILE_WEBKIT : boolean ;
  let ASSUME_OPERA : boolean ;
  let ASSUME_WEBKIT : boolean ;
  let ASSUME_WINDOWS : boolean ;
  let ASSUME_X11 : boolean ;
  /**
   * For IE version < 7, documentMode is undefined, so attempt to use the
   * CSS1Compat property to see if we are in standards mode. If we are in
   * standards mode, treat the browser version as the document mode. Otherwise,
   * IE is emulating version 5.
   *
   * NOTE(user): Support for IE < 7 is long gone, so this is now simplified.
   * It returns document.documentMode for IE and undefined for everything else.
   */
  let DOCUMENT_MODE : number | undefined ;
  /**
   * Whether the user agent is Microsoft Edge (EdgeHTML based).
   */
  let EDGE : boolean ;
  /**
   * Whether the user agent is MS Internet Explorer or MS Edge (EdgeHTML based).
   */
  let EDGE_OR_IE : boolean ;
  /**
   * Whether the user agent is Gecko. Gecko is the rendering engine used by
   * Mozilla, Firefox, and others.
   */
  let GECKO : boolean ;
  /**
   * Whether the user agent is Internet Explorer.
   */
  let IE : boolean ;
  /**
   * Whether the user agent is running on iOS.
   */
  let IOS : boolean ;
  /**
   * Whether the user agent is running on an iPad.
   */
  let IPAD : boolean ;
  /**
   * Whether the user agent is running on an iPhone.
   */
  let IPHONE : boolean ;
  /**
   * Whether the user agent is running on an iPod.
   */
  let IPOD : boolean ;
  /**
   * Whether the user agent is running on KaiOS.
   */
  let KAIOS : boolean ;
  /**
   * Whether the user agent is running on a Linux operating system.
   *
   * Note that goog.userAgent.LINUX considers ChromeOS to be Linux,
   * while goog.labs.userAgent.platform considers ChromeOS and
   * Linux to be different OSes.
   */
  let LINUX : boolean ;
  /**
   * Whether the user agent is running on a Macintosh operating system.
   */
  let MAC : boolean ;
  /**
   * Whether the user agent is running on a mobile device.
   *
   * TODO(nnaze): Consider deprecating MOBILE when labs.userAgent
   * is promoted as the gecko/webkit logic is likely inaccurate.
   */
  let MOBILE : boolean ;
  /**
   * Whether the user agent is Presto-based Opera.
   */
  let OPERA : boolean ;
  /**
   * The platform (operating system) the user agent is running on. Default to
   * empty string because navigator.platform may not be defined (on Rhino, for
   * example).
   */
  let PLATFORM : string ;
  /**
   * Used while transitioning code to use WEBKIT instead.
   */
  let SAFARI : boolean ;
  /**
   * The version of the user agent. This is a string because it might contain
   * 'b' (as in beta) as well as multiple dots.
   */
  let VERSION : string ;
  /**
   * Whether the user agent is WebKit. WebKit is the rendering engine that
   * Safari, Edge Chromium, Opera Chromium, Android and others use.
   */
  let WEBKIT : boolean ;
  /**
   * Whether the user agent is running on a Windows operating system.
   */
  let WINDOWS : boolean ;
  /**
   * Whether the user agent is running on a X11 windowing system.
   */
  let X11 : boolean ;
  /**
   * Compares two version numbers.
   * @param v1 Version of first item.
   * @param v2 Version of second item.
   */
  function compare (v1 : string , v2 : string ) : number ;
  /**
   * TODO(nnaze): Change type to "Navigator" and update compilation targets.
   */
  function getNavigator ( ) : GlobalObject | null ;
  function getNavigatorTyped ( ) : Navigator | null ;
  /**
   * Returns the userAgent string for the current browser.
   */
  function getUserAgentString ( ) : string ;
  /**
   * Deprecated alias to `goog.userAgent.isDocumentModeOrHigher`.
   * @param version The version to check.
   */
  function isDocumentMode (a : number ) : boolean ;
  /**
   * Whether the IE effective document mode is higher or the same as the given
   * document mode version.
   * NOTE: Only for IE, return false for another browser.
   * @param documentMode The document mode version to check.
   */
  function isDocumentModeOrHigher (documentMode : number ) : boolean ;
  /**
   * Whether the user agent version is higher or the same as the given version.
   * NOTE: When checking the version numbers for Firefox and Safari, be sure to
   * use the engine's version, not the browser's version number.  For example,
   * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.
   * Opera and Internet Explorer versions match the product release number.<br>
   * @param version The version to check.
   */
  function isVersionOrHigher (version : string | number ) : boolean ;
}
declare module 'goog:goog.userAgent' {
  import userAgent = ಠ_ಠ.clutz.goog.userAgent;
  export = userAgent;
}
