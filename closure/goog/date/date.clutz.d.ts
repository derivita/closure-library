//!! generated by clutz.
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Number of milliseconds in a day.
   */
  let MS_PER_DAY : number ;
  /**
   * Returns the number of days for a given month.
   * @param year Year part of date.
   * @param month Month part of date.
   */
  function getNumberOfDaysInMonth (year : number , month : number ) : number ;
  /**
   * Static function for week number calculation. ISO 8601 implementation.
   * @param year Year part of date.
   * @param month Month part of date (0-11).
   * @param date Day part of date (1-31).
   * @param opt_weekDay Cut off weekday, defaults to Thursday.
   * @param opt_firstDayOfWeek First day of the week, defaults to Monday. Monday=0, Sunday=6.
   */
  function getWeekNumber (year : number , month : number , date : number , opt_weekDay ? : number , opt_firstDayOfWeek ? : number ) : number ;
  /**
   * Static function for year of the week. ISO 8601 implementation.
   * @param year Year part of date.
   * @param month Month part of date (0-11).
   * @param date Day part of date (1-31).
   * @param opt_weekDay Cut off weekday, defaults to Thursday.
   * @param opt_firstDayOfWeek First day of the week, defaults to Monday. Monday=0, Sunday=6.
   */
  function getYearOfWeek (year : number , month : number , date : number , opt_weekDay ? : number , opt_firstDayOfWeek ? : number ) : number ;
  /**
   * Returns whether the given year is a leap year.
   * @param year Year part of date.
   */
  function isLeapYear (year : number ) : boolean ;
  /**
   * Returns whether the given year is a long ISO year.
   * See {@link http://www.phys.uu.nl/~vgent/calendar/isocalendar_text3.htm}.
   * @param year Full year part of date.
   */
  function isLongIsoYear (year : number ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same day.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameDay (date : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same month.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameMonth (date : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  /**
   * Returns true if the 2 dates are in the same year.
   * @param date The time to check.
   * @param opt_now The current time.
   */
  function isSameYear (date : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date , opt_now ? : GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date ) : boolean ;
  function max < T = any , S = any > (date1 : T , date2 : S ) : T | S ;
  function min < T = any , S = any > (date1 : T , date2 : S ) : T | S ;
  /**
   * Pads the year to 4 unsigned digits, or 6 digits with a sign.
   */
  function padYear_ (year : number ) : string ;
  /**
   * Parses a datetime string expressed in ISO 8601 format. Overwrites the date
   * and optionally the time part of the given object with the parsed values.
   * @param dateTime Object whose fields will be set.
   * @param formatted A date or datetime expressed in ISO 8601 format.
   */
  function setIso8601DateTime (dateTime : ಠ_ಠ.clutz.goog.date.DateTime , formatted : string ) : boolean ;
}
declare module 'goog:goog.date' {
  import date = ಠ_ಠ.clutz.goog.date;
  export = date;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date. Defaults to current date if none is specified.
   *
   * Implements most methods of the native js Date object (except the time related
   * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
   * as if goog.date.Date was a synonym of Date. To make this more transparent,
   * Closure APIs should accept goog.date.DateLike instead of the real Date
   * object.
   */
  class Date {
    private noStructuralTyping_goog_date_Date : any;
    /**
     * Class representing a date. Defaults to current date if none is specified.
     *
     * Implements most methods of the native js Date object (except the time related
     * ones, {@see goog.date.DateTime}) and can be used interchangeably with it just
     * as if goog.date.Date was a synonym of Date. To make this more transparent,
     * Closure APIs should accept goog.date.DateLike instead of the real Date
     * object.
     * @param opt_year Four digit year or a date-like object. If not set, the created object will contain the date determined by goog.now().
     * @param opt_month Month, 0 = Jan, 11 = Dec.
     * @param opt_date Date of month, 1 - 31.
     */
    constructor (opt_year ? : number | GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date , opt_month ? : number , opt_date ? : number ) ;
    protected date : GlobalDate ;
    /**
     * Performs date calculation by adding the supplied interval to the date.
     * @param interval Date interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.Date ;
    /**
     * Tests whether given date is equal to this Date.
     * Note: This ignores units more precise than days (hours and below)
     * and also ignores timezone considerations.
     * @param other The date to compare.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Date | null ) : boolean ;
    getDate ( ) : number ;
    getDay ( ) : number ;
    getDayOfYear ( ) : number ;
    getFirstDayOfWeek ( ) : number ;
    getFirstWeekCutOffDay ( ) : number ;
    getFullYear ( ) : number ;
    getIsoWeekday ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    getMonth ( ) : ಠ_ಠ.clutz.goog.date.month ;
    getNumberOfDaysInMonth ( ) : number ;
    /**
     * Returns the number of milliseconds since 1 January 1970 00:00:00.
     */
    getTime ( ) : number ;
    /**
     * Returns timezone offset. The timezone offset is the delta in minutes between
     * UTC and your local time. E.g., UTC+10 returns -600. Daylight savings time
     * prevents this value from being constant.
     */
    getTimezoneOffset ( ) : number ;
    /**
     * Returns timezone offset as a string. Returns offset in [+-]HH:mm format or Z
     * for UTC.
     */
    getTimezoneOffsetString ( ) : string ;
    getUTCDate ( ) : number ;
    getUTCDay ( ) : number ;
    getUTCFullYear ( ) : number ;
    getUTCHours ( ) : number ;
    getUTCIsoWeekday ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    getUTCMinutes ( ) : number ;
    getUTCMonth ( ) : ಠ_ಠ.clutz.goog.date.month ;
    getUTCWeekday ( ) : number ;
    getWeekNumber ( ) : number ;
    getWeekday ( ) : number ;
    /**
     * Alias for getFullYear.
     */
    getYear ( ) : number ;
    /**
     * Returns year in “Week of Year” based calendars in which the year transition
     * occurs on a week boundary.
     */
    getYearOfWeek ( ) : number ;
    /**
     * Sets the date.
     * @param date Date object to set date from.
     */
    set (date : ಠ_ಠ.clutz.goog.date.Date | null ) : void ;
    /**
     * Sets the day part of the date.
     * @param date The day part.
     */
    setDate (date : number ) : void ;
    /**
     * Sets the first day of week.
     * @param day 0 = Mon, 6 = Sun.
     */
    setFirstDayOfWeek (day : number ) : void ;
    /**
     * Sets cut off weekday used for week number calculations. 0 = Mon, 6 = Sun.
     * @param day The cut off weekday.
     */
    setFirstWeekCutOffDay (day : number ) : void ;
    /**
     * Sets the year part of the date.
     * @param year Four digit year.
     */
    setFullYear (year : number ) : void ;
    /**
     * Sets the month part of the date.
     *
     * TODO(nnaze): Update type to goog.date.month.
     * @param month The month, where 0 = Jan, 11 = Dec.
     */
    setMonth (month : number ) : void ;
    /**
     * Sets the value of the date object as expressed in the number of milliseconds
     * since 1 January 1970 00:00:00.
     * @param ms Number of milliseconds since 1 Jan 1970.
     */
    setTime (ms : number ) : void ;
    /**
     * Sets the day part of the date according to universal time.
     * @param date The UTC date.
     */
    setUTCDate (date : number ) : void ;
    /**
     * Sets the year part of the date according to universal time.
     * @param year Four digit year.
     */
    setUTCFullYear (year : number ) : void ;
    /**
     * Sets the month part of the date according to universal time.
     * @param month The month, where 0 = Jan, 11 = Dec.
     */
    setUTCMonth (month : number ) : void ;
    /**
     * Alias for setFullYear.
     * @param year Four digit year.
     */
    setYear (year : number ) : void ;
    /**
     * Returns ISO 8601 string representation of date. Consistent with the
     * standard built-in Date#toISOString method, the year is either four digits
     * (YYYY) or six with a sign prefix (±YYYYYY), since ISO 8601 requires the
     * number of digits in the year to be agreed upon in advance.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Overloaded toString method for object.
     */
    toString ( ) : string ;
    /**
     * Returns ISO 8601 string representation of date according to universal time.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toUTCIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    valueOf ( ) : number ;
    /**
     * Compares two dates.  May be used as a sorting function.
     * @param date1 Date to compare.
     * @param date2 Date to compare.
     */
    static compare (date1 : GlobalDate | ಠ_ಠ.clutz.goog.date.Date , date2 : GlobalDate | ಠ_ಠ.clutz.goog.date.Date ) : number ;
    /**
     * Parses an ISO 8601 string as a `goog.date.Date`.
     * @param formatted ISO 8601 string to parse.
     */
    static fromIsoString (formatted : string ) : ಠ_ಠ.clutz.goog.date.Date | null ;
  }
}
declare module 'goog:goog.date.Date' {
  import Date = ಠ_ಠ.clutz.goog.date.Date;
  export default Date;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  type DateLike = GlobalDate | null | ಠ_ಠ.clutz.goog.date.Date ;
}
declare module 'goog:goog.date.DateLike' {
  import DateLike = ಠ_ಠ.clutz.goog.date.DateLike;
  export default DateLike;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date and time. Defaults to current date and time if none
   * is specified.
   *
   * Implements most methods of the native js Date object and can be used
   * interchangeably with it just as if goog.date.DateTime was a subclass of Date.
   */
  class DateTime extends ಠ_ಠ.clutz.goog.date.Date {
    private noStructuralTyping_goog_date_DateTime : any;
    /**
     * Class representing a date and time. Defaults to current date and time if none
     * is specified.
     *
     * Implements most methods of the native js Date object and can be used
     * interchangeably with it just as if goog.date.DateTime was a subclass of Date.
     * @param opt_year Four digit year or a date-like object. If not set, the created object will contain the date determined by goog.now().
     * @param opt_month Month, 0 = Jan, 11 = Dec.
     * @param opt_date Date of month, 1 - 31.
     * @param opt_hours Hours, 0 - 23.
     * @param opt_minutes Minutes, 0 - 59.
     * @param opt_seconds Seconds, 0 - 61.
     * @param opt_milliseconds Milliseconds, 0 - 999.
     */
    constructor (opt_year ? : number | { getTime : any } | null , opt_month ? : number , opt_date ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number , opt_milliseconds ? : number ) ;
    /**
     * Performs date calculation by adding the supplied interval to the date.
     * @param interval Date interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.DateTime ;
    /**
     * Tests whether given datetime is exactly equal to this DateTime.
     * @param other The datetime to compare.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Date | null ) : boolean ;
    /**
     * Returns the hours part of the datetime.
     */
    getHours ( ) : number ;
    /**
     * Returns the milliseconds part of the datetime.
     */
    getMilliseconds ( ) : number ;
    /**
     * Returns the minutes part of the datetime.
     */
    getMinutes ( ) : number ;
    /**
     * Returns the seconds part of the datetime.
     */
    getSeconds ( ) : number ;
    /**
     * Returns the day of week according to universal time, US style.
     */
    getUTCDay ( ) : ಠ_ಠ.clutz.goog.date.weekDay ;
    /**
     * Returns the hours part of the datetime according to universal time.
     */
    getUTCHours ( ) : number ;
    /**
     * Returns the milliseconds part of the datetime according to universal time.
     */
    getUTCMilliseconds ( ) : number ;
    /**
     * Returns the minutes part of the datetime according to universal time.
     */
    getUTCMinutes ( ) : number ;
    /**
     * Returns the seconds part of the datetime according to universal time.
     */
    getUTCSeconds ( ) : number ;
    isMidnight ( ) : boolean ;
    /**
     * Sets the hours part of the datetime.
     * @param hours An integer between 0 and 23, representing the hour.
     */
    setHours (hours : number ) : void ;
    /**
     * Sets the milliseconds part of the datetime.
     * @param ms Integer between 0 and 999, representing the milliseconds.
     */
    setMilliseconds (ms : number ) : void ;
    /**
     * Sets the minutes part of the datetime.
     * @param minutes Integer between 0 and 59, representing the minutes.
     */
    setMinutes (minutes : number ) : void ;
    /**
     * Sets the seconds part of the datetime.
     * @param seconds Integer between 0 and 59, representing the seconds.
     */
    setSeconds (seconds : number ) : void ;
    /**
     * Sets the hours part of the datetime according to universal time.
     * @param hours An integer between 0 and 23, representing the hour.
     */
    setUTCHours (hours : number ) : void ;
    /**
     * Sets the seconds part of the datetime according to universal time.
     * @param ms Integer between 0 and 999, representing the milliseconds.
     */
    setUTCMilliseconds (ms : number ) : void ;
    /**
     * Sets the minutes part of the datetime according to universal time.
     * @param minutes Integer between 0 and 59, representing the minutes.
     */
    setUTCMinutes (minutes : number ) : void ;
    /**
     * Sets the seconds part of the datetime according to universal time.
     * @param seconds Integer between 0 and 59, representing the seconds.
     */
    setUTCSeconds (seconds : number ) : void ;
    /**
     * Returns ISO 8601 string representation of date/time. Consistent with the
     * standard built-in Date#toISOString method, the year is either four digits
     * (YYYY) or six with a sign prefix (±YYYYYY), since ISO 8601 requires the
     * number of digits in the year to be agreed upon in advance.
     * @param opt_verbose Whether the verbose format should be used instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Generates time label for the datetime in standard ISO 24-hour time format.
     * E.g., '06:00:00' or '23:30:15'.
     * @param opt_showSeconds Whether to shows seconds. Defaults to TRUE.
     */
    toIsoTimeString (opt_showSeconds ? : boolean ) : string ;
    /**
     * Overloaded toString method for object.
     */
    toString ( ) : string ;
    /**
     * Returns ISO 8601 string representation of date/time according to universal
     * time.
     * @param opt_verbose Whether the opt_verbose format should be returned instead of the default compact one.
     * @param opt_tz Whether the timezone offset should be included in the string.
     */
    toUTCIsoString (opt_verbose ? : boolean , opt_tz ? : boolean ) : string ;
    /**
     * Returns RFC 3339 string representation of datetime in UTC.
     */
    toUTCRfc3339String ( ) : string ;
    /**
     * Generates time label for the datetime, e.g., '5:30 AM'.
     * By default this does not pad hours (e.g., to '05:30') and it does add
     * an am/pm suffix.
     * TODO(user): i18n -- hardcoding time format like this is bad.  E.g., in CJK
     * locales, need Chinese characters for hour and minute units.
     * @param opt_padHours Whether to pad hours, e.g., '05:30' vs '5:30'.
     * @param opt_showAmPm Whether to show the 'am' and 'pm' suffix.
     * @param opt_omitZeroMinutes E.g., '5:00pm' becomes '5pm', but '5:01pm' remains '5:01pm'.
     */
    toUsTimeString (opt_padHours ? : boolean , opt_showAmPm ? : boolean , opt_omitZeroMinutes ? : boolean ) : string ;
    /**
     * Returns XML Schema 2 string representation of date/time.
     * The return value is also ISO 8601 compliant.
     * @param opt_timezone Should the timezone offset be included in the string?.
     */
    toXmlDateTime (opt_timezone ? : boolean ) : string ;
    /**
     * Parses an ISO 8601 string as a `goog.date.DateTime`.
     * @param formatted ISO 8601 string to parse.
     */
    static fromIsoString (formatted : string ) : ಠ_ಠ.clutz.goog.date.DateTime | null ;
    /**
     * Creates a DateTime from a datetime string expressed in RFC 822 format.
     * @param formatted A date or datetime expressed in RFC 822 format.
     */
    static fromRfc822String (formatted : string ) : ಠ_ಠ.clutz.goog.date.DateTime | null ;
    static fromTimestamp (timestamp : number ) : ಠ_ಠ.clutz.goog.date.DateTime ;
  }
}
declare module 'goog:goog.date.DateTime' {
  import DateTime = ಠ_ಠ.clutz.goog.date.DateTime;
  export default DateTime;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date/time interval. Used for date calculations.
   * <pre>
   * new goog.date.Interval(0, 1) // One month
   * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
   * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
   * </pre>
   */
  class Interval {
    private noStructuralTyping_goog_date_Interval : any;
    /**
     * Class representing a date/time interval. Used for date calculations.
     * <pre>
     * new goog.date.Interval(0, 1) // One month
     * new goog.date.Interval(0, 0, 3, 1) // Three days and one hour
     * new goog.date.Interval(goog.date.Interval.DAYS, 1) // One day
     * </pre>
     * @param opt_years Years or string representing date part.
     * @param opt_months Months or number of whatever date part specified by first parameter.
     * @param opt_days Days.
     * @param opt_hours Hours.
     * @param opt_minutes Minutes.
     * @param opt_seconds Seconds.
     */
    constructor (opt_years ? : number | string , opt_months ? : number , opt_days ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number ) ;
    days : number ;
    hours : number ;
    minutes : number ;
    months : number ;
    seconds : number ;
    years : number ;
    /**
     * Adds the Interval in the argument to this Interval field by field.
     * @param interval The Interval to add.
     */
    add (interval : ಠ_ಠ.clutz.goog.date.Interval | null ) : void ;
    clone ( ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Tests whether the given interval is equal to this interval.
     * Note, this is a simple field-by-field comparison, it doesn't
     * account for comparisons like "12 months == 1 year".
     * @param other The interval to test.
     */
    equals (other : ಠ_ಠ.clutz.goog.date.Interval | null ) : boolean ;
    getInverse ( ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Gets the total number of seconds in the time interval. Assumes that months
     * and years are empty.
     */
    getTotalSeconds ( ) : number ;
    isZero ( ) : boolean ;
    /**
     * Calculates n * (this interval) by memberwise multiplication.
     * @param n An integer.
     */
    times (n : number ) : ಠ_ಠ.clutz.goog.date.Interval ;
    /**
     * Serializes goog.date.Interval into XML Schema duration (ISO 8601 extended).
     * @param opt_verbose Include zero fields in the duration string.
     */
    toIsoString (opt_verbose ? : boolean ) : string | null ;
    /**
     * Days constant for the date parts.
     */
    static DAYS : string ;
    /**
     * Hours constant for the date parts.
     */
    static HOURS : string ;
    /**
     * Minutes constant for the date parts.
     */
    static MINUTES : string ;
    /**
     * Months constant for the date parts.
     */
    static MONTHS : string ;
    /**
     * Seconds constant for the date parts.
     */
    static SECONDS : string ;
    /**
     * Years constant for the date parts.
     */
    static YEARS : string ;
    /**
     * Parses an XML Schema duration (ISO 8601 extended).
     * @param duration An XML schema duration in textual format. Recurring durations and weeks are not supported.
     */
    static fromIsoString (duration : string ) : ಠ_ಠ.clutz.goog.date.Interval | null ;
  }
}
declare module 'goog:goog.date.Interval' {
  import Interval = ಠ_ಠ.clutz.goog.date.Interval;
  export default Interval;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Constants for months.
   */
  /**
   * Constants for months.
   */
  enum month {
    APR = 3.0 ,
    AUG = 7.0 ,
    DEC = 11.0 ,
    FEB = 1.0 ,
    JAN = 0.0 ,
    JUL = 6.0 ,
    JUN = 5.0 ,
    MAR = 2.0 ,
    MAY = 4.0 ,
    NOV = 10.0 ,
    OCT = 9.0 ,
    SEP = 8.0 ,
  }
}
declare module 'goog:goog.date.month' {
  import month = ಠ_ಠ.clutz.goog.date.month;
  export default month;
}
// Generated from date/date.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Constants for weekdays.
   */
  /**
   * Constants for weekdays.
   */
  enum weekDay {
    FRI = 4.0 ,
    MON = 0.0 ,
    SAT = 5.0 ,
    SUN = 6.0 ,
    THU = 3.0 ,
    TUE = 1.0 ,
    WED = 2.0 ,
  }
}
declare module 'goog:goog.date.weekDay' {
  import weekDay = ಠ_ಠ.clutz.goog.date.weekDay;
  export default weekDay;
}
