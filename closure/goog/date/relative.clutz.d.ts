//!! generated by clutz.
// Generated from date/relative.js
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  /**
   * Accepts a timestamp in milliseconds and outputs a relative time in the form
   * of "1 hour ago", "1 day ago", "in 1 hour", "in 2 days" etc.  If the date
   * delta is over 2 weeks, then the output string will be empty.
   * @param dateMs Date in milliseconds.
   */
  function format (dateMs : number ) : string ;
  /**
   * Accepts a timestamp in milliseconds and outputs a relative day. i.e. "Today",
   * "Yesterday", "Tomorrow", or "Sept 15".
   * @param dateMs Date in milliseconds.
   * @param opt_formatter Formatter for the date. Defaults to form 'MMM dd'.
   */
  function formatDay (dateMs : number , opt_formatter ? : (a : GlobalDate ) => string ) : string ;
  /**
   * Accepts a timestamp in milliseconds and outputs a relative time in the form
   * of "1 hour ago", "1 day ago".  All future times will be returned as 0 minutes
   * ago.
   *
   * This is provided for compatibility with users of the previous incarnation of
   * the above {@see #format} method who relied on it protecting against
   * future dates.
   * @param dateMs Date in milliseconds.
   */
  function formatPast (dateMs : number ) : string ;
  /**
   * Formats a date, adding the relative date in parenthesis.  If the date is less
   * than 24 hours then the time will be printed, otherwise the full-date will be
   * used.  Examples:
   * 2:20 PM (1 minute ago)
   * Monday, February 27, 2009 (4 days ago)
   * Tuesday, March 20, 2005    // Too long ago for a relative date.
   * @param date A date object.
   * @param opt_shortTimeMsg An optional short time message can be provided if available, so that it's not recalculated in this function.
   * @param opt_fullDateMsg An optional date message can be provided if available, so that it's not recalculated in this function.
   */
  function getDateString (date : GlobalDate | ಠ_ಠ.clutz.goog.date.DateTime , opt_shortTimeMsg ? : string , opt_fullDateMsg ? : string ) : string ;
  /**
   * Formats a date, adding the relative date in parenthesis.   Functions the same
   * as #getDateString but ensures that the date is always seen to be in the past.
   * If the date is in the future, it will be shown as 0 minutes ago.
   *
   * This is provided for compatibility with users of the previous incarnation of
   * the above {@see #getDateString} method who relied on it protecting against
   * future dates.
   * @param date A date object.
   * @param opt_shortTimeMsg An optional short time message can be provided if available, so that it's not recalculated in this function.
   * @param opt_fullDateMsg An optional date message can be provided if available, so that it's not recalculated in this function.
   */
  function getPastDateString (date : GlobalDate | null | ಠ_ಠ.clutz.goog.date.DateTime , opt_shortTimeMsg ? : string , opt_fullDateMsg ? : string ) : string ;
  /**
   * Sets casing mode to a boolean.
   * If true, the first letter of day formats ("today", "yesterday", "tommorow")
   * is capitalized using locale-aware toUpper.
   * If false, no casing is done on basic data.
   */
  function setCasingMode (capitalizeMode : boolean ) : void ;
  /**
   * Sets a different formatting function for time deltas ("3 days ago").
   * While its visibility is public, this function is Closure-internal and should
   * not be used in application code.
   * @param formatter The function to use for formatting time deltas (i.e. relative times).
   */
  function setTimeDeltaFormatter (formatter : ಠ_ಠ.clutz.goog.date.relative.TimeDeltaFormatter ) : void ;
}
declare module 'goog:goog.date.relative' {
  import relative = ಠ_ಠ.clutz.goog.date.relative;
  export = relative;
}
// Generated from date/relative.js
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  /**
   * Caller-settable function for formatting time. Default is internal
   * formatting using goog.i18n.RelativeDateTimeFormat
   */
  type TimeDeltaFormatter = (a : number , b : boolean , c : ಠ_ಠ.clutz.goog.date.relative.Unit ) => string ;
}
declare module 'goog:goog.date.relative.TimeDeltaFormatter' {
  import TimeDeltaFormatter = ಠ_ಠ.clutz.goog.date.relative.TimeDeltaFormatter;
  export default TimeDeltaFormatter;
}
// Generated from date/relative.js
declare namespace ಠ_ಠ.clutz.goog.date.relative {
  /**
   * Enumeration used to identify time units internally.
   */
  /**
   * Enumeration used to identify time units internally.
   */
  enum Unit {
    DAYS = 2.0 ,
    HOURS = 1.0 ,
    MINUTES = 0.0 ,
  }
}
declare module 'goog:goog.date.relative.Unit' {
  import Unit = ಠ_ಠ.clutz.goog.date.relative.Unit;
  export default Unit;
}
