//!! generated by clutz.
// Generated from date/utcdatetime.js
declare namespace ಠ_ಠ.clutz.goog.date {
  /**
   * Class representing a date/time in GMT+0 time zone, without daylight saving.
   * Defaults to current date and time if none is specified. The get... and the
   * getUTC... methods are equivalent.
   */
  class UtcDateTime extends ಠ_ಠ.clutz.goog.date.DateTime {
    private noStructuralTyping_goog_date_UtcDateTime : any;
    /**
     * Class representing a date/time in GMT+0 time zone, without daylight saving.
     * Defaults to current date and time if none is specified. The get... and the
     * getUTC... methods are equivalent.
     * @param opt_year Four digit UTC year or a date-like object.  If not set, the created object will contain the date determined by goog.now().
     * @param opt_month UTC month, 0 = Jan, 11 = Dec.
     * @param opt_date UTC date of month, 1 - 31.
     * @param opt_hours UTC hours, 0 - 23.
     * @param opt_minutes UTC minutes, 0 - 59.
     * @param opt_seconds UTC seconds, 0 - 59.
     * @param opt_milliseconds UTC milliseconds, 0 - 999.
     */
    constructor (opt_year ? : number | ಠ_ಠ.clutz.goog.date.DateLike | null , opt_month ? : number , opt_date ? : number , opt_hours ? : number , opt_minutes ? : number , opt_seconds ? : number , opt_milliseconds ? : number ) ;
    date : GlobalDate ;
    add (interval ? : any ) : void ;
    /**
     * Clones the UtcDateTime object.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.date.UtcDateTime ;
    getDate : any ;
    getDay : any ;
    getFullYear : any ;
    getHours : any ;
    getMilliseconds : any ;
    getMinutes : any ;
    getMonth : any ;
    getSeconds : any ;
    getTimezoneOffset ( ) : any ;
    setDate : any ;
    setFullYear : any ;
    setHours : any ;
    setMilliseconds : any ;
    setMinutes : any ;
    setMonth : any ;
    setSeconds : any ;
    /**
     * Creates a DateTime from a UTC datetime string expressed in ISO 8601 format.
     * @param formatted A date or datetime expressed in ISO 8601 format.
     */
    static fromIsoString (formatted : string ) : ಠ_ಠ.clutz.goog.date.UtcDateTime | null ;
    static fromTimestamp (timestamp : number ) : ಠ_ಠ.clutz.goog.date.UtcDateTime ;
  }
}
declare module 'goog:goog.date.UtcDateTime' {
  import UtcDateTime = ಠ_ಠ.clutz.goog.date.UtcDateTime;
  export default UtcDateTime;
}
