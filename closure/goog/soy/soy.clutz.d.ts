//!! generated by clutz.
// Generated from soy/soy.js
declare namespace ಠ_ಠ.clutz.goog.soy {
  type CompatibleIj = module$contents$goog$soy_IjData | { [ key: string ]: any } ;
  export import IjData = ಠ_ಠ.clutz.module$contents$goog$soy_IjData ;
  type StrictHtmlTemplate = (a ? : any , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => ಠ_ಠ.clutz.module$exports$goog$soy$data$SanitizedHtml ;
  type StrictTemplate = (a ? : any , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => string | ಠ_ಠ.clutz.module$exports$goog$soy$data$SanitizedContent ;
  type TextTemplate = (a ? : any , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => string ;
  /**
   * A define to always stub SoyJS with Incremental DOM templates.
   */
  let alwaysStub : boolean ;
  function convertToElement (templateResult : ಠ_ಠ.clutz.module$exports$goog$soy$data$SanitizedContent , domHelper ? : ಠ_ಠ.clutz.module$exports$goog$dom.DomHelper | null ) : GlobalElement ;
  /**
   * See above.
   */
  function disableStubbingAtRuntime ( ) : void ;
  function renderAsElement < ARG_TYPES = any > (template : (a : ARG_TYPES , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => any , templateData ? : ARG_TYPES , injectedData ? : GlobalObject | null , domHelper ? : ಠ_ಠ.clutz.module$exports$goog$dom.DomHelper | null ) : GlobalElement ;
  function renderAsFragment < ARG_TYPES = any > (template : (a : ARG_TYPES , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => any , templateData ? : ARG_TYPES , injectedData ? : GlobalObject | null , domHelper ? : ಠ_ಠ.clutz.module$exports$goog$dom.DomHelper | null ) : Node ;
  function renderAsText < ARG_TYPES = any > (template : (a : ARG_TYPES , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => any , templateData ? : ARG_TYPES , injectedData ? : GlobalObject | null ) : string ;
  function renderElement < ARG_TYPES = any > (element : GlobalElement | null | ShadowRoot , template : (a : ARG_TYPES , b ? : module$contents$goog$soy_IjData | { [ key: string ]: any } | null ) => any , templateData ? : ARG_TYPES , injectedData ? : GlobalObject | null ) : void ;
  function renderHtml < ARG_TYPES = any > (element : GlobalElement | null | ShadowRoot , templateResult : ಠ_ಠ.clutz.module$exports$goog$soy$data$SanitizedContent ) : void ;
  /**
   * A define to control the behavior of SoyJS. If set to true, all Soy templates
   * will check for the the presence of a stub template generated by Incremental
   * Dom, and delegate to it if present. If it is set, then it delegates to the
   * function instead.
   *
   * This is a define because this adds a set amount of code per template to check
   * for the stub.
   */
  let shouldStub : boolean ;
  /**
   * A runtime control for whether a Soy template will be replaced with an
   * Incremental DOM template. This is to allow teams to run a 3-arm experiment
   * with the default being NOOP (IDOM not not loaded), A1 (IDOM and SoyJS code
   * loaded), and A2 (A1 but code stubbed at runtime).
   */
  function shouldStubAtRuntime ( ) : boolean ;
}
declare module 'goog:goog.soy' {
  import soy = ಠ_ಠ.clutz.goog.soy;
  export = soy;
}
// Generated from soy/soy.js
declare namespace ಠ_ಠ.clutz {
  /**
   * A structural interface for injected data.
   *
   * <p>Soy generated code contributes optional properties.
   */
  interface module$contents$goog$soy_IjData {
  }
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$soy {
  export import IjData = ಠ_ಠ.clutz.module$contents$goog$soy_IjData ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$soy {
  export import CompatibleIj = ಠ_ಠ.clutz.null ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$soy {
  export import StrictTemplate = ಠ_ಠ.clutz.null ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$soy {
  export import StrictHtmlTemplate = ಠ_ಠ.clutz.null ;
}
declare namespace ಠ_ಠ.clutz.module$exports$goog$soy {
  export import TextTemplate = ಠ_ಠ.clutz.null ;
}
