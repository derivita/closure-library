//!! generated by clutz.
// Generated from labs/pubsub/broadcastpubsub.js
declare namespace ಠ_ಠ.clutz.goog.labs.pubsub {
  /**
   * Topic-based publish/subscribe messaging implementation that provides
   * communication between browsing contexts that share the same origin.
   *
   * Wrapper around PubSub that utilizes localStorage to broadcast publications to
   * all browser windows with the same origin as the publishing context. This
   * allows for topic-based publish/subscribe implementation of strings shared by
   * all browser contexts that share the same origin.
   *
   * Delivery is guaranteed on all browsers except IE8 where topics expire after a
   * timeout. Publishing of a topic within a callback function provides no
   * guarantee on ordering in that there is a possibility that separate origin
   * contexts may see topics in a different order.
   *
   * This class is not secure and in certain cases (e.g., a browser crash) data
   * that is published can persist in localStorage indefinitely. Do not use this
   * class to communicate private or confidential information.
   *
   * On IE8, localStorage is shared by the http and https origins. An attacker
   * could possibly leverage this to publish to the secure origin.
   *
   * goog.labs.pubsub.BroadcastPubSub wraps an instance of PubSub rather than
   * subclassing because the base PubSub class allows publishing of arbitrary
   * objects.
   *
   * Special handling is done for the IE8 browsers. See the IE8_EVENTS_KEY_
   * constant and the `publish` function for more information.
   */
  class BroadcastPubSub extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_labs_pubsub_BroadcastPubSub : any;
    /**
     * Topic-based publish/subscribe messaging implementation that provides
     * communication between browsing contexts that share the same origin.
     *
     * Wrapper around PubSub that utilizes localStorage to broadcast publications to
     * all browser windows with the same origin as the publishing context. This
     * allows for topic-based publish/subscribe implementation of strings shared by
     * all browser contexts that share the same origin.
     *
     * Delivery is guaranteed on all browsers except IE8 where topics expire after a
     * timeout. Publishing of a topic within a callback function provides no
     * guarantee on ordering in that there is a possibility that separate origin
     * contexts may see topics in a different order.
     *
     * This class is not secure and in certain cases (e.g., a browser crash) data
     * that is published can persist in localStorage indefinitely. Do not use this
     * class to communicate private or confidential information.
     *
     * On IE8, localStorage is shared by the http and https origins. An attacker
     * could possibly leverage this to publish to the secure origin.
     *
     * goog.labs.pubsub.BroadcastPubSub wraps an instance of PubSub rather than
     * subclassing because the base PubSub class allows publishing of arbitrary
     * objects.
     *
     * Special handling is done for the IE8 browsers. See the IE8_EVENTS_KEY_
     * constant and the `publish` function for more information.
     */
    constructor ( ) ;
    /**
     * Clears the subscription list for a topic, or all topics if unspecified.
     * @param opt_topic Topic to clear (all topics if unspecified).
     */
    clear (opt_topic ? : string ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the number of subscriptions to the given topic (or all topics if
     * unspecified). This number will not change while publishing any messages.
     * @param opt_topic The topic (all topics if unspecified).
     */
    getCount (opt_topic ? : string ) : number ;
    /**
     * Publishes a message to a topic. Remote subscriptions in other tabs/windows
     * are dispatched via local storage events. Local subscriptions are called
     * asynchronously via Timer event in order to simulate remote behavior locally.
     * @param topic Topic to publish to.
     * @param var_args String arguments that are applied to each subscription function.
     */
    publish (topic : string ,  ...var_args : string [] ) : void ;
    /**
     * Subscribes a function to a topic. The function is invoked as a method on the
     * given `opt_context` object, or in the global scope if no context is
     * specified. Subscribing the same function to the same topic multiple times
     * will result in multiple function invocations while publishing. Returns a
     * subscription key that can be used to unsubscribe the function from the topic
     * via {@link #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribe (topic : string , fn : Function | null , opt_context ? : GlobalObject | null ) : number ;
    /**
     * Subscribes a single-use function to a topic. The function is invoked as a
     * method on the given `opt_context` object, or in the global scope if no
     * context is specified, and is then unsubscribed. Returns a subscription key
     * that can be used to unsubscribe the function from the topic via {@link
     * #unsubscribeByKey}.
     * @param topic Topic to subscribe to.
     * @param fn Function to be invoked once and then unsubscribed when a message is published to the given topic.
     * @param opt_context Object in whose context the function is to be called (the global scope if none).
     */
    subscribeOnce (topic : string , fn : Function | null , opt_context ? : GlobalObject | null ) : number ;
    /**
     * Unsubscribes a function from a topic. Only deletes the first match found.
     * Returns a Boolean indicating whether a subscription was removed.
     * @param topic Topic to unsubscribe from.
     * @param fn Function to unsubscribe.
     * @param opt_context Object in whose context the function was to be called (the global scope if none).
     */
    unsubscribe (topic : string , fn : Function | null , opt_context ? : GlobalObject | null ) : boolean ;
    /**
     * Removes a subscription based on the key returned by {@link #subscribe}. No-op
     * if no matching subscription is found. Returns a Boolean indicating whether a
     * subscription was removed.
     * @param key Subscription key.
     */
    unsubscribeByKey (key : number ) : boolean ;
  }
}
declare module 'goog:goog.labs.pubsub.BroadcastPubSub' {
  import BroadcastPubSub = ಠ_ಠ.clutz.goog.labs.pubsub.BroadcastPubSub;
  export default BroadcastPubSub;
}
