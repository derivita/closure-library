//!! generated by clutz.
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * The Content-Type HTTP header name.
   */
  let CONTENT_TYPE_HEADER : string ;
  /**
   * The Content-Type HTTP header value for a url-encoded form.
   */
  let FORM_CONTENT_TYPE : string ;
  /**
   * Sends a get request, returning a promise that will be resolved
   * with the response text once the request completes.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request.
   */
  function get (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < string > ;
  /**
   * Sends a get request, returning a promise that will be resolved with the
   * response as a Blob.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request. If responseType is set, it will be ignored for this request.
   */
  function getBlob (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Blob > ;
  /**
   * Sends a get request, returning a promise that will be resolved with the
   * response as an array of bytes.
   *
   * Supported in all XMLHttpRequest level 2 browsers, as well as IE9. IE8 and
   * earlier are not supported.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request. If responseType is set, it will be ignored for this request.
   */
  function getBytes (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < Uint8Array | number [] > ;
  /**
   * Sends a get request, returning a promise that will be resolved with
   * the parsed response text once the request completes.
   * @param url The URL to request.
   * @param opt_options Configuration options for the request.
   */
  function getJson (url : string , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < GlobalObject | null > ;
  function parseJson (responseText : string , opt_xssiPrefix ? : string ) : GlobalObject ;
  /**
   * Sends a post request, returning a promise that will be resolved
   * with the response text once the request completes.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function post (url : string , data : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < string > ;
  /**
   * Sends a post request, returning a promise that will be resolved with
   * the parsed response text once the request completes.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function postJson (url : string , data : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < GlobalObject | null > ;
  /**
   * Sends a request, returning a promise that will be resolved
   * with the XHR object once the request completes.
   *
   * If content type hasn't been set in opt_options headers, and hasn't been
   * explicitly set to null, default to form-urlencoded/UTF8 for POSTs.
   * @param method The HTTP method for the request.
   * @param url The URL to request.
   * @param data The body of the post request.
   * @param opt_options Configuration options for the request.
   */
  function send (method : string , url : string , data : ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string | undefined , opt_options ? : ಠ_ಠ.clutz.goog.labs.net.xhr.Options ) : ಠ_ಠ.clutz.goog.Promise < ಠ_ಠ.clutz.goog.net.XhrLike.OrNative > ;
}
declare module 'goog:goog.labs.net.xhr' {
  import xhr = ಠ_ಠ.clutz.goog.labs.net.xhr;
  export = xhr;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Generic error that may occur during a request.
   */
  class Error extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_labs_net_xhr_Error : any;
    /**
     * Generic error that may occur during a request.
     * @param message The error message.
     * @param url The URL that was being requested.
     * @param request The XHR that failed.
     */
    constructor (message : string , url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike.OrNative ) ;
    /**
     * The URL that was requested.
     */
    url : string ;
    /**
     * The XMLHttpRequest corresponding with the failed request.
     */
    xhr : ಠ_ಠ.clutz.goog.net.XhrLike.OrNative ;
    name : string ;
  }
}
declare module 'goog:goog.labs.net.xhr.Error' {
  import Error = ಠ_ಠ.clutz.goog.labs.net.xhr.Error;
  export default Error;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Class for HTTP errors.
   */
  class HttpError extends ಠ_ಠ.clutz.goog.labs.net.xhr.Error {
    private noStructuralTyping_goog_labs_net_xhr_HttpError : any;
    /**
     * Class for HTTP errors.
     * @param status The HTTP status code of the response.
     * @param url The URL that was being requested.
     * @param request The XHR that failed.
     */
    constructor (status : number , url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike.OrNative ) ;
    /**
     * The HTTP status code for the error.
     */
    status : number ;
    name : string ;
  }
}
declare module 'goog:goog.labs.net.xhr.HttpError' {
  import HttpError = ಠ_ಠ.clutz.goog.labs.net.xhr.HttpError;
  export default HttpError;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Configuration options for an XMLHttpRequest.
   * - headers: map of header key/value pairs.
   * - timeoutMs: number of milliseconds after which the request will be timed
   * out by the client. Default is to allow the browser to handle timeouts.
   * - withCredentials: whether user credentials are to be included in a
   * cross-origin request. See:
   * http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute
   * - mimeType: allows the caller to override the content-type and charset for
   * the request. See:
   * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-overridemimetype
   * - responseType: may be set to change the response type to an arraybuffer or
   * blob for downloading binary data. See:
   * http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-responsetype]
   * - xmlHttpFactory: allows the caller to override the factory used to create
   * XMLHttpRequest objects.
   * - xssiPrefix: Prefix used for protecting against XSSI attacks, which should
   * be removed before parsing the response as JSON.
   */
  type Options = { headers ? : { [ /* warning: coerced from ? */ key: string ]: string } | null , mimeType ? : string , responseType ? : ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType , timeoutMs ? : number , withCredentials ? : boolean , xmlHttpFactory ? : ಠ_ಠ.clutz.goog.net.XmlHttpFactory | null , xssiPrefix ? : string } ;
}
declare module 'goog:goog.labs.net.xhr.Options' {
  import Options = ಠ_ಠ.clutz.goog.labs.net.xhr.Options;
  export default Options;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Defines the types that are allowed as post data.
   */
  type PostData = ArrayBuffer | null | ArrayBufferView | Blob | Document | FormData | string | undefined ;
}
declare module 'goog:goog.labs.net.xhr.PostData' {
  import PostData = ಠ_ಠ.clutz.goog.labs.net.xhr.PostData;
  export default PostData;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Supported data types for the responseType field.
   * See: http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-response
   */
  /**
   * Supported data types for the responseType field.
   * See: http://www.w3.org/TR/XMLHttpRequest/#dom-xmlhttprequest-response
   */
  enum ResponseType {
    ARRAYBUFFER = 'arraybuffer' ,
    BLOB = 'blob' ,
    DOCUMENT = 'document' ,
    JSON = 'json' ,
    TEXT = 'text' ,
  }
}
declare module 'goog:goog.labs.net.xhr.ResponseType' {
  import ResponseType = ಠ_ಠ.clutz.goog.labs.net.xhr.ResponseType;
  export default ResponseType;
}
// Generated from labs/net/xhr.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.xhr {
  /**
   * Class for Timeout errors.
   */
  class TimeoutError extends ಠ_ಠ.clutz.goog.labs.net.xhr.Error {
    private noStructuralTyping_goog_labs_net_xhr_TimeoutError : any;
    /**
     * Class for Timeout errors.
     * @param url The URL that timed out.
     * @param request The XHR that failed.
     */
    constructor (url : string , request : ಠ_ಠ.clutz.goog.net.XhrLike.OrNative ) ;
    name : string ;
  }
}
declare module 'goog:goog.labs.net.xhr.TimeoutError' {
  import TimeoutError = ಠ_ಠ.clutz.goog.labs.net.xhr.TimeoutError;
  export default TimeoutError;
}
