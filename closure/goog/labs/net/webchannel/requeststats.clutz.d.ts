//!! generated by clutz.
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Returns the singleton event target for stat events.
   */
  function getStatEventTarget ( ) : ಠ_ಠ.clutz.goog.events.EventTarget ;
  /**
   * Notify the channel that a particular fine grained network event has occurred.
   * Should be considered package-private.
   * @param reachabilityType The reachability event type.
   */
  function notifyServerReachabilityEvent (reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ) : void ;
  /**
   * Helper function to call the stat event callback.
   * @param stat The stat.
   */
  function notifyStatEvent (stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ) : void ;
  /**
   * Helper function to notify listeners about POST request performance.
   * @param size Number of characters in the POST data.
   * @param rtt The amount of time from POST start to response.
   * @param retries The number of times the POST had to be retried.
   */
  function notifyTimingEvent (size : number , rtt : number , retries : number ) : void ;
  /**
   * Helper function to call the end hook
   */
  function onEndExecution ( ) : void ;
  /**
   * Helper function to call the start hook
   */
  function onStartExecution ( ) : void ;
  /**
   * Allows the application to set an execution hooks for when a channel
   * stops processing requests. This is useful to track timing or logging
   * special information. The function takes no parameters and return void.
   * @param endHook The function for the end hook.
   */
  function setEndThreadExecutionHook (endHook : PrivateType | null ) : void ;
  /**
   * Allows the application to set an execution hooks for when a channel
   * starts processing requests. This is useful to track timing or logging
   * special information. The function takes no parameters and return void.
   * @param startHook The function for the start hook.
   */
  function setStartThreadExecutionHook (startHook : PrivateType | null ) : void ;
  /**
   * Wrapper around SafeTimeout which calls the start and end execution hooks
   * with a try...finally block.
   * @param fn The callback function.
   * @param ms The time in MS for the timer.
   */
  function setTimeout (fn : PrivateType | null , ms : number ) : number ;
}
declare module 'goog:goog.labs.net.webChannel.requestStats' {
  import requestStats = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats;
  export = requestStats;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event {
  let SERVER_REACHABILITY_EVENT : string ;
  let STAT_EVENT : string ;
  let TIMING_EVENT : string ;
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Event' {
  import Event = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Event;
  export = Event;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Types of events which reveal information about the reachability of the
   * server.
   */
  /**
   * Types of events which reveal information about the reachability of the
   * server.
   */
  enum ServerReachability {
    BACK_CHANNEL_ACTIVITY = 4.0 ,
    REQUEST_FAILED = 3.0 ,
    REQUEST_MADE = 1.0 ,
    REQUEST_SUCCEEDED = 2.0 ,
  }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachability' {
  import ServerReachability = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability;
  export default ServerReachability;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for SERVER_REACHABILITY_EVENT.
   */
  class ServerReachabilityEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_labs_net_webChannel_requestStats_ServerReachabilityEvent : any;
    /**
     * Event class for SERVER_REACHABILITY_EVENT.
     * @param target The stat event target for the channel.
     * @param reachabilityType The reachability event type.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ) ;
    reachabilityType : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachability ;
  }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.ServerReachabilityEvent' {
  import ServerReachabilityEvent = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.ServerReachabilityEvent;
  export default ServerReachabilityEvent;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Enum that identifies events for statistics that are interesting to track.
   */
  /**
   * Enum that identifies events for statistics that are interesting to track.
   */
  enum Stat {
    BACKCHANNEL_DEAD = 19.0 ,
    BACKCHANNEL_MISSING = 18.0 ,
    BROWSER_OFFLINE = 20.0 ,
    CONNECT_ATTEMPT = 0.0 ,
    ERROR_NETWORK = 1.0 ,
    ERROR_OTHER = 2.0 ,
    NOPROXY = 11.0 ,
    PROXY = 10.0 ,
    REQUEST_BAD_DATA = 15.0 ,
    REQUEST_BAD_STATUS = 13.0 ,
    REQUEST_INCOMPLETE_DATA = 14.0 ,
    REQUEST_NO_DATA = 16.0 ,
    REQUEST_TIMEOUT = 17.0 ,
    REQUEST_UNKNOWN_SESSION_ID = 12.0 ,
    TEST_STAGE_ONE_FAILED = 8.0 ,
    TEST_STAGE_ONE_START = 3.0 ,
    TEST_STAGE_TWO_DATA_BOTH = 7.0 ,
    TEST_STAGE_TWO_DATA_ONE = 5.0 ,
    TEST_STAGE_TWO_DATA_TWO = 6.0 ,
    TEST_STAGE_TWO_FAILED = 9.0 ,
    TEST_STAGE_TWO_START = 4.0 ,
  }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.Stat' {
  import Stat = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat;
  export default Stat;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for STAT_EVENT.
   */
  class StatEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_labs_net_webChannel_requestStats_StatEvent : any;
    /**
     * Event class for STAT_EVENT.
     * @param eventTarget The stat event target for the channel.
     * @param stat The stat.
     */
    constructor (eventTarget : ಠ_ಠ.clutz.goog.events.EventTarget | null , stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ) ;
    /**
     * The stat
     */
    stat : ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.Stat ;
  }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.StatEvent' {
  import StatEvent = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.StatEvent;
  export default StatEvent;
}
// Generated from labs/net/webchannel/requeststats.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats {
  /**
   * Event class for requestStats.Event.TIMING_EVENT
   */
  class TimingEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_labs_net_webChannel_requestStats_TimingEvent : any;
    /**
     * Event class for requestStats.Event.TIMING_EVENT
     * @param target The stat event target for the channel.
     * @param size The number of characters in the POST data.
     * @param rtt The total round trip time from POST to response in MS.
     * @param retries The number of times the POST had to be retried.
     */
    constructor (target : ಠ_ಠ.clutz.goog.events.EventTarget | null , size : number , rtt : number , retries : number ) ;
    retries : number ;
    rtt : number ;
    size : number ;
  }
}
declare module 'goog:goog.labs.net.webChannel.requestStats.TimingEvent' {
  import TimingEvent = ಠ_ಠ.clutz.goog.labs.net.webChannel.requestStats.TimingEvent;
  export default TimingEvent;
}
