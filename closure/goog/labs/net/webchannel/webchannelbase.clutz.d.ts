//!! generated by clutz.
// Generated from labs/net/webchannel/webchannelbase.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * This WebChannel implementation is branched off goog.net.BrowserChannel
   * for now. Ongoing changes to goog.net.BrowserChannel will be back
   * ported to this implementation as needed.
   */
  class WebChannelBase implements ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBase : any;
    /**
     * This WebChannel implementation is branched off goog.net.BrowserChannel
     * for now. Ongoing changes to goog.net.BrowserChannel will be back
     * ported to this implementation as needed.
     * @param opt_options Configuration for the WebChannel instance.
     * @param opt_clientVersion An application-specific version number that is sent to the server when connected.
     * @param opt_conn Previously determined connection conditions.
     */
    constructor (opt_options ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options , opt_clientVersion ? : number , opt_conn ? : ಠ_ಠ.clutz.goog.labs.net.webChannel.ConnectionState ) ;
    /**
     * Starts the channel. This initiates connections to the server.
     * @param channelPath The path for the channel connection.
     * @param opt_extraParams Extra parameter keys and values to add to the requests.
     * @param opt_oldSessionId Session ID from a previous session.
     * @param opt_oldArrayId The last array ID from a previous session.
     */
    connect (channelPath : string , opt_extraParams ? : GlobalObject , opt_oldSessionId ? : string , opt_oldArrayId ? : number ) : void ;
    /**
     * Decides which host prefix should be used, if any.  If there is a handler,
     * allows the handler to validate a host prefix provided by the server, and
     * optionally override it.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    createDataUri (hostPrefix ? : any , path ? : any , opt_overridePort ? : any ) : any ;
    createXhrIo (hostPrefix : string | null , isStreaming ? : boolean ) : ಠ_ಠ.clutz.goog.net.XhrIo ;
    disconnect ( ) : void ;
    /**
     * Returns whether the channel allows the use of a subdomain. There may be
     * cases where this isn't allowed.
     */
    getAllowHostPrefix ( ) : boolean ;
    /**
     * Returns whether streaming mode is allowed. In certain debugging situations,
     * it's useful for the application to have a way to disable streaming mode for a
     * user.
     */
    getAllowStreamingMode ( ) : boolean ;
    getBackChannelMaxRetries ( ) : number ;
    getBackChannelUri (hostPrefix ? : any , path ? : any ) : any ;
    /**
     * Returns the logger.
     */
    getChannelDebug ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug ;
    getConnectionState ( ) : any ;
    /**
     * Returns the extra HTTP headers to add to all the requests sent to the server.
     */
    getExtraHeaders ( ) : GlobalObject | null ;
    getForwardChannelMaxRetries ( ) : number ;
    getForwardChannelRequestPool ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool ;
    getForwardChannelUri (path ? : any ) : any ;
    /**
     * Returns the handler used for channel callback events.
     */
    getHandler ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler | null ;
    getHttpSessionId ( ) : any ;
    getHttpSessionIdParam ( ) : any ;
    /**
     * Returns the extra HTTP headers to add to the init requests
     * sent to the server.
     */
    getInitHeaders ( ) : GlobalObject | null ;
    getLastArrayId ( ) : number ;
    /**
     * Return the last status code received for a request.
     */
    getLastStatusCode ( ) : number ;
    getServerVersion ( ) : number ;
    /**
     * Returns the session id of the channel. Only available after the
     * channel has been opened.
     */
    getSessionId ( ) : string ;
    /**
     * Returns the channel state.
     */
    getState ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.State ;
    getWireCodec ( ) : GlobalObject ;
    /**
     * Returns whether there are outstanding requests servicing the channel.
     */
    hasOutstandingRequests ( ) : boolean ;
    isActive ( ) : any ;
    /**
     * Returns whether the channel is buffered or not.  This may be
     * queried in the WebChannelBase.okToMakeRequest() callback.
     */
    isBuffered ( ) : boolean ;
    isClosed ( ) : any ;
    onFirstByteReceived (request ? : any , responseText ? : any ) : void ;
    onRequestComplete (request ? : any ) : void ;
    onRequestData (request ? : any , responseText ? : any ) : void ;
    /**
     * Sends a request to the server. The format of the request is a Map data
     * structure of key/value pairs. These maps are then encoded in a format
     * suitable for the wire and then reconstituted as a Map data structure that
     * the server can process.
     * @param map The map to send.
     * @param opt_context The context associated with the map.
     */
    sendMap (map : GlobalObject | ಠ_ಠ.clutz.goog.collections.maps.MapLike , opt_context ? : GlobalObject ) : void ;
    /**
     * Sets whether the channel allows the use of a subdomain. There may be cases
     * where this isn't allowed, for example, logging in with troutboard where
     * using a subdomain causes Apache to force the user to authenticate twice.
     * @param allowHostPrefix Whether a host prefix is allowed.
     */
    setAllowHostPrefix (allowHostPrefix : boolean ) : void ;
    /**
     * Sets whether streaming mode is allowed. In certain debugging situations, it's
     * useful for the application to have a way to disable streaming mode for a
     * user.
     * @param allowStreamingMode Whether streaming mode is allowed.
     */
    setAllowStreamingMode (allowStreamingMode : boolean ) : void ;
    /**
     * Sets the logger.
     * @param channelDebug The channel debug object.
     */
    setChannelDebug (channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers, or null.
     */
    setExtraHeaders (extraHeaders : GlobalObject | null ) : void ;
    /**
     * When set to true, this changes the behavior of the forward channel so it
     * will not retry requests; it will fail after one network failure, and if
     * there was already one network failure, the request will fail immediately.
     * @param failFast Whether or not to fail fast.
     */
    setFailFast (failFast : boolean ) : void ;
    /**
     * Sets (overwrites) the forward channel flush callback.
     * @param callback The callback to be invoked.
     */
    setForwardChannelFlushCallback (callback : ( ) => any ) : void ;
    /**
     * Sets the maximum number of attempts to connect to the server for forward
     * channel requests.
     * @param retries The maximum number of attempts.
     */
    setForwardChannelMaxRetries (retries : number ) : void ;
    /**
     * Sets the timeout for a forward channel request.
     * @param timeoutMs The timeout in milliseconds.
     */
    setForwardChannelRequestTimeout (timeoutMs : number ) : void ;
    /**
     * Sets the handler used for channel callback events.
     * @param handler The handler to set.
     */
    setHandler (handler : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler | null ) : void ;
    /**
     * Sets the URL param name to overwrite custom HTTP headers.
     * @param httpHeadersOverwriteParam The URL param name.
     */
    setHttpHeadersOverwriteParam (httpHeadersOverwriteParam : string ) : void ;
    setHttpSessionId (httpSessionId ? : any ) : void ;
    setHttpSessionIdParam (httpSessionIdParam ? : any ) : void ;
    /**
     * Sets extra HTTP headers to add to the init requests sent to the server.
     * @param initHeaders The HTTP headers, or null.
     */
    setInitHeaders (initHeaders : GlobalObject | null ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    setRetryDelay (baseDelayMs : number , delaySeedMs : number ) : void ;
    /**
     * Sets whether cross origin requests are supported for the channel.
     *
     * Setting this allows the creation of requests to secondary domains and
     * sends XHRs with the CORS withCredentials bit set to true.
     *
     * In order for cross-origin requests to work, the server will also need to set
     * CORS response headers as per:
     * https://developer.mozilla.org/en-US/docs/HTTP_access_control
     *
     * See {@link goog.net.XhrIo#setWithCredentials}.
     * @param supportCrossDomain Whether cross domain XHRs are supported.
     */
    setSupportsCrossDomainXhrs (supportCrossDomain : boolean ) : void ;
    shouldUseSecondaryDomains ( ) : any ;
    /**
     * Whether or not this channel uses WHATWG Fetch/streams.
     */
    usesFetchStreams ( ) : boolean ;
    /**
     * Maximum number of attempts to connect to the server for back channel
     * requests.
     */
    static BACK_CHANNEL_MAX_RETRIES : number ;
    /**
     * The timeout in milliseconds for a forward channel request.
     */
    static FORWARD_CHANNEL_RETRY_TIMEOUT : number ;
    /**
     * When retrying for an inactive channel, we will multiply the total delay by
     * this number.
     */
    static INACTIVE_CHANNEL_RETRY_FACTOR : number ;
    /**
     * A guess at a cutoff at which to no longer assume the backchannel is dead
     * when we are slow to receive data. Number in bytes.
     *
     * Assumption: The worst bandwidth we work on is 50 kilobits/sec
     * 50kbits/sec * (1 byte / 8 bits) * 6 sec dead backchannel timeout
     */
    static OUTSTANDING_DATA_BACKCHANNEL_RETRY_CUTOFF : number ;
    /**
     * A number in MS of how long we guess the maxmium amount of time a round trip
     * to the server should take. In the future this could be substituted with a
     * real measurement of the RTT.
     */
    static RTT_ESTIMATE : number ;
  }
}
// Generated from labs/net/webchannel/webchannelbase.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase {
  /**
   * Enum type for identifying an error.
   */
  enum Error {
    BAD_DATA = 10.0 ,
    BAD_RESPONSE = 11.0 ,
    LOGGED_OUT = 4.0 ,
    NETWORK = 8.0 ,
    NO_DATA = 5.0 ,
    OK = 0.0 ,
    REQUEST_FAILED = 2.0 ,
    STOP = 7.0 ,
    UNKNOWN_SESSION_ID = 6.0 ,
  }
  class Handler {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBase_Handler : any;
    /**
     * Called by the channel if enumeration of the map throws an exception.
     * @param channel The channel.
     * @param map The map that can't be enumerated.
     */
    badMapError (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , map : GlobalObject | null ) : void ;
    /**
     * Indicates the WebChannel is closed. Also notifies about which maps,
     * if any, that may not have been delivered to the server.
     * @param channel The channel.
     * @param opt_pendingMaps The array of pending maps, which may or may not have been delivered to the server.
     * @param opt_undeliveredMaps The array of undelivered maps, which have definitely not been delivered to the server.
     */
    channelClosed (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , opt_pendingMaps ? : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] | null , opt_undeliveredMaps ? : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] | null ) : void ;
    /**
     * Indicates an error occurred on the WebChannel.
     * @param channel The channel.
     * @param error The error code.
     */
    channelError (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , error : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error ) : void ;
    /**
     * New input is available for the application to process.
     * @param channel The channel.
     * @param array The data array.
     */
    channelHandleArray (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , array : any [] | null ) : void ;
    /**
     * Callback handler for when a batch of response arrays is received from the
     * server. When null, batched dispatching is disabled.
     */
    channelHandleMultipleArrays : ( (a : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase , b : any [] [] ) => any ) | null ;
    /**
     * Indicates the WebChannel has successfully negotiated with the server
     * and can now send and receive data.
     * @param channel The channel.
     */
    channelOpened (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : void ;
    /**
     * Indicates messages that have been successfully sent on the channel.
     * @param channel The channel.
     * @param request The request object that contains the pending messages that have been successfully delivered to the server.
     */
    channelSuccess (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null , request : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ) : void ;
    /**
     * Allows the handler to override a host prefix provided by the server. Will
     * be called whenever the channel has received such a prefix and is considering
     * its use.
     * @param serverHostPrefix The host prefix provided by the server.
     */
    correctHostPrefix (serverHostPrefix : string | null ) : string | null ;
    /**
     * Gets any parameters that should be added at the time another connection is
     * made to the server.
     * @param channel The channel.
     */
    getAdditionalParams (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : GlobalObject ;
    /**
     * Gets the URI of an image that can be used to test network connectivity.
     * @param channel The channel.
     */
    getNetworkTestImageUri (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Gets whether this channel is currently active. This is used to determine the
     * length of time to wait before retrying.
     * @param channel The channel.
     */
    isActive (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : boolean ;
    /**
     * Whether it's okay to make a request to the server. A handler can return
     * false if the channel should fail. For example, if the user has logged out,
     * the handler may want all requests to fail immediately.
     * @param channel The channel.
     */
    okToMakeRequest (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase | null ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error ;
  }
  /**
   * Enum type for the channel state machine.
   */
  enum State {
    CLOSED = 0.0 ,
    INIT = 1.0 ,
    OPENED = 3.0 ,
    OPENING = 2.0 ,
  }
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBase' {
  import WebChannelBase = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase;
  export default WebChannelBase;
}
