//!! generated by clutz.
// Generated from labs/net/webchannel/webchannelbasetransport.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * Implementation of {@link goog.net.WebChannelTransport} with
   * {@link goog.labs.net.webChannel.WebChannelBase} as the underlying channel
   * implementation.
   */
  class WebChannelBaseTransport implements ಠ_ಠ.clutz.goog.net.WebChannelTransport {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport : any;
    createWebChannel (url ? : any , opt_options ? : any ) : any ;
  }
}
// Generated from labs/net/webchannel/webchannelbasetransport.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport {
  class Channel extends ಠ_ಠ.clutz.goog.events.EventTarget implements ಠ_ಠ.clutz.goog.net.WebChannel {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport_Channel : any;
    /**
     * Implementation of the {@link goog.net.WebChannel} interface.
     * @param url The URL path for the new WebChannel instance.
     * @param opt_options Configuration for the new WebChannel instance.
     */
    constructor (url : string , opt_options ? : ಠ_ಠ.clutz.goog.net.WebChannel.Options ) ;
    close ( ) : void ;
    disposeInternal ( ) : void ;
    getRuntimeProperties ( ) : any ;
    halfClose ( ) : any ;
    open ( ) : void ;
    /**
     * The WebChannelBase only supports object types.
     * @param message The message to send.
     */
    send (message : ಠ_ಠ.clutz.goog.net.WebChannel.MessageData ) : void ;
  }
  class ChannelProperties implements ಠ_ಠ.clutz.goog.net.WebChannel.RuntimeProperties {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport_ChannelProperties : any;
    /**
     * Implementation of the {@link goog.net.WebChannel.RuntimeProperties}.
     * @param channel The underlying channel object.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase ) ;
    ackCommit ( ...a : any [] ) : any ;
    commit (callback ? : any ) : void ;
    getConcurrentRequestLimit ( ) : any ;
    getHttpSessionId ( ) : any ;
    getLastStatusCode ( ) : any ;
    getNonAckedMessageCount ( ...a : any [] ) : any ;
    getPendingRequestCount ( ) : any ;
    isSpdyEnabled ( ) : any ;
    notifyNonAckedMessageCount ( ...a : any [] ) : any ;
    onCommit ( ...a : any [] ) : any ;
  }
}
// Generated from labs/net/webchannel/webchannelbasetransport.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport.Channel {
  class ErrorEvent extends ಠ_ಠ.clutz.goog.net.WebChannel.ErrorEvent {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport_Channel_ErrorEvent : any;
    /**
     * The error event.
     * @param error The error code.
     */
    constructor (error : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error | null ) ;
    errorCode : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Error | null ;
    status : any ;
  }
  class Handler_ extends ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBase.Handler {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport_Channel_Handler_ : any;
    channelClosed (channel ? : any , opt_pendingMaps ? : any , opt_undeliveredMaps ? : any ) : void ;
    channelError (channel ? : any , error ? : any ) : void ;
    channelHandleArray (channel ? : any , array ? : any ) : void ;
    channelOpened (channel ? : any ) : void ;
  }
  class MessageEvent extends ಠ_ಠ.clutz.goog.net.WebChannel.MessageEvent {
    private noStructuralTyping_goog_labs_net_webChannel_WebChannelBaseTransport_Channel_MessageEvent : any;
    /**
     * The message event.
     * @param array The data array from the underlying channel.
     */
    constructor (array : GlobalObject ) ;
    data : any ;
    metadataKey : any ;
  }
}
declare module 'goog:goog.labs.net.webChannel.WebChannelBaseTransport' {
  import WebChannelBaseTransport = ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelBaseTransport;
  export default WebChannelBaseTransport;
}
