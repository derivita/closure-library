//!! generated by clutz.
// Generated from labs/net/webchannel/channelrequest.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * A new ChannelRequest is created for each request to the server.
   */
  class ChannelRequest {
    private noStructuralTyping_goog_labs_net_webChannel_ChannelRequest : any;
    /**
     * A new ChannelRequest is created for each request to the server.
     * @param channel The channel that owns this request.
     * @param channelDebug A WebChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    constructor (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel | null , channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) ;
    cancel ( ) : void ;
    getErrorResponseHeaders ( ) : { [ key: string ]: string } | undefined ;
    /**
     * If the request was not successful, returns the reason.
     */
    getLastError ( ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error | null ;
    /**
     * Returns the status code of the last request.
     */
    getLastStatusCode ( ) : number ;
    /**
     * Gets the pending messages that this request is handling, in case of a retry.
     */
    getPendingMessages ( ) : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] ;
    /**
     * Returns the data for a post, if this request is a post.
     */
    getPostData ( ) : string | null ;
    /**
     * Returns the request id for this request. Each request has a unique request
     * id and the request IDs are a sequential increasing count.
     */
    getRequestId ( ) : string | number | undefined ;
    /**
     * Returns the time that the request started, if it has started.
     */
    getRequestStartTime ( ) : number | null ;
    /**
     * Returns the session id for this channel.
     */
    getSessionId ( ) : string | undefined ;
    /**
     * Indicates whether the request was successful. Only valid after the handler
     * is called to indicate completion of the request.
     */
    getSuccess ( ) : boolean ;
    /**
     * Returns the XhrIo request object.
     */
    getXhr ( ) : ಠ_ಠ.clutz.goog.net.XhrIo | null ;
    /**
     * Check if the initial response header has been handled.
     */
    isInitialResponseDecoded ( ) : boolean ;
    /**
     * Resets the timeout.
     * @param opt_timeout The new timeout
     */
    resetTimeout (opt_timeout ? : number ) : void ;
    /**
     * Uses an IMG tag or navigator.sendBeacon to send an HTTP get to the server.
     *
     * This is only currently used to terminate the connection, as an IMG tag is
     * the most reliable way to send something to the server while the page
     * is getting torn down.
     *
     * Navigator.sendBeacon is available on Chrome and Firefox as a formal
     * solution to ensure delivery without blocking window close. See
     * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
     *
     * For Chrome Apps, sendBeacon is always necessary due to Content Security
     * Policy (CSP) violation of using an IMG tag.
     *
     * For react-native, we use xhr to send the actual close request, and assume
     * there is no page-close issue with react-native.
     * @param uri The uri to send a request to.
     */
    sendCloseRequest (uri : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    setDecodeInitialResponse ( ) : void ;
    /**
     * Sets extra HTTP headers to add to all the requests sent to the server.
     * @param extraHeaders The HTTP headers.
     */
    setExtraHeaders (extraHeaders : GlobalObject | null ) : void ;
    /**
     * Sets the pending messages that this request is handling.
     * @param pendingMessages The pending messages for this request.
     */
    setPendingMessages (pendingMessages : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] ) : void ;
    /**
     * Sets the throttle for handling onreadystatechange events for the request.
     * @param throttle The throttle in ms.  A value of zero indicates no throttle.
     */
    setReadyStateChangeThrottle (throttle : number ) : void ;
    /**
     * Sets the timeout for a request
     * @param timeout The timeout in MS for when we fail the request.
     */
    setTimeout (timeout : number ) : void ;
    /**
     * Overrides the default HTTP method.
     * @param verb The HTTP method
     */
    setVerb (verb : string ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP GET to the server.
     * @param uri The uri of the request.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     * @param hostPrefix The host prefix, if we might be using a secondary domain.  Note that it should also be in the URL, adding this won't cause it to be added to the URL.
     */
    xmlHttpGet (uri : ಠ_ಠ.clutz.goog.Uri | null , decodeChunks : boolean , hostPrefix : string | null ) : void ;
    /**
     * Uses XMLHTTP to send an HTTP POST to the server.
     * @param uri The uri of the request.
     * @param postData The data for the post body.
     * @param decodeChunks Whether to the result is expected to be encoded for chunking and thus requires decoding.
     */
    xmlHttpPost (uri : ಠ_ಠ.clutz.goog.Uri | null , postData : string | null , decodeChunks : boolean ) : void ;
    /**
     * Convenience factory method.
     * @param channel The channel object that owns this request.
     * @param channelDebug A WebChannelDebug to use for logging.
     * @param opt_sessionId The session id for the channel.
     * @param opt_requestId The request id for this request.
     * @param opt_retryId The retry id for this request.
     */
    static createChannelRequest (channel : ಠ_ಠ.clutz.goog.labs.net.webChannel.Channel | null , channelDebug : ಠ_ಠ.clutz.goog.labs.net.webChannel.WebChannelDebug | null , opt_sessionId ? : string , opt_requestId ? : string | number , opt_retryId ? : number ) : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest ;
    /**
     * Returns a useful error string for debugging based on the specified error
     * code.
     * @param errorCode The error code.
     * @param statusCode The HTTP status code.
     */
    static errorStringFromCode (errorCode : ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest.Error | null , statusCode : number ) : string ;
    /**
     * Returns whether XHR streaming is supported on this browser.
     */
    static supportsXhrStreaming ( ) : boolean ;
  }
}
// Generated from labs/net/webchannel/channelrequest.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest {
  /**
   * Enum type for identifying an error.
   */
  enum Error {
    BAD_DATA = 4.0 ,
    BROWSER_OFFLINE = 6.0 ,
    HANDLER_EXCEPTION = 5.0 ,
    NO_DATA = 1.0 ,
    STATUS = 0.0 ,
    TIMEOUT = 2.0 ,
    UNKNOWN_SESSION_ID = 3.0 ,
  }
}
declare module 'goog:goog.labs.net.webChannel.ChannelRequest' {
  import ChannelRequest = ಠ_ಠ.clutz.goog.labs.net.webChannel.ChannelRequest;
  export default ChannelRequest;
}
