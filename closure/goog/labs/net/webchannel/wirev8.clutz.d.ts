//!! generated by clutz.
// Generated from labs/net/webchannel/wirev8.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  /**
   * The v8 codec class.
   */
  class WireV8 {
    private noStructuralTyping_goog_labs_net_webChannel_WireV8 : any;
    /**
     * Decodes a standalone message received from the wire. May throw exception
     * if text is ill-formatted.
     *
     * Must be valid JSON as it is insecure to use eval() to decode JS literals;
     * and eval() is disallowed in Chrome apps too.
     *
     * Invalid JS literals include null array elements, quotas etc.
     * @param messageText The string content as received from the wire.
     */
    decodeMessage (messageText : string ) : any ;
    /**
     * Encodes a standalone message into the wire format.
     *
     * May throw exception if the message object contains any invalid elements.
     * @param message The message data. V8 only support JS objects (or Map).
     * @param buffer The text buffer to write the message to.
     * @param opt_prefix The prefix for each field of the object.
     */
    encodeMessage (message : GlobalObject | ಠ_ಠ.clutz.goog.collections.maps.MapLike , buffer : string [] , opt_prefix ? : string ) : void ;
    /**
     * Encodes all the buffered messages of the forward channel.
     * @param messageQueue The message data. V8 only support JS objects.
     * @param count The number of messages to be encoded.
     * @param badMapHandler Callback for bad messages.
     */
    encodeMessageQueue (messageQueue : ( ಠ_ಠ.clutz.goog.labs.net.webChannel.Wire.QueuedMap | null ) [] , count : number , badMapHandler : ( (a : GlobalObject ) => any ) | null ) : string ;
  }
}
declare module 'goog:goog.labs.net.webChannel.WireV8' {
  import WireV8 = ಠ_ಠ.clutz.goog.labs.net.webChannel.WireV8;
  export default WireV8;
}
