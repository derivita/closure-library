//!! generated by clutz.
// Generated from labs/net/webchannel/forwardchannelrequestpool.js
declare namespace ಠ_ಠ.clutz.goog.labs.net.webChannel {
  export import ForwardChannelRequestPool = ಠ_ಠ.clutz.module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool ;
}
declare module 'goog:goog.labs.net.webChannel.ForwardChannelRequestPool' {
  import ForwardChannelRequestPool = ಠ_ಠ.clutz.goog.labs.net.webChannel.ForwardChannelRequestPool;
  export default ForwardChannelRequestPool;
}
// Generated from labs/net/webchannel/forwardchannelrequestpool.js
declare namespace ಠ_ಠ.clutz {
  /**
   * This class represents the state of all forward channel requests.
   */
  class module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool {
    private noStructuralTyping_module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool : any;
    /**
     * This class represents the state of all forward channel requests.
     * @param opt_maxPoolSize The maximum pool size.
     */
    constructor (opt_maxPoolSize ? : number ) ;
    /**
     * Records pending messages, e.g. when a request receives a failed response.
     * @param messages Pending messages.
     */
    addPendingMessages (messages : ( ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$Wire.QueuedMap | null ) [] ) : void ;
    /**
     * Adds a new request to the pool.
     * @param req The new channel request.
     */
    addRequest (req : ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$ChannelRequest ) : void ;
    /**
     * Once we know the client protocol (from the handshake), check if we need
     * enable the request pool accordingly. This is more robust than using
     * browser-internal APIs (specific to Chrome).
     * @param clientProtocol The client protocol
     */
    applyClientProtocol (clientProtocol : string ) : void ;
    cancel ( ) : void ;
    clearPendingMessages ( ) : void ;
    /**
     * Cancels all pending requests and force the completion of channel requests.
     *
     * Need go through the standard onRequestComplete logic to expose the max-retry
     * failure in the standard way.
     * @param onComplete The completion callback.
     */
    forceComplete (onComplete : (a : ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$ChannelRequest ) => any ) : boolean ;
    getMaxSize ( ) : number ;
    getPendingMessages ( ) : ( ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$Wire.QueuedMap | null ) [] ;
    getRequestCount ( ) : number ;
    hasPendingRequest ( ) : boolean ;
    hasRequest (req : ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$ChannelRequest | null ) : boolean ;
    isFull ( ) : boolean ;
    /**
     * Removes the given request from the pool.
     * @param req The channel request.
     */
    removeRequest (req : ಠ_ಠ.clutz.module$exports$goog$labs$net$webChannel$ChannelRequest | null ) : boolean ;
  }
}
declare namespace ಠ_ಠ.clutz {
  export import module$exports$goog$labs$net$webChannel$ForwardChannelRequestPool = ಠ_ಠ.clutz.module$contents$goog$labs$net$webChannel$ForwardChannelRequestPool_ForwardChannelRequestPool ;
}
