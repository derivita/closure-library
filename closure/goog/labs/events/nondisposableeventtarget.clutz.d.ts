//!! generated by clutz.
// Generated from labs/events/nondisposableeventtarget.js
declare namespace ಠ_ಠ.clutz.goog.labs.events {
  /**
   * An implementation of `goog.events.Listenable` with full W3C
   * EventTarget-like support (capture/bubble mechanism, stopping event
   * propagation, preventing default actions).
   *
   * You may subclass this class to turn your class into a Listenable.
   *
   * Unlike {@link goog.events.EventTarget}, this class does not implement
   * {@link goog.disposable.IDisposable}. Instances of this class that have had
   * It is not necessary to call {@link goog.dispose}
   * or {@link #removeAllListeners} in order for an instance of this class
   * to be garbage collected.
   *
   * Unless propagation is stopped, an event dispatched by an
   * EventTarget will bubble to the parent returned by
   * `getParentEventTarget`. To set the parent, call
   * `setParentEventTarget`. Subclasses that don't support
   * changing the parent can override the setter to throw an error.
   *
   * Example usage:
   * <pre>
   * var source = new goog.labs.events.NonDisposableEventTarget();
   * function handleEvent(e) {
   * alert('Type: ' + e.type + '; Target: ' + e.target);
   * }
   * source.listen('foo', handleEvent);
   * source.dispatchEvent('foo'); // will call handleEvent
   * </pre>
   *
   * TODO(user): Consider a more modern, less viral
   * (not based on inheritance) replacement of goog.Disposable, which will allow
   * goog.events.EventTarget to not be disposable.
   */
  class NonDisposableEventTarget implements ಠ_ಠ.clutz.goog.events.Listenable {
    private noStructuralTyping_goog_labs_events_NonDisposableEventTarget : any;
    dispatchEvent (e ? : any ) : any ;
    fireListeners (type ? : any , capture ? : any , eventObject ? : any ) : any ;
    getListener (type ? : any , listener ? : any , capture ? : any , opt_listenerScope ? : any ) : any ;
    getListeners (type ? : any , capture ? : any ) : any ;
    getParentEventTarget ( ) : any ;
    hasListener (opt_type ? : any , opt_capture ? : any ) : any ;
    listen (type ? : any , listener ? : any , opt_useCapture ? : any , opt_listenerScope ? : any ) : any ;
    listenOnce (type ? : any , listener ? : any , opt_useCapture ? : any , opt_listenerScope ? : any ) : any ;
    removeAllListeners (opt_type ? : any ) : any ;
    /**
     * Sets the parent of this event target to use for capture/bubble
     * mechanism.
     * @param parent Parent listenable (null if none).
     */
    setParentEventTarget (parent : ಠ_ಠ.clutz.goog.events.Listenable | null ) : void ;
    unlisten (type ? : any , listener ? : any , opt_useCapture ? : any , opt_listenerScope ? : any ) : any ;
    unlistenByKey (key ? : any ) : any ;
  }
}
declare module 'goog:goog.labs.events.NonDisposableEventTarget' {
  import NonDisposableEventTarget = ಠ_ಠ.clutz.goog.labs.events.NonDisposableEventTarget;
  export default NonDisposableEventTarget;
}
