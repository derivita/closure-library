//!! generated by clutz.
// Generated from labs/mock/mock.js
declare namespace ಠ_ಠ.clutz.goog.labs.mock {
  /**
   * A type for a mocked accessor descriptor.
   */
  type DescriptorStubBinder = { asDataProperty : (a ? : any ) => void , get ? : Function , set ? : Function } ;
  /**
   * Represents a binding between a method name, args and a stub.
   */
  class MethodBinding_ {
    private noStructuralTyping_goog_labs_mock_MethodBinding_ : any;
    getMethodName ( ) : string ;
    getStub ( ) : Function ;
    /**
     * Determines whether the given args match the stored args_. Used to determine
     * which stub to invoke for a method.
     * @param methodName The name of the method being stubbed.
     * @param args An array of arguments.
     * @param isVerification Whether this is a function verification call or not.
     */
    matches (methodName : string , args : any [] , isVerification : boolean ) : boolean ;
    toString ( ) : string ;
  }
  /**
   * Sets up mock for the given function, stubbing out. By default, all stubs
   * return `undefined`, though stubs can be later defined using
   * `goog.labs.mock.when`.
   */
  class MockFunctionManager_ extends ಠ_ಠ.clutz.goog.labs.mock.MockManager_ {
    private noStructuralTyping_goog_labs_mock_MockFunctionManager_ : any;
    name_ : string ;
  }
  /**
   * Base class that provides basic functionality for creating, adding and
   * finding bindings, offering an executor method that is called when a call to
   * the stub is made, an array to hold the bindings and the mocked item, among
   * other things.
   */
  class MockManager_ {
    private noStructuralTyping_goog_labs_mock_MockManager_ : any;
    /**
     * Holds a reference to the binder used to define stubs.
     */
    protected $stubBinder : null ;
    /**
     * Holds the stub bindings established so far.
     */
    protected methodBindings : any [] ;
    /**
     * Proxies the methods for the mocked object or class to execute the stubs.
     */
    protected mockedItem : GlobalObject ;
    /**
     * A reference to the object or function being mocked.
     */
    protected mockee : GlobalObject | null ;
    /**
     * Adds a binding for the method name and arguments to be stubbed.
     * @param methodName The name of the stubbed method.
     * @param args The arguments passed to the method.
     * @param func The stub function.
     */
    addBinding (methodName : string | null , args : any [] , func : Function ) : any [] ;
    /**
     * Looks up the list of stubs defined on the mock object and executes the
     * function associated with that stub.
     * @param methodName The name of the method to execute.
     * @param var_args The arguments passed to the method.
     */
    protected executeStub (methodName : string ,  ...var_args : any [] ) : any ;
    /**
     * Returns a stub, if defined, for the method name and arguments passed in as
     * parameters.
     * @param methodName The name of the stubbed method.
     * @param args The arguments passed to the method.
     */
    protected getExecutor (methodName : string , args : any [] ) : Function | null ;
    /**
     * Returns the mock object. This should have a stubbed method for each method
     * on the object being mocked.
     */
    getMockedItem ( ) : GlobalObject ;
    /**
     * Returns a stub, if defined, for the method name and arguments passed in.
     * If there are multiple stubs for this method name and arguments, then
     * the most recent binding will be used.
     *
     * If the next binding is a sequence of stubs, then they'll be returned
     * in order until only one is left, at which point it will be returned for
     * every subsequent call.
     * @param methodName The name of the stubbed method.
     * @param args The arguments passed to the method.
     */
    protected getNextBinding (methodName : string , args : any [] ) : Function | null ;
    /**
     * Verify invocation of a method with specific arguments.
     * @param methodName The name of the method.
     * @param var_args The arguments passed.
     */
    protected verifyInvocation (methodName : string ,  ...var_args : any [] ) : void ;
    /**
     * Wait until a function is called and then resolve.
     * @param methodName The name of the method.
     * @param args The arguments passed.
     */
    protected waitForCall (methodName : string ,  ...args : any [] ) : Promise < any > ;
  }
  /**
   * Sets up mock for the given object (or class), stubbing out all the defined
   * methods. By default, all stubs return `undefined`, though stubs can be
   * later defined using `goog.labs.mock.when`.
   */
  class MockObjectManager_ extends ಠ_ಠ.clutz.goog.labs.mock.MockManager_ {
    private noStructuralTyping_goog_labs_mock_MockObjectManager_ : any;
  }
  /**
   * Sets up the spying behavior for the given object.
   */
  class MockSpyManager_ extends ಠ_ಠ.clutz.goog.labs.mock.MockObjectManager_ {
    private noStructuralTyping_goog_labs_mock_MockSpyManager_ : any;
    /**
     * Return a stub, if defined, for the method and arguments passed in. If we
     * lack a stub, instead look for a call record that matches the method and
     * arguments.
     */
    protected getNextBinding (methodName : string , args : any [] ) : Function ;
  }
  /**
   * A stub binder is an object that helps define the stub by binding
   * method name to the stub method.
   */
  interface StubBinder {
    /**
     * Defines the function to be called for the method name and arguments bound
     * to this `StubBinder`.
     *
     * If `then` or `thenReturn` has been previously called
     * on this `StubBinder` then the given stub `func` will be called
     * only after the stubs passed previously have been called.  Afterwards,
     * if no other calls are made to `then` or `thenReturn` for this
     * `StubBinder` then the given `func` will be used for every further
     * invocation.
     * See #when for complete examples.
     * TODO(vbhasin): Add support for the 'Answer' interface.
     * @param func The function to call.
     */
    then (a : Function ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
    /**
     * Defines the constant return value for the stub represented by this
     * `StubBinder`.
     * @param value The value to return.
     */
    thenReturn (a : any ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
  }
  /**
   * A `StubBinder` which uses `MockManager_` to manage stub
   * bindings.
   */
  class StubBinderImpl_ implements ಠ_ಠ.clutz.goog.labs.mock.StubBinder {
    private noStructuralTyping_goog_labs_mock_StubBinderImpl_ : any;
    /* function had TTE, but not a known translation. Emitted type is likely wrong. */
    then (func : Function ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
    thenReturn (value : any ) : ಠ_ಠ.clutz.goog.labs.mock.StubBinder ;
  }
  /**
   * A unique Id generator that does not modify the object.
   * @param obj The object whose unique ID we want to generate.
   */
  function getUid (obj : GlobalObject ) : number ;
  /**
   * Mocks a given object or class.
   * @param objectOrClass An instance or a constructor of a class to be mocked.
   */
  function mock (objectOrClass : GlobalObject ) : GlobalObject ;
  /**
   * Mocks a given constructor.
   * @param ctor A constructor function to be mocked.
   */
  function mockConstructor < T = any > (ctor : { new ( ...a : any [] ) : T } ) : { new ( ...a : any [] ) : T } ;
  /**
   * Mocks a given function.
   * @param opt_func A function to be mocked.
   */
  function mockFunction (opt_func ? : Function ) : Function ;
  /**
   * Spies on a given object.
   * @param obj The object to be spied on.
   */
  function spy (obj : GlobalObject ) : GlobalObject ;
  /**
   * Returns an object that can be used to verify calls to specific methods of a
   * given mock.
   * @param obj The mocked object.
   * @param opt_verificationMode The mode under which to verify invocations.
   */
  function verify (obj : GlobalObject , opt_verificationMode ? : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode ) : any ;
  /**
   * Returns an object that can be used to wait for calls to specific methods of a
   * given mock.
   * @param obj The mocked object.
   * @param verificationOrTimeoutModes The mode under which to verify invocations.
   */
  function waitAndVerify (obj : GlobalObject ,  ...verificationOrTimeoutModes : ( ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode | ಠ_ಠ.clutz.goog.labs.mock.timeout.TimeoutMode ) [] ) : any ;
  /**
   * Facilitates (and is the first step in) setting up stubs. Obtains an object
   * on which, the method to be mocked is called to create a stub. Sample usage:
   *
   * var mockObj = goog.labs.mock.mock(objectBeingMocked);
   * goog.labs.mock.when(mockObj).getFoo(3).thenReturn(4);
   *
   * Subsequent calls to `when` take precedence over earlier calls, allowing
   * users to set up default stubs in setUp methods and then override them in
   * individual tests.
   *
   * If a user wants sequential calls to their stub to return different
   * values, they can chain calls to `then` or `thenReturn` as
   * follows:
   *
   * var mockObj = goog.labs.mock.mock(objectBeingMocked);
   * goog.labs.mock.when(mockObj).getFoo(3)
   * .thenReturn(4)
   * .then(function() {
   * throw new Error('exceptional case');
   * });
   * @param mockObject The mocked object.
   */
  function when (mockObject : GlobalObject ) : any ;
}
declare module 'goog:goog.labs.mock' {
  import mock = ಠ_ಠ.clutz.goog.labs.mock;
  export = mock;
}
// Generated from labs/mock/mock.js
declare namespace ಠ_ಠ.clutz.goog.labs.mock {
  /**
   * Error thrown when timeout triggers before specified action.
   */
  class TimeoutError extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_labs_mock_TimeoutError : any;
    /**
     * Error thrown when timeout triggers before specified action.
     * @param recordedCalls The recorded calls that didn't match the expectation.
     * @param methodName The expected method call.
     * @param verificationMode The expected verification mode which failed verification.
     * @param args The expected arguments.
     */
    constructor (recordedCalls : ಠ_ಠ.clutz.goog.labs.mock.MethodBinding_ [] , methodName : string , verificationMode : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode , args : any [] ) ;
    name : string ;
  }
}
declare module 'goog:goog.labs.mock.TimeoutError' {
  import TimeoutError = ಠ_ಠ.clutz.goog.labs.mock.TimeoutError;
  export default TimeoutError;
}
// Generated from labs/mock/mock.js
declare namespace ಠ_ಠ.clutz.goog.labs.mock {
  /**
   * Error thrown when verification failed.
   */
  class VerificationError extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_labs_mock_VerificationError : any;
    /**
     * Error thrown when verification failed.
     * @param recordedCalls The recorded calls that didn't match the expectation.
     * @param methodName The expected method call.
     * @param verificationMode The expected verification mode which failed verification.
     * @param args The expected arguments.
     */
    constructor (recordedCalls : ಠ_ಠ.clutz.goog.labs.mock.MethodBinding_ [] | null , methodName : string , verificationMode : ಠ_ಠ.clutz.goog.labs.mock.verification.VerificationMode , args : any [] ) ;
    name : string ;
  }
}
declare module 'goog:goog.labs.mock.VerificationError' {
  import VerificationError = ಠ_ಠ.clutz.goog.labs.mock.VerificationError;
  export default VerificationError;
}
