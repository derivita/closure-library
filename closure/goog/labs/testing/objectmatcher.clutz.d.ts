//!! generated by clutz.
// Generated from labs/testing/objectmatcher.js
declare namespace ಠ_ಠ.clutz.goog.labs.testing.objectmatcher {
  /**
   * Matches any object value.
   */
  class AnyObjectMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_AnyObjectMatcher : any;
    describe (actualValue ? : any ) : any ;
    matches (actualValue ? : any ) : any ;
    static anyObject ( ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.AnyObjectMatcher ;
  }
  /**
   * The HasProperty matcher.
   */
  class HasPropertyMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_HasPropertyMatcher : any;
    /**
     * The HasProperty matcher.
     * @param property Name of the property to test.
     */
    constructor (property : string ) ;
    describe (actualObject ? : any ) : any ;
    /**
     * Determines if an object has a property.
     */
    matches (actualObject ? : any ) : any ;
    /**
     * Returns a matcher that matches objects that contain the input property.
     * @param property The property name to check.
     */
    static hasProperty (property : string ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.HasPropertyMatcher ;
  }
  /**
   * The InstanceOf matcher.
   */
  class InstanceOfMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_InstanceOfMatcher : any;
    /**
     * The InstanceOf matcher.
     * @param object The expected class object.
     */
    constructor (object : GlobalObject ) ;
    describe (actualObject ? : any ) : any ;
    /**
     * Determines if an object is an instance of another object.
     */
    matches (actualObject ? : any ) : any ;
    /**
     * Returns a matcher that matches instances of the input class.
     * @param object The class object.
     */
    static instanceOfClass (object : GlobalObject ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.InstanceOfMatcher ;
  }
  /**
   * The IsNull matcher.
   */
  class IsNullMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_IsNullMatcher : any;
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if input value is null.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Returns a matcher that matches all null values.
     */
    static isNull ( ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.IsNullMatcher ;
  }
  /**
   * The IsNullOrUndefined matcher.
   */
  class IsNullOrUndefinedMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_IsNullOrUndefinedMatcher : any;
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if input value is null or undefined.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Returns a matcher that matches all null and undefined values.
     */
    static isNullOrUndefined ( ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.IsNullOrUndefinedMatcher ;
  }
  /**
   * The IsUndefined matcher.
   */
  class IsUndefinedMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_IsUndefinedMatcher : any;
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if input value is undefined.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Returns a matcher that matches undefined values.
     */
    static isUndefined ( ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.IsUndefinedMatcher ;
  }
  /**
   * The Equals matcher.
   */
  class ObjectEqualsMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_objectmatcher_ObjectEqualsMatcher : any;
    /**
     * The Equals matcher.
     * @param expectedObject The expected object.
     */
    constructor (expectedObject : GlobalObject ) ;
    describe (actualObject ? : any ) : any ;
    /**
     * Determines if two objects are the same.
     */
    matches (actualObject ? : any ) : any ;
    /**
     * Returns a matcher that matches objects that are equal to the input object.
     * Equality in this case means the two objects are references to the same
     * object.
     * @param object The expected object.
     */
    static equalsObject (object : GlobalObject ) : ಠ_ಠ.clutz.goog.labs.testing.objectmatcher.ObjectEqualsMatcher ;
  }
}
declare module 'goog:goog.labs.testing.objectmatcher' {
  import objectmatcher = ಠ_ಠ.clutz.goog.labs.testing.objectmatcher;
  export = objectmatcher;
}
