//!! generated by clutz.
// Generated from labs/testing/logicmatcher.js
declare namespace ಠ_ಠ.clutz.goog.labs.testing.logicmatcher {
  /**
   * The AllOf matcher.
   */
  class AllOfMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_logicmatcher_AllOfMatcher : any;
    /**
     * The AllOf matcher.
     * @param matchers Input matchers.
     */
    constructor (matchers : ಠ_ಠ.clutz.goog.labs.testing.Matcher [] ) ;
    /**
     * Describes why the matcher failed. The returned string is a concatenation of
     * all the failed matchers' error strings.
     */
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if all of the matchers match the input value.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Creates a matcher that will succeed only if all of the given matchers
     * succeed.
     * @param var_args The matchers to test against.
     */
    static allOf ( ...var_args : ( ಠ_ಠ.clutz.goog.labs.testing.Matcher | null ) [] ) : ಠ_ಠ.clutz.goog.labs.testing.logicmatcher.AllOfMatcher ;
  }
  /**
   * The AnyOf matcher.
   */
  class AnyOfMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_logicmatcher_AnyOfMatcher : any;
    /**
     * The AnyOf matcher.
     * @param matchers Input matchers.
     */
    constructor (matchers : ಠ_ಠ.clutz.goog.labs.testing.Matcher [] ) ;
    /**
     * Describes why the matcher failed.
     */
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if any of the matchers matches the input value.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Accepts a set of matchers and returns a matcher which matches
     * values which satisfy the constraints of any of the given matchers.
     * @param var_args The matchers to test against.
     */
    static anyOf ( ...var_args : ( ಠ_ಠ.clutz.goog.labs.testing.Matcher | null ) [] ) : ಠ_ಠ.clutz.goog.labs.testing.logicmatcher.AnyOfMatcher ;
  }
  /**
   * The IsNot matcher.
   */
  class IsNotMatcher implements ಠ_ಠ.clutz.goog.labs.testing.Matcher {
    private noStructuralTyping_goog_labs_testing_logicmatcher_IsNotMatcher : any;
    /**
     * The IsNot matcher.
     * @param matcher The matcher to negate.
     */
    constructor (matcher : ಠ_ಠ.clutz.goog.labs.testing.Matcher ) ;
    /**
     * Describes why the matcher failed.
     */
    describe (actualValue ? : any ) : any ;
    /**
     * Determines if the input value doesn't satisfy a matcher.
     */
    matches (actualValue ? : any ) : any ;
    /**
     * Returns a matcher that negates the input matcher. The returned
     * matcher matches the values not matched by the input matcher and vice-versa.
     * @param matcher The matcher to test against.
     */
    static isNot (matcher : ಠ_ಠ.clutz.goog.labs.testing.Matcher ) : ಠ_ಠ.clutz.goog.labs.testing.logicmatcher.IsNotMatcher ;
  }
}
declare module 'goog:goog.labs.testing.logicmatcher' {
  import logicmatcher = ಠ_ಠ.clutz.goog.labs.testing.logicmatcher;
  export = logicmatcher;
}
