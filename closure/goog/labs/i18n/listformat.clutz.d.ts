//!! generated by clutz.
// Generated from labs/i18n/listformat.js
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  /**
   * GenderInfo provides a method to determine the gender of a list/array
   * of objects when one knows the gender of each item of the list.
   * It does this in a locale sensitive manner.
   * The constructor initializes the object based on the locale data from
   * the current goog.labs.i18n.ListFormatSymbols.
   *
   * Similar to the ICU4J class com.icu.util.GenderInfo:
   * http://icu-project.org/apiref/icu4j/com/ibm/icu/util/GenderInfo.html
   */
  class GenderInfo {
    private noStructuralTyping_goog_labs_i18n_GenderInfo : any;
    /**
     * Determines the overal gender of a list based on the gender of all the list
     * items, in a locale-aware way.
     * @param genders An array of genders, will give the gender of the list.
     */
    getListGender (genders : ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender [] ) : ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender ;
  }
}
declare module 'goog:goog.labs.i18n.GenderInfo' {
  import GenderInfo = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo;
  export default GenderInfo;
}
// Generated from labs/i18n/listformat.js
declare namespace ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo {
  /**
   * Enumeration for the possible gender values.
   * Gender: OTHER means either the information is unavailable,
   * or the person has declined to state MALE or FEMALE.
   */
  /**
   * Enumeration for the possible gender values.
   * Gender: OTHER means either the information is unavailable,
   * or the person has declined to state MALE or FEMALE.
   */
  enum Gender {
    FEMALE = 1.0 ,
    MALE = 0.0 ,
    OTHER = 2.0 ,
  }
}
declare module 'goog:goog.labs.i18n.GenderInfo.Gender' {
  import Gender = ಠ_ಠ.clutz.goog.labs.i18n.GenderInfo.Gender;
  export default Gender;
}
// Generated from labs/i18n/listformat.js
declare namespace ಠ_ಠ.clutz.goog.labs.i18n {
  /**
   * ListFormat provides a method to format a list/array of objects to a string,
   * in a user friendly way and in a locale sensitive manner.
   * If the objects are not strings, toString is called to convert them.
   * The constructor initializes the object based on the locale data from
   * the current goog.labs.i18n.ListFormatSymbols.
   *
   * Similar to the ICU4J class com.ibm.icu.text.ListFormatter:
   * http://icu-project.org/apiref/icu4j/com/ibm/icu/text/ListFormatter.html
   */
  class ListFormat {
    private noStructuralTyping_goog_labs_i18n_ListFormat : any;
    /**
     * Formats an array of strings into a string.
     * It is a user facing, locale-aware list (i.e. 'red, green, and blue').
     * @param items Items to format.
     */
    format (items : ( string | number ) [] ) : string ;
  }
}
declare module 'goog:goog.labs.i18n.ListFormat' {
  import ListFormat = ಠ_ಠ.clutz.goog.labs.i18n.ListFormat;
  export default ListFormat;
}
