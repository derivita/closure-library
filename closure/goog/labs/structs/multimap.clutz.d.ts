//!! generated by clutz.
// Generated from labs/structs/multimap.js
declare namespace ಠ_ಠ.clutz.goog.labs.structs {
  /**
   * Creates a new multimap.
   */
  class Multimap < K = any , V = any > {
    private noStructuralTyping_goog_labs_structs_Multimap : any;
    /**
     * Adds the given (key, value) pair to the map. The (key, value) pair
     * is guaranteed to be added.
     * @param key The key to add.
     * @param value The value to add.
     */
    add (key : K , value : V ) : void ;
    /**
     * Adds the contents of the given map/multimap to this multimap.
     * @param map The map to add.
     */
    addAllFromMultimap (map : ಠ_ಠ.clutz.goog.labs.structs.Multimap < K , V > ) : void ;
    /**
     * Stores a collection of values to the given key. Does not replace
     * existing (key, value) pairs.
     * @param key The key to add.
     * @param values The values to add.
     */
    addAllValues (key : K , values : V [] ) : void ;
    /**
     * Clears the multimap.
     */
    clear ( ) : void ;
    /**
     * Clones this multimap.
     */
    clone ( ) : ಠ_ಠ.clutz.goog.labs.structs.Multimap < K , V > ;
    containsEntry (key : K , value : V ) : boolean ;
    containsKey (key : K ) : boolean ;
    containsValue (value : V ) : boolean ;
    /**
     * Gets the values correspond to the given key.
     * @param key The key to retrieve.
     */
    get (key : K ) : V [] ;
    getCount ( ) : number ;
    getEntries ( ) : ( K | V ) [] [] ;
    getKeys ( ) : K [] ;
    getValues ( ) : V [] ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a single occurrence of (key, value) pair.
     * @param key The key to remove.
     * @param value The value to remove.
     */
    remove (key : K , value : V ) : boolean ;
    /**
     * Removes all values corresponding to the given key.
     * @param key The key whose values are to be removed.
     */
    removeAll (key : K ) : boolean ;
    /**
     * Replaces all the values for the given key with the given values.
     * @param key The key whose values are to be replaced.
     * @param values The new values. If empty, this is equivalent to `removeAll(key)`.
     */
    replaceValues (key : K , values : V [] ) : void ;
  }
}
declare module 'goog:goog.labs.structs.Multimap' {
  import Multimap = ಠ_ಠ.clutz.goog.labs.structs.Multimap;
  export default Multimap;
}
