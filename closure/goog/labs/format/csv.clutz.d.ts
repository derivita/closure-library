//!! generated by clutz.
// Generated from labs/format/csv.js
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  let ENABLE_VERBOSE_DEBUGGING : boolean ;
  /**
   * Parses a CSV string to create a two-dimensional array.
   *
   * This function does not process header lines, etc -- such transformations can
   * be made on the resulting array.
   * @param text The entire CSV text to be parsed.
   * @param opt_ignoreErrors Whether to ignore parsing errors and instead try to recover and keep going.
   * @param opt_delimiter The delimiter to use. Defaults to ','
   */
  function parse (text : string , opt_ignoreErrors ? : boolean , opt_delimiter ? : string ) : string [] [] ;
}
declare module 'goog:goog.labs.format.csv' {
  import csv = ಠ_ಠ.clutz.goog.labs.format.csv;
  export = csv;
}
// Generated from labs/format/csv.js
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  /**
   * Error thrown when parsing fails.
   */
  class ParseError extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_labs_format_csv_ParseError : any;
    /**
     * Error thrown when parsing fails.
     * @param text The CSV source text being parsed.
     * @param index The index, in the string, of the position of the error.
     * @param opt_message A description of the violated parse expectation.
     */
    constructor (text : string , index : number , opt_message ? : string ) ;
    position : { column : number , line : number } | null ;
    name : string ;
  }
}
declare module 'goog:goog.labs.format.csv.ParseError' {
  import ParseError = ಠ_ಠ.clutz.goog.labs.format.csv.ParseError;
  export default ParseError;
}
// Generated from labs/format/csv.js
declare namespace ಠ_ಠ.clutz.goog.labs.format.csv {
  /**
   * A token -- a single-character string or a sentinel.
   */
  type Token = string | PrivateType ;
}
declare module 'goog:goog.labs.format.csv.Token' {
  import Token = ಠ_ಠ.clutz.goog.labs.format.csv.Token;
  export default Token;
}
