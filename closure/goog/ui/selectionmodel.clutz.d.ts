//!! generated by clutz.
// Generated from ui/selectionmodel.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Single-selection model.  Dispatches a {@link goog.events.EventType.SELECT}
   * event when a selection is made.
   */
  class SelectionModel extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_SelectionModel : any;
    /**
     * Single-selection model.  Dispatches a {@link goog.events.EventType.SELECT}
     * event when a selection is made.
     * @param opt_items Array of items; defaults to empty.
     */
    constructor (opt_items ? : ( GlobalObject | null ) [] | null ) ;
    /**
     * Adds an item at the end of the list.
     * @param item Item to add.
     */
    addItem (item : GlobalObject | null ) : void ;
    /**
     * Adds an item at the given index.
     * @param item Item to add.
     * @param index Index at which to add the new item.
     */
    addItemAt (item : GlobalObject | null , index : number ) : void ;
    /**
     * Bulk-adds items to the selection model.  This is more efficient than calling
     * {@link #addItem} for each new item.
     * @param items New items to add.
     */
    addItems (items : ( GlobalObject | null ) [] | null | undefined ) : void ;
    clear ( ) : void ;
    disposeInternal ( ) : void ;
    getFirst ( ) : GlobalObject | null | undefined ;
    /**
     * Returns the item at the given 0-based index.
     * @param index Index of the item to return.
     */
    getItemAt (index : number ) : GlobalObject | null ;
    /**
     * Returns the number of items controlled by the selection model.
     */
    getItemCount ( ) : number ;
    getItems ( ) : ( GlobalObject | null ) [] ;
    getLast ( ) : GlobalObject | null | undefined ;
    getSelectedIndex ( ) : number ;
    getSelectedItem ( ) : GlobalObject | null ;
    /**
     * Returns the selection handler function used by the selection model to change
     * the internal selection state of items under its control.
     */
    getSelectionHandler ( ) : Function | null ;
    /**
     * Returns the 0-based index of the given item within the selection model, or
     * -1 if no such item is found.
     * @param item Item to look for.
     */
    indexOfItem (item : GlobalObject | null | undefined ) : number ;
    /**
     * Removes the given item (if it exists).  Dispatches a `SELECT` event if
     * the removed item was the currently selected item.
     * @param item Item to remove.
     */
    removeItem (item : GlobalObject | null ) : void ;
    /**
     * Removes the item at the given index.
     * @param index Index of the item to remove.
     */
    removeItemAt (index : number ) : void ;
    /**
     * Selects the item at the given index, deselecting any previously selected
     * item, and dispatches a `SELECT` event.
     * @param index Index to select (-1 to clear the selection).
     */
    setSelectedIndex (index : number ) : void ;
    /**
     * Selects the given item, deselecting any previously selected item, and
     * dispatches a `SELECT` event.
     * @param item Item to select (null to clear the selection).
     */
    setSelectedItem (item : GlobalObject | null ) : void ;
    /**
     * Sets the selection handler function to be used by the selection model to
     * change the internal selection state of items under its control.  The
     * function must take two arguments:  an item and a Boolean to indicate whether
     * the item is to be selected or deselected.  Selection handler functions are
     * only needed if the items in the selection model don't natively support the
     * `setSelected(Boolean)` interface.
     * @param handler Selection handler function.
     */
    setSelectionHandler (handler : Function | null ) : void ;
  }
}
declare module 'goog:goog.ui.SelectionModel' {
  import SelectionModel = ಠ_ಠ.clutz.goog.ui.SelectionModel;
  export default SelectionModel;
}
