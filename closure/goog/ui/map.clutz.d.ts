//!! generated by clutz.
// Generated from ui/map.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  export import Map = ಠ_ಠ.clutz.module$contents$goog$ui$Map_UiMap ;
}
declare module 'goog:goog.ui.Map' {
  import Map = ಠ_ಠ.clutz.goog.ui.Map;
  export default Map;
}
// Generated from ui/map.js
declare namespace ಠ_ಠ.clutz {
  /**
   * Class for Hash Map datastructure.
   */
  class module$contents$goog$ui$Map_UiMap < K = any , V = any > {
    private noStructuralTyping_module$contents$goog$ui$Map_UiMap : any;
    /**
     * Class for Hash Map datastructure.
     * @param map Map or Object to initialize the map with.
     */
    constructor (map ? : any ) ;
    /**
     * Adds multiple key-value pairs from another goog.ui.Map or Object.
     * @param map Object containing the data to add.
     */
    addAll (map : { [ /* warning: coerced from K */ key: string ]: V } ) : void ;
    clear ( ) : void ;
    /**
     * Clones a map and returns a new map.
     */
    clone ( ) : module$contents$goog$ui$Map_UiMap < any , any > ;
    /**
     * Whether the map contains the given key.
     * @param key The key to check for.
     */
    containsKey (key : K ) : boolean ;
    /**
     * Whether the map contains the given value. This is O(n).
     * @param val The value to check for.
     */
    containsValue (val : V ) : boolean ;
    /**
     * Whether this map is equal to the argument map.
     * @param otherMap The map against which to test equality.
     * @param equalityFn Optional equality function to test equality of values. If not specified, this will test whether the values contained in each map are identical objects.
     */
    equals (otherMap : module$contents$goog$ui$Map_UiMap < any , any > , equalityFn ? : (a : V , b : V ) => boolean ) : boolean ;
    /**
     * Calls the given function on each entry in the map.
     * @param thisArg The value of "this" inside callbackFn.
     */
    forEach < T = any > (callbackFn : (this : T , a : V , b : K , c : Map | module$contents$goog$ui$Map_UiMap < K , V > | null ) => any , thisArg ? : T ) : void ;
    /**
     * Returns the value for the given key.  If the key is not found and the default
     * value is not given this will return `undefined`.
     * @param key The key to get the value for.
     * @param defaultValue The value to return if no item is found for the given key, defaults to undefined.
     */
    get < DEFAULT = any > (key : any , defaultValue ? : DEFAULT ) : V | DEFAULT ;
    getCount ( ) : number ;
    /**
     * Returns the keys of the map.
     */
    getKeys ( ) : K [] ;
    /**
     * Returns the values of the map.
     */
    getValues ( ) : V [] ;
    isEmpty ( ) : boolean ;
    /**
     * Removes a key-value pair based on the key. This is O(logN) amortized due to
     * updating the keys array whenever the count becomes half the size of the keys
     * in the keys array.
     * @param key The key to remove.
     */
    remove (key : K ) : boolean ;
    /**
     * Adds a key-value pair to the map.
     * @param key The key.
     * @param value The value to add.
     */
    set (key : any , value : V ) : this ;
    toObject ( ) : GlobalObject ;
  }
}
declare namespace ಠ_ಠ.clutz {
  export import module$exports$goog$ui$Map = ಠ_ಠ.clutz.module$contents$goog$ui$Map_UiMap ;
}
