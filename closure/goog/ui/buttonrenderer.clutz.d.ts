//!! generated by clutz.
// Generated from ui/buttonrenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Button}s.  Extends the superclass with
   * the following button-specific API methods:
   * <ul>
   * <li>`getValue` - returns the button element's value
   * <li>`setValue` - updates the button element to reflect its new value
   * <li>`getTooltip` - returns the button element's tooltip text
   * <li>`setTooltip` - updates the button element's tooltip text
   * <li>`setCollapsed` - removes one or both of the button element's
   * borders
   * </ul>
   * For alternate renderers, see {@link goog.ui.NativeButtonRenderer},
   * {@link goog.ui.CustomButtonRenderer}, and {@link goog.ui.FlatButtonRenderer}.
   */
  class ButtonRenderer extends ಠ_ಠ.clutz.goog.ui.ControlRenderer {
    private noStructuralTyping_goog_ui_ButtonRenderer : any;
    /**
     * Default renderer for {@link goog.ui.Button}s.  Extends the superclass with
     * the following button-specific API methods:
     * <ul>
     * <li>`getValue` - returns the button element's value
     * <li>`setValue` - updates the button element to reflect its new value
     * <li>`getTooltip` - returns the button element's tooltip text
     * <li>`setTooltip` - updates the button element's tooltip text
     * <li>`setCollapsed` - removes one or both of the button element's
     * borders
     * </ul>
     * For alternate renderers, see {@link goog.ui.NativeButtonRenderer},
     * {@link goog.ui.CustomButtonRenderer}, and {@link goog.ui.FlatButtonRenderer}.
     */
    constructor ( ) ;
    createDom (button ? : any ) : any ;
    decorate (button ? : any , element ? : any ) : any ;
    /**
     * Returns the ARIA role to be applied to buttons.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null | undefined ;
    getCssClass ( ) : any ;
    /**
     * Takes a button's root element, and returns its tooltip text.
     * @param element The button's root element.
     */
    getTooltip (element : GlobalElement | null ) : string | undefined ;
    /**
     * Takes a button's root element, and returns the value associated with it.
     * No-op in the base class.
     * @param element The button's root element.
     */
    getValue (a : GlobalElement | null ) : string | undefined ;
    /**
     * Collapses the border on one or both sides of the button, allowing it to be
     * combined with the adjacent button(s), forming a single UI componenet with
     * multiple targets.
     * @param button Button to update.
     * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for which borders should be collapsed.
     */
    protected setCollapsed (button : ಠ_ಠ.clutz.goog.ui.Button | null , sides : number ) : void ;
    /**
     * Takes a button's root element and a tooltip string, and updates the element
     * with the new tooltip.
     * @param element The button's root element.
     * @param tooltip New tooltip text.
     */
    protected setTooltip (element : GlobalElement | null , tooltip : string ) : void ;
    /**
     * Takes a button's root element and a value, and updates the element to reflect
     * the new value.  No-op in the base class.
     * @param element The button's root element.
     * @param value New value.
     */
    setValue (a : GlobalElement | null , b : string ) : any ;
    /**
     * Updates the button's ARIA (accessibility) state if the button is being
     * treated as a checkbox. Also makes sure that attributes which aren't
     * supported by buttons aren't being added.
     * @param element Element whose ARIA state is to be updated.
     * @param state Component state being enabled or disabled.
     * @param enable Whether the state is being enabled or disabled.
     */
    protected updateAriaState (element : GlobalElement | null , state : ಠ_ಠ.clutz.goog.ui.Component.State | null , enable : boolean ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.ButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.ButtonRenderer ;
  }
}
declare module 'goog:goog.ui.ButtonRenderer' {
  import ButtonRenderer = ಠ_ಠ.clutz.goog.ui.ButtonRenderer;
  export default ButtonRenderer;
}
