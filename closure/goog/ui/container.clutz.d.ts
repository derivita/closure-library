//!! generated by clutz.
// Generated from ui/container.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for containers.  Extends {@link goog.ui.Component} by adding
   * the following:
   * <ul>
   * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
   * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
   * containers without the need to subclass this class,
   * <li>methods to manage child controls hosted in the container,
   * <li>default mouse and keyboard event handling methods.
   * </ul>
   */
  class Container extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_Container : any;
    /**
     * Base class for containers.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * containers without the need to subclass this class,
     * <li>methods to manage child controls hosted in the container,
     * <li>default mouse and keyboard event handling methods.
     * </ul>
     * @param opt_orientation Container orientation; defaults to `VERTICAL`.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.ContainerRenderer}.
     * @param opt_domHelper DOM helper, used for document interaction.
     */
    constructor (opt_orientation ? : ಠ_ಠ.clutz.goog.ui.Container.Orientation | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds the specified control as the last child of this container.  See
     * {@link goog.ui.Container#addChildAt} for detailed semantics.
     * @param child The new child control.
     * @param opt_render Whether the new child should be rendered immediately after being added (defaults to false).
     */
    addChild (child : ಠ_ಠ.clutz.goog.ui.Component | null , opt_render ? : boolean ) : void ;
    /**
     * Adds the control as a child of this container at the given 0-based index.
     * Overrides {@link goog.ui.Component#addChildAt} by also updating the
     * container's highlight index.  Since {@link goog.ui.Component#addChild} uses
     * {@link #addChildAt} internally, we only need to override this method.
     * @param control New child.
     * @param index Index at which the new child is to be added.
     * @param opt_render Whether the new child should be rendered immediately after being added (defaults to false).
     */
    addChildAt (control : ಠ_ಠ.clutz.goog.ui.Component | null , index : number , opt_render ? : boolean ) : void ;
    /**
     * Returns true if the given element can be decorated by this container.
     * Overrides {@link goog.ui.Component#canDecorate}.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Returns whether the given item can be highlighted.
     * @param item The item to check.
     */
    protected canHighlightItem (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    /**
     * Creates the container's DOM.
     */
    createDom ( ) : void ;
    /**
     * Decorates the given element with this container. Overrides {@link
     * goog.ui.Component#decorateInternal}.  Considered protected.
     * @param element Element to decorate.
     */
    decorateInternal (element : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Configures the container after its DOM has been rendered, and sets up event
     * handling.  Overrides {@link goog.ui.Component#enterDocument}.
     */
    enterDocument ( ) : void ;
    /**
     * Cleans up the container before its DOM is removed from the document, and
     * removes event handlers.  Overrides {@link goog.ui.Component#exitDocument}.
     */
    exitDocument ( ) : void ;
    /**
     * Overrides {@link goog.ui.Container#getChild} to make it clear that it
     * only returns {@link goog.ui.Control}s.
     * @param id Child component ID.
     */
    getChild (a : string ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Overrides {@link goog.ui.Container#getChildAt} to make it clear that it
     * only returns {@link goog.ui.Control}s.
     * @param index 0-based index.
     */
    getChildAt (a : number ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the container itself hasn't been rendered yet.  Overrides
     * {@link goog.ui.Component#getContentElement} by delegating to the renderer.
     */
    getContentElement ( ) : GlobalElement | null ;
    /**
     * Returns the currently highlighted item (if any).
     */
    getHighlighted ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the index of the currently highlighted item (-1 if none).
     */
    getHighlightedIndex ( ) : number ;
    /**
     * Returns the DOM element on which the container is listening for keyboard
     * events (null if none).
     */
    getKeyEventTarget ( ) : GlobalElement | null ;
    /**
     * Returns the keyboard event handler for this container, lazily created the
     * first time this method is called.  The keyboard event handler listens for
     * keyboard events on the container's key event target, as determined by its
     * renderer.
     */
    getKeyHandler ( ) : ಠ_ಠ.clutz.goog.events.KeyHandler ;
    /**
     * Returns the currently open (expanded) control in the container (null if
     * none).
     */
    getOpenItem ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the container's orientation.
     */
    getOrientation ( ) : ಠ_ಠ.clutz.goog.ui.Container.Orientation | null ;
    /**
     * Returns the child control that owns the given DOM node, or null if no such
     * control is found.
     * @param node DOM node whose owner is to be returned.
     */
    protected getOwnerControl (node : Node | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Returns the renderer used by this container to render itself or to decorate
     * an existing element.
     */
    getRenderer ( ) : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null ;
    /**
     * Handles blur events raised when the container's key event target loses
     * keyboard focus.  The default implementation clears the highlight index.
     * @param e Blur event to handle.
     */
    handleBlur (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouse events originating from nodes belonging to the controls hosted
     * in the container.  Locates the child control based on the DOM node that
     * dispatched the event, and forwards the event to the control for handling.
     * @param e Mouse event to handle.
     */
    handleChildMouseEvents (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles CLOSE events dispatched by items in the container when they are
     * closed.
     * @param e Close event to handle.
     */
    handleCloseItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseup events over the document.  The default implementation
     * clears the "mouse button pressed" flag.
     * @param e Mouseup event to handle.
     */
    handleDocumentMouseUp (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles ENTER events raised by child controls when they are navigated to.
     * @param e ENTER event to handle.
     */
    handleEnterItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    /**
     * Handles focus events raised when the container's key event target receives
     * keyboard focus.
     * @param e Focus event to handle.
     */
    handleFocus (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles HIGHLIGHT events dispatched by items in the container when
     * they are highlighted.
     * @param e Highlight event to handle.
     */
    handleHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Attempts to handle a keyboard event, if the control is enabled, by calling
     * {@link handleKeyEventInternal}.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Key event to handle.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  If the container is enabled, and a child is highlighted,
     * calls the child control's `handleKeyEvent` method to give the control
     * a chance to handle the event first.
     * @param e Key event to handle.
     */
    handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Handles mousedown events over the container.  The default implementation
     * sets the "mouse button pressed" flag and, if the container is focusable,
     * grabs keyboard focus.
     * @param e Mousedown event to handle.
     */
    handleMouseDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles OPEN events dispatched by items in the container when they are
     * opened.
     * @param e Open event to handle.
     */
    handleOpenItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles UNHIGHLIGHT events dispatched by items in the container when
     * they are unhighlighted.
     * @param e Unhighlight event to handle.
     */
    handleUnHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    highlightFirst ( ) : void ;
    /**
     * Helper function that manages the details of moving the highlight among
     * child controls in response to keyboard events.
     * @param fn Function that accepts the current and maximum indices, and returns the next index to check.
     * @param startIndex Start index.
     */
    protected highlightHelper (fn : (a : number , b : number ) => number , startIndex : number ) : boolean ;
    highlightLast ( ) : void ;
    highlightNext ( ) : void ;
    highlightPrevious ( ) : void ;
    /**
     * Returns true if the container is enabled, false otherwise.
     */
    isEnabled ( ) : boolean ;
    /**
     * Returns true if the container is focusable, false otherwise.  The default
     * is true.  Focusable containers always have a tab index and allocate a key
     * handler to handle keyboard events while focused.
     */
    isFocusable ( ) : boolean ;
    /**
     * Returns true if the container allows children to be focusable, false
     * otherwise.  Only effective if the container is not focusable.
     */
    isFocusableChildrenAllowed ( ) : boolean ;
    /**
     * Returns true if the mouse button is pressed, false otherwise.
     */
    isMouseButtonPressed ( ) : boolean ;
    isOpenFollowsHighlight ( ) : boolean ;
    /**
     * Returns true if the container's visibility is set to visible, false if
     * it is set to hidden.  A container that is set to hidden is guaranteed
     * to be hidden from the user, but the reverse isn't necessarily true.
     * A container may be set to visible but can otherwise be obscured by another
     * element, rendered off-screen, or hidden using direct CSS manipulation.
     */
    isVisible ( ) : boolean ;
    /**
     * Removes a child control.  Overrides {@link goog.ui.Component#removeChild} by
     * updating the highlight index.  Since {@link goog.ui.Component#removeChildAt}
     * uses {@link #removeChild} internally, we only need to override this method.
     * @param control The ID of the child to remove, or the control itself.
     * @param opt_unrender Whether to call `exitDocument` on the removed control, and detach its DOM from the document (defaults to false).
     */
    removeChild (control : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Enables/disables the container based on the `enable` argument.
     * Dispatches an `ENABLED` or `DISABLED` event prior to changing
     * the container's state, which may be caught and canceled to prevent the
     * container from changing state.  Also enables/disables child controls.
     * @param enable Whether to enable or disable the container.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets whether the container is focusable.  The default is true.  Focusable
     * containers always have a tab index and allocate a key handler to handle
     * keyboard events while focused.
     * @param focusable Whether the component is to be focusable.
     */
    setFocusable (focusable : boolean ) : void ;
    /**
     * Sets whether the container allows children to be focusable, false
     * otherwise.  Only effective if the container is not focusable.
     * @param focusable Whether the children should be focusable.
     */
    setFocusableChildrenAllowed (focusable : boolean ) : void ;
    /**
     * Highlights the given item if it exists and is a child of the container;
     * otherwise un-highlights the currently highlighted item.
     * @param item Item to highlight.
     */
    setHighlighted (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Highlights the item at the given 0-based index (if any).  If another item
     * was previously highlighted, it is un-highlighted.
     * @param index Index of item to highlight (-1 removes the current highlight).
     */
    setHighlightedIndex (index : number ) : void ;
    /**
     * Helper method that sets the highlighted index to the given index in response
     * to a keyboard event.  The base class implementation simply calls the
     * {@link #setHighlightedIndex} method, but subclasses can override this
     * behavior as needed.
     * @param index Index of item to highlight.
     */
    protected setHighlightedIndexFromKeyEvent (index : number ) : void ;
    /**
     * Attaches an element on which to listen for key events.
     * @param element The element to attach, or null/undefined to attach to the default element.
     */
    setKeyEventTarget (element : GlobalElement | null | undefined ) : void ;
    /**
     * Sets or clears the "mouse button pressed" flag.
     * @param pressed Whether the mouse button is presed.
     */
    setMouseButtonPressed (pressed : boolean ) : void ;
    /**
     * Sets whether highlighting a child component should also open it.
     * @param follow Whether highlighting a child component also opens it.
     */
    setOpenFollowsHighlight (follow : boolean ) : void ;
    /**
     * Sets the container's orientation.
     * @param orientation Container orientation.
     */
    setOrientation (orientation : ಠ_ಠ.clutz.goog.ui.Container.Orientation ) : void ;
    /**
     * Registers the given renderer with the container.  Changing renderers after
     * the container has already been rendered or decorated is an error.
     * @param renderer Renderer used by the container.
     */
    setRenderer (renderer : ಠ_ಠ.clutz.goog.ui.ContainerRenderer | null ) : void ;
    /**
     * Shows or hides the container.  Does nothing if the container already has
     * the requested visibility.  Otherwise, dispatches a SHOW or HIDE event as
     * appropriate, giving listeners a chance to prevent the visibility change.
     * @param visible Whether to show or hide the container.
     * @param opt_force If true, doesn't check whether the container already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
  }
}
declare module 'goog:goog.ui.Container' {
  import Container = ಠ_ಠ.clutz.goog.ui.Container;
  export default Container;
}
// Generated from ui/container.js
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
  /**
   * Container-specific events.
   */
  /**
   * Container-specific events.
   */
  enum EventType {
    AFTER_HIDE = 'afterhide' ,
    AFTER_SHOW = 'aftershow' ,
  }
}
declare module 'goog:goog.ui.Container.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.Container.EventType;
  export default EventType;
}
// Generated from ui/container.js
declare namespace ಠ_ಠ.clutz.goog.ui.Container {
  /**
   * Container orientation constants.
   */
  /**
   * Container orientation constants.
   */
  enum Orientation {
    HORIZONTAL = 'horizontal' ,
    VERTICAL = 'vertical' ,
  }
}
declare module 'goog:goog.ui.Container.Orientation' {
  import Orientation = ಠ_ಠ.clutz.goog.ui.Container.Orientation;
  export default Orientation;
}
