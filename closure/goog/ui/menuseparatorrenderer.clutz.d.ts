//!! generated by clutz.
// Generated from ui/menuseparatorrenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Renderer for menu separators.
   */
  class MenuSeparatorRenderer extends ಠ_ಠ.clutz.goog.ui.ControlRenderer {
    private noStructuralTyping_goog_ui_MenuSeparatorRenderer : any;
    /**
     * Renderer for menu separators.
     */
    constructor ( ) ;
    /**
     * Returns an empty, styled menu separator DIV.  Overrides {@link
     * goog.ui.ControlRenderer#createDom}.
     * @param separator goog.ui.Separator to render.
     */
    createDom (separator : ಠ_ಠ.clutz.goog.ui.Control | null ) : GlobalElement ;
    /**
     * Takes an existing element, and decorates it with the separator.  Overrides
     * {@link goog.ui.ControlRenderer#decorate}.
     * @param separator goog.ui.MenuSeparator to decorate the element.
     * @param element Element to decorate.
     */
    decorate (separator : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null ) : GlobalElement ;
    /**
     * Returns the CSS class to be applied to the root element of components
     * rendered using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Overrides {@link goog.ui.ControlRenderer#setContent} to do nothing, since
     * separators are empty.
     * @param separator The separator's root element.
     * @param content Text caption or DOM structure to be set as the separators's content (ignored).
     */
    setContent (separator : GlobalElement | null , content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer ;
  }
}
declare module 'goog:goog.ui.MenuSeparatorRenderer' {
  import MenuSeparatorRenderer = ಠ_ಠ.clutz.goog.ui.MenuSeparatorRenderer;
  export default MenuSeparatorRenderer;
}
