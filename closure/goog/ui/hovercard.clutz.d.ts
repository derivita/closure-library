//!! generated by clutz.
// Generated from ui/hovercard.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Create a hover card object.  Hover cards extend tooltips in that they don't
   * have to be manually attached to each element that can cause them to display.
   * Instead, you can create a function that gets called when the mouse goes over
   * any element on your page, and returns whether or not the hovercard should be
   * shown for that element.
   *
   * Alternatively, you can define a map of tag names to the attribute name each
   * tag should have for that tag to trigger the hover card.  See example below.
   *
   * Hovercards can also be triggered manually by calling
   * `triggerForElement`, shown without a delay by calling
   * `showForElement`, or triggered over other elements by calling
   * `attach`.  For the latter two cases, the application is responsible
   * for calling `detach` when finished.
   *
   * HoverCard objects fire a TRIGGER event when the mouse moves over an element
   * that can trigger a hovercard, and BEFORE_SHOW when the hovercard is
   * about to be shown.  Clients can respond to these events and can prevent the
   * hovercard from being triggered or shown.
   */
  class HoverCard extends ಠ_ಠ.clutz.goog.ui.AdvancedTooltip {
    private noStructuralTyping_goog_ui_HoverCard : any;
    /**
     * Create a hover card object.  Hover cards extend tooltips in that they don't
     * have to be manually attached to each element that can cause them to display.
     * Instead, you can create a function that gets called when the mouse goes over
     * any element on your page, and returns whether or not the hovercard should be
     * shown for that element.
     *
     * Alternatively, you can define a map of tag names to the attribute name each
     * tag should have for that tag to trigger the hover card.  See example below.
     *
     * Hovercards can also be triggered manually by calling
     * `triggerForElement`, shown without a delay by calling
     * `showForElement`, or triggered over other elements by calling
     * `attach`.  For the latter two cases, the application is responsible
     * for calling `detach` when finished.
     *
     * HoverCard objects fire a TRIGGER event when the mouse moves over an element
     * that can trigger a hovercard, and BEFORE_SHOW when the hovercard is
     * about to be shown.  Clients can respond to these events and can prevent the
     * hovercard from being triggered or shown.
     * @param isAnchor Function that returns true if a given element should trigger the hovercard.  Alternatively, it can be a map of tag names to the attribute that the tag should have in order to trigger the hovercard, e.g., {A: 'href'} for all links.  Tag names must be all upper case; attribute names are case insensitive.
     * @param opt_checkDescendants Use false for a performance gain if you are sure that none of your triggering elements have child elements. Default is true.
     * @param opt_domHelper Optional DOM helper to use for creating and rendering the hovercard element.
     * @param opt_triggeringDocument Optional document to use in place of the one included in the DomHelper for finding triggering elements. Defaults to the document included in the DomHelper.
     */
    constructor (isAnchor : null | GlobalObject , opt_checkDescendants ? : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_triggeringDocument ? : Document | null ) ;
    cancelTrigger ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Gets the DOM element that triggered the current hovercard.  Note that in
     * the TRIGGER or CANCEL_TRIGGER events, the current hovercard's anchor may not
     * be the one that caused the event, so use the event's anchor property instead.
     */
    getAnchorElement ( ) : GlobalElement | null ;
    /**
     * If the mouse moves out of the trigger while we're being triggered, then
     * cancel it.
     * @param event Mouse out or blur event.
     */
    handleMouseOutAndBlur (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * This mouse over event is only received if the anchor is already attached.
     * If it was attached manually, then it may need to be triggered.
     * @param event Mouse over event.
     */
    handleMouseOver (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Called by timer from mouse over handler. If this is called and the hovercard
     * is not shown for whatever reason, then send a cancel trigger event.
     * @param el Element to show tooltip for.
     * @param opt_pos Position to display popup at.
     */
    maybeShow (el : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null ) : void ;
    /**
     * This method gets called when we detect that a trigger event will not lead
     * to the hovercard being shown.
     */
    protected onCancelTrigger ( ) : void ;
    /**
     * Make sure we detach from temp anchor when we are done displaying hovercard.
     */
    protected onHide ( ) : void ;
    /**
     * Called when an element triggers the hovercard.  This will return false
     * if an event handler sets preventDefault to true, which will prevent
     * the hovercard from being shown.
     * @param triggerEvent Event object to use for trigger event.
     */
    protected onTrigger (triggerEvent : ಠ_ಠ.clutz.goog.ui.HoverCard.TriggerEvent ) : boolean ;
    /**
     * Sets the max number of levels to search up the dom if checking descendants.
     * @param maxSearchSteps Maximum number of levels to search up the dom if checking descendants.
     */
    setMaxSearchSteps (maxSearchSteps : number ) : void ;
    /**
     * Triggers the hovercard to show after a delay.
     * @param anchorElement Element that is triggering the hovercard.
     * @param opt_pos Position to display hovercard.
     * @param opt_data Data to pass to the onTrigger event.
     */
    triggerForElement (anchorElement : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null , opt_data ? : GlobalObject | null ) : void ;
  }
}
declare module 'goog:goog.ui.HoverCard' {
  import HoverCard = ಠ_ಠ.clutz.goog.ui.HoverCard;
  export default HoverCard;
}
// Generated from ui/hovercard.js
declare namespace ಠ_ಠ.clutz.goog.ui.HoverCard {
  /**
   * Enum for event type fired by HoverCard.
   */
  type EventType = string &{clutzEnumBrand: never} |'canceltrigger' |'trigger' ;
  let EventType : {
    BEFORE_HIDE : EventType ,
    BEFORE_SHOW : EventType ,
    CANCEL_TRIGGER : 'canceltrigger' ,
    HIDE : EventType ,
    SHOW : EventType ,
    TRIGGER : 'trigger' ,
  };
}
declare module 'goog:goog.ui.HoverCard.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.HoverCard.EventType;
  export default EventType;
}
// Generated from ui/hovercard.js
declare namespace ಠ_ಠ.clutz.goog.ui.HoverCard {
  /**
   * Create a trigger event for specified anchor and optional data.
   */
  class TriggerEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_HoverCard_TriggerEvent : any;
    /**
     * Create a trigger event for specified anchor and optional data.
     * @param type Event type.
     * @param target Hovercard that is triggering the event.
     * @param anchor Element that triggered event.
     * @param opt_data Optional data to be available in the TRIGGER event.
     */
    constructor (type : ಠ_ಠ.clutz.goog.ui.HoverCard.EventType , target : ಠ_ಠ.clutz.goog.ui.HoverCard | null , anchor : GlobalElement | null , opt_data ? : GlobalObject | null ) ;
    /**
     * Element that triggered the hovercard event.
     */
    anchor : GlobalElement | null ;
    /**
     * Optional data to be passed to the listener.
     */
    data ? : GlobalObject | null ;
  }
}
declare module 'goog:goog.ui.HoverCard.TriggerEvent' {
  import TriggerEvent = ಠ_ಠ.clutz.goog.ui.HoverCard.TriggerEvent;
  export default TriggerEvent;
}
