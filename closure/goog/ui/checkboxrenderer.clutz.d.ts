//!! generated by clutz.
// Generated from ui/checkboxrenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Checkbox}s.  Extends the superclass
   * to support checkbox states:
   */
  class CheckboxRenderer extends ಠ_ಠ.clutz.goog.ui.ControlRenderer {
    private noStructuralTyping_goog_ui_CheckboxRenderer : any;
    /**
     * Default renderer for {@link goog.ui.Checkbox}s.  Extends the superclass
     * to support checkbox states:
     */
    constructor ( ) ;
    createDom (checkbox ? : any ) : any ;
    decorate (checkbox ? : any , element ? : any ) : any ;
    /**
     * Returns the ARIA role to be applied to checkboxes.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ;
    /**
     * Takes a single {@link goog.ui.Checkbox.State}, and returns the
     * corresponding CSS class name.
     * @param state Checkbox state.
     */
    protected getClassForCheckboxState (state : ಠ_ಠ.clutz.goog.ui.Checkbox.State | null ) : string ;
    getCssClass ( ) : any ;
    /**
     * Updates the appearance of the control in response to a checkbox state
     * change.
     * @param element Checkbox element.
     * @param state Updated checkbox state.
     */
    setCheckboxState (element : GlobalElement | null , state : ಠ_ಠ.clutz.goog.ui.Checkbox.State | null ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.CheckboxRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.CheckboxRenderer ;
  }
}
declare module 'goog:goog.ui.CheckboxRenderer' {
  import CheckboxRenderer = ಠ_ಠ.clutz.goog.ui.CheckboxRenderer;
  export default CheckboxRenderer;
}
