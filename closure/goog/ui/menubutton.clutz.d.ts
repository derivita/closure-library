//!! generated by clutz.
// Generated from ui/menubutton.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A menu button control.  Extends {@link goog.ui.Button} by composing a button
   * with a dropdown arrow and a popup menu.
   */
  class MenuButton extends ಠ_ಠ.clutz.goog.ui.Button {
    private noStructuralTyping_goog_ui_MenuButton : any;
    /**
     * A menu button control.  Extends {@link goog.ui.Button} by composing a button
     * with a dropdown arrow and a popup menu.
     * @param opt_content Text caption or existing DOM structure to display as the button's caption (if any).
     * @param opt_menu Menu to render under the button when clicked.
     * @param opt_renderer Renderer used to render or decorate the menu button; defaults to {@link goog.ui.MenuButtonRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     * @param opt_menuRenderer Renderer used to render or decorate the menu; defaults to {@link goog.ui.MenuRenderer}.
     */
    constructor (opt_content ? : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_menu ? : ಠ_ಠ.clutz.goog.ui.Menu | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ButtonRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_menuRenderer ? : ಠ_ಠ.clutz.goog.ui.MenuRenderer ) ;
    selectFirstOnEnterOrSpace_ : boolean ;
    /**
     * Adds a new menu item at the end of the menu.
     * @param item Menu item to add to the menu.
     */
    addItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null | ಠ_ಠ.clutz.goog.ui.MenuSeparator | ಠ_ಠ.clutz.goog.ui.Control ) : void ;
    /**
     * Adds a new menu item at the specific index in the menu.
     * @param item Menu item to add to the menu.
     * @param index Index at which to insert the menu item.
     */
    addItemAt (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null | ಠ_ಠ.clutz.goog.ui.MenuSeparator , index : number ) : void ;
    /**
     * Returns true if the given element is to be considered part of the component,
     * even if it isn't a DOM descendant of the component's root element.
     * @param element Element to test (if any).
     */
    protected containsElement (element : GlobalElement | null ) : boolean ;
    disposeInternal ( ) : void ;
    /**
     * Sets up event handlers specific to menu buttons.
     */
    enterDocument ( ) : void ;
    /**
     * Removes event handlers specific to menu buttons, and ensures that the
     * attached menu also exits the document.
     */
    exitDocument ( ) : void ;
    /**
     * Returns the menu item at a given index.
     * @param index Index of menu item.
     */
    getItemAt (index : number ) : ಠ_ಠ.clutz.goog.ui.MenuItem | null ;
    /**
     * Returns the number of items in the menu (including separators).
     */
    getItemCount ( ) : number ;
    /**
     * Returns the menu attached to the button.  If no menu is attached, creates a
     * new empty menu.
     */
    getMenu ( ) : ಠ_ಠ.clutz.goog.ui.Menu | null ;
    /**
     * Handles blur events dispatched by the button's key event target when it
     * loses keyboard focus by closing the popup menu (unless it is focusable).
     * Only registered if the button is focusable.
     * @param e Blur event dispatched by the menu button.
     */
    protected handleBlur (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `CLOSE` events dispatched by the associated menu.
     * @param e Close event to handle.
     */
    handleCloseItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mousedown events over the document.  If the mousedown happens over
     * an element unrelated to the component, hides the menu.
     * TODO(attila): Reconcile this with goog.ui.Popup (and handle frames/windows).
     * @param e Mouse event to handle.
     */
    protected handleDocumentMouseDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles `HIGHLIGHT` events dispatched by the attached menu.
     * @param e Highlight event to handle.
     */
    handleHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    handleKeyEventInternal (e ? : any ) : any ;
    /**
     * Handles `ACTION` events dispatched by an activated menu item.
     * @param e Action event to handle.
     */
    protected handleMenuAction (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `BLUR` events dispatched by the popup menu by closing it.
     * Only registered if the menu is focusable.
     * @param e Blur event dispatched by a focusable menu.
     */
    handleMenuBlur (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mousedown events.  Invokes the superclass implementation to dispatch
     * an ACTIVATE event and activate the button.  Also toggles the visibility of
     * the attached menu.
     * @param e Mouse event to handle.
     */
    protected handleMouseDown (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseup events.  Invokes the superclass implementation to dispatch
     * an ACTION event and deactivate the button.
     * @param e Mouse event to handle.
     */
    protected handleMouseUp (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles UNHIGHLIGHT events dispatched by the associated menu.
     * @param e Unhighlight event to handle.
     */
    handleUnHighlightItem (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Hides the menu and cleans up menu-specific event handling.
     */
    hideMenu ( ) : void ;
    invalidateMenuSize ( ) : void ;
    isAlignMenuToStart ( ) : boolean ;
    isFocusablePopupMenu ( ) : boolean ;
    isScrollOnOverflow ( ) : boolean ;
    /**
     * Performs the appropriate action when the menu button is activated by the
     * user.  Overrides the superclass implementation by not dispatching an
     * `ACTION` event, because menu buttons exist only to reveal menus, not to
     * perform actions themselves.  Calls {@link #setActive} to deactivate the
     * button.
     * @param e Mouse or key event that triggered the action.
     */
    protected performActionInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    positionMenu ( ) : void ;
    /**
     * Removes the item from the menu and disposes of it.
     * @param item The menu item to remove.
     */
    removeItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null | ಠ_ಠ.clutz.goog.ui.MenuSeparator ) : void ;
    /**
     * Removes the menu item at a given index in the menu and disposes of it.
     * @param index Index of item.
     */
    removeItemAt (index : number ) : void ;
    /**
     * Sets whether the menu is aligned to the start or the end of the button.
     * @param alignToStart Whether the menu is to be aligned to the start of the button (left if the render direction is left-to-right, right if the render direction is right-to-left).
     */
    setAlignMenuToStart (alignToStart : boolean ) : void ;
    /**
     * Sets whether the enter or space key should close the menu, if it is already
     * open. By default, only the ESC key will close an open menu.
     * @param close Whether pressing Enter or Space when the button has focus will close the menu if it is already open.
     */
    setCloseOnEnterOrSpace (close : boolean ) : void ;
    /**
     * Enables/disables the menu button based on the value of the argument, and
     * updates its CSS styling.  Also hides the popup menu if the button is being
     * disabled.
     * @param enable Whether to enable or disable the button.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets whether the attached popup menu is focusable.  If the popup menu is
     * focusable, it may steal keyboard focus from the menu button, so the button
     * will not hide the menu on blur.
     * @param focusable Whether the attached menu is focusable.
     */
    setFocusablePopupMenu (focusable : boolean ) : void ;
    /**
     * Replaces the menu attached to the button with the argument, and returns the
     * previous menu (if any).
     * @param menu New menu to be attached to the menu button (null to remove the menu).
     */
    setMenu (menu : ಠ_ಠ.clutz.goog.ui.Menu | null ) : ಠ_ಠ.clutz.goog.ui.Menu | null | undefined ;
    /**
     * Sets a margin that will be applied to the menu's position when it is shown.
     * If null, no margin will be applied.
     * @param margin Margin to apply.
     */
    setMenuMargin (margin : ಠ_ಠ.clutz.goog.math.Box | null ) : void ;
    /**
     * Specify which positioning algorithm to use.
     *
     * This method is preferred over the fine-grained positioning methods like
     * setPositionElement, setAlignMenuToStart, and setScrollOnOverflow. Calling
     * this method will override settings by those methods.
     * @param position The position of the Menu the button. If the position has a null anchor, we will use the menubutton element as the anchor.
     */
    setMenuPosition (position : ಠ_ಠ.clutz.goog.positioning.AnchoredPosition | null ) : void ;
    /**
     * Opens or closes the attached popup menu.
     * @param open Whether to open or close the menu.
     * @param opt_e Event that caused the menu to be opened.
     */
    setOpen (open : boolean , opt_e ? : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Sets an element for anchoring the menu.
     * @param positionElement New element to use for positioning the dropdown menu.  Null to use the default behavior of positioning to this menu button.
     */
    setPositionElement (positionElement : GlobalElement | null ) : void ;
    /**
     * Sets whether to render the menu as a sibling element of the button.
     * Normally, the menu is a child of document.body.  This option is useful if
     * you need the menu to inherit styles from a common parent element, or if you
     * otherwise need it to share a parent element for desired event handling.  One
     * example of the latter is if the parent is in a goog.ui.Popup, to ensure that
     * clicks on the menu are considered being within the popup.
     * @param renderMenuAsSibling Whether we render the menu at the end of the dom or as a sibling to the button/label that renders the drop down.
     */
    setRenderMenuAsSibling (renderMenuAsSibling : boolean ) : void ;
    /**
     * Sets whether the menu should scroll when it's too big to fix vertically on
     * the screen.  The css of the menu element should have overflow set to auto.
     * Note: Adding or removing items while the menu is open will not work correctly
     * if scrollOnOverflow is on.
     * @param scrollOnOverflow Whether the menu should scroll when too big to fit on the screen.  If false, adjust logic will be used to try and reposition the menu to fit.
     */
    setScrollOnOverflow (scrollOnOverflow : boolean ) : void ;
    /**
     * Sets whether to select the first item in the menu when it is opened using
     * enter or space. By default, the first item is selected only when
     * opened by a key up or down event. When this is on, the first item will
     * be selected due to any of the four events.
     */
    setSelectFirstOnEnterOrSpace (select : boolean ) : void ;
    /**
     * Shows/hides the menu button based on the value of the argument.  Also hides
     * the popup menu if the button is being hidden.
     * @param visible Whether to show or hide the button.
     * @param opt_force If true, doesn't check whether the component already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
    /**
     * Reveals the menu and hooks up menu-specific event handling.
     */
    showMenu ( ) : void ;
  }
}
declare module 'goog:goog.ui.MenuButton' {
  import MenuButton = ಠ_ಠ.clutz.goog.ui.MenuButton;
  export default MenuButton;
}
