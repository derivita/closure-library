//!! generated by clutz.
// Generated from ui/tree/basenode.js
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
  /**
   * An abstract base class for a node in the tree.
   */
  class BaseNode extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_tree_BaseNode : any;
    /**
     * An abstract base class for a node in the tree.
     * @param content The content of the node label. Strings are treated as plain-text and will be HTML escaped.
     * @param opt_config The configuration for the tree. See {@link goog.ui.tree.BaseNode.defaultConfig}. If not specified the default config will be used.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (content : string | ಠ_ಠ.clutz.goog.html.SafeHtml , opt_config ? : GlobalObject | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    protected tree : ಠ_ಠ.clutz.goog.ui.tree.TreeControl | null ;
    /**
     * Adds a node as a child to the current node.
     * @param child The child to add.
     * @param opt_before If specified, the new child is added as a child before this one. If not specified, it's appended to the end.
     */
    add (child : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null , opt_before ? : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode ;
    /**
     * The method assumes that the child doesn't have parent node yet.
     * The `opt_render` argument is not used. If the parent node is expanded,
     * the child node's state will be the same as the parent's. Otherwise the
     * child's DOM tree won't be created.
     */
    addChildAt (child ? : any , index ? : any , opt_render ? : any ) : void ;
    collapse ( ) : void ;
    collapseAll ( ) : void ;
    collapseChildren ( ) : void ;
    /**
     * Returns true if the node is a descendant of this node
     * @param node The node to check.
     */
    contains (node : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ) : boolean ;
    createDom ( ) : void ;
    /**
     * Originally it was intended to deselect the node but never worked.
     */
    deselect ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    expand ( ) : void ;
    expandAll ( ) : void ;
    expandChildren ( ) : void ;
    getAfterLabelElement ( ) : GlobalElement | null ;
    /**
     * Returns the html that appears after the label. This is useful if you want to
     * put extra UI on the row of the label but not inside the anchor tag.
     */
    getAfterLabelHtml ( ) : string ;
    /**
     * Returns the html that appears after the label. This is useful if you want to
     * put extra UI on the row of the label but not inside the anchor tag.
     */
    getAfterLabelSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    getBackgroundPosition ( ) : string ;
    /**
     * Gets the calculated icon class.
     */
    protected getCalculatedIconClass ( ...a : any [] ) : any ;
    getChildAt (a : number ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    /**
     * Returns the children of this node.
     */
    getChildren ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode [] ;
    protected getChildrenElement ( ) : GlobalElement | null ;
    getClientData ( ) : any ;
    getConfig ( ) : GlobalObject | null ;
    /**
     * Returns the depth of the node in the tree. Should not be overridden.
     */
    getDepth ( ) : number ;
    getElement ( ) : GlobalElement | null ;
    protected getExpandIconClass ( ) : string ;
    protected getExpandIconElement ( ) : GlobalElement | null ;
    protected getExpandIconSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    getExpanded ( ) : boolean ;
    /**
     * Gets the icon class for when the node is expanded.
     */
    getExpandedIconClass ( ) : string ;
    getFirstChild ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    /**
     * Returns the html of the label.
     */
    getHtml ( ) : string ;
    /**
     * Gets the icon class for the node.
     */
    getIconClass ( ) : string ;
    protected getIconElement ( ) : GlobalElement | null ;
    protected getIconSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    getLabelElement ( ) : GlobalElement | null ;
    protected getLabelSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    getLastChild ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getLastShownDescendant ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getLineStyle ( ) : ಠ_ಠ.clutz.goog.html.SafeStyle ;
    getNextShownNode ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getNextSibling ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getPreviousShownNode ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getPreviousSibling ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    protected getRowClassName ( ) : string ;
    getRowElement ( ) : GlobalElement | null ;
    protected getRowSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns the html of the label.
     */
    getSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    /**
     * Returns the text of the label. If the text was originally set as HTML, the
     * return value is unspecified.
     */
    getText ( ) : string ;
    /**
     * Returns the text of the tooltip.
     */
    getToolTip ( ) : string | null ;
    /**
     * Returns the tree.
     */
    getTree ( ) : ಠ_ಠ.clutz.goog.ui.tree.TreeControl | null ;
    /**
     * Adds roles and states.
     */
    protected initAccessibility ( ) : void ;
    isLastSibling ( ) : boolean ;
    isSelected ( ) : boolean ;
    isUserCollapsible ( ) : boolean ;
    /**
     * Handles a click event.
     * @param e The browser event.
     */
    protected onClick_ (a : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : any ;
    /**
     * Handles a double click event.
     * @param e The browser event.
     */
    protected onDoubleClick_ (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : void ;
    /**
     * Handles a key down event.
     * @param e The browser event.
     */
    protected onKeyDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    /**
     * Handles mouse down event.
     * @param e The browser event.
     */
    protected onMouseDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : void ;
    remove (childNode : ಠ_ಠ.clutz.goog.ui.Component | null | string , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode ;
    /**
     * Removes a child. The caller is responsible for disposing the node.
     * @param childNode The child to remove. Must be a {@link goog.ui.tree.BaseNode}.
     * @param opt_unrender Unused. The child will always be unrendered.
     */
    removeChild (childNode : ಠ_ಠ.clutz.goog.ui.Component | null | string , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode ;
    reveal ( ) : void ;
    select ( ) : void ;
    /**
     * Sets the html that appears after the label. This is useful if you want to
     * put extra UI on the row of the label but not inside the anchor tag.
     * @param html The html.
     */
    setAfterLabelSafeHtml (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Sets client data to associate with the node.
     * @param data The client data to associate with the node.
     */
    setClientData (a : any ) : any ;
    /**
     * Sets the node to be expanded.
     * @param expanded Whether to expand or close the node.
     */
    setExpanded (expanded : boolean ) : void ;
    /**
     * Sets the icon class for when the node is expanded.
     * @param s The expanded icon class.
     */
    setExpandedIconClass (s : string ) : void ;
    /**
     * Sets the node to be expanded internally, without state change events.
     * @param expanded Whether to expand or close the node.
     */
    setExpandedInternal (expanded : boolean ) : void ;
    /**
     * Sets the icon class for the node.
     * @param s The icon class.
     */
    setIconClass (s : string ) : void ;
    /**
     * Sets whether the node will allow the user to collapse it.
     * @param isCollapsible Whether to allow node collapse.
     */
    setIsUserCollapsible (isCollapsible : boolean ) : void ;
    /**
     * Sets the HTML of the label.
     * @param html The HTML object for the label.
     */
    setSafeHtml (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Called from the tree to instruct the node change its selection state.
     * @param selected The new selection state.
     */
    protected setSelectedInternal (selected : boolean ) : void ;
    /**
     * Sets the text of the label.
     * @param s The plain text of the label.
     */
    setText (s : string ) : void ;
    /**
     * Sets the text of the tooltip.
     * @param s The tooltip text to set.
     */
    setToolTip (s : string ) : void ;
    /**
     * Internal method that is used to set the tree control on the node.
     * @param tree The tree control.
     */
    setTreeInternal (tree : ಠ_ಠ.clutz.goog.ui.tree.TreeControl | null ) : void ;
    /**
     * Creates HTML for the node.
     */
    protected toSafeHtml ( ) : ಠ_ಠ.clutz.goog.html.SafeHtml ;
    toggle ( ) : void ;
    updateExpandIcon ( ) : void ;
    updateRow ( ) : void ;
    /**
     * Map of nodes in existence. Needed to route events to the appropriate nodes.
     * Nodes are added to the map at {@link #enterDocument} time and removed at
     * {@link #exitDocument} time.
     */
    protected static allNodes : GlobalObject | null ;
    static defaultConfig : { cssChildren : string , cssChildrenNoLines : string , cssCollapsedFolderIcon : string , cssCollapsedRootIcon : string , cssExpandTreeIcon : string , cssExpandTreeIconBlank : string , cssExpandTreeIconL : string , cssExpandTreeIconLMinus : string , cssExpandTreeIconLPlus : string , cssExpandTreeIconMinus : string , cssExpandTreeIconPlus : string , cssExpandTreeIconT : string , cssExpandTreeIconTMinus : string , cssExpandTreeIconTPlus : string , cssExpandedFolderIcon : string , cssExpandedRootIcon : string , cssFileIcon : string , cssHideRoot : string , cssItem : string , cssItemLabel : string , cssRoot : string , cssSelectedRow : string , cssTreeIcon : string , cssTreeRow : string , indentWidth : number } ;
  }
}
declare module 'goog:goog.ui.tree.BaseNode' {
  import BaseNode = ಠ_ಠ.clutz.goog.ui.tree.BaseNode;
  export default BaseNode;
}
// Generated from ui/tree/basenode.js
declare namespace ಠ_ಠ.clutz.goog.ui.tree.BaseNode {
  /**
   * The event types dispatched by this class.
   */
  /**
   * The event types dispatched by this class.
   */
  enum EventType {
    BEFORE_COLLAPSE = 'beforecollapse' ,
    BEFORE_EXPAND = 'beforeexpand' ,
    COLLAPSE = 'collapse' ,
    EXPAND = 'expand' ,
  }
}
declare module 'goog:goog.ui.tree.BaseNode.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.tree.BaseNode.EventType;
  export default EventType;
}
