//!! generated by clutz.
// Generated from ui/tree/treecontrol.js
declare namespace ಠ_ಠ.clutz.goog.ui.tree {
  /**
   * This creates a TreeControl object. A tree control provides a way to
   * view a hierarchical set of data.
   */
  class TreeControl extends ಠ_ಠ.clutz.goog.ui.tree.BaseNode {
    private noStructuralTyping_goog_ui_tree_TreeControl : any;
    /**
     * This creates a TreeControl object. A tree control provides a way to
     * view a hierarchical set of data.
     * @param content The content of the node label. Strings are treated as plain-text and will be HTML escaped.
     * @param opt_config The configuration for the tree. See goog.ui.tree.TreeControl.defaultConfig. If not specified, a default config will be used.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (content : string | ಠ_ಠ.clutz.goog.html.SafeHtml , opt_config ? : GlobalObject | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    selectedItem_ : any | null | ಠ_ಠ.clutz.goog.ui.tree.TreeControl ;
    clearTypeAhead ( ) : void ;
    /**
     * Creates a new tree node using the same config as the root.
     * @param opt_content The content of the node label. Strings are treated as plain-text and will be HTML escaped. To set SafeHtml content, omit opt_content and call setSafeHtml on the resulting node.
     */
    createNode (opt_content ? : string ) : ಠ_ಠ.clutz.goog.ui.tree.TreeNode ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Returns the source for the icon.
     */
    getCalculatedIconClass ( ) : string ;
    getDepth ( ) : any ;
    getExpandIconElement ( ) : any ;
    getExpandIconSafeHtml ( ) : any ;
    getExpanded ( ) : any ;
    getIconElement ( ) : any ;
    getRowClassName ( ) : any ;
    /**
     * Returns the selected item.
     */
    getSelectedItem ( ) : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ;
    getShowExpandIcons ( ) : boolean ;
    getShowLines ( ) : boolean ;
    getShowRootLines ( ) : boolean ;
    getShowRootNode ( ) : boolean ;
    getTree ( ) : any ;
    /**
     * Handles key down on the tree.
     * @param e The browser event.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : boolean ;
    hasFocus ( ) : boolean ;
    /**
     * Add roles and states.
     */
    protected initAccessibility ( ) : void ;
    /**
     * Allows the caller to notify that the given node is being removed from the
     * tree.
     * @param node Node being removed.
     */
    removeNode (node : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ) : void ;
    /**
     * Expands the parent chain of this node so that it is visible.
     */
    reveal ( ) : void ;
    setExpanded (expanded ? : any ) : void ;
    /**
     * Allows the caller to notify that the given node has been added or just had
     * been updated in the tree.
     * @param node New node being added or existing node that just had been updated.
     */
    setNode (node : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ) : void ;
    /**
     * Sets the selected item.
     * @param node The item to select.
     */
    setSelectedItem (node : ಠ_ಠ.clutz.goog.ui.tree.BaseNode | null ) : void ;
    /**
     * Sets whether to show expand icons.
     * @param b Whether to show expand icons.
     */
    setShowExpandIcons (b : boolean ) : void ;
    /**
     * Sets whether to show lines.
     * @param b Whether to show lines.
     */
    setShowLines (b : boolean ) : void ;
    /**
     * Sets whether to show root lines.
     * @param b Whether to show root lines.
     */
    setShowRootLines (b : boolean ) : void ;
    /**
     * Sets whether to show the root node.
     * @param b Whether to show the root node.
     */
    setShowRootNode (b : boolean ) : void ;
    updateExpandIcon ( ) : void ;
    static defaultConfig : any ;
  }
}
declare module 'goog:goog.ui.tree.TreeControl' {
  import TreeControl = ಠ_ಠ.clutz.goog.ui.tree.TreeControl;
  export default TreeControl;
}
