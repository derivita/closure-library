//!! generated by clutz.
// Generated from ui/combobox.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A ComboBox control.
   */
  class ComboBox extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_ComboBox : any;
    /**
     * A ComboBox control.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_menu Optional menu component. This menu is disposed of by this control.
     * @param opt_labelInput Optional label input. This label input is disposed of by this control.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_menu ? : ಠ_ಠ.clutz.goog.ui.Menu | null , opt_labelInput ? : ಠ_ಠ.clutz.goog.ui.LabelInput | null ) ;
    /**
     * Adds a new menu item at the end of the menu.
     * @param item Menu item to add to the menu.
     */
    addItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null ) : void ;
    /**
     * Adds a new menu item at a specific index in the menu.
     * @param item Menu item to add to the menu.
     * @param n Index at which to insert the menu item.
     */
    addItemAt (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null , n : number ) : void ;
    /**
     * Combo box currently can't decorate elements.
     */
    canDecorate ( ) : boolean ;
    /**
     * Create the DOM objects needed for the combo box.  A span and text input.
     */
    createDom ( ) : void ;
    dismiss ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    getDefaultText ( ) : string ;
    getFieldName ( ) : string ;
    getInputElement ( ) : GlobalElement | null ;
    /**
     * Returns a reference to the menu item at a given index.
     * @param n Index of menu item.
     */
    getItemAt (n : number ) : ಠ_ಠ.clutz.goog.ui.MenuItem | null ;
    /**
     * Returns the number of items in the list, including non-visible items,
     * such as separators.
     */
    getItemCount ( ) : number ;
    getLabelInput ( ) : ಠ_ಠ.clutz.goog.ui.LabelInput | null ;
    getMatchFunction ( ) : Function | null ;
    getMenu ( ) : ಠ_ಠ.clutz.goog.ui.Menu | null ;
    getToken ( ) : string ;
    getValue ( ) : string ;
    /**
     * Handles keyboard events from the input box.  Returns true if the combo box
     * was able to handle the event, false otherwise.
     * @param e Key event to handle.
     */
    protected handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    isEnabled ( ) : boolean ;
    /**
     * Positions the menu.
     */
    protected positionMenu ( ) : void ;
    removeAllItems ( ) : void ;
    /**
     * Removes an item from the menu and disposes it.
     * @param item The menu item to remove.
     */
    removeItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null ) : void ;
    /**
     * Removes a menu item at a given index in the menu.
     * @param n Index of item.
     */
    removeItemAt (n : number ) : void ;
    /**
     * Sets the default text for the combo box.
     * @param text The default text for the combo box.
     */
    setDefaultText (text : string ) : void ;
    /**
     * Enables/Disables the combo box.
     * @param enabled Whether to enable (true) or disable (false) the combo box.
     */
    setEnabled (enabled : boolean ) : void ;
    /**
     * Sets the field name for the combo box.
     * @param fieldName The field name for the combo box.
     */
    setFieldName (fieldName : string ) : void ;
    /**
     * Sets the match function to be used when filtering the combo box menu.
     * @param matchFunction The match function to be used when filtering the combo box menu.
     */
    setMatchFunction (matchFunction : Function | null ) : void ;
    /**
     * Set to true if a unicode inverted triangle should be displayed in the
     * dropdown button.
     * This option defaults to false for backwards compatibility.
     * @param useDropdownArrow True to use the dropdown arrow.
     */
    setUseDropdownArrow (useDropdownArrow : boolean ) : void ;
    /**
     * Sets the current value of the combo box.
     * @param value The new value.
     */
    setValue (value : string ) : void ;
    /**
     * Number of milliseconds to wait before dismissing combobox after blur.
     */
    static BLUR_DISMISS_TIMER_MS : number ;
  }
}
declare module 'goog:goog.ui.ComboBox' {
  import ComboBox = ಠ_ಠ.clutz.goog.ui.ComboBox;
  export default ComboBox;
}
// Generated from ui/combobox.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Class for combo box items.
   */
  class ComboBoxItem extends ಠ_ಠ.clutz.goog.ui.MenuItem {
    private noStructuralTyping_goog_ui_ComboBoxItem : any;
    /**
     * Class for combo box items.
     * @param content Text caption or DOM structure to display as the content of the item (use to add icons or styling to menus).
     * @param opt_data Identifying data for the menu item.
     * @param opt_domHelper Optional dom helper used for dom interactions.
     * @param opt_renderer Optional renderer.
     */
    constructor (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_data ? : any , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.MenuItemRenderer | null ) ;
    isSticky ( ) : boolean ;
    /**
     * Sets the format for a menu item based on a token, bolding the token.
     * @param token The token.
     */
    setFormatFromToken (token : string ) : void ;
    /**
     * Sets the menu item to be sticky or not sticky.
     * @param sticky Whether the menu item should be sticky.
     */
    setSticky (sticky : boolean ) : void ;
  }
}
declare module 'goog:goog.ui.ComboBoxItem' {
  import ComboBoxItem = ಠ_ಠ.clutz.goog.ui.ComboBoxItem;
  export default ComboBoxItem;
}
