//!! generated by clutz.
// Generated from ui/ac/arraymatcher.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
  /**
   * Basic class for matching words in an array
   */
  class ArrayMatcher {
    private noStructuralTyping_goog_ui_ac_ArrayMatcher : any;
    /**
     * Basic class for matching words in an array
     * @param rows Dictionary of items to match.  Can be objects if they have a toString method that returns the value to match against.
     * @param opt_noSimilar if true, do not do similarity matches for the input token against the dictionary.
     */
    constructor (rows : any [] | null , opt_noSimilar ? : boolean ) ;
    rows_ : any [] ;
    useSimilar_ : boolean ;
    /**
     * Matches the token against the start of words in the row.
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     */
    getPrefixMatches (token : string , maxMatches : number ) : any [] ;
    /**
     * Matches the token against similar rows, by calculating "distance" between the
     * terms.
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     */
    getSimilarRows (token : string , maxMatches : number ) : any [] ;
    /**
     * Function used to pass matches to the autocomplete
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     * @param matchHandler callback to execute after matching.
     * @param opt_fullString The full string from the input box.
     */
    requestMatchingRows (token : string , maxMatches : number , matchHandler : Function | null , opt_fullString ? : string ) : void ;
    /**
     * Replaces the rows that this object searches over.
     * @param rows Dictionary of items to match.
     */
    setRows (rows : any [] | null ) : void ;
    /**
     * Matches the token against the specified rows, first looking for prefix
     * matches and if that fails, then looking for similar matches.
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     * @param rows Rows to search for matches. Can be objects if they have a toString method that returns the value to match against.
     */
    static getMatchesForRows (token : string , maxMatches : number , rows : any [] ) : any [] ;
    /**
     * Matches the token against the start of words in the row.
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     * @param rows Rows to search for matches. Can be objects if they have a toString method that returns the value to match against.
     */
    static getPrefixMatchesForRows (token : string , maxMatches : number , rows : any [] ) : any [] ;
    /**
     * Matches the token against similar rows, by calculating "distance" between the
     * terms.
     * @param token Token to match.
     * @param maxMatches Max number of matches to return.
     * @param rows Rows to search for matches. Can be objects if they have a toString method that returns the value to match against.
     */
    static getSimilarMatchesForRows (token : string , maxMatches : number , rows : any [] ) : any [] ;
  }
}
declare module 'goog:goog.ui.ac.ArrayMatcher' {
  import ArrayMatcher = ಠ_ಠ.clutz.goog.ui.ac.ArrayMatcher;
  export default ArrayMatcher;
}
