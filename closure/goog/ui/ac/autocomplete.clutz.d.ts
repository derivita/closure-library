//!! generated by clutz.
// Generated from ui/ac/autocomplete.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
  /**
   * This is the central manager class for an AutoComplete instance. The matcher
   * can specify disabled rows that should not be hilited or selected by
   * implementing <code>isRowDisabled(row):boolean</code> for each autocomplete
   * row. No row will be considered disabled if this method is not implemented.
   */
  class AutoComplete extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_ac_AutoComplete : any;
    /**
     * This is the central manager class for an AutoComplete instance. The matcher
     * can specify disabled rows that should not be hilited or selected by
     * implementing <code>isRowDisabled(row):boolean</code> for each autocomplete
     * row. No row will be considered disabled if this method is not implemented.
     * @param matcher A data source and row matcher, implements <code>requestMatchingRows(token, maxMatches, matchCallback)</code>.
     * @param renderer An object that implements <code> isVisible():boolean<br> renderRows(rows:Array, token:string, target:Element);<br> hiliteId(row-id:number);<br> dismiss();<br> dispose(): </code>.
     * @param selectionHandler An object that implements <code> selectRow(row);<br> update(opt_force); </code>.
     */
    constructor (matcher : GlobalObject | null , renderer : ಠ_ಠ.clutz.goog.events.EventTarget | null , selectionHandler : GlobalObject | null ) ;
    /**
     * Id of the first row in autocomplete menu. Note that new ids are assigned
     * every time new suggestions are fetched.
     *
     * TODO(chrishenry): Figure out what subclass does with this value
     * and whether we should expose a more proper API.
     */
    protected firstRowId_ : number ;
    /**
     * Id of the currently highlighted row.
     */
    protected hiliteId_ : number ;
    /**
     * A data-source which provides autocomplete suggestions.
     *
     * TODO(chrishenry): Tighten the type to !goog.ui.ac.AutoComplete.Matcher.
     */
    protected matcher_ : GlobalObject | null ;
    /**
     * A renderer to render/show/highlight/hide the autocomplete menu.
     */
    protected renderer_ : ಠ_ಠ.clutz.goog.events.EventTarget | null ;
    /**
     * Autocomplete suggestion items.
     */
    protected rows_ : any [] | null ;
    /**
     * A handler which interacts with the input DOM element (textfield, textarea,
     * or richedit).
     *
     * TODO(chrishenry): Tighten the type to !Object.
     */
    protected selectionHandler_ : GlobalObject | null ;
    /**
     * The target HTML node for displaying.
     */
    protected target_ : GlobalElement | null ;
    /**
     * Currently typed token which will be used for completion.
     */
    protected token_ : string | null ;
    /**
     * Attaches the autocompleter to a text area or text input element
     * with an anchor element. The anchor element is the element the
     * autocomplete box will be positioned against.
     * @param inputElement The input element. May be 'textarea', text 'input' element, or any other element that exposes similar interface.
     * @param anchorElement The anchor element.
     */
    attachInputWithAnchor (inputElement : GlobalElement | null , anchorElement : GlobalElement | null ) : void ;
    /**
     * Attach text areas or input boxes to the autocomplete by DOM reference.  After
     * elements are attached to the autocomplete, when a user types they will see
     * the autocomplete drop down.
     * @param var_args Variable args: Input or text area elements to attach the autocomplete too.
     */
    attachInputs ( ...var_args : ( GlobalElement | null ) [] ) : void ;
    cancelDelayedDismiss ( ) : void ;
    /**
     * Detach text areas or input boxes to the autocomplete by DOM reference.
     * @param var_args Variable args: Input or text area elements to detach from the autocomplete.
     */
    detachInputs ( ...var_args : ( GlobalElement | null ) [] ) : void ;
    dismiss ( ) : void ;
    dismissOnDelay ( ) : void ;
    disposeInternal ( ) : void ;
    getAllSuggestions ( ) : any [] ;
    getHighlightedId ( ) : number ;
    /**
     * Gets the index corresponding to a particular id.
     * @param id A unique id for the row.
     */
    protected getIndexOfId (id : number ) : number ;
    getMatcher ( ) : GlobalObject ;
    getRenderer ( ) : ಠ_ಠ.clutz.goog.events.EventTarget | null ;
    getRowCount ( ) : number ;
    protected getSelectionHandler ( ) : GlobalObject ;
    getSuggestion (index : number ) : GlobalObject | null ;
    getSuggestionCount ( ) : number ;
    /**
     * Gets the current target HTML node for displaying autocomplete UI.
     */
    getTarget ( ) : GlobalElement | null ;
    protected getToken ( ) : string | null ;
    /**
     * Generic event handler that handles any events this object is listening to.
     * @param e Event Object.
     */
    handleEvent (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Returns whether or not the autocomplete is open and has a highlighted row.
     */
    hasHighlight ( ) : boolean ;
    /**
     * Hilites the id if it's valid and the row is not disabled, otherwise does
     * nothing.
     * @param id A row id (not index).
     */
    hiliteId (id : number ) : boolean ;
    /**
     * Hilites the index, if it's valid and the row is not disabled, otherwise does
     * nothing.
     * @param index The row's index.
     */
    hiliteIndex (index : number ) : boolean ;
    /**
     * Moves the hilite to the next non-disabled row.
     * Calls renderer.hiliteId() when there's something to do.
     */
    hiliteNext ( ) : boolean ;
    /**
     * Moves the hilite to the previous non-disabled row.  Calls
     * renderer.hiliteId() when there's something to do.
     */
    hilitePrev ( ) : boolean ;
    isOpen ( ) : boolean ;
    /**
     * Renders the rows and adds highlighting.
     * @param rows Set of data that match the given token.
     * @param opt_options If true, keeps the currently hilited (by index) element hilited. If false not. Otherwise a RenderOptions object.
     */
    renderRows (rows : any [] , opt_options ? : boolean | ಠ_ಠ.clutz.goog.ui.ac.RenderOptions | null ) : void ;
    /**
     * If there are any current matches, this passes the hilited row data to
     * <code>selectionHandler.selectRow()</code>
     */
    selectHilited ( ) : boolean ;
    /**
     * Sets whether or not the up/down arrow can unhilite all rows.
     * @param allowFreeSelect true iff the up arrow can unhilite all rows.
     */
    setAllowFreeSelect (allowFreeSelect : boolean ) : void ;
    /**
     * Sets whether or not the first row should be highlighted by default.
     * @param autoHilite true iff the first row should be highlighted by default.
     */
    setAutoHilite (autoHilite : boolean ) : void ;
    /**
     * Sets the data source providing the autocomplete suggestions.
     *
     * See constructor documentation for the interface.
     * @param matcher The matcher.
     */
    protected setMatcher (matcher : GlobalObject ) : void ;
    /**
     * Sets the max number of matches to fetch from the Matcher.
     * @param max Max number of matches.
     */
    setMaxMatches (max : number ) : void ;
    /**
     * Sets the renderer that renders/shows/highlights/hides the autocomplete
     * menu.
     *
     * See constructor documentation for the expected renderer API.
     * @param renderer The renderer.
     */
    protected setRenderer (renderer : ಠ_ಠ.clutz.goog.events.EventTarget | null ) : void ;
    /**
     * Sets the current target HTML node for displaying autocomplete UI.
     * Can be an implementation specific definition of how to display UI in relation
     * to the target node.
     * This target will be passed into  <code>renderer.renderRows()</code>
     * @param target The current target HTML node for displaying autocomplete UI.
     */
    setTarget (target : GlobalElement | null ) : void ;
    /**
     * Sets the token to match against.  This triggers calls to the Matcher to
     * fetch the matches (up to maxMatches), and then it triggers a call to
     * <code>renderer.renderRows()</code>.
     * @param token The string for which to search in the Matcher.
     * @param opt_fullString Optionally, the full string in the input field.
     */
    setToken (token : string , opt_fullString ? : string ) : void ;
    /**
     * Sets the current token (without changing the rendered autocompletion).
     *
     * NOTE(chrishenry): This method will likely go away when we figure
     * out a better API.
     * @param token The new token.
     */
    protected setTokenInternal (token : string | null ) : void ;
    /**
     * Sets whether or not to request new suggestions immediately after completion
     * of a suggestion.
     * @param triggerSuggestionsOnUpdate true iff completion should fetch new suggestions.
     */
    setTriggerSuggestionsOnUpdate (triggerSuggestionsOnUpdate : boolean ) : void ;
    /**
     * Sets whether or not selections can wrap around the edges.
     * @param wrap true iff sections should wrap around the edges.
     */
    setWrap (wrap : boolean ) : void ;
    /**
     * Forces an update of the display.
     * @param opt_force Whether to force an update.
     */
    update (opt_force ? : boolean ) : void ;
  }
}
// Generated from ui/ac/autocomplete.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac.AutoComplete {
  type Matcher = { isRowDisabled ? : Function , requestMatchingRows ? : Function } ;
}
declare module 'goog:goog.ui.ac.AutoComplete' {
  import AutoComplete = ಠ_ಠ.clutz.goog.ui.ac.AutoComplete;
  export default AutoComplete;
}
// Generated from ui/ac/autocomplete.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac.AutoComplete {
  /**
   * Events associated with the autocomplete
   */
  /**
   * Events associated with the autocomplete
   */
  enum EventType {
    CANCEL_DISMISS = 'canceldismiss' ,
    DISMISS = 'dismiss' ,
    HILITE = 'hilite' ,
    ROW_HILITE = 'rowhilite' ,
    SELECT = 'select' ,
    SUGGESTIONS_UPDATE = 'suggestionsupdate' ,
    UPDATE = 'update' ,
  }
}
declare module 'goog:goog.ui.ac.AutoComplete.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.ac.AutoComplete.EventType;
  export default EventType;
}
