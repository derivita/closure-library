//!! generated by clutz.
// Generated from ui/ac/renderer.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac {
  /**
   * Class for rendering the results of an auto-complete in a drop down list.
   */
  class Renderer extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_ac_Renderer : any;
    /**
     * Class for rendering the results of an auto-complete in a drop down list.
     * @param opt_parentNode optional reference to the parent element that will hold the autocomplete elements. goog.dom.getDocument().body will be used if this is null.
     * @param opt_customRenderer Custom full renderer to render each row. Should be something with a renderRow or render method.
     * @param opt_rightAlign Determines if the autocomplete will always be right aligned. False by default.
     * @param opt_useStandardHighlighting Determines if standard highlighting should be applied to each row of data. Standard highlighting bolds every matching substring for a given token in each row. True by default.
     */
    constructor (opt_parentNode ? : GlobalElement | null , opt_customRenderer ? : { renderRow : any } | { render : any } | null , opt_rightAlign ? : boolean , opt_useStandardHighlighting ? : boolean ) ;
    /**
     * Class name for active row div.  This must be a single valid class name.
     * Active row will have rowClassName & activeClassName &
     * legacyActiveClassName.
     */
    activeClassName : string ;
    /**
     * Animation in progress, if any.
     */
    animation_ ? : ಠ_ಠ.clutz.goog.fx.Animation | null ;
    /**
     * Classname for the main element.  This must be a single valid class name.
     */
    className : string ;
    /**
     * Class name for the bold tag highlighting the matched part of the text.
     */
    highlightedClassName : string ;
    /**
     * The index of the currently highlighted row
     */
    protected hilitedRow_ : number ;
    /**
     * Classname for row divs.  This must be a single valid class name.
     */
    rowClassName : string ;
    /**
     * Array of the node divs that hold each result that is being displayed.
     */
    protected rowDivs_ : ( GlobalElement | null ) [] | null ;
    /**
     * The time that the rendering of the menu rows started
     */
    protected startRenderingRows_ : number ;
    dismiss ( ) : void ;
    /**
     * Disposes of the renderer and its associated HTML.
     */
    protected disposeInternal ( ) : void ;
    protected getAnchorCorner ( ) : ಠ_ಠ.clutz.goog.positioning.Corner | null ;
    protected getAnchorElement ( ) : GlobalElement | null ;
    protected getAutoPosition ( ) : boolean ;
    /**
     * Gets the renderer's element.
     */
    getElement ( ) : GlobalElement | null ;
    getRightAlign ( ) : boolean ;
    protected getTarget ( ) : GlobalElement | null ;
    getTopAlign ( ) : boolean ;
    /**
     * Sets the 'active' class of the item with a given id.
     * @param id Id of the row to hilight. If id is -1 then no rows get hilited.
     */
    hiliteId (id : number ) : void ;
    hiliteNone ( ) : void ;
    /**
     * Sets the 'active' class of the nth item.
     * @param index Index of the item to highlight.
     */
    hiliteRow (index : number ) : void ;
    isVisible ( ) : boolean ;
    /**
     * The element on which to base the max width of the autocomplete.
     */
    protected maxWidthProvider_ ? : Node ;
    redraw ( ) : void ;
    /**
     * Render a row by creating a div and then calling row rendering callback or
     * default row handler
     * @param row Object representing row.
     * @param token Token to highlight.
     */
    renderRowHtml (row : GlobalObject | null , token : string ) : GlobalElement ;
    /**
     * Render the autocomplete UI
     * @param rows Matching UI rows.
     * @param token Token we are currently matching against.
     * @param opt_target Current HTML node, will position popup beneath this node.
     */
    renderRows (rows : GlobalObject [] | null , token : string , opt_target ? : GlobalElement | null ) : void ;
    reposition ( ) : void ;
    /**
     * Sets the anchor element for the subsequent call to renderRows.
     * @param anchor The anchor element.
     */
    setAnchorElement (anchor : GlobalElement | null ) : void ;
    /**
     * Sets whether the renderer should try to determine where to position the
     * drop down.
     * @param auto Whether to autoposition the drop down.
     */
    setAutoPosition (auto : boolean ) : void ;
    /**
     * Set whether or not to highlight all matching tokens rather than just the
     * first.
     * @param highlightAllTokens Whether to highlight all matching tokens rather than just the first.
     */
    setHighlightAllTokens (highlightAllTokens : boolean ) : void ;
    setMatchWordBoundary (matchWordBoundary : boolean ) : void ;
    /**
     * Sets the duration (in msec) of the fade animation when menu is shown/hidden.
     * Setting to 0 (default) disables animation entirely.
     * @param duration Duration (in msec) of the fade animation (or 0 for no animation).
     */
    setMenuFadeDuration (duration : number ) : void ;
    /**
     * Set whether to align autocomplete to the right of the target element.
     * @param align If true, align to right.
     */
    setRightAlign (align : boolean ) : void ;
    setShowScrollbarsIfTooLarge (show : boolean ) : void ;
    /**
     * Set whether to align autocomplete to top of target element
     * @param align If true, align to top.
     */
    setTopAlign (align : boolean ) : void ;
    /**
     * Set whether or not standard highlighting should be used when rendering rows.
     * @param useStandardHighlighting true if standard highlighting used.
     */
    setUseStandardHighlighting (useStandardHighlighting : boolean ) : void ;
    /**
     * Sets the width provider element. The provider is only used on redraw and as
     * such will not automatically update on resize.
     * @param widthProvider The element whose width should be mirrored.
     * @param opt_borderWidth The width of the border of the autocomplete, which will be subtracted from the width of the autocomplete dropdown.
     * @param maxWidthProvider The element whose width should be used as the autocomplete's max width.
     */
    setWidthProvider (widthProvider : Node | null , opt_borderWidth ? : number , maxWidthProvider ? : Node ) : void ;
    show ( ) : void ;
    /**
     * The anchor element to position the rendered autocompleter against.
     */
    protected target_ ? : GlobalElement | null ;
    /**
     * The element on which to base the width of the autocomplete.
     */
    protected widthProvider_ : Node | null ;
    /**
     * The delay before mouseover events are registered, in milliseconds
     */
    static DELAY_BEFORE_MOUSEOVER : number ;
  }
}
declare module 'goog:goog.ui.ac.Renderer' {
  import Renderer = ಠ_ಠ.clutz.goog.ui.ac.Renderer;
  export default Renderer;
}
// Generated from ui/ac/renderer.js
declare namespace ಠ_ಠ.clutz.goog.ui.ac.Renderer {
  /**
   * Class allowing different implementations to custom render the autocomplete.
   * Extending classes should override the render function.
   */
  class CustomRenderer {
    private noStructuralTyping_goog_ui_ac_Renderer_CustomRenderer : any;
    /**
     * Renders the autocomplete box. May be set to null.
     *
     * Because of the type, this function cannot be documented with param JSDoc.
     *
     * The function expects the following parameters:
     *
     * renderer, goog.ui.ac.Renderer: The autocomplete renderer.
     * element, Element: The main element that controls the rendered autocomplete.
     * rows, Array: The current set of rows being displayed.
     * token, string: The current token that has been entered. *
     */
    render ? : ( (a : ಠ_ಠ.clutz.goog.ui.ac.Renderer | null , b : GlobalElement | null , c : any [] | null , d : string ) => any ) | null ;
    /**
     * Generic function that takes a row and renders a DOM structure for that row.
     * @param row Object representing row.
     * @param token Token to highlight.
     * @param node The node to render into.
     */
    renderRow (row : GlobalObject | null , token : string , node : Node | null ) : void ;
  }
}
declare module 'goog:goog.ui.ac.Renderer.CustomRenderer' {
  import CustomRenderer = ಠ_ಠ.clutz.goog.ui.ac.Renderer.CustomRenderer;
  export default CustomRenderer;
}
