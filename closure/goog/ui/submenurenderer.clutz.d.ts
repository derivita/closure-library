//!! generated by clutz.
// Generated from ui/submenurenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.SubMenu}s.  Each item has the following
   * structure:
   *
   * <div class="goog-submenu">
   * ...(menuitem content)...
   * <div class="goog-menu">
   * ... (submenu content) ...
   * </div>
   * </div>
   */
  class SubMenuRenderer extends ಠ_ಠ.clutz.goog.ui.MenuItemRenderer {
    private noStructuralTyping_goog_ui_SubMenuRenderer : any;
    /**
     * Default renderer for {@link goog.ui.SubMenu}s.  Each item has the following
     * structure:
     *
     * <div class="goog-submenu">
     * ...(menuitem content)...
     * <div class="goog-menu">
     * ... (submenu content) ...
     * </div>
     * </div>
     */
    constructor ( ) ;
    /**
     * Overrides {@link goog.ui.MenuItemRenderer#createDom} by adding
     * the additional class 'goog-submenu' to the created element,
     * and passes the element to {@link goog.ui.SubMenuItemRenderer#addArrow_}
     * to add an child element that can be styled to show an arrow.
     * @param control goog.ui.SubMenu to render.
     */
    createDom (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : GlobalElement ;
    /**
     * Overrides {@link goog.ui.MenuItemRenderer#decorate} by adding
     * the additional class 'goog-submenu' to the decorated element,
     * and passing the element to {@link goog.ui.SubMenuItemRenderer#addArrow_}
     * to add a child element that can be styled to show an arrow.
     * Also searches the element for a child with the class goog-menu. If a
     * matching child element is found, creates a goog.ui.Menu, uses it to
     * decorate the child element, and passes that menu to subMenu.setMenu.
     * @param control goog.ui.SubMenu to render.
     * @param element Element to decorate.
     */
    decorate (control : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null ) : GlobalElement ;
    /**
     * Overrides {@link goog.ui.MenuItemRenderer#initializeDom} to tweak
     * the DOM structure for the span.goog-submenu-arrow element
     * depending on the text direction (LTR or RTL). When the SubMenu is RTL
     * the arrow will be given the additional class of goog-submenu-arrow-rtl,
     * and the arrow will be moved up to be the first child in the SubMenu's
     * element. Otherwise the arrow will have the class goog-submenu-arrow-ltr,
     * and be kept as the last child of the SubMenu's element.
     * @param control goog.ui.SubMenu whose DOM is to be initialized as it enters the document.
     */
    initializeDom (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Takes a menu item's root element, and sets its content to the given text
     * caption or DOM structure.  Overrides the superclass immplementation by
     * making sure that the submenu arrow structure is preserved.
     * @param element The item's root element.
     * @param content Text caption or DOM structure to be set as the item's content.
     */
    setContent (element : GlobalElement | null , content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.SubMenuRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.SubMenuRenderer ;
  }
}
declare module 'goog:goog.ui.SubMenuRenderer' {
  import SubMenuRenderer = ಠ_ಠ.clutz.goog.ui.SubMenuRenderer;
  export default SubMenuRenderer;
}
