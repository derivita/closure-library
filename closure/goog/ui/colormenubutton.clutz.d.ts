//!! generated by clutz.
// Generated from ui/colormenubutton.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A color menu button control.  Extends {@link goog.ui.MenuButton} by adding
   * an API for getting and setting the currently selected color from a menu of
   * color palettes.
   */
  class ColorMenuButton extends ಠ_ಠ.clutz.goog.ui.MenuButton {
    private noStructuralTyping_goog_ui_ColorMenuButton : any;
    /**
     * A color menu button control.  Extends {@link goog.ui.MenuButton} by adding
     * an API for getting and setting the currently selected color from a menu of
     * color palettes.
     * @param content Text caption or existing DOM structure to display as the button's caption.
     * @param opt_menu Menu to render under the button when clicked; should contain at least one {@link goog.ui.ColorPalette} if present.
     * @param opt_renderer Button renderer; defaults to {@link goog.ui.ColorMenuButtonRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_menu ? : ಠ_ಠ.clutz.goog.ui.Menu | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.MenuButtonRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Returns the currently selected color (null if none).
     */
    getSelectedColor ( ) : string ;
    /**
     * Handles {@link goog.ui.Component.EventType.ACTION} events dispatched by
     * the menu item clicked by the user.  Updates the button, calls the superclass
     * implementation to hide the menu, stops the propagation of the event, and
     * dispatches an ACTION event on behalf of the button itself.  Overrides
     * {@link goog.ui.MenuButton#handleMenuAction}.
     * @param e Action event to handle.
     */
    handleMenuAction (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Opens or closes the menu.  Overrides {@link goog.ui.MenuButton#setOpen} by
     * generating a default color menu on the fly if needed.
     * @param open Whether to open or close the menu.
     * @param opt_e Mousedown event that caused the menu to be opened.
     */
    setOpen (open : boolean , opt_e ? : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Sets the selected color, or clears the selected color if the argument is
     * null or not any of the available color choices.
     * @param color New color.
     */
    setSelectedColor (color : string | null ) : void ;
    /**
     * Sets the value associated with the color menu button.  Overrides
     * {@link goog.ui.Button#setValue} by interpreting the value as a color
     * spec string.
     * @param value New button value; should be a color spec string.
     */
    setValue (value : any ) : void ;
    /**
     * Value for the "no color" menu item object in the color menu (if present).
     * The {@link goog.ui.ColorMenuButton#handleMenuAction} method interprets
     * ACTION events dispatched by an item with this value as meaning "clear the
     * selected color."
     */
    static NO_COLOR : string ;
    /**
     * Default color palettes.
     */
    static PALETTES : GlobalObject ;
    /**
     * Factory method that creates and returns a new {@link goog.ui.Menu} instance
     * containing default color palettes.
     * @param opt_extraItems Optional extra menu items to add before the color palettes.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    static newColorMenu (opt_extraItems ? : ( ಠ_ಠ.clutz.goog.ui.Control | null ) [] | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : ಠ_ಠ.clutz.goog.ui.Menu ;
  }
}
declare module 'goog:goog.ui.ColorMenuButton' {
  import ColorMenuButton = ಠ_ಠ.clutz.goog.ui.ColorMenuButton;
  export default ColorMenuButton;
}
