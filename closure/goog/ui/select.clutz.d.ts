//!! generated by clutz.
// Generated from ui/select.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A selection control.  Extends {@link goog.ui.MenuButton} by composing a
   * menu with a selection model, and automatically updating the button's caption
   * based on the current selection.
   *
   * Select fires the following events:
   * CHANGE - after selection changes.
   */
  class Select extends ಠ_ಠ.clutz.goog.ui.MenuButton {
    private noStructuralTyping_goog_ui_Select : any;
    /**
     * A selection control.  Extends {@link goog.ui.MenuButton} by composing a
     * menu with a selection model, and automatically updating the button's caption
     * based on the current selection.
     *
     * Select fires the following events:
     * CHANGE - after selection changes.
     * @param opt_caption Default caption or existing DOM structure to display as the button's caption when nothing is selected. Defaults to no caption.
     * @param opt_menu Menu containing selection options.
     * @param opt_renderer Renderer used to render or decorate the control; defaults to {@link goog.ui.MenuButtonRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     * @param opt_menuRenderer Renderer used to render or decorate the menu; defaults to {@link goog.ui.MenuRenderer}.
     */
    constructor (opt_caption ? : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_menu ? : ಠ_ಠ.clutz.goog.ui.Menu | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ButtonRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_menuRenderer ? : ಠ_ಠ.clutz.goog.ui.MenuRenderer ) ;
    /**
     * Adds a new menu item at the end of the menu.
     * @param item Menu item to add to the menu.
     */
    addItem (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Adds a new menu item at a specific index in the menu.
     * @param item Menu item to add to the menu.
     * @param index Index at which to insert the menu item.
     */
    addItemAt (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null | ಠ_ಠ.clutz.goog.ui.MenuSeparator , index : number ) : void ;
    /**
     * Decorates the given element with this control.  Overrides the superclass
     * implementation by initializing the default caption on the select button.
     * @param element Element to decorate.
     */
    decorateInternal (element : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Returns the default caption to be shown when no option is selected.
     */
    getDefaultCaption ( ) : ಠ_ಠ.clutz.goog.ui.ControlContent | null ;
    /**
     * Returns the index of the currently selected option.
     */
    getSelectedIndex ( ) : number ;
    /**
     * Returns the currently selected option.
     */
    getSelectedItem ( ) : ಠ_ಠ.clutz.goog.ui.MenuItem | null ;
    protected getSelectionModel ( ) : ಠ_ಠ.clutz.goog.ui.SelectionModel | null ;
    /**
     * Gets the value associated with the currently selected option (null if none).
     *
     * Note that unlike {@link goog.ui.Button#getValue} which this method overrides,
     * the "value" of a Select instance is the value of its selected menu item, not
     * its own value. This makes a difference because the "value" of a Button is
     * reset to the value of the element it decorates when it's added to the DOM
     * (via ButtonRenderer), whereas the value of the selected item is unaffected.
     * So while setValue() has no effect on a Button before it is added to the DOM,
     * it will make a persistent change to a Select instance (which is consistent
     * with any changes made by {@link goog.ui.Select#setSelectedItem} and
     * {@link goog.ui.Select#setSelectedIndex}).
     */
    getValue ( ) : any ;
    /**
     * Handles {@link goog.ui.Component.EventType.ACTION} events dispatched by
     * the menu item clicked by the user.  Updates the selection model, calls
     * the superclass implementation to hide the menu, stops the propagation of
     * the event, and dispatches an ACTION event on behalf of the select control
     * itself.  Overrides {@link goog.ui.MenuButton#handleMenuAction}.
     * @param e Action event to handle.
     */
    handleMenuAction (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles {@link goog.events.EventType.SELECT} events raised by the
     * selection model when the selection changes.  Updates the contents of the
     * select button.
     * @param e Selection event to handle.
     */
    handleSelectionChange (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Removes an item from the menu and disposes it.
     * @param item The menu item to remove.
     */
    removeItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null | ಠ_ಠ.clutz.goog.ui.MenuSeparator ) : void ;
    /**
     * Removes a menu item at a given index in the menu and disposes it.
     * @param index Index of item.
     */
    removeItemAt (index : number ) : void ;
    /**
     * Sets the default caption to the given string or DOM structure.
     * @param caption Default caption to be shown when no option is selected.
     */
    setDefaultCaption (caption : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Replaces the menu currently attached to the control (if any) with the given
     * argument, and updates the selection model.  Does nothing if the new menu is
     * the same as the old one.  Overrides {@link goog.ui.MenuButton#setMenu}.
     * @param menu New menu to be attached to the menu button.
     */
    setMenu (menu : ಠ_ಠ.clutz.goog.ui.Menu | null ) : ಠ_ಠ.clutz.goog.ui.Menu | null | undefined ;
    /**
     * Opens or closes the menu.  Overrides {@link goog.ui.MenuButton#setOpen} by
     * highlighting the currently selected option on open.
     * @param open Whether to open or close the menu.
     * @param opt_e Mousedown event that caused the menu to be opened.
     */
    setOpen (open : boolean , opt_e ? : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Selects the option at the specified index, or clears the selection if the
     * index is out of bounds.
     * @param index Index of the option to be selected.
     */
    setSelectedIndex (index : number ) : void ;
    /**
     * Selects the specified option (assumed to be in the select menu), and
     * deselects the previously selected option, if any.  A null argument clears
     * the selection.
     * @param item Option to be selected (null to clear the selection).
     */
    setSelectedItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null ) : void ;
    /**
     * Selects the first option found with an associated value equal to the
     * argument, or clears the selection if no such option is found.  A null
     * argument also clears the selection.  Overrides {@link
     * goog.ui.Button#setValue}.
     * @param value Value of the option to be selected (null to clear the selection).
     */
    setValue (value : any ) : void ;
    /**
     * Updates the caption to be shown in the select button.  If no option is
     * selected and a default caption is set, sets the caption to the default
     * caption; otherwise to the empty string.
     */
    protected updateCaption ( ) : void ;
  }
}
declare module 'goog:goog.ui.Select' {
  import Select = ಠ_ಠ.clutz.goog.ui.Select;
  export default Select;
}
