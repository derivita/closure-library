//!! generated by clutz.
// Generated from ui/popupcolorpicker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Popup color picker widget.
   */
  class PopupColorPicker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_PopupColorPicker : any;
    /**
     * Popup color picker widget.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_colorPicker Optional color picker to use for this popup.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_colorPicker ? : ಠ_ಠ.clutz.goog.ui.ColorPicker | null ) ;
    /**
     * Add an array of colors to the colors displayed by the color picker.
     * Does not add duplicated colors.
     * @param colors The array of colors to be added.
     */
    addColors (colors : string [] | null ) : void ;
    /**
     * Attaches the popup color picker to an element.
     * @param element The element to attach to.
     */
    attach (element : GlobalElement | null ) : void ;
    /**
     * ColorPickers cannot be used to decorate pre-existing html, since the
     * structure they build is fairly complicated.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    clearColors ( ) : void ;
    createDom ( ) : void ;
    /**
     * Detatches the popup color picker from an element.
     * @param element The element to detach from.
     */
    detach (element : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    getAllowAutoFocus ( ) : boolean ;
    /**
     * Returns whether the Popup dismisses itself when the user clicks outside of
     * it.
     */
    getAutoHide ( ) : boolean ;
    /**
     * Returns the region inside which the Popup dismisses itself when the user
     * clicks, or null if it was not set. Null indicates the entire document is
     * the autohide region.
     */
    getAutoHideRegion ( ) : GlobalElement | null ;
    getColorPicker ( ) : ಠ_ಠ.clutz.goog.ui.ColorPicker | null ;
    getLastTarget ( ) : GlobalElement | null ;
    /**
     * Returns the {@link goog.ui.PopupBase} from this picker. Returns null if the
     * popup has not yet been created.
     *
     * NOTE: This should *ONLY* be called from tests. If called before createDom(),
     * this should return null.
     */
    getPopup ( ) : ಠ_ಠ.clutz.goog.ui.PopupBase | null ;
    getRememberSelection ( ) : boolean ;
    /**
     * Gets the color that is currently selected in this color picker.
     */
    getSelectedColor ( ) : string | null ;
    /**
     * Gets whether the colorpicker is in toggle mode
     */
    getToggleMode ( ) : boolean ;
    /**
     * Sets whether the color picker can automatically move focus to its key event
     * target when it is set to visible.
     * @param allow Whether to allow auto focus.
     */
    setAllowAutoFocus (allow : boolean ) : void ;
    /**
     * Sets whether the Popup dismisses itself when the user clicks outside of it -
     * must be called after the Popup has been created (in createDom()),
     * otherwise it does nothing.
     * @param autoHide Whether to autohide on an external click.
     */
    setAutoHide (autoHide : boolean ) : void ;
    /**
     * Sets the region inside which the Popup dismisses itself when the user
     * clicks - must be called after the Popup has been created (in createDom()),
     * otherwise it does nothing.
     * @param element The DOM element for autohide.
     */
    setAutoHideRegion (element : GlobalElement | null ) : void ;
    /**
     * Sets whether the color picker can accept focus.
     * @param focusable True iff the color picker can accept focus.
     */
    setFocusable (focusable : boolean ) : void ;
    /**
     * Set the pinned corner of the popup.
     * @param corner The corner of the popup which is pinned to the attaching element.
     */
    setPinnedCorner (corner : ಠ_ಠ.clutz.goog.positioning.Corner | null ) : void ;
    /**
     * Sets which corner of the attaching element this popup shows up.
     * @param corner The corner of the attaching element where to show the popup.
     */
    setPopupCorner (corner : ಠ_ಠ.clutz.goog.positioning.Corner | null ) : void ;
    /**
     * Sets whether the picker remembers the last selected color between popups.
     * @param remember Whether to remember the selection.
     */
    setRememberSelection (remember : boolean ) : void ;
    /**
     * Sets whether the popup shows up on hover. By default, appears on click.
     * @param showOnHover True if popup should appear on hover.
     */
    setShowOnHover (showOnHover : boolean ) : void ;
    /**
     * Sets whether the color picker should toggle off if it is already open.
     * @param toggle The new toggle mode.
     */
    setToggleMode (toggle : boolean ) : void ;
  }
}
declare module 'goog:goog.ui.PopupColorPicker' {
  import PopupColorPicker = ಠ_ಠ.clutz.goog.ui.PopupColorPicker;
  export default PopupColorPicker;
}
