//!! generated by clutz.
// Generated from ui/button.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A button control, rendered as a native browser button by default.
   */
  class Button extends ಠ_ಠ.clutz.goog.ui.Control {
    private noStructuralTyping_goog_ui_Button : any;
    /**
     * A button control, rendered as a native browser button by default.
     * @param opt_content Text caption or existing DOM structure to display as the button's caption (if any).
     * @param opt_renderer Renderer used to render or decorate the button; defaults to {@link goog.ui.NativeButtonRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_content ? : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ButtonRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Returns the tooltip for the button.
     */
    getTooltip ( ) : string | undefined ;
    /**
     * Returns the value associated with the button.
     */
    getValue ( ) : any ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  If the button is enabled and the Enter/Space key was
     * pressed, handles the event by dispatching an `ACTION` event,
     * and returns true. Overrides {@link goog.ui.Control#handleKeyEventInternal}.
     * @param e Key event to handle.
     */
    protected handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Collapses the border on one or both sides of the button, allowing it to be
     * combined with the adjancent button(s), forming a single UI componenet with
     * multiple targets.
     * @param sides Bitmap of one or more {@link goog.ui.ButtonSide}s for which borders should be collapsed.
     */
    setCollapsed (sides : number ) : void ;
    /**
     * Sets the tooltip for the button, and updates its DOM.
     * @param tooltip New tooltip text.
     */
    setTooltip (tooltip : string ) : void ;
    /**
     * Sets the tooltip for the button.  Unlike {@link #setTooltip}, doesn't update
     * the button's DOM.  Considered protected; to be called only by renderer code
     * during element decoration.
     * @param tooltip New tooltip text.
     */
    protected setTooltipInternal (tooltip : string ) : void ;
    /**
     * Sets the value associated with the button, and updates its DOM.
     * @param value New button value.
     */
    setValue (value : any ) : void ;
    /**
     * Sets the value associated with the button.  Unlike {@link #setValue},
     * doesn't update the button's DOM.  Considered protected; to be called only
     * by renderer code during element decoration.
     * @param value New button value.
     */
    protected setValueInternal (value : any ) : void ;
  }
}
declare module 'goog:goog.ui.Button' {
  import Button = ಠ_ಠ.clutz.goog.ui.Button;
  export default Button;
}
// Generated from ui/button.js
declare namespace ಠ_ಠ.clutz.goog.ui.Button {
  /**
   * Constants for button sides, see {@link goog.ui.Button.prototype.setCollapsed}
   * for details. Aliased from goog.ui.ButtonSide to support legacy users without
   * creating a circular dependency in {@link goog.ui.ButtonRenderer}.
   */
  //!! goog.ui.Button.Side aliases enum goog.ui.ButtonSide
  export import Side = goog.ui.ButtonSide ;
}
declare module 'goog:goog.ui.Button.Side' {
  import Side = ಠ_ಠ.clutz.goog.ui.Button.Side;
  export default Side;
}
