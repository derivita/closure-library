//!! generated by clutz.
// Generated from ui/menurenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.Menu}s, based on {@link
   * goog.ui.ContainerRenderer}.
   */
  class MenuRenderer extends ಠ_ಠ.clutz.goog.ui.ContainerRenderer {
    private noStructuralTyping_goog_ui_MenuRenderer : any;
    /**
     * Default renderer for {@link goog.ui.Menu}s, based on {@link
     * goog.ui.ContainerRenderer}.
     * @param opt_ariaRole Optional ARIA role used for the element.
     */
    constructor (opt_ariaRole ? : string ) ;
    /**
     * Returns whether the element is a UL or acceptable to our superclass.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Returns whether the given element is contained in the menu's DOM.
     * @param menu The menu to test.
     * @param element The element to test.
     */
    containsElement (menu : ಠ_ಠ.clutz.goog.ui.Menu | null , element : GlobalElement | null ) : boolean ;
    /**
     * Returns the CSS class to be applied to the root element of containers
     * rendered using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Inspects the element, and creates an instance of {@link goog.ui.Control} or
     * an appropriate subclass best suited to decorate it.  Overrides the superclass
     * implementation by recognizing HR elements as separators.
     * @param element Element to decorate.
     */
    getDecoratorForChild (element : GlobalElement | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    initializeDom (container ? : any ) : void ;
    /**
     * Default CSS class to be applied to the root element of toolbars rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.MenuRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.MenuRenderer ;
  }
}
declare module 'goog:goog.ui.MenuRenderer' {
  import MenuRenderer = ಠ_ಠ.clutz.goog.ui.MenuRenderer;
  export default MenuRenderer;
}
