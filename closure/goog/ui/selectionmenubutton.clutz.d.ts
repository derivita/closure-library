//!! generated by clutz.
// Generated from ui/selectionmenubutton.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A selection menu button control.  Extends {@link goog.ui.MenuButton}.
   * Menu contains 'select all' and 'select none' MenuItems for selecting all and
   * no items by default. Other MenuItems can be added by user.
   *
   * The checkbox content fires the action events associated with the 'select all'
   * and 'select none' menu items.
   */
  class SelectionMenuButton extends ಠ_ಠ.clutz.goog.ui.MenuButton {
    private noStructuralTyping_goog_ui_SelectionMenuButton : any;
    /**
     * A selection menu button control.  Extends {@link goog.ui.MenuButton}.
     * Menu contains 'select all' and 'select none' MenuItems for selecting all and
     * no items by default. Other MenuItems can be added by user.
     *
     * The checkbox content fires the action events associated with the 'select all'
     * and 'select none' menu items.
     * @param opt_renderer Renderer used to render or decorate the menu button; defaults to {@link goog.ui.MenuButtonRenderer}.
     * @param opt_itemRenderer Optional menu item renderer.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ButtonRenderer | null , opt_itemRenderer ? : ಠ_ಠ.clutz.goog.ui.MenuItemRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Set up events related to the checkbox.
     */
    protected addCheckboxEvent ( ) : void ;
    /**
     * Creates and adds the checkbox to the button.
     */
    protected createCheckbox ( ) : void ;
    /**
     * Adds the checkbox to the button, and adds 2 items to the menu corresponding
     * to 'select all' and 'select none'.
     */
    protected createDom ( ) : void ;
    decorateInternal (element ? : any ) : void ;
    /**
     * Gets the checkbox element. Needed because if decorating html, getContent()
     * may include and comment/text elements in addition to the input element.
     */
    protected getCheckboxElement ( ) : GlobalElement | null ;
    /**
     * Get selection state.
     */
    getSelectionState ( ) : ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState ;
    /**
     * Checkbox click handler.
     * @param e Checkbox click event.
     */
    protected handleCheckboxClick (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    handleMouseDown (e ? : any ) : void ;
    /**
     * Select button state
     */
    protected selectionState : ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState ;
    /**
     * Enables the embedded checkbox.
     * @param enable Whether to enable or disable the checkbox.
     */
    protected setCheckboxEnabled (enable : boolean ) : void ;
    /**
     * Enables button and embedded checkbox.
     * @param enable Whether to enable or disable the button.
     */
    setEnabled (enable : boolean ) : void ;
    setMenu (menu ? : any ) : void ;
    /**
     * Set selection state and update checkbox.
     * @param state Selection state.
     */
    setSelectionState (state : ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState ) : void ;
  }
}
declare module 'goog:goog.ui.SelectionMenuButton' {
  import SelectionMenuButton = ಠ_ಠ.clutz.goog.ui.SelectionMenuButton;
  export default SelectionMenuButton;
}
// Generated from ui/selectionmenubutton.js
declare namespace ಠ_ಠ.clutz.goog.ui.SelectionMenuButton {
  /**
   * Constants for menu action types.
   */
  /**
   * Constants for menu action types.
   */
  enum SelectionState {
    ALL = 0.0 ,
    NONE = 2.0 ,
    SOME = 1.0 ,
  }
}
declare module 'goog:goog.ui.SelectionMenuButton.SelectionState' {
  import SelectionState = ಠ_ಠ.clutz.goog.ui.SelectionMenuButton.SelectionState;
  export default SelectionState;
}
