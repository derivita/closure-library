//!! generated by clutz.
// Generated from ui/menuitemrenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default renderer for {@link goog.ui.MenuItem}s.  Each item has the following
   * structure:
   *
   * <div class="goog-menuitem">
   * <div class="goog-menuitem-content">
   * ...(menu item contents)...
   * </div>
   * </div>
   */
  class MenuItemRenderer extends ಠ_ಠ.clutz.goog.ui.ControlRenderer {
    private noStructuralTyping_goog_ui_MenuItemRenderer : any;
    /**
     * Default renderer for {@link goog.ui.MenuItem}s.  Each item has the following
     * structure:
     *
     * <div class="goog-menuitem">
     * <div class="goog-menuitem-content">
     * ...(menu item contents)...
     * </div>
     * </div>
     */
    constructor ( ) ;
    /**
     * Wraps the given text caption or existing DOM node(s) in a structural element
     * containing the menu item's contents.
     * @param content Menu item contents.
     * @param dom DOM helper for document interaction.
     */
    protected createContent (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null , dom : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : GlobalElement ;
    /**
     * Overrides {@link goog.ui.ControlRenderer#createDom} by adding extra markup
     * and stying to the menu item's element if it is selectable or checkable.
     * @param item Menu item to render.
     */
    createDom (item : ಠ_ಠ.clutz.goog.ui.Control | null ) : GlobalElement ;
    /**
     * Overrides {@link goog.ui.ControlRenderer#decorate} by initializing the
     * menu item to checkable based on whether the element to be decorated has
     * extra stying indicating that it should be.
     * @param item Menu item instance to decorate the element.
     * @param element Element to decorate.
     */
    decorate (item : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null ) : GlobalElement | null ;
    getAriaRole ( ) : any ;
    /**
     * Takes a single {@link goog.ui.Component.State}, and returns the
     * corresponding CSS class name (null if none).  Overrides the superclass
     * implementation by using 'highlight' as opposed to 'hover' as the CSS
     * class name suffix for the HOVER state, for backwards compatibility.
     * @param state Component state.
     */
    getClassForState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null ) : string | undefined ;
    getContentElement (element ? : any ) : any ;
    getCssClass ( ) : any ;
    /**
     * Takes a single CSS class name which may represent a component state, and
     * returns the corresponding component state (0x00 if none).  Overrides the
     * superclass implementation by treating 'goog-option-selected' as special,
     * for backwards compatibility.
     * @param className CSS class name, possibly representing a component state.
     */
    getStateFromClass (className : string ) : ಠ_ಠ.clutz.goog.ui.Component.State | null ;
    /**
     * Determines whether the item contains a checkbox element.
     * @param element Menu item root element.
     */
    protected hasCheckBoxStructure (element : GlobalElement | null ) : boolean ;
    /**
     * Returns true if the element appears to have a proper menu item structure by
     * checking whether its first child has the appropriate structural class name.
     * @param element Element to check.
     */
    protected hasContentStructure (element : GlobalElement | null ) : boolean ;
    /**
     * Enables/disables checkbox semantics on the menu item.
     * @param item Menu item to update.
     * @param element Menu item element to update (may be null if the item hasn't been rendered yet).
     * @param checkable Whether the item should be checkable.
     */
    setCheckable (item : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null , checkable : boolean ) : void ;
    /**
     * Takes a menu item's root element, and sets its content to the given text
     * caption or DOM structure.  Overrides the superclass immplementation by
     * making sure that the checkbox structure (for selectable/checkable menu
     * items) is preserved.
     * @param element The item's root element.
     * @param content Text caption or DOM structure to be set as the item's content.
     */
    setContent (element : GlobalElement | null , content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Adds or removes extra markup and CSS styling to the menu item to make it
     * selectable or non-selectable, depending on the value of the
     * `selectable` argument.
     * @param item Menu item to update.
     * @param element Menu item element to update.
     * @param enable Whether to add or remove the checkbox structure.
     */
    protected setEnableCheckBoxStructure (item : ಠ_ಠ.clutz.goog.ui.Control , element : GlobalElement , enable : boolean ) : void ;
    /**
     * Enables/disables radio button semantics on the menu item.
     * @param item Menu item to update.
     * @param element Menu item element to update (may be null if the item hasn't been rendered yet).
     * @param selectable Whether the item should be selectable.
     */
    setSelectable (item : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null , selectable : boolean ) : void ;
    /**
     * CSS class name the renderer applies to menu item elements.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.MenuItemRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.MenuItemRenderer ;
  }
}
declare module 'goog:goog.ui.MenuItemRenderer' {
  import MenuItemRenderer = ಠ_ಠ.clutz.goog.ui.MenuItemRenderer;
  export default MenuItemRenderer;
}
