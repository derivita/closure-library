//!! generated by clutz.
// Generated from ui/prompt.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Creates an object that represents a prompt (used in place of javascript's
   * prompt). The html structure of the prompt is the same as the layout for
   * dialog.js except for the addition of a text box which is placed inside the
   * "Content area" and has the default class-name 'modal-dialog-userInput'
   */
  class Prompt extends ಠ_ಠ.clutz.goog.ui.Dialog {
    private noStructuralTyping_goog_ui_Prompt : any;
    /**
     * Creates an object that represents a prompt (used in place of javascript's
     * prompt). The html structure of the prompt is the same as the layout for
     * dialog.js except for the addition of a text box which is placed inside the
     * "Content area" and has the default class-name 'modal-dialog-userInput'
     * @param promptTitle The title of the prompt.
     * @param promptBody The body of the prompt. String is treated as plain text and it will be HTML-escaped.
     * @param callback The function to call when the user selects Ok or Cancel. The function should expect a single argument which represents what the user entered into the prompt. If the user presses cancel, the value of the argument will be null.
     * @param opt_defaultValue Optional default value that should be in the text box when the prompt appears.
     * @param opt_class Optional prefix for the classes.
     * @param opt_useIframeForIE For IE, workaround windowed controls z-index issue by using a an iframe instead of a div for bg element.
     * @param opt_domHelper Optional DOM helper; see {@link goog.ui.Component} for semantics.
     */
    constructor (promptTitle : string , promptBody : string | ಠ_ಠ.clutz.goog.html.SafeHtml , callback : Function | null , opt_defaultValue ? : string , opt_class ? : string , opt_useIframeForIE ? : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Create the initial DOM representation for the prompt.
     */
    createDom ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Overrides setFocus to put focus on the input element.
     */
    focus ( ) : void ;
    getCols ( ) : number ;
    getInputElement ( ) : HTMLInputElement | null | HTMLTextAreaElement ;
    getRows ( ) : number ;
    /**
     * Set the number of cols in the user input element.
     * @param cols Number of cols for user input element.
     */
    setCols (cols : number ) : void ;
    /**
     * Sets the default value of the prompt when it is displayed.
     * @param defaultValue The default value to display.
     */
    setDefaultValue (defaultValue : string ) : void ;
    /**
     * Sets an input decorator function.  This function will be called in
     * #enterDocument and will be passed the input element.  This is useful for
     * attaching handlers to the input element for specific change events,
     * for example.
     * @param inputDecoratorFn A function to call on the input element on #enterDocument.
     */
    setInputDecoratorFn (inputDecoratorFn : (a : GlobalElement | null ) => any ) : void ;
    /**
     * Set the number of rows in the user input element.
     * A values of 1 means use an `<input>` element.  If the prompt is already
     * rendered then you cannot change from `<input>` to `<textarea>` or vice versa.
     * @param rows Number of rows for user input element.
     */
    setRows (rows : number ) : void ;
    /**
     * Sets the validation function that takes a string and returns true if the
     * string is accepted, false otherwise.
     * @param fn The validation function to use on user input.
     */
    setValidationFunction (fn : (a : string ) => boolean ) : void ;
    /**
     * Causes the prompt to appear, centered on the screen, gives focus
     * to the text box, and selects the text
     * @param visible Whether the dialog should be visible.
     */
    setVisible (visible : boolean ) : void ;
  }
}
declare module 'goog:goog.ui.Prompt' {
  import Prompt = ಠ_ಠ.clutz.goog.ui.Prompt;
  export default Prompt;
}
