//!! generated by clutz.
// Generated from ui/datepicker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * DatePicker widget. Allows a single date to be selected from a calendar like
   * view.
   */
  class DatePicker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_DatePicker : any;
    /**
     * DatePicker widget. Allows a single date to be selected from a calendar like
     * view.
     * @param opt_date Date to initialize the date picker with, defaults to the current date.
     * @param opt_dateTimeSymbols Date and time symbols to use. Defaults to goog.i18n.DateTimeSymbols if not set.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_renderer Optional Date picker renderer.
     */
    constructor (opt_date ? : ಠ_ಠ.clutz.goog.date.Date | null | GlobalDate , opt_dateTimeSymbols ? : GlobalObject | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.DatePickerRenderer | null ) ;
    i18nDateFormatterDay2_ : any ;
    i18nDateFormatterDayAriaLabel_ : any ;
    i18nDateFormatterDay_ : any ;
    i18nDateFormatterMonthYear_ : any ;
    i18nDateFormatterWeek_ : any ;
    i18nDateFormatterYear_ : any ;
    /**
     * TODO(tbreisacher): Remove external references to this field,
     * and make it private.
     */
    tableBody_ : GlobalElement | null ;
    wdayNames_ : any ;
    create : any ;
    createDom ( ) : void ;
    decorateInternal (el ? : any ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    getActiveMonth ( ) : ಠ_ಠ.clutz.goog.date.Date ;
    getAllowNone ( ) : boolean ;
    /**
     * Returns base CSS class. This getter is used to get base CSS class part.
     * All CSS class names in component are created as:
     * goog.getCssName(this.getBaseCssClass(), 'CLASS_NAME')
     */
    getBaseCssClass ( ) : string ;
    getDate ( ) : ಠ_ಠ.clutz.goog.date.Date | null ;
    getDateAt (row : number , col : number ) : ಠ_ಠ.clutz.goog.date.Date | null ;
    /**
     * Returns a date element given a row and column. In elTable_, the elements that
     * represent dates are 1 indexed because of other elements such as headers.
     * This corrects for the offset and makes the API 0 indexed.
     * @param row The row in the element table.
     * @param col The column in the element table.
     */
    protected getDateElementAt (row : number , col : number ) : GlobalElement | null ;
    getExtraWeekAtEnd ( ) : boolean ;
    getFirstWeekday ( ) : number ;
    getShowFixedNumWeeks ( ) : boolean ;
    getShowOtherMonths ( ) : boolean ;
    getShowToday ( ) : boolean ;
    getShowWeekNum ( ) : boolean ;
    getShowWeekdayNames ( ) : boolean ;
    /**
     * Gets the range of dates which may be selected by the user.
     */
    getUserSelectableDateRange ( ) : ಠ_ಠ.clutz.goog.date.DateRange ;
    /**
     * Returns the class name associated with specified weekday.
     * @param wday The week day number to get the class name for.
     */
    getWeekdayClass (wday : number ) : string ;
    isCreated : any ;
    nextMonth ( ) : void ;
    nextYear ( ) : void ;
    previousMonth ( ) : void ;
    previousYear ( ) : void ;
    selectNone ( ) : void ;
    selectToday ( ) : void ;
    /**
     * Sets whether none is a valid selection.
     * @param b Whether none is a valid selection.
     */
    setAllowNone (b : boolean ) : void ;
    /**
     * Sets the selected date. Will always fire the SELECT event.
     * @param date Date to select or null to select nothing.
     */
    setDate (date : ಠ_ಠ.clutz.goog.date.Date | null | GlobalDate ) : void ;
    /**
     * Sets the decorator function. The function should have the interface of
     * {string} f({goog.date.Date});
     * and return a String representing a CSS class to decorate the cell
     * corresponding to the date specified.
     * @param f The decorator function.
     */
    setDecorator (f : Function | null ) : void ;
    /**
     * Sets whether a the extra week(s) added always should be at the end. Only
     * applicable if a fixed number of weeks are shown.
     * @param b Whether a the extra week(s) added always should be at the end.
     */
    setExtraWeekAtEnd (b : boolean ) : void ;
    /**
     * Sets the first day of week
     * @param wday Week day, 0 = Monday, 6 = Sunday.
     */
    setFirstWeekday (wday : number ) : void ;
    /**
     * Sets whether the date will be printed in long format. In long format, dates
     * such as '1' will be printed as '01'.
     * @param b Whethere dates should be printed in long format.
     */
    setLongDateFormat (b : boolean ) : void ;
    /**
     * Sets whether a fixed number of weeks should be showed. If not only weeks
     * for the current month will be showed.
     * @param b Whether a fixed number of weeks should be showed.
     */
    setShowFixedNumWeeks (b : boolean ) : void ;
    /**
     * Sets whether a days from the previous and/or next month should be shown.
     * @param b Whether a days from the previous and/or next month should be shown.
     */
    setShowOtherMonths (b : boolean ) : void ;
    /**
     * Sets whether the today button should be shown.
     * @param b Whether the today button should be shown.
     */
    setShowToday (b : boolean ) : void ;
    /**
     * Sets whether week numbers should be shown.
     * @param b Whether week numbers should be shown.
     */
    setShowWeekNum (b : boolean ) : void ;
    /**
     * Sets whether weekday names should be shown.
     * @param b Whether weekday names should be shown.
     */
    setShowWeekdayNames (b : boolean ) : void ;
    /**
     * Sets whether the picker uses narrow weekday names ('M', 'T', 'W', ...).
     *
     * The default behavior is to use short names ('Mon', 'Tue', 'Wed', ...).
     * @param b Whether to use narrow weekday names.
     */
    setUseNarrowWeekdayNames (b : boolean ) : void ;
    /**
     * Sets whether the picker should use a simple navigation menu that only
     * contains controls for navigating to the next and previous month. The default
     * navigation menu contains controls for navigating to the next/previous month,
     * next/previous year, and menus for jumping to specific months and years.
     * @param b Whether to use a simple navigation menu.
     */
    setUseSimpleNavigationMenu (b : boolean ) : void ;
    /**
     * Sets the range of dates which may be selected by the user.
     * @param dateRange The range of selectable dates.
     */
    setUserSelectableDateRange (dateRange : ಠ_ಠ.clutz.goog.date.DateRange ) : void ;
    /**
     * Sets class name associated with specified weekday.
     * @param wday Week day, 0 = Monday, 6 = Sunday.
     * @param className Class name.
     */
    setWeekdayClass (wday : number , className : string ) : void ;
  }
}
declare module 'goog:goog.ui.DatePicker' {
  import DatePicker = ಠ_ಠ.clutz.goog.ui.DatePicker;
  export default DatePicker;
}
// Generated from ui/datepicker.js
declare namespace ಠ_ಠ.clutz.goog.ui.DatePicker {
  /**
   * Constants for event names
   */
  /**
   * Constants for event names
   */
  enum Events {
    CHANGE = 'change' ,
    CHANGE_ACTIVE_MONTH = 'changeActiveMonth' ,
    GRID_SIZE_INCREASE = 'gridSizeIncrease' ,
    SELECT = 'select' ,
  }
}
declare module 'goog:goog.ui.DatePicker.Events' {
  import Events = ಠ_ಠ.clutz.goog.ui.DatePicker.Events;
  export default Events;
}
// Generated from ui/datepicker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Object representing a date picker event.
   */
  class DatePickerEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_DatePickerEvent : any;
    /**
     * Object representing a date picker event.
     * @param type Event type.
     * @param target Date picker initiating event.
     * @param date Selected date.
     */
    constructor (type : string , target : ಠ_ಠ.clutz.goog.ui.DatePicker | null , date : ಠ_ಠ.clutz.goog.date.Date | null ) ;
    /**
     * The selected date
     */
    date : ಠ_ಠ.clutz.goog.date.Date | null ;
  }
}
declare module 'goog:goog.ui.DatePickerEvent' {
  import DatePickerEvent = ಠ_ಠ.clutz.goog.ui.DatePickerEvent;
  export default DatePickerEvent;
}
