//!! generated by clutz.
// Generated from ui/tooltip.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Tooltip widget. Can be attached to one or more elements and is shown, with a
   * slight delay, when the cursor is over the element or the element gains
   * focus.
   */
  class Tooltip extends ಠ_ಠ.clutz.goog.ui.Popup {
    private noStructuralTyping_goog_ui_Tooltip : any;
    /**
     * Tooltip widget. Can be attached to one or more elements and is shown, with a
     * slight delay, when the cursor is over the element or the element gains
     * focus.
     * @param opt_el Element to display tooltip for, either element reference or string id.
     * @param opt_str Text message to display in tooltip.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (opt_el ? : GlobalElement | null | string , opt_str ? : string | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Cursor position relative to the page.
     */
    protected cursorPosition : ಠ_ಠ.clutz.goog.math.Coordinate ;
    /**
     * Element that triggered the tooltip.  Note that if a second element triggers
     * this tooltip, anchor becomes that second element, even if its show is
     * cancelled and the original tooltip survives.
     */
    protected anchor ? : GlobalElement | null ;
    /**
     * Attach to element. Tooltip will be displayed when the cursor is over the
     * element or when the element has been active for a few milliseconds.
     * @param el Element to display tooltip for, either element reference or string id.
     */
    attach (el : GlobalElement | null | string ) : void ;
    /**
     * CSS class name for tooltip.
     */
    className : string ;
    /**
     * Helper method called to clear the close timer.
     */
    protected clearHideTimer ( ) : void ;
    /**
     * Helper method called to clear the show timer.
     */
    protected clearShowTimer ( ) : void ;
    /**
     * Detach from element(s).
     * @param opt_el Element to detach from, either element reference or string id. If no element is specified all are detached.
     */
    detach (opt_el ? : GlobalElement | null | string ) : void ;
    disposeInternal ( ) : void ;
    getActiveElement ( ) : GlobalElement | null ;
    /**
     * Find anchor containing the given element, if any.
     * @param el Element that triggered event.
     */
    protected getAnchorFromElement (el : GlobalElement | null ) : GlobalElement | null ;
    protected getChildTooltip ( ) : ಠ_ಠ.clutz.goog.ui.Tooltip | null ;
    /**
     * Returns the dom helper that is being used on this component.
     */
    getDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    protected getElements ( ) : ಠ_ಠ.clutz.goog.structs.Set | null ;
    getHideDelayMs ( ) : number ;
    getHtml ( ) : string ;
    /**
     * Return a Position instance for repositioning the tooltip. Override in
     * subclasses to customize the way repositioning is done.
     * @param activationType Information about what kind of event caused the popup to be shown.
     */
    protected getPositioningStrategy (activationType : ಠ_ಠ.clutz.goog.ui.Tooltip.Activation ) : ಠ_ಠ.clutz.goog.positioning.AbstractPosition ;
    getShowDelayMs ( ) : number ;
    getState ( ) : ಠ_ಠ.clutz.goog.ui.Tooltip.State ;
    getText ( ) : string ;
    /**
     * Handler for focus events.
     * @param event Event object.
     */
    protected handleFocus (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handler for mouse move events.
     * @param event MOUSEMOVE event.
     */
    protected handleMouseMove (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handler for mouse out and blur events.
     * @param event Event object.
     */
    protected handleMouseOutAndBlur (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handler for mouse over events.
     * @param event Event object.
     */
    protected handleMouseOver (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handler for mouse out events for the tooltip element.
     * @param event Event object.
     */
    protected handleTooltipMouseOut (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handler for mouse over events for the tooltip element.
     * @param event Event object.
     */
    protected handleTooltipMouseOver (event : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    protected hasActiveChild ( ) : boolean ;
    /**
     * Timer for when to hide.
     */
    protected hideTimer ? : number ;
    /**
     * Returns true if the coord is in the tooltip.
     * @param coord Coordinate being tested.
     */
    isCoordinateInTooltip (coord : ಠ_ಠ.clutz.goog.math.Coordinate | null ) : boolean ;
    /**
     * Called by timer from mouse out handler. Hides tooltip if cursor is still
     * outside element and tooltip, or if a child of tooltip has the focus.
     * @param el Tooltip's anchor when hide timer was started.
     */
    maybeHide (el : GlobalElement | null | undefined ) : void ;
    /**
     * Called by timer from mouse over handler. Shows tooltip if cursor is still
     * over the same element.
     * @param el Element to show tooltip for.
     * @param opt_pos Position to display popup at.
     */
    maybeShow (el : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null ) : void ;
    /**
     * Called before the popup is shown.
     */
    protected onBeforeShow ( ) : boolean ;
    onHide ( ) : void ;
    protected setActiveElement (activeEl : GlobalElement | null ) : void ;
    /**
     * Sets tooltip element.
     * @param el HTML element to use as the tooltip.
     */
    setElement (el : GlobalElement | null ) : void ;
    /**
     * Sets delay in milliseconds before tooltip is hidden once the cursor leavs
     * the element.
     * @param delay The delay in milliseconds.
     */
    setHideDelayMs (delay : number ) : void ;
    /**
     * Sets whether tooltip requires the mouse to have moved or the anchor receive
     * focus before the tooltip will be shown.
     * @param requireInteraction Whether tooltip should require some user interaction before showing tooltip.
     */
    setRequireInteraction (requireInteraction : boolean ) : void ;
    /**
     * Sets tooltip message as HTML markup.
     * @param html HTML message to display in tooltip.
     */
    setSafeHtml (html : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Sets delay in milliseconds before tooltip is displayed for an element.
     * @param delay The delay in milliseconds.
     */
    setShowDelayMs (delay : number ) : void ;
    /**
     * Sets tooltip message as plain text.
     * @param str Text message to display in tooltip.
     */
    setText (str : string ) : void ;
    /**
     * Shows tooltip for a specific element.
     * @param el Element to show tooltip for.
     * @param opt_pos Position to display popup at.
     */
    showForElement (el : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null ) : void ;
    /**
     * Timer for when to show.
     */
    protected showTimer ? : number ;
    /**
     * Helper method called to start the close timer.
     */
    protected startHideTimer ( ) : void ;
    /**
     * Helper method, starts timer that calls maybeShow. Parameters are passed to
     * the maybeShow method.
     * @param el Element to show tooltip for.
     * @param opt_pos Position to display popup at.
     */
    protected startShowTimer (el : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null ) : void ;
  }
}
// Generated from ui/tooltip.js
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
  /**
   * Popup activation types. Used to select a positioning strategy.
   */
  enum Activation {
    CURSOR = 0.0 ,
    FOCUS = 1.0 ,
  }
}
declare module 'goog:goog.ui.Tooltip' {
  import Tooltip = ಠ_ಠ.clutz.goog.ui.Tooltip;
  export default Tooltip;
}
// Generated from ui/tooltip.js
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
  /**
   * Popup position implementation that positions the popup (the tooltip in this
   * case) based on the cursor position. It's positioned below the cursor to the
   * right if there's enough room to fit all of it inside the Viewport. Otherwise
   * it's displayed as far right as possible either above or below the element.
   *
   * Used to position tooltips triggered by the cursor.
   */
  class CursorTooltipPosition extends ಠ_ಠ.clutz.goog.positioning.ViewportPosition {
    private noStructuralTyping_goog_ui_Tooltip_CursorTooltipPosition : any;
    /**
     * Popup position implementation that positions the popup (the tooltip in this
     * case) based on the cursor position. It's positioned below the cursor to the
     * right if there's enough room to fit all of it inside the Viewport. Otherwise
     * it's displayed as far right as possible either above or below the element.
     *
     * Used to position tooltips triggered by the cursor.
     * @param arg1 Left position or coordinate.
     * @param opt_arg2 Top position.
     */
    constructor (arg1 : number | ಠ_ಠ.clutz.goog.math.Coordinate , opt_arg2 ? : number ) ;
    /**
     * Repositions the popup based on cursor position.
     * @param element The DOM element of the popup.
     * @param popupCorner The corner of the popup element that that should be positioned adjacent to the anchorElement.
     * @param opt_margin A margin specified in pixels.
     */
    reposition (element : GlobalElement | null , popupCorner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null ) : void ;
  }
}
declare module 'goog:goog.ui.Tooltip.CursorTooltipPosition' {
  import CursorTooltipPosition = ಠ_ಠ.clutz.goog.ui.Tooltip.CursorTooltipPosition;
  export default CursorTooltipPosition;
}
// Generated from ui/tooltip.js
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
  /**
   * Popup position implementation that positions the popup (the tooltip in this
   * case) based on the element position. It's positioned below the element to the
   * right if there's enough room to fit all of it inside the Viewport. Otherwise
   * it's displayed as far right as possible either above or below the element.
   *
   * Used to position tooltips triggered by focus changes.
   */
  class ElementTooltipPosition extends ಠ_ಠ.clutz.goog.positioning.AnchoredPosition {
    private noStructuralTyping_goog_ui_Tooltip_ElementTooltipPosition : any;
    /**
     * Popup position implementation that positions the popup (the tooltip in this
     * case) based on the element position. It's positioned below the element to the
     * right if there's enough room to fit all of it inside the Viewport. Otherwise
     * it's displayed as far right as possible either above or below the element.
     *
     * Used to position tooltips triggered by focus changes.
     * @param element The element to anchor the popup at.
     */
    constructor (element : GlobalElement | null ) ;
    /**
     * Repositions the popup based on element position.
     * @param element The DOM element of the popup.
     * @param popupCorner The corner of the popup element that should be positioned adjacent to the anchorElement.
     * @param opt_margin A margin specified in pixels.
     */
    reposition (element : GlobalElement | null , popupCorner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null ) : void ;
  }
}
declare module 'goog:goog.ui.Tooltip.ElementTooltipPosition' {
  import ElementTooltipPosition = ಠ_ಠ.clutz.goog.ui.Tooltip.ElementTooltipPosition;
  export default ElementTooltipPosition;
}
// Generated from ui/tooltip.js
declare namespace ಠ_ಠ.clutz.goog.ui.Tooltip {
  /**
   * Possible states for the tooltip to be in.
   */
  /**
   * Possible states for the tooltip to be in.
   */
  enum State {
    INACTIVE = 0.0 ,
    SHOWING = 2.0 ,
    UPDATING = 4.0 ,
    WAITING_TO_HIDE = 3.0 ,
    WAITING_TO_SHOW = 1.0 ,
  }
}
declare module 'goog:goog.ui.Tooltip.State' {
  import State = ಠ_ಠ.clutz.goog.ui.Tooltip.State;
  export default State;
}
