//!! generated by clutz.
// Generated from ui/tabbar.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Tab bar UI component.  A tab bar contains tabs, rendered above, below,
   * before, or after tab contents.  Tabs in tab bars dispatch the following
   * events:
   * <ul>
   * <li>{@link goog.ui.Component.EventType.ACTION} when activated via the
   * keyboard or the mouse,
   * <li>{@link goog.ui.Component.EventType.SELECT} when selected, and
   * <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.
   * </ul>
   * Clients may listen for all of the above events on the tab bar itself, and
   * refer to the event target to identify the tab that dispatched the event.
   * When an unselected tab is clicked for the first time, it dispatches both a
   * `SELECT` event and an `ACTION` event; subsequent clicks on an
   * already selected tab only result in `ACTION` events.
   */
  class TabBar extends ಠ_ಠ.clutz.goog.ui.Container {
    private noStructuralTyping_goog_ui_TabBar : any;
    /**
     * Tab bar UI component.  A tab bar contains tabs, rendered above, below,
     * before, or after tab contents.  Tabs in tab bars dispatch the following
     * events:
     * <ul>
     * <li>{@link goog.ui.Component.EventType.ACTION} when activated via the
     * keyboard or the mouse,
     * <li>{@link goog.ui.Component.EventType.SELECT} when selected, and
     * <li>{@link goog.ui.Component.EventType.UNSELECT} when deselected.
     * </ul>
     * Clients may listen for all of the above events on the tab bar itself, and
     * refer to the event target to identify the tab that dispatched the event.
     * When an unselected tab is clicked for the first time, it dispatches both a
     * `SELECT` event and an `ACTION` event; subsequent clicks on an
     * already selected tab only result in `ACTION` events.
     * @param opt_location Tab bar location; defaults to {@link goog.ui.TabBar.Location.TOP}.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.TabBarRenderer}.
     * @param opt_domHelper DOM helper, used for document interaction.
     */
    constructor (opt_location ? : ಠ_ಠ.clutz.goog.ui.TabBar.Location , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.TabBarRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * If the specified tab is the currently selected tab, deselects it, and
     * selects the closest selectable tab in the tab bar (first looking before,
     * then after the deselected tab).  Does nothing if the argument is not the
     * currently selected tab.  Called internally when a tab is removed, hidden,
     * or disabled, to ensure that another tab is selected instead.
     * @param tab Tab to deselect (if any).
     */
    protected deselectIfSelected (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    getLocation ( ) : ಠ_ಠ.clutz.goog.ui.TabBar.Location ;
    getSelectedTab ( ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    getSelectedTabIndex ( ) : number ;
    /**
     * Handles focus events dispatched by the tab bar's key event target.  If no tab
     * is currently highlighted, highlights the selected tab or the first tab if no
     * tab is selected either.
     * @param e Focus event to handle.
     */
    protected handleFocus (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `DISABLE` events displayed by tabs.
     * @param e Disable event to handle.
     */
    protected handleTabDisable (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `HIDE` events displayed by tabs.
     * @param e Hide event to handle.
     */
    protected handleTabHide (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `SELECT` events dispatched by tabs as they become selected.
     * @param e Select event to handle.
     */
    protected handleTabSelect (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles `UNSELECT` events dispatched by tabs as they become deselected.
     * @param e Unselect event to handle.
     */
    protected handleTabUnselect (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isAutoSelectTabs ( ) : boolean ;
    /**
     * Returns true if the tab is selectable, false otherwise.  Only visible and
     * enabled tabs are selectable.
     * @param tab Tab to check.
     */
    protected isSelectableTab (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : boolean ;
    /**
     * Removes the tab from the tab bar.  Overrides the superclass implementation
     * by deselecting the tab being removed.  Since {@link #removeChildAt} uses
     * {@link #removeChild} internally, we only need to override this method.
     * @param tab Tab to remove.
     * @param opt_unrender Whether to call `exitDocument` on the removed tab, and detach its DOM from the document (defaults to false).
     */
    removeChild (tab : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Enables or disables auto-selecting tabs using the keyboard.  If auto-select
     * is enabled, keyboard navigation switches tabs immediately, otherwise it just
     * moves the highlight.
     * @param enable Whether keyboard navigation should change the selected tab, or just move the highlight.
     */
    setAutoSelectTabs (enable : boolean ) : void ;
    /**
     * Highlights the tab at the given index in response to a keyboard event.
     * Overrides the superclass implementation by also selecting the tab if
     * {@link #isAutoSelectTabs} returns true.
     * @param index Index of tab to highlight.
     */
    protected setHighlightedIndexFromKeyEvent (index : number ) : void ;
    /**
     * Sets the location of the tab bar relative to tab contents.
     * @param location Tab bar location relative to tab contents.
     */
    setLocation (location : ಠ_ಠ.clutz.goog.ui.TabBar.Location ) : void ;
    /**
     * Selects the given tab.
     * @param tab Tab to select (null to select none).
     */
    setSelectedTab (tab : ಠ_ಠ.clutz.goog.ui.Control | null ) : void ;
    /**
     * Selects the tab at the given index.
     * @param index Index of the tab to select (-1 to select none).
     */
    setSelectedTabIndex (index : number ) : void ;
    /**
     * Returns the {@link goog.ui.Container.Orientation} that is implied by the
     * given {@link goog.ui.TabBar.Location}.
     * @param location Tab bar location.
     */
    static getOrientationFromLocation (location : ಠ_ಠ.clutz.goog.ui.TabBar.Location ) : ಠ_ಠ.clutz.goog.ui.Container.Orientation | null ;
  }
}
declare module 'goog:goog.ui.TabBar' {
  import TabBar = ಠ_ಠ.clutz.goog.ui.TabBar;
  export default TabBar;
}
// Generated from ui/tabbar.js
declare namespace ಠ_ಠ.clutz.goog.ui.TabBar {
  /**
   * Tab bar location relative to tab contents.
   */
  /**
   * Tab bar location relative to tab contents.
   */
  enum Location {
    BOTTOM = 'bottom' ,
    END = 'end' ,
    START = 'start' ,
    TOP = 'top' ,
  }
}
declare module 'goog:goog.ui.TabBar.Location' {
  import Location = ಠ_ಠ.clutz.goog.ui.TabBar.Location;
  export default Location;
}
