//!! generated by clutz.
// Generated from ui/abstractspellchecker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Abstract base class for spell checker editor implementations. Provides basic
   * functionality such as word lookup and caching.
   */
  class AbstractSpellChecker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_AbstractSpellChecker : any;
    /**
     * Abstract base class for spell checker editor implementations. Provides basic
     * functionality such as word lookup and caching.
     * @param spellCheck Instance of the SpellCheck support object to use. A single instance can be shared by multiple editor components.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (spellCheck : ಠ_ಠ.clutz.goog.spell.SpellCheck | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Handler to use for caching and lookups.
     */
    protected spellCheck : ಠ_ಠ.clutz.goog.spell.SpellCheck | null ;
    /**
     * Blocks processing of spell checker READY events. This is used in dictionary
     * recharge and async mode so that completion is not signaled prematurely.
     */
    protected blockReadyEvents ( ) : void ;
    check ( ) : void ;
    /**
     * Clears the word to element references map used by replace/ignore.
     */
    protected clearWordElements ( ) : void ;
    /**
     * Continues processing started by processTextAsync. Calls virtual
     * processWord_ and processRange_ methods.
     */
    protected continueAsyncProcessing ( ) : ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult ;
    /**
     * Creates an element for a specified word and stores a reference to it.
     * @param word Word to create element for.
     * @param status Status of word.
     */
    protected createWordElement (word : string , status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus | null ) : HTMLSpanElement ;
    disposeInternal ( ) : void ;
    /**
     * Markers for the text that does not need to be included in the processing.
     *
     * For rich text editor this is a list of strings formatted as
     * tagName.className or className. If both are specified, the element will be
     * excluded if BOTH are matched. If only a className is specified, then we will
     * exclude regions with the className. If only one marker is needed, it may be
     * passed as a string.
     * For plain text editor this is a RegExp that matches the excluded text.
     *
     * Used exclusively by the derived classes
     */
    protected excludeMarker ? : string [] | null | string | RegExp ;
    /**
     * Finalizes asynchronous processing mode. Should be called after there is no
     * more text to process and processTextAsync and/or continueAsyncProcessing
     * returned FINISHED.
     */
    protected finishAsyncProcessing ( ) : void ;
    /**
     * Sets the focus on the provided word element.
     * @param element The word element that should receive focus.
     */
    protected focusOnElement (element : GlobalElement | null ) : void ;
    /**
     * Returns the span element that matches the given number index.
     * @param index Number index that is used in the element id.
     */
    protected getElementByIndex (index : number ) : GlobalElement | null ;
    /**
     * Returns desired element properties for the specified status.
     * Should be overridden by implementation.
     * @param status Status of word.
     */
    protected getElementProperties (a : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus | null ) : GlobalObject | null ;
    /**
     * Returns the index of the currently focussed invalid word element. This index
     * starts at one instead of zero.
     */
    protected getFocusedElementIndex ( ) : number ;
    protected getLastIndex ( ) : number ;
    protected getMenu ( ) : ಠ_ಠ.clutz.goog.ui.PopupMenu | null | undefined ;
    protected getMenuEdit ( ) : ಠ_ಠ.clutz.goog.ui.MenuItem | null | undefined ;
    protected getNextIndex ( ) : number ;
    getSpellCheck ( ) : ಠ_ಠ.clutz.goog.spell.SpellCheck | null ;
    /**
     * Ignores spelling of word.
     * @param word Word to add.
     */
    ignoreWord (word : string ) : void ;
    /**
     * Initializes suggestions menu. Populates menu with separator and ignore option
     * that are always valid. Suggestions are later added above the separator.
     */
    protected initSuggestionsMenu ( ) : void ;
    /**
     * Starts asynchronous processing mode.
     */
    protected initializeAsyncMode ( ) : void ;
    isVisible ( ) : boolean ;
    /**
     * Generates unique Ids for spell checker elements.
     * @param opt_id Id to suffix with.
     */
    protected makeElementId (opt_id ? : number ) : string ;
    /**
     * Whether corrected words should be highlighted.
     */
    markCorrected : boolean ;
    /**
     * Navigate keyboard focus in the given direction.
     * @param direction The direction to navigate in.
     */
    protected navigate (direction : ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.Direction ) : boolean ;
    /**
     * Handles correction menu actions.
     * @param event Action event.
     */
    protected onCorrectionAction (event : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Precharges local dictionary cache. This is optional, but greatly reduces
     * amount of subsequent churn in the DOM tree because most of the words become
     * known from the very beginning.
     * @param text Text to process.
     * @param words Max number of words to scan.
     */
    protected populateDictionary (text : string , words : number ) : number ;
    /**
     * Processes range of text that checks out (contains no unrecognized words).
     * Should be overridden by implementation. May contain words and separators.
     * @param node Node containing text range.
     * @param text text to process.
     */
    protected processRange (node : Node | null , text : string ) : any ;
    /**
     * Splits text into individual words and blocks of separators. Calls virtual
     * processWord_ and processRange_ methods.
     * @param node Node containing text.
     * @param text Text to process.
     */
    protected processTextAsync (node : Node | null , text : string ) : ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult ;
    /**
     * Processes word.
     * Should be overridden by implementation.
     * @param node Node containing word.
     * @param text Word to process.
     * @param status Status of the word.
     */
    protected processWord (node : Node | null , text : string , status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus | null ) : any ;
    /**
     * Stores a reference to word element.
     * @param word The word to store.
     * @param el The element associated with it.
     */
    protected registerWordElement (word : string , el : HTMLSpanElement | null ) : void ;
    /**
     * Removes spell-checker markup and restore the node to text.
     * @param el Word element. MUST have a text node child.
     */
    protected removeMarkup (el : GlobalElement | null ) : void ;
    /**
     * Replaces word.
     * @param el An element wrapping the word that should be replaced.
     * @param old Word that was replaced.
     * @param word Word to replace with.
     */
    replaceWord (el : GlobalElement | null , old : string , word : string ) : void ;
    resume ( ) : void ;
    /**
     * Sets the marker for the excluded text.
     *
     * {@see goog.ui.AbstractSpellChecker.prototype.excludeMarker}
     * @param marker A RegExp for plain text or class names for the rich text spell checker for the elements to exclude from checking.
     */
    setExcludeMarker (marker : string [] | null | string | RegExp ) : void ;
    /**
     * Sets the index of the currently focussed invalid word element. This index
     * should start at one instead of zero.
     * @param focusElementIndex the index of the currently focussed element
     */
    protected setFocusedElementIndex (focusElementIndex : number ) : void ;
    /**
     * Sets the handler used for caching and lookups.
     * @param handler The handler used for caching and lookups.
     */
    setHandler (handler : ಠ_ಠ.clutz.goog.spell.SpellCheck | null ) : void ;
    /**
     * Sets the spell checker used for caching and lookups.
     * @param spellCheck The handler used for caching and lookups.
     */
    setSpellCheck (spellCheck : ಠ_ಠ.clutz.goog.spell.SpellCheck | null ) : void ;
    /**
     * Displays suggestions menu.
     * @param el Element to display menu for.
     * @param opt_pos Position to display menu at relative to the viewport (in client coordinates), or a mouse event.
     */
    showSuggestionsMenu (el : GlobalElement | null , opt_pos ? : ಠ_ಠ.clutz.goog.events.BrowserEvent | null | ಠ_ಠ.clutz.goog.math.Coordinate ) : void ;
    /**
     * Class name for suggestions menu.
     */
    suggestionsMenuClassName : string ;
    /**
     * Unblocks processing of spell checker READY events. This is used in
     * dictionary recharge and async mode so that completion is not signaled
     * prematurely.
     */
    protected unblockReadyEvents ( ) : void ;
    /**
     * Updates element based on word status. Either converts it to a text node, or
     * merges it with the previous or next text node if the status of the world is
     * VALID, in which case the element itself is eliminated.
     * @param el Word element.
     * @param word Word to update status for.
     * @param status Status of word.
     */
    protected updateElement (el : GlobalElement | null , word : string , status : ಠ_ಠ.clutz.goog.spell.SpellCheck.WordStatus | null ) : void ;
  }
}
// Generated from ui/abstractspellchecker.js
declare namespace ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker {
  /**
   * Constants for representing the direction while navigating.
   */
  enum Direction {
    NEXT = 1.0 ,
    PREVIOUS = 0.0 ,
  }
}
declare module 'goog:goog.ui.AbstractSpellChecker' {
  import AbstractSpellChecker = ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker;
  export default AbstractSpellChecker;
}
// Generated from ui/abstractspellchecker.js
declare namespace ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker {
  /**
   * Constants for the result of asynchronous processing.
   */
  /**
   * Constants for the result of asynchronous processing.
   */
  enum AsyncResult {
    DONE = 2.0 ,
    PENDING = 1.0 ,
  }
}
declare module 'goog:goog.ui.AbstractSpellChecker.AsyncResult' {
  import AsyncResult = ಠ_ಠ.clutz.goog.ui.AbstractSpellChecker.AsyncResult;
  export default AsyncResult;
}
