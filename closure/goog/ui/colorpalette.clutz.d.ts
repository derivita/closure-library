//!! generated by clutz.
// Generated from ui/colorpalette.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A color palette is a grid of color swatches that the user can highlight or
   * select via the keyboard or the mouse.  The selection state of the palette is
   * controlled by a selection model.  When the user makes a selection, the
   * component fires an ACTION event.  Event listeners may retrieve the selected
   * color using the {@link #getSelectedColor} method.
   */
  class ColorPalette extends ಠ_ಠ.clutz.goog.ui.Palette {
    private noStructuralTyping_goog_ui_ColorPalette : any;
    /**
     * A color palette is a grid of color swatches that the user can highlight or
     * select via the keyboard or the mouse.  The selection state of the palette is
     * controlled by a selection model.  When the user makes a selection, the
     * component fires an ACTION event.  Event listeners may retrieve the selected
     * color using the {@link #getSelectedColor} method.
     * @param opt_colors Array of colors in any valid CSS color format.
     * @param opt_renderer Renderer used to render or decorate the palette; defaults to {@link goog.ui.PaletteRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_colors ? : string [] | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.PaletteRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    protected createColorNodes ( ) : Node [] ;
    /**
     * Returns the array of colors represented in the color palette.
     */
    getColors ( ) : string [] | null ;
    /**
     * Returns the array of tooltip labels for the colors in the color palette.
     */
    protected getLabels ( ) : string [] | null ;
    getSelectedColor ( ) : string | null ;
    /**
     * Sets the colors that are contained in the palette.
     * @param colors Array of colors in any valid CSS color format.
     * @param opt_labels The array of labels to be used as tooltips. When not provided, the color value will be used.
     */
    setColors (colors : string [] | null , opt_labels ? : string [] | null ) : void ;
    /**
     * Sets the selected color.  Clears the selection if the argument is null or
     * can't be parsed as a color.
     * @param color The color to set as selected; null clears the selection.
     */
    setSelectedColor (color : string | null ) : void ;
  }
}
declare module 'goog:goog.ui.ColorPalette' {
  import ColorPalette = ಠ_ಠ.clutz.goog.ui.ColorPalette;
  export default ColorPalette;
}
