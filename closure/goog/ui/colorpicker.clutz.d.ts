//!! generated by clutz.
// Generated from ui/colorpicker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Create a new, empty color picker.
   */
  class ColorPicker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_ColorPicker : any;
    /**
     * Create a new, empty color picker.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_colorPalette Optional color palette to use for this color picker.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_colorPalette ? : ಠ_ಠ.clutz.goog.ui.ColorPalette | null ) ;
    /**
     * Sets the array of colors to be displayed by the color picker.
     * @param colors The array of colors to be added.
     */
    addColors (colors : string [] | null ) : void ;
    /**
     * ColorPickers cannot be used to decorate pre-existing html, since the
     * structure they build is fairly complicated.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    disposeInternal ( ) : void ;
    /**
     * Renders the color picker inside the provided element. This will override the
     * current content of the element.
     */
    enterDocument ( ) : void ;
    focus ( ) : void ;
    /**
     * Gets the array of colors displayed by the color picker.
     * Modifying this array will lead to unexpected behavior.
     */
    getColors ( ) : string [] | null ;
    /**
     * Gets the color that is currently selected in this color picker.
     */
    getSelectedColor ( ) : string | null ;
    getSelectedIndex ( ) : number ;
    /**
     * Gets the number of columns displayed.
     */
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Returns true if the component is focusable, false otherwise.  The default
     * is true.  Focusable components always have a tab index and allocate a key
     * handler to handle keyboard events while focused.
     */
    isFocusable ( ) : boolean ;
    /**
     * Sets the array of colors to be displayed by the color picker.
     * @param colors The array of colors to be added.
     */
    setColors (colors : string [] | null ) : void ;
    /**
     * Sets the number of columns.  Will throw an error after the picker has been
     * rendered.
     * @param n The number of columns.
     */
    setColumnCount (n : number ) : void ;
    /**
     * Sets whether the component is focusable.  The default is true.
     * Focusable components always have a tab index and allocate a key handler to
     * handle keyboard events while focused.
     * @param focusable True iff the component is focusable.
     */
    setFocusable (focusable : boolean ) : void ;
    /**
     * Sets which color is selected.  Noop if the color palette hasn't been created
     * yet.
     * @param color The selected color.
     */
    setSelectedColor (color : string ) : void ;
    /**
     * Sets which color is selected. A value that is out-of-range means that no
     * color is selected.
     * @param ind The index in this.colors_ of the selected color.
     */
    setSelectedIndex (ind : number ) : void ;
    /**
     * Sets the size of the palette.  Will throw an error after the picker has been
     * rendered.
     * @param size The size of the grid.
     */
    setSize (size : ಠ_ಠ.clutz.goog.math.Size | null | number ) : void ;
    /**
     * Default number of columns in the color palette. May be overridden by calling
     * setSize.
     */
    static DEFAULT_NUM_COLS : number ;
    /**
     * Array of colors for a 7-cell wide simple-grid color picker.
     */
    static SIMPLE_GRID_COLORS : string [] | null ;
    /**
     * Returns an unrendered instance of the color picker.  The colors and layout
     * are a simple color grid, the same as the old Gmail color picker.
     * @param opt_domHelper Optional DOM helper.
     */
    static createSimpleColorGrid (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : ಠ_ಠ.clutz.goog.ui.ColorPicker ;
  }
}
declare module 'goog:goog.ui.ColorPicker' {
  import ColorPicker = ಠ_ಠ.clutz.goog.ui.ColorPicker;
  export default ColorPicker;
}
// Generated from ui/colorpicker.js
declare namespace ಠ_ಠ.clutz.goog.ui.ColorPicker {
  /**
   * Constants for event names.
   */
  /**
   * Constants for event names.
   */
  enum EventType {
    CHANGE = 'change' ,
  }
}
declare module 'goog:goog.ui.ColorPicker.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.ColorPicker.EventType;
  export default EventType;
}
