//!! generated by clutz.
// Generated from ui/drilldownrow.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Builds a DrilldownRow component, which can overlay a tree
   * structure onto sections of an HTML table.
   */
  class DrilldownRow extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_DrilldownRow : any;
    /**
     * Builds a DrilldownRow component, which can overlay a tree
     * structure onto sections of an HTML table.
     * @param opt_properties Optional properties.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (opt_properties ? : ಠ_ಠ.clutz.goog.ui.DrilldownRow.DrilldownRowProperties , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Child drilldowns are rendered when needed.
     * @param child New DrilldownRow child to be added.
     * @param index position to be occupied by the child.
     * @param opt_render true to force immediate rendering.
     */
    addChildAt (child : ಠ_ಠ.clutz.goog.ui.Component | null , index : number , opt_render ? : boolean ) : void ;
    /**
     * A top-level DrilldownRow decorates a TR element.
     * @param node The element to test for decorability.
     */
    canDecorate (node : GlobalElement | null ) : boolean ;
    createDom ( ) : void ;
    /**
     * The base class method calls its superclass method and this
     * drilldown's 'decorator' method as defined in the constructor.
     */
    enterDocument ( ) : void ;
    /**
     * Finds the numeric index of this child within its parent Component.
     * Throws an exception if it has no parent.
     */
    findIndex ( ) : number ;
    /**
     * Returns this DrilldownRow's level in the tree.  Top level is 1.
     */
    getDepth ( ) : number ;
    /**
     * Returns the expanded state of the DrilldownRow.
     */
    isExpanded ( ) : boolean ;
    removeChild (child ? : any ) : any ;
    /**
     * Rendering of DrilldownRow's is on need, do not call this directly
     * from application code.
     *
     * Rendering a DrilldownRow places it according to its position in its
     * tree of DrilldownRows.  DrilldownRows cannot be placed any other
     * way so this method does not use any arguments.  This does not call
     * the base class method and does not modify any of this
     * DrilldownRow's children.
     */
    render ( ) : void ;
    /**
     * Sets the expanded state of this DrilldownRow: makes all children
     * displayable or not displayable corresponding to the expanded state.
     * @param expanded whether this should be expanded or not.
     */
    setExpanded (expanded : boolean ) : void ;
    /**
     * This static function is a default decorator that adds HTML at the
     * beginning of the first cell to display indentation and an expander
     * image; sets up a click handler on the toggler; initializes a class
     * for the row: either goog-drilldown-expanded or
     * goog-drilldown-collapsed, depending on the initial state of the
     * DrilldownRow; and sets up a click event handler on the toggler
     * element.
     *
     * This creates a DIV with class=toggle.  Your application can set up
     * CSS style rules something like this:
     *
     * tr.goog-drilldown-expanded .toggle {
     * background-image: url('minus.png');
     * }
     *
     * tr.goog-drilldown-collapsed .toggle {
     * background-image: url('plus.png');
     * }
     *
     * These background images show whether the DrilldownRow is expanded.
     * @param selfObj DrilldownRow to be decorated.
     */
    static decorate (selfObj : ಠ_ಠ.clutz.goog.ui.DrilldownRow | null ) : void ;
    static sampleProperties : { decorator : (selfObj ? : any , handler ? : any ) => void , html : any , loaded : boolean } ;
  }
}
// Generated from ui/drilldownrow.js
declare namespace ಠ_ಠ.clutz.goog.ui.DrilldownRow {
  type DrilldownRowProperties = { decorator ? : Function | null , expanded ? : boolean , html ? : ಠ_ಠ.clutz.goog.html.SafeHtml , loaded ? : boolean } ;
}
declare module 'goog:goog.ui.DrilldownRow' {
  import DrilldownRow = ಠ_ಠ.clutz.goog.ui.DrilldownRow;
  export default DrilldownRow;
}
