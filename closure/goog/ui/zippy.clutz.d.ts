//!! generated by clutz.
// Generated from ui/zippy.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Zippy widget. Expandable/collapsible container, clicking the header toggles
   * the visibility of the content.
   */
  class Zippy extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_Zippy : any;
    /**
     * Zippy widget. Expandable/collapsible container, clicking the header toggles
     * the visibility of the content.
     * @param header Header element, either element reference, string id or null if no header exists.
     * @param opt_content Content element (if any), either element reference or string id.  If skipped, the caller should handle the TOGGLE event in its own way. If a function is passed, then if will be called to create the content element the first time the zippy is expanded.
     * @param opt_expanded Initial expanded/visibility state. If undefined, attempts to infer the state from the DOM. Setting visibility using one of the standard Soy templates guarantees correct inference.
     * @param opt_expandedHeader Element to use as the header when the zippy is expanded.
     * @param opt_domHelper An optional DOM helper.
     * @param opt_role ARIA role, default TAB.
     */
    constructor (header : GlobalElement | null | string , opt_content ? : GlobalElement | null | string | ( ( ) => GlobalElement | null ) , opt_expanded ? : boolean , opt_expandedHeader ? : GlobalElement | null | string , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_role ? : ಠ_ಠ.clutz.goog.a11y.aria.Role < string > | null ) ;
    collapse ( ) : void ;
    disposeInternal ( ) : void ;
    expand ( ) : void ;
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ;
    getContentElement ( ) : HTMLElement ;
    getVisibleHeaderElement ( ) : GlobalElement | null ;
    isExpanded ( ) : boolean ;
    isHandleKeyEvents ( ) : boolean ;
    isHandleMouseEvents ( ) : boolean ;
    /**
     * Sets expanded state.
     * @param expanded Expanded/visibility state.
     */
    setExpanded (expanded : boolean ) : void ;
    /**
     * Sets expanded internal state.
     * @param expanded Expanded/visibility state.
     */
    protected setExpandedInternal (expanded : boolean ) : void ;
    /**
     * Sets whether the Zippy handles it's own keyboard events.
     * @param enable Whether the Zippy handles keyboard events.
     */
    setHandleKeyboardEvents (enable : boolean ) : void ;
    /**
     * Sets whether the Zippy handles it's own mouse events.
     * @param enable Whether the Zippy handles mouse events.
     */
    setHandleMouseEvents (enable : boolean ) : void ;
    toggle ( ) : void ;
    /**
     * Updates the header element's className and ARIA (accessibility) EXPANDED
     * state.
     * @param expanded Expanded/visibility state.
     */
    protected updateHeaderClassName (expanded : boolean ) : void ;
  }
}
declare module 'goog:goog.ui.Zippy' {
  import Zippy = ಠ_ಠ.clutz.goog.ui.Zippy;
  export default Zippy;
}
// Generated from ui/zippy.js
declare namespace ಠ_ಠ.clutz.goog.ui.Zippy {
  /**
   * Constants for event names
   */
  /**
   * Constants for event names
   */
  enum Events {
    ACTION = 'action' ,
    TOGGLE = 'toggle' ,
  }
}
declare module 'goog:goog.ui.Zippy.Events' {
  import Events = ಠ_ಠ.clutz.goog.ui.Zippy.Events;
  export default Events;
}
// Generated from ui/zippy.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Object representing a zippy toggle event.
   */
  class ZippyEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_ZippyEvent : any;
    /**
     * Object representing a zippy toggle event.
     * @param type Event type.
     * @param target Zippy widget initiating event.
     * @param expanded Expanded state.
     */
    constructor (type : string , target : ಠ_ಠ.clutz.goog.ui.Zippy | null , expanded : boolean , opt_triggeringEvent ? : ಠ_ಠ.clutz.goog.events.BrowserEvent ) ;
    /**
     * The expanded state.
     */
    expanded : boolean ;
    /**
     * For ACTION events, the key or mouse event that triggered this event, if
     * there was one.
     */
    triggeringEvent : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ;
  }
}
declare module 'goog:goog.ui.ZippyEvent' {
  import ZippyEvent = ಠ_ಠ.clutz.goog.ui.ZippyEvent;
  export default ZippyEvent;
}
