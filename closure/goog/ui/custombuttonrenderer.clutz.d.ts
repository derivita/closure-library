//!! generated by clutz.
// Generated from ui/custombuttonrenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Custom renderer for {@link goog.ui.Button}s.  Custom buttons can contain
   * almost arbitrary HTML content, will flow like inline elements, but can be
   * styled like block-level elements.
   */
  class CustomButtonRenderer extends ಠ_ಠ.clutz.goog.ui.ButtonRenderer {
    private noStructuralTyping_goog_ui_CustomButtonRenderer : any;
    /**
     * Custom renderer for {@link goog.ui.Button}s.  Custom buttons can contain
     * almost arbitrary HTML content, will flow like inline elements, but can be
     * styled like block-level elements.
     */
    constructor ( ) ;
    /**
     * Returns true if this renderer can decorate the element.  Overrides
     * {@link goog.ui.ButtonRenderer#canDecorate} by returning true if the
     * element is a DIV, false otherwise.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Takes a text caption or existing DOM structure, and returns the content
     * wrapped in a pseudo-rounded-corner box.  Creates the following DOM structure:
     *
     * <div class="goog-inline-block goog-custom-button-outer-box">
     * <div class="goog-inline-block goog-custom-button-inner-box">
     * Contents...
     * </div>
     * </div>
     *
     * Used by both {@link #createDom} and {@link #decorate}.  To be overridden
     * by subclasses.
     * @param content Text caption or DOM structure to wrap in a box.
     * @param dom DOM helper, used for document interaction.
     */
    createButton (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null , dom : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) : GlobalElement ;
    /**
     * Returns the button's contents wrapped in the following DOM structure:
     *
     * <div class="goog-inline-block goog-custom-button">
     * <div class="goog-inline-block goog-custom-button-outer-box">
     * <div class="goog-inline-block goog-custom-button-inner-box">
     * Contents...
     * </div>
     * </div>
     * </div>
     *
     * Overrides {@link goog.ui.ButtonRenderer#createDom}.
     * @param control goog.ui.Button to render.
     */
    createDom (control : ಠ_ಠ.clutz.goog.ui.Control | null ) : GlobalElement ;
    /**
     * Takes an existing element and decorates it with the custom button control.
     * Initializes the control's ID, content, tooltip, value, and state based
     * on the ID of the element, its child nodes, and its CSS classes, respectively.
     * Returns the element.  Overrides {@link goog.ui.ButtonRenderer#decorate}.
     * @param control Button instance to decorate the element.
     * @param element Element to decorate.
     */
    decorate (control : ಠ_ಠ.clutz.goog.ui.Control | null , element : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Returns the ARIA role to be applied to custom buttons.
     */
    getAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null | undefined ;
    /**
     * Takes the button's root element and returns the parent element of the
     * button's contents.  Overrides the superclass implementation by taking
     * the nested DIV structure of custom buttons into account.
     * @param element Root element of the button whose content element is to be returned.
     */
    getContentElement (element : GlobalElement | null ) : GlobalElement | null ;
    /**
     * Returns the CSS class to be applied to the root element of components
     * rendered using this renderer.
     */
    getCssClass ( ) : string ;
    /**
     * Check if the button's element has a box structure.
     * @param button Button instance whose structure is being checked.
     * @param element Element of the button.
     */
    protected hasBoxStructure (button : ಠ_ಠ.clutz.goog.ui.Button | null , element : GlobalElement | null ) : boolean ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer ;
  }
}
declare module 'goog:goog.ui.CustomButtonRenderer' {
  import CustomButtonRenderer = ಠ_ಠ.clutz.goog.ui.CustomButtonRenderer;
  export default CustomButtonRenderer;
}
