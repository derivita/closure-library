//!! generated by clutz.
// Generated from ui/editor/abstractdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * Creates an object that represents a dialog box.
   */
  class AbstractDialog extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_editor_AbstractDialog : any;
    /**
     * Creates an object that represents a dialog box.
     * @param domHelper DomHelper to be used to create the dialog's dom structure.
     */
    constructor (domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Creates and returns the goog.ui.Dialog control that is being wrapped
     * by this object.
     */
    protected createDialogControl ( ) : ಠ_ಠ.clutz.goog.ui.Dialog ;
    /**
     * Creates and returns the event object to be used when dispatching the OK
     * event to listeners, or returns null to prevent the dialog from closing.
     * Subclasses should override this to return their own subclass of
     * goog.events.Event that includes all data a plugin would need from the dialog.
     * @param e The event object dispatched by the wrapped dialog.
     */
    protected createOkEvent (a : ಠ_ಠ.clutz.goog.events.Event | null ) : ಠ_ಠ.clutz.goog.events.Event | null ;
    /**
     * Disposes of the dialog. If the dialog is open, it will be hidden and
     * AFTER_HIDE will be dispatched.
     */
    protected disposeInternal ( ) : void ;
    /**
     * The DOM helper for the parent document.
     */
    protected dom : ಠ_ಠ.clutz.goog.dom.DomHelper | null ;
    /**
     * Returns the HTML Button element for the button added to this dialog with
     * the given button id.
     * @param buttonId The id of the button to get.
     */
    protected getButtonElement (buttonId : string ) : GlobalElement | null ;
    /**
     * Returns the HTML Button element for the Cancel button in this dialog.
     */
    protected getCancelButtonElement ( ) : GlobalElement | null ;
    /**
     * Returns the HTML Button element for the OK button in this dialog.
     */
    protected getOkButtonElement ( ) : GlobalElement | null ;
    /**
     * Handles the event dispatched by the wrapped dialog control when the user
     * clicks the Cancel button. Simply dispatches a CANCEL event.
     */
    protected handleCancel ( ) : boolean ;
    /**
     * Handles the event dispatched by the wrapped dialog control when the user
     * clicks the OK button. Attempts to create the OK event object and dispatches
     * it if successful.
     * @param e wrapped dialog OK event object.
     */
    protected handleOk (e : ಠ_ಠ.clutz.goog.ui.Dialog.Event | null ) : boolean ;
    hide ( ) : void ;
    isOpen ( ) : boolean ;
    /**
     * Runs the handler registered on the OK button event and closes the dialog if
     * that handler succeeds.
     * This is useful in cases such as double-clicking an item in the dialog is
     * equivalent to selecting it and clicking the default button.
     */
    protected processOkAndClose ( ) : void ;
    show ( ) : void ;
  }
}
declare module 'goog:goog.ui.editor.AbstractDialog' {
  import AbstractDialog = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog;
  export default AbstractDialog;
}
// Generated from ui/editor/abstractdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
  /**
   * A builder class for the dialog control. All methods except build return this.
   */
  class Builder {
    private noStructuralTyping_goog_ui_editor_AbstractDialog_Builder : any;
    /**
     * A builder class for the dialog control. All methods except build return this.
     * @param editorDialog Editor dialog object that will wrap the wrapped dialog object this builder will create.
     */
    constructor (editorDialog : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog | null ) ;
    /**
     * Adds a custom button to the dialog.
     * @param label The caption for the button.
     * @param handler Function called when the button is clicked. It is recommended that this function be a method in the concrete subclass of AbstractDialog using this Builder, and that it dispatch an event (see {@link handleOk}).
     * @param opt_buttonId Identifier to be used to access the button when calling AbstractDialog.getButtonElement().
     */
    addButton (label : string , handler : (a : ಠ_ಠ.clutz.goog.ui.Dialog.EventType | null ) => any , opt_buttonId ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Adds a Cancel button to the dialog. Clicking this button will cause {@link
     * handleCancel} to run, subsequently dispatching a CANCEL event.
     * @param opt_label The caption for the button, if not "Cancel".
     */
    addCancelButton (opt_label ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Puts a CSS class on the dialog's main element.
     * @param className The class to add.
     */
    addClassName (className : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Adds an OK button to the dialog. Clicking this button will cause {@link
     * handleOk} to run, subsequently dispatching an OK event.
     * @param opt_label The caption for the button, if not "OK".
     */
    addOkButton (opt_label ? : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Builds the wrapped dialog control. May only be called once, after which
     * no more methods may be called on this builder.
     */
    build ( ) : ಠ_ಠ.clutz.goog.ui.Dialog ;
    /**
     * Sets the content element of the dialog.
     * @param contentElem An element for the main body.
     */
    setContent (contentElem : GlobalElement | null ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
    /**
     * Sets the title of the dialog.
     * @param title Title HTML (escaped).
     */
    setTitle (title : string ) : ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder ;
  }
}
declare module 'goog:goog.ui.editor.AbstractDialog.Builder' {
  import Builder = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.Builder;
  export default Builder;
}
// Generated from ui/editor/abstractdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
  /**
   * Event type constants for events the dialog fires.
   */
  /**
   * Event type constants for events the dialog fires.
   */
  enum EventType {
    AFTER_HIDE = 'afterhide' ,
    CANCEL = 'cancel' ,
    OK = 'ok' ,
  }
}
declare module 'goog:goog.ui.editor.AbstractDialog.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog.EventType;
  export default EventType;
}
