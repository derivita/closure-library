//!! generated by clutz.
// Generated from ui/editor/toolbarcontroller.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * A class for managing the editor toolbar.  Acts as a bridge between
   * a {@link goog.editor.Field} and a {@link goog.ui.Toolbar}.
   *
   * The `toolbar` argument must be an instance of {@link goog.ui.Toolbar}
   * or a subclass.  This class doesn't care how the toolbar was created.  As
   * long as one or more controls hosted  in the toolbar have IDs that match
   * built-in {@link goog.editor.Command}s, they will function as expected.  It is
   * the caller's responsibility to ensure that the toolbar is already rendered
   * or that it decorates an existing element.
   */
  class ToolbarController extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_editor_ToolbarController : any;
    /**
     * A class for managing the editor toolbar.  Acts as a bridge between
     * a {@link goog.editor.Field} and a {@link goog.ui.Toolbar}.
     *
     * The `toolbar` argument must be an instance of {@link goog.ui.Toolbar}
     * or a subclass.  This class doesn't care how the toolbar was created.  As
     * long as one or more controls hosted  in the toolbar have IDs that match
     * built-in {@link goog.editor.Command}s, they will function as expected.  It is
     * the caller's responsibility to ensure that the toolbar is already rendered
     * or that it decorates an existing element.
     * @param field Editable field to be controlled by the toolbar.
     * @param toolbar Toolbar to control the editable field.
     */
    constructor (field : ಠ_ಠ.clutz.goog.editor.Field , toolbar : ಠ_ಠ.clutz.goog.ui.Toolbar ) ;
    blur ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the {@link goog.editor.Command} constant
     * that corresponds to the given Closure component ID.  Subclasses may override
     * this method if they want to use a custom mapping scheme from controls to
     * commands.
     * @param id Closure component ID of a toolbar control.
     */
    protected getCommand (id : string ) : string ;
    /**
     * Returns the Closure component ID of the control that corresponds to the
     * given {@link goog.editor.Command} constant.
     * Subclasses may override this method if they want to use a custom mapping
     * scheme from commands to controls.
     * @param command Editor command.
     */
    protected getComponentId (command : string ) : string ;
    /**
     * Returns the field instance managed by the toolbar.  Useful for
     * classes that extend `goog.ui.editor.ToolbarController`.
     */
    protected getField ( ) : ಠ_ಠ.clutz.goog.editor.Field ;
    /**
     * Returns the event handler object for the editor toolbar.  Useful for classes
     * that extend `goog.ui.editor.ToolbarController`.
     */
    protected getHandler < T = any > (this : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > ;
    /**
     * Returns the toolbar UI component that manages the editor.  Useful for
     * classes that extend `goog.ui.editor.ToolbarController`.
     */
    getToolbar ( ) : ಠ_ಠ.clutz.goog.ui.Toolbar ;
    /**
     * Handles `ACTION` events dispatched by toolbar buttons in response to
     * user actions by executing the corresponding field command.
     * @param e Action event to handle.
     */
    protected handleAction (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    isEnabled ( ) : boolean ;
    isVisible ( ) : boolean ;
    /**
     * Enables or disables the toolbar.
     * @param enabled Whether to enable or disable the toolbar.
     */
    setEnabled (enabled : boolean ) : void ;
    /**
     * Shows or hides the toolbar.
     * @param visible Whether to show or hide the toolbar.
     */
    setVisible (visible : boolean ) : void ;
    /**
     * Updates the toolbar in response to editor events.  Specifically, updates
     * button states based on `COMMAND_VALUE_CHANGE` events, reflecting the
     * effective formatting of the selection.
     * @param e Editor event to handle.
     */
    protected updateToolbar (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Updates the toolbar to reflect a given state.
     * @param state Object mapping editor commands to values.
     */
    updateToolbarFromState (state : GlobalObject | null ) : void ;
  }
}
declare module 'goog:goog.ui.editor.ToolbarController' {
  import ToolbarController = ಠ_ಠ.clutz.goog.ui.editor.ToolbarController;
  export default ToolbarController;
}
