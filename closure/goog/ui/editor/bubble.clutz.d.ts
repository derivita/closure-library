//!! generated by clutz.
// Generated from ui/editor/bubble.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * Property bubble UI element.
   */
  class Bubble extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_editor_Bubble : any;
    /**
     * Property bubble UI element.
     * @param parent The parent element for this bubble.
     * @param zIndex The z index to draw the bubble at.
     */
    constructor (parent : GlobalElement | null , zIndex : number ) ;
    /**
     * Adds a panel to the bubble.
     * @param type The type of bubble panel this is.  Should usually be the same as the tagName of the targetElement.  This ensures multiple bubble panels don't appear for the same element.
     * @param title The title of the panel.
     * @param targetElement The target element of the bubble.
     * @param contentFn Function that when called with a container element, will add relevant panel content to it.
     * @param opt_preferTopPosition Whether to prefer placing the bubble above the element instead of below it.  Defaults to preferring below. If any panel prefers the top position, the top position is used.
     */
    addPanel (type : string , title : string , targetElement : GlobalElement | null , contentFn : (a : GlobalElement | null ) => void , opt_preferTopPosition ? : boolean ) : string ;
    /**
     * Creates and adds DOM for the bubble UI to the given container.  This default
     * implementation just returns the container itself.
     * @param dom DOM helper to use.
     * @param container Element to add the new elements to.
     */
    protected createBubbleDom (dom : ಠ_ಠ.clutz.goog.dom.DomHelper , container : GlobalElement ) : GlobalElement ;
    disposeInternal ( ) : void ;
    protected getContainerElement ( ) : GlobalElement | null ;
    getContentElement ( ) : GlobalElement | null ;
    protected getEventHandler < T = any > (this : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > | null ;
    /**
     * Returns the margin box.
     */
    protected getMarginBox ( ) : ಠ_ಠ.clutz.goog.math.Box | null ;
    /**
     * Returns the viewport box to use when positioning the bubble.
     */
    protected getViewportBox ( ) : ಠ_ಠ.clutz.goog.math.Box | null ;
    /**
     * Handles the popup's hide event by removing all panels and dispatching a
     * HIDE event.
     */
    protected handlePopupHide ( ) : void ;
    /**
     * Returns whether there is already a panel of the given type.
     * @param type Type of panel to check.
     */
    hasPanelOfType (type : string ) : boolean ;
    /**
     * Returns the visibility of the bubble.
     */
    isVisible ( ) : boolean ;
    /**
     * A logger for goog.ui.editor.Bubble.
     */
    protected logger : ಠ_ಠ.clutz.goog.log.Logger | null ;
    /**
     * Removes the panel with the given id.
     * @param id The id of the panel.
     */
    removePanel (id : string ) : void ;
    reposition ( ) : void ;
    /**
     * Sets whether the bubble dismisses itself when the user clicks outside of it.
     * @param autoHide Whether to autohide on an external click.
     */
    setAutoHide (autoHide : boolean ) : void ;
    /**
     * The css class name of the bubble container element.
     */
    static BUBBLE_CLASSNAME : string ;
  }
}
// Generated from ui/editor/bubble.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.Bubble {
  class Panel_ {
    private noStructuralTyping_goog_ui_editor_Bubble_Panel_ : any;
    /**
     * The element containing this panel.
     */
    element : GlobalElement ;
    /**
     * Whether the panel prefers to be placed below the target element.
     */
    preferBottomPosition : boolean ;
    /**
     * The target element of this bubble panel.
     */
    targetElement : GlobalElement | null ;
    /**
     * The type of bubble panel.
     */
    type : string ;
    getContentElement ( ) : GlobalElement | null ;
  }
}
declare module 'goog:goog.ui.editor.Bubble' {
  import Bubble = ಠ_ಠ.clutz.goog.ui.editor.Bubble;
  export default Bubble;
}
