//!! generated by clutz.
// Generated from ui/editor/linkdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor {
  /**
   * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
   */
  class LinkDialog extends ಠ_ಠ.clutz.goog.ui.editor.AbstractDialog {
    private noStructuralTyping_goog_ui_editor_LinkDialog : any;
    /**
     * A type of goog.ui.editor.AbstractDialog for editing/creating a link.
     * @param domHelper DomHelper to be used to create the dialog's dom structure.
     * @param link The target link.
     */
    constructor (domHelper : ಠ_ಠ.clutz.goog.dom.DomHelper | null , link : ಠ_ಠ.clutz.goog.editor.Link | null ) ;
    createDialogControl ( ) : any ;
    /**
     * Creates and returns the event object to be used when dispatching the OK
     * event to listeners based on which tab is currently selected and the contents
     * of the input fields of that tab.
     */
    protected createOkEvent ( ) : ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent ;
    focusTextToDisplayOnOpenIfEmpty ( ) : void ;
    hide ( ) : void ;
    /**
     * Tells the dialog whether the autogeneration of text to display is to be
     * enabled.
     * @param enable Whether to enable the feature.
     */
    setAutogenFeatureEnabled (enable : boolean ) : void ;
    /**
     * Sets the warning message to show to users about including email addresses on
     * public web pages.
     * @param emailWarning Warning message to show users about including email addresses on the web.
     */
    setEmailWarning (emailWarning : ಠ_ಠ.clutz.goog.html.SafeHtml ) : void ;
    /**
     * Tells the plugin whether to stop leaking the page's url via the referrer
     * header when the "test this link" link is clicked.
     * @param stop Whether to stop leaking the referrer.
     */
    setStopReferrerLeaks (stop : boolean ) : void ;
    /**
     * Tells the plugin whether to remove access to the current window object in the
     * newly created window when the "test this link" is clicked, since it can be
     * used to launch a reverse tabnabbing attack.
     * @param stop Whether to remove the reference to the current window in the new window.
     */
    setStopTabNabbing (stop : boolean ) : void ;
    /**
     * Tells the dialog whether to show the 'text to display' div.
     * When the target element of the dialog is an image, there is no link text
     * to modify. This function can be used for this kind of situations.
     * @param visible Whether to make 'text to display' div visible.
     */
    setTextToDisplayVisible (visible : boolean ) : void ;
    show ( ) : void ;
    /**
     * Tells the dialog to show a checkbox where the user can choose to have the
     * link open in a new window.
     * @param startChecked Whether to check the checkbox the first time the dialog is shown. Subesquent times the checkbox will remember its previous state.
     */
    showOpenLinkInNewWindow (startChecked : boolean ) : void ;
    showRelNoFollow ( ) : void ;
    /**
     * Checks if `str` contains {@code "nofollow"} as a separate word.
     * @param str String to be tested.  This is usually `rel` attribute of an `HTMLAnchorElement` object.
     */
    static hasNoFollow (str : string ) : boolean ;
    /**
     * Removes {@code "nofollow"} from `rel` if it's present as a separate
     * word.
     * @param rel Input string.  This is usually `rel` attribute of an `HTMLAnchorElement` object.
     */
    static removeNoFollow (rel : string ) : string ;
  }
}
declare module 'goog:goog.ui.editor.LinkDialog' {
  import LinkDialog = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog;
  export default LinkDialog;
}
// Generated from ui/editor/linkdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * Event fired before testing a link by opening it in another window.
   * Calling preventDefault will stop the link from being opened.
   */
  class BeforeTestLinkEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_editor_LinkDialog_BeforeTestLinkEvent : any;
    /**
     * Event fired before testing a link by opening it in another window.
     * Calling preventDefault will stop the link from being opened.
     * @param url Url of the link being tested.
     */
    constructor (url : string ) ;
    /**
     * The url of the link being tested.
     */
    url : string ;
  }
}
declare module 'goog:goog.ui.editor.LinkDialog.BeforeTestLinkEvent' {
  import BeforeTestLinkEvent = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.BeforeTestLinkEvent;
  export default BeforeTestLinkEvent;
}
// Generated from ui/editor/linkdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * Events specific to the link dialog.
   */
  /**
   * Events specific to the link dialog.
   */
  enum EventType {
    BEFORE_TEST_LINK = 'beforetestlink' ,
  }
}
declare module 'goog:goog.ui.editor.LinkDialog.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.EventType;
  export default EventType;
}
// Generated from ui/editor/linkdialog.js
declare namespace ಠ_ಠ.clutz.goog.ui.editor.LinkDialog {
  /**
   * OK event object for the link dialog.
   */
  class OkEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_editor_LinkDialog_OkEvent : any;
    /**
     * OK event object for the link dialog.
     * @param linkText Text the user chose to display for the link.
     * @param linkUrl Url the user chose for the link to point to.
     * @param openInNewWindow Whether the link should open in a new window when clicked.
     * @param noFollow Whether the link should have 'rel=nofollow' attribute.
     */
    constructor (linkText : string , linkUrl : string , openInNewWindow : boolean , noFollow : boolean ) ;
    /**
     * The text of the link edited in the dialog.
     */
    linkText : string ;
    /**
     * The url of the link edited in the dialog.
     */
    linkUrl : string ;
    /**
     * Whether the link should have 'rel=nofollow' attribute.
     */
    noFollow : boolean ;
    /**
     * Whether the link should open in a new window when clicked.
     */
    openInNewWindow : boolean ;
  }
}
declare module 'goog:goog.ui.editor.LinkDialog.OkEvent' {
  import OkEvent = ಠ_ಠ.clutz.goog.ui.editor.LinkDialog.OkEvent;
  export default OkEvent;
}
