//!! generated by clutz.
// Generated from ui/menu.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A basic menu class.
   */
  class Menu extends ಠ_ಠ.clutz.goog.ui.Container {
    private noStructuralTyping_goog_ui_Menu : any;
    /**
     * A basic menu class.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.MenuRenderer}.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.MenuRenderer | null ) ;
    /**
     * Adds a new menu item at the end of the menu.
     * @param item Menu item to add to the menu.
     */
    addItem (item : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator ) : void ;
    /**
     * Adds a new menu item at a specific index in the menu.
     * @param item Menu item to add to the menu.
     * @param n Index at which to insert the menu item.
     */
    addItemAt (item : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator , n : number ) : void ;
    canHighlightItem (item ? : any ) : any ;
    /**
     * Returns whether the provided element is to be considered inside the menu for
     * purposes such as dismissing the menu on an event.  This is so submenus can
     * make use of elements outside their own DOM.
     * @param element The element to test for.
     */
    containsElement (element : GlobalElement | null ) : boolean ;
    /**
     * Decorate menu items located in any descendant node which as been explicitly
     * marked as a 'content' node.
     * @param element Element to decorate.
     */
    protected decorateContent (element : GlobalElement | null ) : void ;
    decorateInternal (element ? : any ) : void ;
    getAllowAutoFocus ( ) : boolean ;
    getAllowHighlightDisabled ( ) : boolean ;
    /**
     * Returns the CSS class applied to menu elements, also used as the prefix for
     * derived styles, if any.  Subclasses should override this method as needed.
     * Considered protected.
     */
    protected getCssClass ( ) : string ;
    /**
     * Returns a reference to the menu item at a given index.
     * @param n Index of menu item.
     */
    getItemAt (n : number ) : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator ;
    /**
     * Returns the number of items in the menu (including separators).
     */
    getItemCount ( ) : number ;
    /**
     * Returns an array containing the menu items contained in the menu.
     */
    getItems ( ) : ( ಠ_ಠ.clutz.goog.ui.MenuItem | null ) [] ;
    /**
     * Gets the page offset of the menu, or null if the menu isn't visible
     */
    getPosition ( ) : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    handleEnterItem (e ? : any ) : any ;
    handleKeyEventInternal (e ? : any ) : any ;
    /**
     * Highlights the next item that begins with the specified string.  If no
     * (other) item begins with the given string, the selection is unchanged.
     * @param charStr The prefix to match.
     */
    highlightNextPrefix (charStr : string ) : boolean ;
    /**
     * Coordinates of the mousedown event that caused this menu to be made visible.
     * Used to prevent the consequent mouseup event due to a simple click from
     * activating a menu item immediately. Considered protected; should only be used
     * within this package or by subclasses.
     */
    openingCoords ? : ಠ_ಠ.clutz.goog.math.Coordinate | null ;
    /**
     * Removes an item from the menu and disposes of it.
     * @param item The menu item to remove.
     */
    removeItem (item : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator ) : void ;
    /**
     * Removes a menu item at a given index in the menu and disposes of it.
     * @param n Index of item.
     */
    removeItemAt (n : number ) : void ;
    /**
     * Sets whether the menu can automatically move focus to its key event target
     * when it is set to visible.
     * @param allow Whether the menu can automatically move focus to its key event target when it is set to visible.
     */
    setAllowAutoFocus (allow : boolean ) : void ;
    /**
     * Sets whether the menu will highlight disabled menu items or skip to the next
     * active item.
     * @param allow Whether the menu will highlight disabled menu items or skip to the next active item.
     */
    setAllowHighlightDisabled (allow : boolean ) : void ;
    setHighlightedIndex (index ? : any ) : void ;
    /**
     * Sets the position of the menu relative to the view port.
     * @param x Left position or coordinate obj.
     * @param opt_y Top position.
     */
    setPosition (x : number | ಠ_ಠ.clutz.goog.math.Coordinate | null , opt_y ? : number ) : void ;
    setVisible (show : boolean , opt_force ? : boolean , opt_e ? : ಠ_ಠ.clutz.goog.events.Event | null ) : any ;
    /**
     * CSS class for menus.
     */
    static CSS_CLASS : string ;
  }
}
declare module 'goog:goog.ui.Menu' {
  import Menu = ಠ_ಠ.clutz.goog.ui.Menu;
  export default Menu;
}
// Generated from ui/menu.js
declare namespace ಠ_ಠ.clutz.goog.ui.Menu {
  /**
   * Event types dispatched by the menu.
   */
  type EventType = string &{clutzEnumBrand: never} ;
  let EventType : {
    BEFORE_HIDE : EventType ,
    BEFORE_SHOW : EventType ,
    HIDE : EventType ,
    SHOW : EventType ,
  };
}
declare module 'goog:goog.ui.Menu.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.Menu.EventType;
  export default EventType;
}
