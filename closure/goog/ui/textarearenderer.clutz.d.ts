//!! generated by clutz.
// Generated from ui/textarearenderer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Renderer for {@link goog.ui.Textarea}s.  Renders and decorates native HTML
   * textarea elements.  Since native HTML textareas have built-in support for
   * many features, overrides many expensive (and redundant) superclass methods to
   * be no-ops.
   */
  class TextareaRenderer extends ಠ_ಠ.clutz.goog.ui.ControlRenderer {
    private noStructuralTyping_goog_ui_TextareaRenderer : any;
    /**
     * Renderer for {@link goog.ui.Textarea}s.  Renders and decorates native HTML
     * textarea elements.  Since native HTML textareas have built-in support for
     * many features, overrides many expensive (and redundant) superclass methods to
     * be no-ops.
     */
    constructor ( ) ;
    /**
     * Overrides {@link goog.ui.TextareaRenderer#canDecorate} by returning true only
     * if the element is an HTML textarea.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Returns the textarea's contents wrapped in an HTML textarea element.  Sets
     * the textarea's disabled attribute as needed.
     * @param textarea Textarea to render.
     */
    createDom (textarea : ಠ_ಠ.clutz.goog.ui.Control | null ) : GlobalElement ;
    decorate (control ? : any , element ? : any ) : any ;
    getAriaRole ( ) : any ;
    getCssClass ( ) : any ;
    /**
     * Textareas are always focusable as long as they are enabled.
     */
    isFocusable (textarea ? : any ) : any ;
    setContent (element ? : any , value ? : any ) : void ;
    /**
     * Textareas natively support keyboard focus.
     */
    setFocusable ( ) : void ;
    /**
     * Textareas natively support right-to-left rendering.
     */
    setRightToLeft ( ) : void ;
    /**
     * Textareas also expose the DISABLED state in the HTML textarea's
     * `disabled` attribute.
     */
    setState (textarea ? : any , state ? : any , enable ? : any ) : void ;
    /**
     * Textareas don't need ARIA states to support accessibility, so this is
     * a no-op.
     */
    updateAriaState ( ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
    static getInstance ( ) : ಠ_ಠ.clutz.goog.ui.TextareaRenderer ;
    static instance_ : ಠ_ಠ.clutz.goog.ui.TextareaRenderer ;
  }
}
declare module 'goog:goog.ui.TextareaRenderer' {
  import TextareaRenderer = ಠ_ಠ.clutz.goog.ui.TextareaRenderer;
  export default TextareaRenderer;
}
