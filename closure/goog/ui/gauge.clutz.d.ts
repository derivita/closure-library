//!! generated by clutz.
// Generated from ui/gauge.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  export import Gauge = ಠ_ಠ.clutz.module$contents$goog$ui$Gauge_Gauge ;
}
declare module 'goog:goog.ui.Gauge' {
  import Gauge = ಠ_ಠ.clutz.goog.ui.Gauge;
  export default Gauge;
}
// Generated from ui/gauge.js
declare namespace ಠ_ಠ.clutz {
  /**
   * A UI component that displays a gauge.
   * A gauge displayes a current value within a round axis that represents a
   * given range.
   * The gauge is built from an external border, and internal border inside it,
   * ticks and labels inside the internal border, and a needle that points to
   * the current value.
   */
  class module$contents$goog$ui$Gauge_Gauge extends ಠ_ಠ.clutz.module$exports$goog$ui$Component {
    private noStructuralTyping_module$contents$goog$ui$Gauge_Gauge : any;
    /**
     * A UI component that displays a gauge.
     * A gauge displayes a current value within a round axis that represents a
     * given range.
     * The gauge is built from an external border, and internal border inside it,
     * ticks and labels inside the internal border, and a needle that points to
     * the current value.
     */
    constructor (width : number , height : number , opt_domHelper ? : ಠ_ಠ.clutz.module$exports$goog$dom$DomHelper ) ;
    /**
     * Set the background color for a range of values on the gauge.
     * @param fromValue The lower (start) value of the colored range.
     * @param toValue The higher (end) value of the colored range.
     * @param color The color name to paint the range with. For example 'red' or '#ffcc00'.
     */
    addBackgroundColor (fromValue : number , toValue : number , color : string ) : void ;
    /**
     * Creates the DOM representation of the graphics area.
     */
    createDom ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    getMaximum ( ) : number ;
    getMinimum ( ) : number ;
    /**
     * Redraws the entire gauge.
     * Should be called after theme colors have been changed.
     */
    redraw ( ) : void ;
    /**
     * Sets the labels of the major ticks.
     * @param tickLabels A text label for each major tick value.
     */
    setMajorTickLabels (tickLabels : string [] | null ) : void ;
    /**
     * Sets the maximum number of the range
     * @param max The maximum value of the range.
     */
    setMaximum (max : number ) : void ;
    /**
     * Sets the minimum value of the range
     * @param min The minimum value of the range.
     */
    setMinimum (min : number ) : void ;
    /**
     * Sets the color theme for drawing the gauge.
     * @param theme The color theme to use.
     */
    setTheme (theme : ಠ_ಠ.clutz.module$exports$goog$ui$GaugeTheme | null ) : void ;
    /**
     * Sets the number of major tick sections and minor tick sections.
     * @param majorUnits The number of major tick sections.
     * @param minorUnits The number of minor tick sections for each major tick section.
     */
    setTicks (majorUnits : number , minorUnits : number ) : void ;
    /**
     * Sets the bottom title of the gauge.
     * The top title is displayed below the center.
     * @param text The bottom title text.
     */
    setTitleBottom (text : string ) : void ;
    /**
     * Sets the font for displaying top and bottom titles.
     * @param font The font for titles.
     */
    setTitleFont (font : ಠ_ಠ.clutz.module$exports$goog$graphics$Font | null ) : void ;
    /**
     * Sets the top title of the gauge.
     * The top title is displayed above the center.
     * @param text The top title text.
     */
    setTitleTop (text : string ) : void ;
    /**
     * Sets the current value range displayed by the gauge.
     * @param value The current value for the gauge. This value determines the position of the needle of the gauge.
     * @param opt_formattedValue The string value to show in the gauge. If not specified, no string value will be displayed.
     */
    setValue (value : number , opt_formattedValue ? : string ) : void ;
    /**
     * Sets the font for displaying the formatted value.
     * @param font The font for displaying the value.
     */
    setValueFont (font : ಠ_ಠ.clutz.module$exports$goog$graphics$Font | null ) : void ;
  }
}
declare namespace ಠ_ಠ.clutz {
  export import module$exports$goog$ui$Gauge = ಠ_ಠ.clutz.module$contents$goog$ui$Gauge_Gauge ;
}
