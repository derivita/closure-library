//!! generated by clutz.
// Generated from ui/charpicker.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Character Picker Class. This widget can be used to pick any Unicode
   * character by traversing a category-subcategory structure or by inputing its
   * hex value.
   *
   * See charpicker.html demo for example usage.
   */
  class CharPicker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_CharPicker : any;
    /**
     * Character Picker Class. This widget can be used to pick any Unicode
     * character by traversing a category-subcategory structure or by inputing its
     * hex value.
     *
     * See charpicker.html demo for example usage.
     * @param charPickerData Category names and charlist.
     * @param charNameFetcher Object which fetches the names of the characters that are shown in the widget. These names may be stored locally or come from an external source.
     * @param opt_recents List of characters to be displayed in resently selected characters area.
     * @param opt_initCategory Sequence number of initial category.
     * @param opt_initSubcategory Sequence number of initial subcategory.
     * @param opt_rowCount Number of rows in the grid.
     * @param opt_columnCount Number of columns in the grid.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (charPickerData : ಠ_ಠ.clutz.goog.i18n.CharPickerData | null , charNameFetcher : ಠ_ಠ.clutz.goog.i18n.uChar.NameFetcher , opt_recents ? : string [] | null , opt_initCategory ? : number , opt_initSubcategory ? : number , opt_rowCount ? : number , opt_columnCount ? : number , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Category index used to index the data tables.
     */
    category : number ;
    createDom ( ) : void ;
    decorateInternal (element ? : any ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Gets the user inputed unicode character.
     */
    getInputChar ( ) : string ;
    /**
     * Gets the list of characters user selected recently.
     */
    getRecentChars ( ) : string [] | null ;
    /**
     * Gets the last selected character.
     */
    getSelectedChar ( ) : string | null ;
    itempos : number ;
    items : string [] ;
  }
}
declare module 'goog:goog.ui.CharPicker' {
  import CharPicker = ಠ_ಠ.clutz.goog.ui.CharPicker;
  export default CharPicker;
}
