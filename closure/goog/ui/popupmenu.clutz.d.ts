//!! generated by clutz.
// Generated from ui/popupmenu.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A basic menu class.
   */
  class PopupMenu extends ಠ_ಠ.clutz.goog.ui.Menu {
    private noStructuralTyping_goog_ui_PopupMenu : any;
    /**
     * A basic menu class.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_renderer Renderer used to render or decorate the container; defaults to {@link goog.ui.MenuRenderer}.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.MenuRenderer | null ) ;
    /**
     * Attaches the menu to a new popup position and anchor element.  A menu can
     * only be attached to an element once, since attaching the same menu for
     * multiple positions doesn't make sense.
     * @param element Element whose click event should trigger the menu.
     * @param opt_targetCorner Corner of the target that the menu should be anchored to.
     * @param opt_menuCorner Corner of the menu that should be anchored.
     * @param opt_contextMenu Whether the menu should show on {@link goog.events.EventType.CONTEXTMENU} events, false if it should show on {@link goog.events.EventType.MOUSEDOWN} events. Default is MOUSEDOWN.
     * @param opt_margin Margin for the popup used in positioning algorithms.
     */
    attach (element : GlobalElement | null , opt_targetCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_menuCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_contextMenu ? : boolean , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null ) : void ;
    /**
     * Creates an object describing how the popup menu should be attached to the
     * anchoring element based on the given parameters. The created object is
     * stored, keyed by `element` and is retrievable later by invoking
     * {@link #getAttachTarget(element)} at a later point.
     *
     * Subclass may add more properties to the returned object, as needed.
     * @param element Element whose click event should trigger the menu.
     * @param opt_targetCorner Corner of the target that the menu should be anchored to.
     * @param opt_menuCorner Corner of the menu that should be anchored.
     * @param opt_contextMenu Whether the menu should show on {@link goog.events.EventType.CONTEXTMENU} events, false if it should show on {@link goog.events.EventType.MOUSEDOWN} events. Default is MOUSEDOWN.
     * @param opt_margin Margin for the popup used in positioning algorithms.
     */
    protected createAttachTarget (element : GlobalElement | null , opt_targetCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_menuCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_contextMenu ? : boolean , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null ) : GlobalObject | null ;
    /**
     * Decorate an existing HTML structure with the menu. Menu items will be
     * constructed from elements with classname 'goog-menuitem', separators will be
     * made from HR elements.
     * @param element Element to decorate.
     */
    decorateInternal (element : GlobalElement | null ) : void ;
    /**
     * Detaches a menu from a given element.
     * @param element Element whose click event should trigger the menu.
     */
    detach (element : GlobalElement | null ) : void ;
    detachAll ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    /**
     * Returns the object describing how the popup menu should be attach to given
     * element or `null`. The object is created and the association is formed
     * when {@link #attach} is invoked.
     * @param element DOM element.
     */
    protected getAttachTarget (element : GlobalElement | null ) : GlobalObject | null ;
    getAttachedElement ( ) : GlobalElement | null ;
    /**
     * Gets whether the browser context menu will override the menu activation when
     * the shift key is held down.
     */
    getShiftOverride ( ) : boolean ;
    /**
     * Gets whether the menu is in toggle mode
     */
    getToggleMode ( ) : boolean ;
    /**
     * Handles the key event target losing focus.
     * @param e The browser event.
     */
    handleBlur (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    hide ( ) : void ;
    protected isAttachTarget (element : GlobalElement | null ) : boolean ;
    /**
     * Returns whether the menu is currently visible or was visible within about
     * 150 ms ago.  This stops the menu toggling back on if the toggleMode == false.
     */
    isOrWasRecentlyVisible ( ) : boolean ;
    /**
     * Handles click events that propagate to the document.
     * @param e The browser event.
     */
    protected onDocClick (e : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : void ;
    /**
     * Sets whether the browser context menu will override the menu activation when
     * the shift key is held down.
     */
    setShiftOverride (shiftOverride : boolean ) : void ;
    /**
     * Sets whether the menu should toggle if it is already open.  For context
     * menus this should be false, for toolbar menus it makes more sense to be true.
     * @param toggle The new toggle mode.
     */
    setToggleMode (toggle : boolean ) : void ;
    /**
     * Shows the menu immediately at the given client coordinates.
     * @param x The client-X associated with the show event.
     * @param y The client-Y associated with the show event.
     * @param opt_menuCorner Corner of the menu that should be anchored.
     */
    showAt (x : number , y : number , opt_menuCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null ) : void ;
    /**
     * Shows the menu immediately attached to the given element
     * @param element The element to show at.
     * @param targetCorner The corner of the target to anchor to.
     * @param opt_menuCorner Corner of the menu that should be anchored.
     */
    showAtElement (element : GlobalElement | null , targetCorner : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_menuCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null ) : void ;
    /**
     * Show the menu at a given attached target.
     * @param target Popup target.
     * @param x The client-X associated with the show event.
     * @param y The client-Y associated with the show event.
     */
    protected showMenu (target : GlobalObject , x : number , y : number ) : void ;
    /**
     * Show the menu using given positioning object.
     * @param position The positioning instance.
     * @param opt_menuCorner The corner of the menu to be positioned.
     * @param opt_margin A margin specified in pixels.
     * @param opt_anchor The element which acts as visual anchor for this menu.
     */
    showWithPosition (position : ಠ_ಠ.clutz.goog.positioning.AbstractPosition | null , opt_menuCorner ? : ಠ_ಠ.clutz.goog.positioning.Corner | null , opt_margin ? : ಠ_ಠ.clutz.goog.math.Box | null , opt_anchor ? : GlobalElement | null ) : void ;
    /**
     * Used to stop the menu toggling back on if the toggleMode == false.
     */
    protected wasRecentlyHidden ( ) : boolean ;
  }
}
declare module 'goog:goog.ui.PopupMenu' {
  import PopupMenu = ಠ_ಠ.clutz.goog.ui.PopupMenu;
  export default PopupMenu;
}
