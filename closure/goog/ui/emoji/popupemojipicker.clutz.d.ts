//!! generated by clutz.
// Generated from ui/emoji/popupemojipicker.js
declare namespace ಠ_ಠ.clutz.goog.ui.emoji {
  /**
   * Constructs a popup emoji picker widget.
   */
  class PopupEmojiPicker extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_emoji_PopupEmojiPicker : any;
    /**
     * Constructs a popup emoji picker widget.
     * @param defaultImgUrl Url of the img that should be used to fill up the cells in the emoji table, to prevent jittering. Should be the same size as the emoji.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (defaultImgUrl : string , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds a group of emoji to the picker.
     * @param title Title for the group.
     * @param emojiGroup A new group of emoji to be added. Each internal array contains [emojiUrl, emojiId].
     */
    addEmojiGroup (title : string | GlobalElement | null , emojiGroup : ( any [] | null ) [] | null ) : void ;
    /**
     * Attaches the popup emoji picker to an element.
     * @param element The element to attach to.
     */
    attach (element : GlobalElement | null ) : void ;
    createDom ( ) : void ;
    /**
     * Detatches the popup emoji picker from an element.
     * @param element The element to detach from.
     */
    detach (element : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns whether the Popup dismisses itself when the user clicks outside of
     * it.
     */
    getAutoHide ( ) : boolean ;
    /**
     * Returns the region inside which the Popup dismisses itself when the user
     * clicks, or null if it was not set. Null indicates the entire document is
     * the autohide region.
     */
    getAutoHideRegion ( ) : GlobalElement | null ;
    getEmojiPicker ( ) : ಠ_ಠ.clutz.goog.ui.emoji.EmojiPicker | null ;
    getLastTarget ( ) : GlobalElement | null ;
    /**
     * Returns the number of emoji groups in this picker.
     */
    getNumEmojiGroups ( ) : number ;
    /**
     * Returns the {@link goog.ui.PopupBase} from this picker. Returns null if the
     * popup has not yet been created.
     *
     * NOTE: This should *ONLY* be called from tests. If called before createDom(),
     * this should return null.
     */
    getPopup ( ) : ಠ_ಠ.clutz.goog.ui.PopupBase | null ;
    getSelectedEmoji ( ) : ಠ_ಠ.clutz.goog.ui.emoji.Emoji | null ;
    /**
     * Gets whether the emojipicker is in toggle mode
     */
    getToggleMode ( ) : boolean ;
    loadImages ( ) : void ;
    /**
     * Sets whether the Popup dismisses itself when the user clicks outside of it -
     * must be called after the Popup has been created (in createDom()),
     * otherwise it does nothing.
     * @param autoHide Whether to autohide on an external click.
     */
    setAutoHide (autoHide : boolean ) : void ;
    /**
     * Sets the region inside which the Popup dismisses itself when the user
     * clicks - must be called after the Popup has been created (in createDom()),
     * otherwise it does nothing.
     * @param element The DOM element for autohide.
     */
    setAutoHideRegion (element : GlobalElement | null ) : void ;
    /**
     * Sets whether loading of images should be delayed until after dom creation.
     * Thus, this function must be called before {@link #createDom}. If set to true,
     * the client must call {@link #loadImages} when they wish the images to be
     * loaded.
     * @param shouldDelay Whether to delay loading the images.
     */
    setDelayedLoad (shouldDelay : boolean ) : void ;
    /**
     * Sets whether the emoji picker can accept focus.
     * @param focusable Whether the emoji picker should accept focus.
     */
    setFocusable (focusable : boolean ) : void ;
    /**
     * Sets the number of columns per grid in the emoji picker. This should only be
     * called before the picker has been rendered.
     * @param numCols Number of columns per grid.
     */
    setNumColumns (numCols : number ) : void ;
    /**
     * Sets the number of rows per grid in the emoji picker. This should only be
     * called before the picker has been rendered.
     * @param numRows Number of rows per grid.
     */
    setNumRows (numRows : number ) : void ;
    /**
     * Sets the progressive rendering aspect of this emojipicker. Must be called
     * before createDom to have an effect.
     * @param progressive Whether the picker should render progressively.
     */
    setProgressiveRender (progressive : boolean ) : void ;
    /**
     * Sets the location of the tabs in relation to the emoji grids. This should
     * only be called before the picker has been rendered.
     * @param tabLocation The location of the tabs.
     */
    setTabLocation (tabLocation : ಠ_ಠ.clutz.goog.ui.TabPane.TabLocation | null ) : void ;
    /**
     * Sets whether the emoji picker should toggle if it is already open.
     * @param toggle The toggle mode to use.
     */
    setToggleMode (toggle : boolean ) : void ;
    /**
     * Sets the URL prefix for the emoji URLs.
     * @param urlPrefix Prefix that should be prepended to all URLs.
     */
    setUrlPrefix (urlPrefix : string ) : void ;
  }
}
declare module 'goog:goog.ui.emoji.PopupEmojiPicker' {
  import PopupEmojiPicker = ಠ_ಠ.clutz.goog.ui.emoji.PopupEmojiPicker;
  export default PopupEmojiPicker;
}
