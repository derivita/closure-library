//!! generated by clutz.
// Generated from ui/idletimer.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Event target that will give notification of state changes between active and
   * idle. This class is designed to require few resources while the user is
   * active.
   */
  class IdleTimer extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_IdleTimer : any;
    /**
     * Event target that will give notification of state changes between active and
     * idle. This class is designed to require few resources while the user is
     * active.
     * @param idleThreshold Amount of time in ms at which we consider the user has gone idle.
     * @param opt_activityMonitor The activity monitor keeping track of user interaction. Defaults to a default-constructed activity monitor. If a default activity monitor is used then this class will dispose of it. If an activity monitor is passed in then the caller remains responsible for disposing of it.
     */
    constructor (idleThreshold : number , opt_activityMonitor ? : ಠ_ಠ.clutz.goog.ui.ActivityMonitor | null ) ;
    disposeInternal ( ) : void ;
    getActivityMonitor ( ) : ಠ_ಠ.clutz.goog.ui.ActivityMonitor | null ;
    getIdleThreshold ( ) : number ;
    /**
     * Returns true if there has been no user action for at least the specified
     * interval, and false otherwise
     */
    isIdle ( ) : boolean ;
  }
}
// Generated from ui/idletimer.js
declare namespace ಠ_ಠ.clutz.goog.ui.IdleTimer {
  /**
   * Event constants for the idle timer event target
   */
  enum Event {
    BECOME_ACTIVE = 'active' ,
    BECOME_IDLE = 'idle' ,
  }
}
declare module 'goog:goog.ui.IdleTimer' {
  import IdleTimer = ಠ_ಠ.clutz.goog.ui.IdleTimer;
  export default IdleTimer;
}
