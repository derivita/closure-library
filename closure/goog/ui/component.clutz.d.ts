//!! generated by clutz.
// Generated from ui/component.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Default implementation of UI component.
   */
  class Component extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_Component : any;
    /**
     * Default implementation of UI component.
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * DomHelper used to interact with the document, allowing components to be
     * created in a different window.
     */
    protected dom_ : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Adds the specified component as the last child of this component.  See
     * {@link goog.ui.Component#addChildAt} for detailed semantics.
     * @param child The new child component.
     * @param opt_render If true, the child component will be rendered into the parent.
     */
    addChild (child : ಠ_ಠ.clutz.goog.ui.Component | null , opt_render ? : boolean ) : void ;
    /**
     * Adds the specified component as a child of this component at the given
     * 0-based index.
     *
     * Both `addChild` and `addChildAt` assume the following contract
     * between parent and child components:
     * <ul>
     * <li>the child component's element must be a descendant of the parent
     * component's element, and
     * <li>the DOM state of the child component must be consistent with the DOM
     * state of the parent component (see `isInDocument`) in the
     * steady state -- the exception is to addChildAt(child, i, false) and
     * then immediately decorate/render the child.
     * </ul>
     *
     * In particular, `parent.addChild(child)` will throw an error if the
     * child component is already in the document, but the parent isn't.
     *
     * Clients of this API may call `addChild` and `addChildAt` with
     * `opt_render` set to true.  If `opt_render` is true, calling these
     * methods will automatically render the child component's element into the
     * parent component's element. If the parent does not yet have an element, then
     * `createDom` will automatically be invoked on the parent before
     * rendering the child.
     *
     * Invoking {@code parent.addChild(child, true)} will throw an error if the
     * child component is already in the document, regardless of the parent's DOM
     * state.
     *
     * If `opt_render` is true and the parent component is not already
     * in the document, `enterDocument` will not be called on this component
     * at this point.
     *
     * Finally, this method also throws an error if the new child already has a
     * different parent, or the given index is out of bounds.
     * @param child The new child component.
     * @param index 0-based index at which the new child component is to be added; must be between 0 and the current child count (inclusive).
     * @param opt_render If true, the child component will be rendered into the parent.
     */
    addChildAt (child : ಠ_ಠ.clutz.goog.ui.Component | null , index : number , opt_render ? : boolean ) : void ;
    /**
     * Determines if a given element can be decorated by this type of component.
     * This method should be overridden by inheriting objects.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    createDom ( ) : void ;
    /**
     * Decorates the element for the UI component. If the element is in the
     * document, the enterDocument method will be called.
     *
     * If goog.ui.Component.ALLOW_DETACHED_DECORATION is false, the caller must
     * pass an element that is in the document.
     * @param element Element to decorate.
     */
    decorate (element : GlobalElement | null ) : void ;
    /**
     * Actually decorates the element. Should be overridden by inheriting objects.
     * This method can assume there are checks to ensure the component has not
     * already been rendered have occurred and that enter document will be called
     * afterwards. This method is considered protected.
     * @param element Element to decorate.
     */
    protected decorateInternal (element : GlobalElement | null ) : void ;
    /**
     * Disposes of the component.  Calls `exitDocument`, which is expected to
     * remove event handlers and clean up the component.  Propagates the call to
     * the component's children, if any. Removes the component's DOM from the
     * document unless it was decorated.
     */
    protected disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Calls the given function on each of this component's children in order.  If
     * `opt_obj` is provided, it will be used as the 'this' object in the
     * function when called.  The function should take two arguments:  the child
     * component and its 0-based index.  The return value is ignored.
     * @param f The function to call for every child component; should take 2 arguments (the child and its index).
     * @param opt_obj Used as the 'this' object in f when called.
     */
    forEachChild < T = any > (f : (this : T , a : any , b : number ) => any , opt_obj ? : T ) : void ;
    /**
     * Returns the child with the given ID, or null if no such child exists.
     * @param id Child component ID.
     */
    getChild (id : string ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Returns the child at the given index, or null if the index is out of bounds.
     * @param index 0-based index.
     */
    getChildAt (index : number ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Returns the number of children of this component.
     */
    getChildCount ( ) : number ;
    /**
     * Returns an array containing the IDs of the children of this component, or an
     * empty array if the component has no children.
     */
    getChildIds ( ) : string [] ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the component itself hasn't been rendered yet.  This default
     * implementation returns the component's root element.  Subclasses with
     * complex DOM structures must override this method.
     */
    getContentElement ( ) : GlobalElement | null ;
    /**
     * Returns the dom helper that is being used on this component.
     */
    getDomHelper ( ) : ಠ_ಠ.clutz.goog.dom.DomHelper ;
    /**
     * Gets the component's element.
     */
    getElement ( ) : GlobalElement | null ;
    /**
     * Returns the first element in this component's DOM with the provided
     * className.
     * @param className The name of the class to look for.
     */
    getElementByClass (className : string ) : GlobalElement | null ;
    /**
     * Helper function for returning an element in the document with a unique id
     * generated using makeId().
     * @param idFragment The partial id.
     */
    getElementByFragment (idFragment : string ) : GlobalElement | null ;
    /**
     * Gets the component's element. This differs from getElement in that
     * it assumes that the element exists (i.e. the component has been
     * rendered/decorated) and will cause an assertion error otherwise (if
     * assertion is enabled).
     */
    getElementStrict ( ) : GlobalElement ;
    /**
     * Returns an array of all the elements in this component's DOM with the
     * provided className.
     * @param className The name of the class to look for.
     */
    getElementsByClass (className : string ) : ArrayLike < GlobalElement > ;
    /**
     * Helper function for returning the fragment portion of an id generated using
     * makeId().
     * @param id Id generated with makeId().
     */
    getFragmentFromId (id : string ) : string ;
    /**
     * Returns the event handler for this component, lazily created the first time
     * this method is called.
     */
    protected getHandler < T = any > (this : T ) : ಠ_ಠ.clutz.goog.events.EventHandler < T > ;
    /**
     * Gets the unique ID for the instance of this component.  If the instance
     * doesn't already have an ID, generates one on the fly.
     */
    getId ( ) : string ;
    /**
     * Returns the model associated with the UI component.
     */
    getModel ( ) : any ;
    /**
     * Returns the component's parent, if any.
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Similar to `getElementByClass` except that it expects the
     * element to be present in the dom thus returning a required value. Otherwise,
     * will assert.
     * @param className The name of the class to look for.
     */
    getRequiredElementByClass (className : string ) : GlobalElement ;
    /**
     * Returns true if the component has children.
     */
    hasChildren ( ) : boolean ;
    /**
     * Returns the 0-based index of the given child component, or -1 if no such
     * child is found.
     * @param child The child component.
     */
    indexOfChild (child : ಠ_ಠ.clutz.goog.ui.Component | null ) : number ;
    /**
     * Determines whether the component has been added to the document.
     */
    isInDocument ( ) : boolean ;
    /**
     * Returns true if the component is rendered right-to-left, false otherwise.
     * The first time this function is invoked, the right-to-left rendering property
     * is set if it has not been already.
     */
    isRightToLeft ( ) : boolean ;
    /**
     * Helper function for subclasses that gets a unique id for a given fragment,
     * this can be used by components to generate unique string ids for DOM
     * elements.
     * @param idFragment A partial id.
     */
    makeId (idFragment : string ) : string ;
    /**
     * Makes a collection of ids.  This is a convenience method for makeId.  The
     * object's values are the id fragments and the new values are the generated
     * ids.  The key will remain the same.
     * @param object The object that will be used to create the ids.
     */
    makeIds (object : GlobalObject | null ) : { [ key: string ]: string } ;
    /**
     * Returns whether this component should listen for PointerEvent types rather
     * than MouseEvent types. This allows supporting drag gestures for touch/stylus
     * input.
     */
    pointerEventsEnabled ( ) : boolean ;
    /**
     * Removes the given child from this component, and returns it.  Throws an error
     * if the argument is invalid or if the specified child isn't found in the
     * parent component.  The argument can either be a string (interpreted as the
     * ID of the child component to remove) or the child component itself.
     *
     * If `opt_unrender` is true, calls {@link goog.ui.component#exitDocument}
     * on the removed child, and subsequently detaches the child's DOM from the
     * document.  Otherwise it is the caller's responsibility to clean up the child
     * component's DOM.
     * @param child The ID of the child to remove, or the child component itself.
     * @param opt_unrender If true, calls `exitDocument` on the removed child component, and detaches its DOM from the document.
     */
    removeChild (child : string | ಠ_ಠ.clutz.goog.ui.Component | null , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Removes the child at the given index from this component, and returns it.
     * Throws an error if the argument is out of bounds, or if the specified child
     * isn't found in the parent.  See {@link goog.ui.Component#removeChild} for
     * detailed semantics.
     * @param index 0-based index of the child to remove.
     * @param opt_unrender If true, calls `exitDocument` on the removed child component, and detaches its DOM from the document.
     */
    removeChildAt (index : number , opt_unrender ? : boolean ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Removes every child component attached to this one and returns them.
     * @param opt_unrender If true, calls {@link #exitDocument} on the removed child components, and detaches their DOM from the document.
     */
    removeChildren (opt_unrender ? : boolean ) : ( ಠ_ಠ.clutz.goog.ui.Component | null ) [] ;
    /**
     * Renders the component.  If a parent element is supplied, the component's
     * element will be appended to it.  If there is no optional parent element and
     * the element doesn't have a parentNode then it will be appended to the
     * document body.
     *
     * If this component has a parent component, and the parent component is
     * not in the document already, then this will not call `enterDocument`
     * on this component.
     *
     * Throws an Error if the component is already rendered.
     * @param opt_parentElement Optional parent element to render the component into.
     */
    render (opt_parentElement ? : GlobalElement | null ) : void ;
    /**
     * Renders the component before another element. The other element should be in
     * the document already.
     *
     * Throws an Error if the component is already rendered.
     * @param sibling Node to render the component before.
     */
    renderBefore (sibling : Node | null ) : void ;
    /**
     * Sets the component's root element to the given element.  Considered
     * protected and final.
     *
     * This should generally only be called during createDom. Setting the element
     * does not actually change which element is rendered, only the element that is
     * associated with this UI component.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param element Root element for the component.
     */
    setElementInternal (element : GlobalElement | null ) : void ;
    /**
     * Assigns an ID to this component instance.  It is the caller's responsibility
     * to guarantee that the ID is unique.  If the component is a child of a parent
     * component, then the parent component's child index is updated to reflect the
     * new ID; this may throw an error if the parent already has a child with an ID
     * that conflicts with the new ID.
     * @param id Unique component ID.
     */
    setId (id : string ) : void ;
    /**
     * Sets the model associated with the UI component.
     * @param obj The model.
     */
    setModel (obj : any ) : void ;
    /**
     * Sets the parent of this component to use for event bubbling.  Throws an error
     * if the component already has a parent or if an attempt is made to add a
     * component to itself as a child.  Callers must use `removeChild`
     * or `removeChildAt` to remove components from their containers before
     * calling this method.
     * @param parent The parent component.
     */
    setParent (parent : ಠ_ಠ.clutz.goog.ui.Component | null ) : void ;
    /**
     * Overrides {@link goog.events.EventTarget#setParentEventTarget} to throw an
     * error if the parent component is set, and the argument is not the parent.
     */
    setParentEventTarget (parent ? : any ) : void ;
    /**
     * Indicates whether this component should listen for PointerEvent types rather
     * than MouseEvent types. This allows supporting drag gestures for touch/stylus
     * input. Must be called before enterDocument to listen for the correct event
     * types.
     */
    setPointerEventsEnabled (enable : boolean ) : void ;
    /**
     * Set is right-to-left. This function should be used if the component needs
     * to know the rendering direction during dom creation (i.e. before
     * {@link #enterDocument} is called and is right-to-left is set).
     * @param rightToLeft Whether the component is rendered right-to-left.
     */
    setRightToLeft (rightToLeft : boolean ) : void ;
    wasDecorated ( ) : boolean ;
    static ALLOW_DETACHED_DECORATION : boolean ;
    static DEFAULT_BIDI_DIR : number ;
    /**
     * Static helper method; returns the type of event components are expected to
     * dispatch when transitioning to or from the given state.
     * @param state State to/from which the component is transitioning.
     * @param isEntering Whether the component is entering or leaving the state.
     */
    static getStateTransitionEvent (state : ಠ_ಠ.clutz.goog.ui.Component.State , isEntering : boolean ) : ಠ_ಠ.clutz.goog.ui.Component.EventType ;
    /**
     * Set the default right-to-left value. This causes all component's created from
     * this point forward to have the given value. This is useful for cases where
     * a given page is always in one directionality, avoiding unnecessary
     * right to left determinations.
     * @param rightToLeft Whether the components should be rendered right-to-left. Null iff components should determine their directionality.
     */
    static setDefaultRightToLeft (rightToLeft : boolean | null ) : void ;
  }
}
declare module 'goog:goog.ui.Component' {
  import Component = ಠ_ಠ.clutz.goog.ui.Component;
  export default Component;
}
// Generated from ui/component.js
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Errors thrown by the component.
   */
  /**
   * Errors thrown by the component.
   */
  enum Error {
    ALREADY_RENDERED = 'Component already rendered' ,
    CHILD_INDEX_OUT_OF_BOUNDS = 'Child component index out of bounds' ,
    DECORATE_INVALID = 'Invalid element to decorate' ,
    NOT_IN_DOCUMENT = 'Operation not supported while component is not in document' ,
    NOT_OUR_CHILD = 'Child is not in parent component' ,
    NOT_SUPPORTED = 'Method not supported' ,
    PARENT_UNABLE_TO_BE_SET = 'Unable to set parent component' ,
    STATE_INVALID = 'Invalid component state' ,
  }
}
declare module 'goog:goog.ui.Component.Error' {
  import Error = ಠ_ಠ.clutz.goog.ui.Component.Error;
  export default Error;
}
// Generated from ui/component.js
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Common events fired by components so that event propagation is useful.  Not
   * all components are expected to dispatch or listen for all event types.
   * Events dispatched before a state transition should be cancelable to prevent
   * the corresponding state change.
   */
  /**
   * Common events fired by components so that event propagation is useful.  Not
   * all components are expected to dispatch or listen for all event types.
   * Events dispatched before a state transition should be cancelable to prevent
   * the corresponding state change.
   */
  enum EventType {
    ACTION = 'action' ,
    ACTIVATE = 'activate' ,
    BEFORE_SHOW = 'beforeshow' ,
    BLUR = 'blur' ,
    CHANGE = 'change' ,
    CHECK = 'check' ,
    CLOSE = 'close' ,
    DEACTIVATE = 'deactivate' ,
    DISABLE = 'disable' ,
    ENABLE = 'enable' ,
    ENTER = 'enter' ,
    FOCUS = 'focus' ,
    HIDE = 'hide' ,
    HIGHLIGHT = 'highlight' ,
    LEAVE = 'leave' ,
    OPEN = 'open' ,
    SELECT = 'select' ,
    SHOW = 'show' ,
    UNCHECK = 'uncheck' ,
    UNHIGHLIGHT = 'unhighlight' ,
    UNSELECT = 'unselect' ,
  }
}
declare module 'goog:goog.ui.Component.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.Component.EventType;
  export default EventType;
}
// Generated from ui/component.js
declare namespace ಠ_ಠ.clutz.goog.ui.Component {
  /**
   * Common component states.  Components may have distinct appearance depending
   * on what state(s) apply to them.  Not all components are expected to support
   * all states.
   */
  /**
   * Common component states.  Components may have distinct appearance depending
   * on what state(s) apply to them.  Not all components are expected to support
   * all states.
   */
  enum State {
    ACTIVE = 4.0 ,
    ALL = 255.0 ,
    CHECKED = 16.0 ,
    DISABLED = 1.0 ,
    FOCUSED = 32.0 ,
    HOVER = 2.0 ,
    OPENED = 64.0 ,
    SELECTED = 8.0 ,
  }
}
declare module 'goog:goog.ui.Component.State' {
  import State = ಠ_ಠ.clutz.goog.ui.Component.State;
  export default State;
}
