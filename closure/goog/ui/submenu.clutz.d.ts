//!! generated by clutz.
// Generated from ui/submenu.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Class representing a submenu that can be added as an item to other menus.
   */
  class SubMenu extends ಠ_ಠ.clutz.goog.ui.MenuItem {
    private noStructuralTyping_goog_ui_SubMenu : any;
    /**
     * Class representing a submenu that can be added as an item to other menus.
     * @param content Text caption or DOM structure to display as the content of the submenu (use to add icons or styling to menus).
     * @param opt_model Data/model associated with the menu item.
     * @param opt_domHelper Optional dom helper used for dom interactions.
     * @param opt_renderer Renderer used to render or decorate the component; defaults to {@link goog.ui.SubMenuRenderer}.
     */
    constructor (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_model ? : any , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.MenuItemRenderer | null ) ;
    /**
     * Adds a new menu item at the end of the menu.
     * @param item Menu item to add to the menu.
     */
    addItem (item : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator ) : void ;
    /**
     * Adds a new menu item at a specific index in the menu.
     * @param item Menu item to add to the menu.
     * @param n Index at which to insert the menu item.
     */
    addItemAt (item : ಠ_ಠ.clutz.goog.ui.MenuHeader | null | ಠ_ಠ.clutz.goog.ui.MenuItem | ಠ_ಠ.clutz.goog.ui.MenuSeparator , n : number ) : void ;
    clearTimers ( ) : void ;
    /**
     * Returns true if the provided element is to be considered inside the menu for
     * purposes such as dismissing the menu on an event.  This is so submenus can
     * make use of elements outside their own DOM.
     * @param element The element to test for.
     */
    containsElement (element : GlobalElement | null ) : boolean ;
    dismissSubMenu ( ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    /**
     * Returns a reference to the menu item at a given index.
     * @param n Index of menu item.
     */
    getItemAt (n : number ) : ಠ_ಠ.clutz.goog.ui.Component | null ;
    /**
     * Returns the number of items in the sub menu (including separators).
     */
    getItemCount ( ) : number ;
    /**
     * Returns the menu items contained in the sub menu.
     */
    getItems ( ) : ಠ_ಠ.clutz.goog.ui.MenuItem [] ;
    /**
     * Gets a reference to the submenu's actual menu.
     */
    getMenu ( ) : ಠ_ಠ.clutz.goog.ui.Menu ;
    /**
     * Returns the delay before opening or closing the menu in milliseconds.
     */
    protected getMenuDelay ( ) : number ;
    /**
     * Handles a key event that is passed to the menu item from its parent because
     * it is highlighted.  If the arrow keys or enter key is pressed the sub menu
     * takes control and delegates further key events to its menu until it is
     * dismissed.
     * @param e A key event.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    handleMouseOver (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Determines whether the submenu is aligned at the end of the parent menu.
     */
    isAlignedToEnd ( ) : boolean ;
    isPositionAdjustable ( ) : boolean ;
    /**
     * Overrides the default mouseup event handler, so that the ACTION isn't
     * dispatched for the submenu itself, instead the submenu is shown instantly.
     * @param e The browser event.
     */
    performActionInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    positionSubMenu ( ) : void ;
    /**
     * Removes an item from the menu and disposes it.
     * @param item The menu item to remove.
     */
    removeItem (item : ಠ_ಠ.clutz.goog.ui.MenuItem | null ) : void ;
    /**
     * Removes a menu item at a given index in the menu and disposes it.
     * @param n Index of item.
     */
    removeItemAt (n : number ) : void ;
    /**
     * Sets whether the submenu is aligned at the end of the parent menu.
     * @param alignToEnd True to align to end, false to align to start.
     */
    setAlignToEnd (alignToEnd : boolean ) : void ;
    setHighlighted (highlight : boolean , opt_btnPressed ? : boolean ) : void ;
    /**
     * Sets the submenu to a specific menu.
     * @param menu The menu to show when this item is selected.
     * @param opt_internal Whether this menu is an "internal" menu, and should be disposed of when this object is disposed of.
     */
    setMenu (menu : ಠ_ಠ.clutz.goog.ui.Menu | null , opt_internal ? : boolean ) : void ;
    setPositionAdjustable (isAdjustable : boolean ) : void ;
    /**
     * Sets the menu item to be visible or invisible.
     * @param visible Whether to show or hide the component.
     * @param opt_force If true, doesn't check whether the component already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
    showSubMenu ( ) : void ;
    /**
     * The delay before opening the sub menu in milliseconds.
     */
    static MENU_DELAY_MS : number ;
  }
}
declare module 'goog:goog.ui.SubMenu' {
  import SubMenu = ಠ_ಠ.clutz.goog.ui.SubMenu;
  export default SubMenu;
}
