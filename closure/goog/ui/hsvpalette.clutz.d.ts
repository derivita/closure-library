//!! generated by clutz.
// Generated from ui/hsvpalette.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Creates an HSV palette. Allows a user to select the hue, saturation and
   * value/brightness.
   */
  class HsvPalette extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_HsvPalette : any;
    /**
     * Creates an HSV palette. Allows a user to select the hue, saturation and
     * value/brightness.
     * @param opt_domHelper Optional DOM helper.
     * @param opt_color Optional initial color (default is red).
     * @param opt_class Optional base for creating classnames (default is goog.getCssName('goog-hsv-palette')).
     */
    constructor (opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_color ? : string , opt_class ? : string ) ;
    /**
     * The base class name for the component.
     */
    protected className : string ;
    /**
     * HsvPalettes cannot be used to decorate pre-existing html, since the
     * structure they build is fairly complicated.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Hex representation of the color.
     */
    protected color : string ;
    createDom ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Renders the color picker inside the provided element. This will override the
     * current content of the element.
     */
    enterDocument ( ) : void ;
    /**
     * Alpha transparency of the currently selected color, in [0, 1].
     * For the HSV palette this always returns 1. The HSVA palette overrides
     * this method.
     */
    getAlpha ( ) : number ;
    /**
     * Gets the color that is currently selected in this color picker.
     */
    getColor ( ) : string ;
    /**
     * Handles input events on the hex value input field.
     * @param e Event object.
     */
    protected handleInput (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mousedown events on palette UI elements.
     * @param e Event object.
     */
    protected handleMouseDown (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouseup events on the document, which ends a drag operation.
     * @param e Event object.
     */
    protected handleMouseUp (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * DOM element representing the hex color input text field.
     */
    protected inputElement : GlobalElement | null ;
    /**
     * Listener key for the mousemove event (during a drag operation).
     */
    protected mouseMoveListener : ಠ_ಠ.clutz.goog.events.Key | null ;
    /**
     * Listener key for the mouseup event (during a drag operation).
     */
    protected mouseUpListener : ಠ_ಠ.clutz.goog.events.Key | null ;
    /**
     * Sets which color is selected and update the UI.
     * @param color The selected color.
     * @param opt_disableDispatchEvent (optional) Whether the event should not be fired.
     */
    setColor (color : string , opt_disableDispatchEvent ? : boolean ) : void ;
    /**
     * Sets which color is selected.
     * @param color The selected color.
     */
    protected setColorInternal (color : string ) : void ;
    /**
     * Alters the hue, saturation, and/or value of the currently selected color and
     * updates the UI.
     * @param opt_hue (optional) hue in [0, 1].
     * @param opt_saturation (optional) saturation in [0, 1].
     * @param opt_value (optional) value in [0, 255].
     */
    setHsv (opt_hue ? : number | null , opt_saturation ? : number | null , opt_value ? : number | null ) : void ;
    /**
     * DOM element representing the current color swatch.
     */
    protected swatchElement : GlobalElement | null ;
    /**
     * Updates the text entry field.
     */
    protected updateInput ( ) : void ;
    /**
     * Updates the position, opacity, and styles for the UI representation of the
     * palette.
     */
    protected updateUi ( ) : void ;
    /**
     * DOM element representing the value background image.
     */
    protected valueBackgroundImageElement : HTMLElement | null ;
  }
}
declare module 'goog:goog.ui.HsvPalette' {
  import HsvPalette = ಠ_ಠ.clutz.goog.ui.HsvPalette;
  export default HsvPalette;
}
