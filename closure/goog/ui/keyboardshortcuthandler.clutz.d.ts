//!! generated by clutz.
// Generated from ui/keyboardshortcuthandler.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Component for handling keyboard shortcuts. A shortcut is registered and bound
   * to a specific identifier. Once the shortcut is triggered an event is fired
   * with the identifier for the shortcut. This allows keyboard shortcuts to be
   * customized without modifying the code that listens for them.
   *
   * Supports keyboard shortcuts triggered by a single key, a stroke stroke (key
   * plus at least one modifier) and a sequence of keys or strokes.
   */
  class KeyboardShortcutHandler extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_ui_KeyboardShortcutHandler : any;
    /**
     * Component for handling keyboard shortcuts. A shortcut is registered and bound
     * to a specific identifier. Once the shortcut is triggered an event is fired
     * with the identifier for the shortcut. This allows keyboard shortcuts to be
     * customized without modifying the code that listens for them.
     *
     * Supports keyboard shortcuts triggered by a single key, a stroke stroke (key
     * plus at least one modifier) and a sequence of keys or strokes.
     * @param keyTarget Event target that the key event listener is attached to, typically the applications root container.
     */
    constructor (keyTarget : ಠ_ಠ.clutz.goog.events.EventTarget | null | GlobalEventTarget ) ;
    /**
     * Removes the listener that was added by link {@link #initializeKeyListener}.
     */
    protected clearKeyListener ( ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns whether all shortcuts (including modifier shortcuts) are treated as
     * if the keys had been passed to the setGlobalKeys function.
     */
    getAllShortcutsAreGlobal ( ) : boolean ;
    /**
     * Returns whether the default action will always be prevented when a shortcut
     * event is fired. The default value is true.
     */
    getAlwaysPreventDefault ( ) : boolean ;
    /**
     * Returns whether the event will always be stopped from propagating beyond its
     * target when a shortcut event is fired. The default value is false.
     */
    getAlwaysStopPropagation ( ) : boolean ;
    /**
     * Returns event type for a specific shortcut.
     * @param identifier Identifier for the shortcut task.
     */
    getEventType (identifier : string ) : string ;
    getGlobalKeys ( ) : string [] ;
    /**
     * Returns whether shortcuts with modifiers are treated as if the keys had been
     * passed to the setGlobalKeys function.  Ignored if you have called
     * setAllShortcutsAreGlobal(true).  Applies only to form elements (not
     * content-editable).
     */
    getModifierShortcutsAreGlobal ( ) : boolean ;
    /**
     * Adds a key event listener that triggers {@link #handleKeyDown_} when keys
     * are pressed.
     * @param keyTarget Event target that the event listener should be attached to.
     */
    protected initializeKeyListener (keyTarget : ಠ_ಠ.clutz.goog.events.EventTarget | null | GlobalEventTarget ) : void ;
    /**
     * Verifies if a particular keyboard shortcut is registered already. It has
     * the same interface as the unregistering of shortcuts.
     *
     * param {number} keyCode Numeric code for key
     * param {number=} opt_modifiers Bitmap indicating required modifier keys.
     * goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,
     * or META.
     *
     * The two parameters can be repeated any number of times to create a shortcut
     * using a sequence of strokes.
     *
     * A string representation of the shortcut can be supplied instead see
     * {@link #registerShortcut} for syntax. In that case the method only takes one
     * argument.
     * @param var_args String representation, or array or list of alternating key codes and modifiers.
     */
    isShortcutRegistered ( ...var_args : ( number | string | number [] | null ) [] ) : boolean ;
    /**
     * Registers a keyboard shortcut.
     * @param identifier Identifier for the task performed by the keyboard combination. Multiple shortcuts can be provided for the same task by specifying the same identifier.
     * @param var_args See below. param {number} keyCode Numeric code for key param {number=} opt_modifiers Bitmap indicating required modifier keys. goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT, or META. The last two parameters can be repeated any number of times to create a shortcut using a sequence of strokes. Instead of varargs the second parameter could also be an array where each element would be regarded as a parameter. A string representation of the shortcut can be supplied instead of the last two parameters. In that case the method only takes two arguments, the identifier and the string. Examples: g               registerShortcut(str, G_KEYCODE) Ctrl+g          registerShortcut(str, G_KEYCODE, CTRL) Ctrl+Shift+g    registerShortcut(str, G_KEYCODE, CTRL | SHIFT) Ctrl+g a        registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE) Ctrl+g Shift+a  registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE, SHIFT) g a             registerShortcut(str, G_KEYCODE, NONE, A_KEYCODE) Examples using string representation for shortcuts: g               registerShortcut(str, 'g') Ctrl+g          registerShortcut(str, 'ctrl+g') Ctrl+Shift+g    registerShortcut(str, 'ctrl+shift+g') Ctrl+g a        registerShortcut(str, 'ctrl+g a') Ctrl+g Shift+a  registerShortcut(str, 'ctrl+g shift+a') g a             registerShortcut(str, 'g a').
     */
    registerShortcut (identifier : string ,  ...var_args : ( number | string | number [] | null ) [] ) : void ;
    /**
     * Sets whether to treat all shortcuts (including modifier shortcuts) as if the
     * keys had been passed to the setGlobalKeys function.
     * @param allShortcutsGlobal Whether to treat all shortcuts as global.
     */
    setAllShortcutsAreGlobal (allShortcutsGlobal : boolean ) : void ;
    /**
     * Sets whether to treat space key as a shortcut when the focused element is a
     * checkbox, radiobutton or button.
     * @param allowSpaceKeyOnButtons Whether to treat space key as a shortcut when the focused element is a checkbox, radiobutton or button.
     */
    setAllowSpaceKeyOnButtons (allowSpaceKeyOnButtons : boolean ) : void ;
    /**
     * Sets whether to always prevent the default action when a shortcut event is
     * fired. If false, the default action is prevented only if preventDefault is
     * called on either of the corresponding SHORTCUT_TRIGGERED or SHORTCUT_PREFIX
     * events. If true, the default action is prevented whenever a shortcut event
     * is fired. The default value is true.
     * @param alwaysPreventDefault Whether to always call preventDefault.
     */
    setAlwaysPreventDefault (alwaysPreventDefault : boolean ) : void ;
    /**
     * Sets whether to always stop propagation for the event when fired. If false,
     * the propagation is stopped only if stopPropagation is called on either of the
     * corresponding SHORT_CUT_TRIGGERED or SHORTCUT_PREFIX events. If true, the
     * event is prevented from propagating beyond its target whenever it is fired.
     * The default value is false.
     * @param alwaysStopPropagation Whether to always call stopPropagation.
     */
    setAlwaysStopPropagation (alwaysStopPropagation : boolean ) : void ;
    /**
     * Sets the global keys; keys that are safe to always regarded as shortcuts,
     * even if entered in a textarea or input field.
     * @param keys List of keys.
     */
    setGlobalKeys (keys : number [] | null ) : void ;
    /**
     * Sets whether to treat shortcuts with modifiers as if the keys had been
     * passed to the setGlobalKeys function.  Ignored if you have called
     * setAllShortcutsAreGlobal(true).  Applies only to form elements (not
     * content-editable).
     * @param modifierShortcutsGlobal Whether to treat shortcuts with modifiers as global.
     */
    setModifierShortcutsAreGlobal (modifierShortcutsGlobal : boolean ) : void ;
    unregisterAll ( ) : void ;
    /**
     * Unregisters a keyboard shortcut by keyCode and modifiers or string
     * representation of sequence.
     *
     * param {number} keyCode Numeric code for key
     * param {number=} opt_modifiers Bitmap indicating required modifier keys.
     * goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,
     * or META.
     *
     * The two parameters can be repeated any number of times to create a shortcut
     * using a sequence of strokes.
     *
     * A string representation of the shortcut can be supplied instead see
     * {@link #registerShortcut} for syntax. In that case the method only takes one
     * argument.
     * @param var_args String representation, or array or list of alternating key codes and modifiers.
     */
    unregisterShortcut ( ...var_args : ( number | string | number [] | null ) [] ) : void ;
    /**
     * Maximum allowed delay, in milliseconds, allowed between the first and second
     * key in a key sequence.
     */
    static MAX_KEY_SEQUENCE_DELAY : number ;
    /**
     * Static method for getting the key code for a given key.
     * @param name Name of key.
     */
    static getKeyCode (name : string ) : number ;
    /**
     * Builds stroke array from string representation of shortcut.
     * @param s String representation of shortcut.
     */
    static parseStringShortcut (s : string ) : { key : string | null , keyCode : number | null , modifiers : number } [] ;
  }
}
// Generated from ui/keyboardshortcuthandler.js
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
  class SequenceNode_ {
    private noStructuralTyping_goog_ui_KeyboardShortcutHandler_SequenceNode_ : any;
    next : { [ key: string ]: ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.SequenceNode_ | null } | null ;
    shortcut : string | null ;
  }
}
declare module 'goog:goog.ui.KeyboardShortcutHandler' {
  import KeyboardShortcutHandler = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler;
  export default KeyboardShortcutHandler;
}
// Generated from ui/keyboardshortcuthandler.js
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
  /**
   * Events.
   */
  /**
   * Events.
   */
  enum EventType {
    SHORTCUT_PREFIX = 'shortcut_' ,
    SHORTCUT_TRIGGERED = 'shortcut' ,
  }
}
declare module 'goog:goog.ui.KeyboardShortcutHandler.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.EventType;
  export default EventType;
}
// Generated from ui/keyboardshortcuthandler.js
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler {
  /**
   * Bit values for modifier keys.
   */
  /**
   * Bit values for modifier keys.
   */
  enum Modifiers {
    ALT = 4.0 ,
    CTRL = 2.0 ,
    META = 8.0 ,
    NONE = 0.0 ,
    SHIFT = 1.0 ,
  }
}
declare module 'goog:goog.ui.KeyboardShortcutHandler.Modifiers' {
  import Modifiers = ಠ_ಠ.clutz.goog.ui.KeyboardShortcutHandler.Modifiers;
  export default Modifiers;
}
