//!! generated by clutz.
// Generated from ui/ratings.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A UI Control used for rating things, i.e. videos on Google Video.
   */
  class Ratings extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_Ratings : any;
    /**
     * A UI Control used for rating things, i.e. videos on Google Video.
     * @param opt_ratings Ratings. Default: [1,2,3,4,5].
     * @param opt_domHelper Optional DOM helper.
     */
    constructor (opt_ratings ? : string [] | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Decorate a HTML structure already in the document.  Expects the structure:
     * <pre>
     * - div
     * - select
     * - option 1 #text = 1 star
     * - option 2 #text = 2 stars
     * - option 3 #text = 3 stars
     * - option N (where N is max number of ratings)
     * </pre>
     *
     * The div can contain other elements for graceful degredation, but they will be
     * hidden when the decoration occurs.
     * @param el Div element to decorate.
     */
    decorateInternal (el : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Render the rating widget inside the provided element. This will override the
     * current content of the element.
     */
    enterDocument ( ) : void ;
    /**
     * Should be called when the widget is removed from the document but may be
     * reused.  This removes all the listeners the widget has attached and destroys
     * the DOM nodes it uses.
     */
    exitDocument ( ) : void ;
    /**
     * Returns the attached input or select element to the ratings widget.
     */
    getAttachedFormField ( ) : HTMLSelectElement | null | HTMLInputElement ;
    /**
     * Returns the base CSS class used by subcomponents of this component.
     */
    getCssClass ( ) : string ;
    /**
     * Returns the index of the currently highlighted rating, -1 if the mouse isn't
     * currently over the widget
     */
    getHighlightedIndex ( ) : number ;
    /**
     * Returns the value of the currently highlighted rating, null if the mouse
     * isn't currently over the widget
     */
    getHighlightedValue ( ) : string | null ;
    /**
     * Gets the array of ratings that the component
     */
    getRatings ( ) : string [] | null ;
    getSelectedIndex ( ) : number ;
    /**
     * Returns the rating value of the currently selected rating
     */
    getValue ( ) : string | null ;
    isEnabled ( ) : boolean ;
    /**
     * Attaches an input or select element to the ratings widget. The value or
     * index of the field will be updated along with the ratings widget.
     * @param field The field to attach to.
     */
    setAttachedFormField (field : HTMLSelectElement | null | HTMLInputElement ) : void ;
    /**
     * Enables or disables the ratings control.
     * @param enable Whether to enable or disable the control.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Sets the array of ratings that the comonent
     * @param ratings Array of value to use as ratings.
     */
    setRatings (ratings : string [] | null ) : void ;
    /**
     * Sets the selected index. If the provided index is greater than the number of
     * ratings then the max is set.  0 is the first item, -1 is no selection.
     * @param index The index of the rating to select.
     */
    setSelectedIndex (index : number ) : void ;
    /**
     * Default CSS class to be applied to the root element of components rendered
     * by this renderer.
     */
    static CSS_CLASS : string ;
  }
}
declare module 'goog:goog.ui.Ratings' {
  import Ratings = ಠ_ಠ.clutz.goog.ui.Ratings;
  export default Ratings;
}
// Generated from ui/ratings.js
declare namespace ಠ_ಠ.clutz.goog.ui.Ratings {
  /**
   * Enums for Ratings event type.
   */
  /**
   * Enums for Ratings event type.
   */
  enum EventType {
    CHANGE = 'change' ,
    HIGHLIGHT = 'highlight' ,
    HIGHLIGHT_CHANGE = 'highlightchange' ,
    UNHIGHLIGHT = 'unhighlight' ,
  }
}
declare module 'goog:goog.ui.Ratings.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.ui.Ratings.EventType;
  export default EventType;
}
