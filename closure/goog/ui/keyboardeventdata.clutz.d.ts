//!! generated by clutz.
// Generated from ui/keyboardeventdata.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Data object that contains all the necessary information from a keyboard event
   * that is required to process it in `KeyboardShortcutHandler`.
   *
   * Prefer using `goog.ui.KeyboardEventData.Builder` over using this constructor.
   */
  class KeyboardEventData {
    private noStructuralTyping_goog_ui_KeyboardEventData : any;
    getAltKey ( ) : boolean ;
    getCtrlKey ( ) : boolean ;
    getKey ( ) : string ;
    getKeyCode ( ) : number ;
    getMetaKey ( ) : boolean ;
    getPreventDefaultFn ( ) : ( ) => void ;
    getRootTarget ( ) : GlobalEventTarget ;
    getShiftKey ( ) : boolean ;
    getStopPropagationFn ( ) : ( ) => void ;
    getTarget ( ) : Node ;
    static fromBrowserEvent (event : ಠ_ಠ.clutz.goog.events.BrowserEvent ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData ;
  }
}
// Generated from ui/keyboardeventdata.js
declare namespace ಠ_ಠ.clutz.goog.ui.KeyboardEventData {
  class Builder {
    private noStructuralTyping_goog_ui_KeyboardEventData_Builder : any;
    altKey (altKey : boolean ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    build ( ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData ;
    ctrlKey (ctrlKey : boolean ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    key (key : string ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    keyCode (keyCode : number ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    metaKey (metaKey : boolean ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    preventDefaultFn (preventDefaultFn : ( ) => void ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    rootTarget (rootTarget : GlobalEventTarget | null ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    shiftKey (shiftKey : boolean ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    stopPropagationFn (stopPropagationFn : ( ) => void ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
    target (target : Node | null ) : ಠ_ಠ.clutz.goog.ui.KeyboardEventData.Builder ;
  }
}
declare module 'goog:goog.ui.KeyboardEventData' {
  import KeyboardEventData = ಠ_ಠ.clutz.goog.ui.KeyboardEventData;
  export default KeyboardEventData;
}
