//!! generated by clutz.
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Will construct a chart using Google's chartserver.
   */
  class ServerChart extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_ServerChart : any;
    /**
     * Will construct a chart using Google's chartserver.
     * @param type The chart type.
     * @param opt_width The width of the chart.
     * @param opt_height The height of the chart.
     * @param opt_domHelper Optional DOM Helper.
     * @param opt_uri Optional uri used to connect to the chart server, if different than goog.ui.ServerChart.CHART_SERVER_SCHEME_INDEPENDENT_URI.
     */
    constructor (type : ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType , opt_width ? : number , opt_height ? : number , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null , opt_uri ? : string ) ;
    /**
     * Adds a data set.
     * NOTE: The color string should NOT have a '#' at the beginning of it.
     * @param data An array of numbers (values can be NaN or null).
     * @param color The hex value for this data set's color.
     * @param opt_legendText The legend text, if any, for this data series. NOTE: If specified, all previously added data sets must also have a legend text.
     */
    addDataSet (data : ( number | null ) [] | null , color : string , opt_legendText ? : string ) : void ;
    /**
     * Adds a multi-axis to the chart, and sets its type. Multiple axes of the same
     * type can be added.
     * @param axisType The desired axis type.
     */
    addMultiAxis (axisType : ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType ) : number ;
    clearDataSets ( ) : void ;
    /**
     * Creates the DOM node (image) needed for the Chart
     */
    createDom ( ) : void ;
    /**
     * Decorate an image already in the DOM.
     * Expects the following structure:
     * <pre>
     * - img
     * </pre>
     * @param img Image to decorate.
     */
    decorateInternal (img : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Returns the background fill.
     */
    getBackgroundFill ( ) : ( GlobalObject | null ) [] ;
    /**
     * Returns the given data set or all of them in a two-dimensional array if
     * the set number is not given.
     * @param opt_setNumber Optional data set number to get.
     */
    getData (opt_setNumber ? : number ) : any [] | null ;
    /**
     * Gets the encoding type.
     */
    getEncodingType ( ) : ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType ;
    /**
     * Returns the 'chg' parameter of the chart Uri.
     * This is used by various types of charts to specify Grids.
     */
    getGridParameter ( ) : string | undefined ;
    getGridX ( ) : number ;
    getGridY ( ) : number ;
    getLeftLabels ( ) : string [] | null ;
    /**
     * Returns the position relative to the chart where the legend is to be
     * displayed.
     */
    getLegendPosition ( ) : ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition ;
    /**
     * Returns the 'chm' parameter of the chart Uri.
     * This is used by various types of charts to specify Markers.
     */
    getMarkerParameter ( ) : string | undefined ;
    getMaxValue ( ) : number ;
    getMinValue ( ) : number ;
    /**
     * Returns the 'chp' parameter of the chart Uri.
     * This is used by various types of charts to specify certain options.
     * e.g., finance charts use this to designate which line is the 0 axis.
     */
    getMiscParameter ( ) : string | undefined ;
    /**
     * Returns the label positions for a given axis number, or all of them in a
     * two-dimensional array if the axis number is not given.
     * @param opt_axisNumber The axis index, as returned by addMultiAxis.
     */
    getMultiAxisLabelPosition (opt_axisNumber ? : number ) : GlobalObject | null ;
    /**
     * Returns the label style for a given axis number as a one- to three-element
     * array, or all of them in a two-dimensional array if the axis number is not
     * given.
     * @param opt_axisNumber The axis index, as returned by addMultiAxis.
     */
    getMultiAxisLabelStyle (opt_axisNumber ? : number ) : GlobalObject | null ;
    /**
     * Returns the label text, or all of them in a two-dimensional array if the
     * axis number is not given.
     * @param opt_axisNumber The axis index, as returned by addMultiAxis.
     */
    getMultiAxisLabelText (opt_axisNumber ? : number ) : GlobalObject | null ;
    /**
     * Returns the label range for a given axis number as a two-element array of
     * (range start, range end), or all of them in a two-dimensional array if the
     * axis number is not given.
     * @param opt_axisNumber The axis index, as returned by addMultiAxis.
     */
    getMultiAxisRange (opt_axisNumber ? : number ) : GlobalObject | null ;
    /**
     * Returns the axis type for the given axis, or all of them in an array if the
     * axis number is not given.
     * @param opt_axisNumber The axis index, as returned by addMultiAxis.
     */
    getMultiAxisType (opt_axisNumber ? : number ) : ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType | ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType [] | null ;
    /**
     * Returns the number of "visible" data sets. All data sets that come after
     * the visible data set are not drawn as part of the chart. Instead, they
     * are available for positioning markers.
     */
    getNumVisibleDataSets ( ) : number | null ;
    getRightLabels ( ) : string [] | null ;
    /**
     * Returns the chart size.
     */
    getSize ( ) : string [] ;
    getTitleColor ( ) : string ;
    getTitleSize ( ) : number ;
    /**
     * Returns the chart type.
     */
    getType ( ) : ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType ;
    /**
     * Returns the URI of the chart.
     */
    getUri ( ) : ಠ_ಠ.clutz.goog.Uri | null ;
    /**
     * Returns the upper limit on the length of the chart image URI, after encoding.
     * If the URI's length equals or exceeds it, goog.ui.ServerChart.UriTooLongEvent
     * is dispatched on the goog.ui.ServerChart object.
     */
    getUriLengthLimit ( ) : number ;
    getXLabels ( ) : string [] | null ;
    isBarChart ( ) : boolean ;
    isGroupedBarChart ( ) : boolean ;
    isHorizontalBarChart ( ) : boolean ;
    isLineChart ( ) : boolean ;
    isMap ( ) : boolean ;
    isPieChart ( ) : boolean ;
    isStackedBarChart ( ) : boolean ;
    isVerticalBarChart ( ) : boolean ;
    /**
     * Removes the given ChartServer parameter.
     * @param key The ChartServer parameter to remove.
     */
    removeParameter (key : ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam ) : void ;
    /**
     * Specifies that the bar width in a bar chart should be calculated
     * automatically given the space available in the chart, while optionally
     * setting the spaces between the bars.
     * NOTE: If the space between groups is specified but the space between
     * bars is left undefined, the space between groups will be interpreted
     * as the space between bars because this is the behavior exposed
     * in the external developers guide.
     * @param opt_spaceBars The width of the space between bars in a group in pixels.
     * @param opt_spaceGroups The width of the space between groups.
     */
    setAutomaticBarWidth (opt_spaceBars ? : number , opt_spaceGroups ? : number ) : void ;
    /**
     * Sets the background fill.
     * @param fill An array of background fill specification objects. Each object may have the following properties: {string} area The area to fill, either 'bg' for background or 'c' for chart area.  The default is 'bg'. {string} color (required) The color of the background fill. // TODO(user): Add support for gradient/stripes, which requires // a different object structure.
     */
    setBackgroundFill (fill : ( GlobalObject | null ) [] | null ) : void ;
    /**
     * Sets the widths of the bars and the spaces between the bars in a bar
     * chart.
     * NOTE: If the space between groups is specified but the space between
     * bars is left undefined, the space between groups will be interpreted
     * as the space between bars because this is the behavior exposed
     * in the external developers guide.
     * @param barWidth The width of a bar in pixels.
     * @param opt_spaceBars The width of the space between bars in a group in pixels.
     * @param opt_spaceGroups The width of the space between groups.
     */
    setBarSpaceWidths (barWidth : number , opt_spaceBars ? : number , opt_spaceGroups ? : number ) : void ;
    /**
     * Sets the data scaling.
     * NOTE: This also changes the encoding type because data scaling will
     * only work with `goog.ui.ServerChart.EncodingType.TEXT`
     * encoding.
     * @param minimum The lowest number to apply to the data.
     * @param maximum The highest number to apply to the data.
     */
    setDataScaling (minimum : number , maximum : number ) : void ;
    /**
     * Sets the encoding type.
     * @param type Desired data encoding type.
     */
    setEncodingType (type : ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType ) : void ;
    /**
     * Sets the 'chg' parameter of the chart Uri.
     * This is used by various types of charts to specify Grids.
     * @param value Value for the 'chg' parameter in the chart Uri.
     */
    setGridParameter (value : string ) : void ;
    /**
     * Sets the number of grid lines along the X-axis.
     * @param gridlines The number of X-axis grid lines.
     */
    setGridX (gridlines : number ) : void ;
    /**
     * Sets the number of grid lines along the Y-axis.
     * @param gridlines The number of Y-axis grid lines.
     */
    setGridY (gridlines : number ) : void ;
    /**
     * Sets the Left Labels for the chart.
     * NOTE: The array should start with the lowest value, and then
     * move progessively up the axis. So if you want labels
     * from 0 to 100 with 0 at bottom of the graph, then you would
     * want to pass something like [0,25,50,75,100].
     * @param labels The Left Labels for the chart.
     */
    setLeftLabels (labels : string [] | null ) : void ;
    /**
     * Adds a legend to the chart.
     * @param legend The legend to add.
     */
    setLegend (legend : string [] | null ) : void ;
    /**
     * Sets the position relative to the chart where the legend is to be displayed.
     * @param value Legend position.
     */
    setLegendPosition (value : ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition ) : void ;
    /**
     * Sets the chart margins.
     * @param leftMargin The size in pixels of the left margin.
     * @param rightMargin The size in pixels of the right margin.
     * @param topMargin The size in pixels of the top margin.
     * @param bottomMargin The size in pixels of the bottom margin.
     */
    setMargins (leftMargin : number , rightMargin : number , topMargin : number , bottomMargin : number ) : void ;
    /**
     * Sets the 'chm' parameter of the chart Uri.
     * This is used by various types of charts to specify Markers.
     * @param value Value for the 'chm' parameter in the chart Uri.
     */
    setMarkerParameter (value : string ) : void ;
    /**
     * Sets the maximum value of the chart.
     * @param maxValue The maximum value of the chart.
     */
    setMaxValue (maxValue : number ) : void ;
    /**
     * Sets the minimum value of the chart.
     * @param minValue The minimum value of the chart.
     */
    setMinValue (minValue : number ) : void ;
    /**
     * Sets the 'chp' parameter of the chart Uri.
     * This is used by various types of charts to specify certain options.
     * e.g., finance charts use this to designate which line is the 0 axis.
     * @param value Value for the 'chp' parameter in the chart Uri.
     */
    setMiscParameter (value : string | number ) : void ;
    /**
     * Sets the label positions for a given axis, overwriting any existing values.
     * The label positions are assumed to be floating-point numbers within the
     * range of the axis.
     * @param axisNumber The axis index, as returned by addMultiAxis.
     * @param labelPosition The actual label positions to be added.
     */
    setMultiAxisLabelPosition (axisNumber : number , labelPosition : number [] | null ) : void ;
    /**
     * Sets the label style for a given axis, overwriting any existing style.
     * The default style is as follows: Default is x-axis labels are centered, left
     * hand y-axis labels are right aligned, right hand y-axis labels are left
     * aligned. The font size and alignment are optional parameters.
     *
     * NOTE: The color string should NOT have a '#' at the beginning of it.
     * @param axisNumber The axis index, as returned by addMultiAxis.
     * @param color The hex value for this label's color.
     * @param opt_fontSize The label font size, in pixels.
     * @param opt_alignment The label alignment.
     * @param opt_axisDisplay The axis line and ticks.
     */
    setMultiAxisLabelStyle (axisNumber : number , color : string , opt_fontSize ? : number , opt_alignment ? : ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisAlignment , opt_axisDisplay ? : ಠ_ಠ.clutz.goog.ui.ServerChart.AxisDisplayType ) : void ;
    /**
     * Sets the label text (usually multiple values) for a given axis, overwriting
     * any existing values.
     * @param axisNumber The axis index, as returned by addMultiAxis.
     * @param labelText The actual label text to be added.
     */
    setMultiAxisLabelText (axisNumber : number , labelText : string [] | null ) : void ;
    /**
     * Sets the label range for a given axis, overwriting any existing range.
     * The default range is from 0 to 100. If the start value is larger than the
     * end value, the axis direction is reversed.  rangeStart and rangeEnd must
     * be two different finite numbers.
     * @param axisNumber The axis index, as returned by addMultiAxis.
     * @param rangeStart The new start of the range.
     * @param rangeEnd The new end of the range.
     * @param opt_interval The interval between axis labels.
     */
    setMultiAxisRange (axisNumber : number , rangeStart : number , rangeEnd : number , opt_interval ? : number ) : void ;
    /**
     * Sets the number of "visible" data sets. All data sets that come after
     * the visible data set are not drawn as part of the chart. Instead, they
     * are available for positioning markers.
     * @param n The number of visible data sets, or null if all data sets are to be visible.
     */
    setNumVisibleDataSets (n : number | null ) : void ;
    /**
     * Sets the given ChartServer parameter.
     * @param key The ChartServer parameter to set.
     * @param value The value to set for the ChartServer parameter.
     */
    setParameterValue (key : ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam , value : string ) : void ;
    /**
     * Sets the Right Labels for the chart.
     * NOTE: The array should start with the lowest value, and then
     * move progessively up the axis. So if you want labels
     * from 0 to 100 with 0 at bottom of the graph, then you would
     * want to pass something like [0,25,50,75,100].
     * @param labels The Right Labels for the chart.
     */
    setRightLabels (labels : string [] | null ) : void ;
    /**
     * Sets the chart size.
     * @param opt_width Optional chart width, defaults to 300.
     * @param opt_height Optional chart height, defaults to 150.
     */
    setSize (opt_width ? : number , opt_height ? : number ) : void ;
    /**
     * Sets the title of the chart.
     * @param title The chart title.
     */
    setTitle (title : string ) : void ;
    /**
     * Sets the color of the chart title.
     *
     * NOTE: The color string should NOT have a '#' at the beginning of it.
     * @param color The hex value for the title color.
     */
    setTitleColor (color : string ) : void ;
    /**
     * Sets the size of the chart title.
     * @param size The title size, in points.
     */
    setTitleSize (size : number ) : void ;
    /**
     * Sets the chart type.
     * @param type The desired chart type.
     */
    setType (type : ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType ) : void ;
    /**
     * Sets the URI of the chart.
     * @param uri The chart URI.
     */
    setUri (uri : ಠ_ಠ.clutz.goog.Uri | null ) : void ;
    /**
     * Sets the upper limit on the length of the chart image URI, after encoding.
     * If the URI's length equals or exceeds it, goog.ui.ServerChart.UriTooLongEvent
     * is dispatched on the goog.ui.ServerChart object.
     * @param uriLengthLimit The chart URI length limit.
     */
    setUriLengthLimit (uriLengthLimit : number ) : void ;
    /**
     * Sets the weight function for a Venn Diagram along with the associated
     * colors and legend text. Weights are assigned as follows:
     * weights[0] is relative area of circle A.
     * weights[1] is relative area of circle B.
     * weights[2] is relative area of circle C.
     * weights[3] is relative area of overlap of circles A and B.
     * weights[4] is relative area of overlap of circles A and C.
     * weights[5] is relative area of overlap of circles B and C.
     * weights[6] is relative area of overlap of circles A, B and C.
     * For a two circle Venn Diagram the weights are assigned as follows:
     * weights[0] is relative area of circle A.
     * weights[1] is relative area of circle B.
     * weights[2] is relative area of overlap of circles A and B.
     * @param weights The relative weights of the circles.
     * @param opt_legendText The legend labels for the circles.
     * @param opt_colors The colors for the circles.
     */
    setVennSeries (weights : number [] | null , opt_legendText ? : string [] | null , opt_colors ? : string [] | null ) : void ;
    /**
     * Sets the X Labels for the chart.
     * @param labels The X Labels for the chart.
     */
    setXLabels (labels : string [] | null ) : void ;
    updateChart ( ) : void ;
    /**
     * Base HTTPS URI for the chart renderer.
     */
    static CHART_SERVER_HTTPS_URI : string ;
    /**
     * Base HTTP URI for the chart renderer.
     */
    static CHART_SERVER_HTTP_URI : string ;
    /**
     * Base scheme-independent URI for the chart renderer.
     */
    static CHART_SERVER_SCHEME_INDEPENDENT_URI : string ;
    /**
     * Base URI for the chart renderer.
     */
    static CHART_SERVER_URI : string ;
    /**
     * Array of possible ChartServer data values
     */
    static CHART_VALUES : string ;
    /**
     * Array of extended ChartServer data values
     */
    static CHART_VALUES_EXTENDED : string ;
    /**
     * The 0 - 1.0 ("fraction of the range") value to use when getMinValue() ==
     * getMaxValue(). This determines, for example, the vertical position
     * of the line in a flat line-chart.
     */
    static DEFAULT_NORMALIZATION : number ;
    static EXTENDED_UPPER_BOUND : number ;
  }
}
declare module 'goog:goog.ui.ServerChart' {
  import ServerChart = ಠ_ಠ.clutz.goog.ui.ServerChart;
  export default ServerChart;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of line and tick options for an axis.
   */
  /**
   * Enum of line and tick options for an axis.
   */
  enum AxisDisplayType {
    LINE = 'l' ,
    LINE_AND_TICKS = 'lt' ,
    TICKS = 't' ,
  }
}
declare module 'goog:goog.ui.ServerChart.AxisDisplayType' {
  import AxisDisplayType = ಠ_ಠ.clutz.goog.ui.ServerChart.AxisDisplayType;
  export default AxisDisplayType;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of chart types with their short names used by the chartserver.
   */
  /**
   * Enum of chart types with their short names used by the chartserver.
   */
  enum ChartType {
    BAR = 'br' ,
    CLOCK = 'cf' ,
    CONCENTRIC_PIE = 'pc' ,
    FILLEDLINE = 'lr' ,
    FINANCE = 'lfi' ,
    GOOGLEOMETER = 'gom' ,
    HORIZONTAL_GROUPED_BAR = 'bhg' ,
    HORIZONTAL_STACKED_BAR = 'bhs' ,
    LINE = 'lc' ,
    MAP = 't' ,
    MAPUSA = 'tuss' ,
    MAPWORLD = 'twoc' ,
    PIE = 'p' ,
    PIE3D = 'p3' ,
    RADAR = 'rs' ,
    SCATTER = 's' ,
    SPARKLINE = 'ls' ,
    VENN = 'v' ,
    VERTICAL_GROUPED_BAR = 'bvg' ,
    VERTICAL_STACKED_BAR = 'bvs' ,
    XYLINE = 'lxy' ,
  }
}
declare module 'goog:goog.ui.ServerChart.ChartType' {
  import ChartType = ಠ_ಠ.clutz.goog.ui.ServerChart.ChartType;
  export default ChartType;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of chart data encoding types
   */
  /**
   * Enum of chart data encoding types
   */
  enum EncodingType {
    AUTOMATIC = '' ,
    EXTENDED = 'e' ,
    SIMPLE = 's' ,
    TEXT = 't' ,
  }
}
declare module 'goog:goog.ui.ServerChart.EncodingType' {
  import EncodingType = ಠ_ಠ.clutz.goog.ui.ServerChart.EncodingType;
  export default EncodingType;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Event types dispatched by the ServerChart object
   */
  /**
   * Event types dispatched by the ServerChart object
   */
  enum Event {
    URI_TOO_LONG = 'uritoolong' ,
  }
}
declare module 'goog:goog.ui.ServerChart.Event' {
  import Event = ಠ_ಠ.clutz.goog.ui.ServerChart.Event;
  export default Event;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of legend positions.
   */
  /**
   * Enum of legend positions.
   */
  enum LegendPosition {
    BOTTOM = 'b' ,
    LEFT = 'l' ,
    RIGHT = 'r' ,
    TOP = 't' ,
  }
}
declare module 'goog:goog.ui.ServerChart.LegendPosition' {
  import LegendPosition = ಠ_ಠ.clutz.goog.ui.ServerChart.LegendPosition;
  export default LegendPosition;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of chart maximum values in pixels, as listed at:
   * http://code.google.com/apis/chart/basics.html
   */
  /**
   * Enum of chart maximum values in pixels, as listed at:
   * http://code.google.com/apis/chart/basics.html
   */
  enum MaximumValue {
    HEIGHT = 1000.0 ,
    MAP_HEIGHT = 220.0 ,
    MAP_WIDTH = 440.0 ,
    TOTAL_AREA = 300000.0 ,
    WIDTH = 1000.0 ,
  }
}
declare module 'goog:goog.ui.ServerChart.MaximumValue' {
  import MaximumValue = ಠ_ಠ.clutz.goog.ui.ServerChart.MaximumValue;
  export default MaximumValue;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of multi-axis alignments.
   */
  /**
   * Enum of multi-axis alignments.
   */
  enum MultiAxisAlignment {
    ALIGN_CENTER = 0.0 ,
    ALIGN_LEFT = -1.0 ,
    ALIGN_RIGHT = 1.0 ,
  }
}
declare module 'goog:goog.ui.ServerChart.MultiAxisAlignment' {
  import MultiAxisAlignment = ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisAlignment;
  export default MultiAxisAlignment;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of multi-axis types.
   */
  /**
   * Enum of multi-axis types.
   */
  enum MultiAxisType {
    LEFT_Y_AXIS = 'y' ,
    RIGHT_Y_AXIS = 'r' ,
    TOP_AXIS = 't' ,
    X_AXIS = 'x' ,
  }
}
declare module 'goog:goog.ui.ServerChart.MultiAxisType' {
  import MultiAxisType = ಠ_ಠ.clutz.goog.ui.ServerChart.MultiAxisType;
  export default MultiAxisType;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Enum of ChartServer URI parameters.
   */
  /**
   * Enum of ChartServer URI parameters.
   */
  enum UriParam {
    BACKGROUND_FILL = 'chf' ,
    BAR_HEIGHT = 'chbh' ,
    DATA = 'chd' ,
    DATA_COLORS = 'chco' ,
    DATA_LABELS = 'chld' ,
    DATA_SCALING = 'chds' ,
    DIGITAL_SIGNATURE = 'sig' ,
    GEOGRAPHICAL_REGION = 'chtm' ,
    GRID = 'chg' ,
    LABEL_COLORS = 'chlc' ,
    LEFT_Y_LABELS = 'chly' ,
    LEGEND = 'chdl' ,
    LEGEND_POSITION = 'chdlp' ,
    LEGEND_TEXTS = 'chdl' ,
    LINE_STYLES = 'chls' ,
    MARGINS = 'chma' ,
    MARKERS = 'chm' ,
    MISC_PARAMS = 'chp' ,
    MULTI_AXIS_LABEL_POSITION = 'chxp' ,
    MULTI_AXIS_LABEL_TEXT = 'chxl' ,
    MULTI_AXIS_RANGE = 'chxr' ,
    MULTI_AXIS_STYLE = 'chxs' ,
    MULTI_AXIS_TYPES = 'chxt' ,
    RIGHT_LABELS = 'chlr' ,
    RIGHT_LABEL_POSITIONS = 'chlrp' ,
    SIZE = 'chs' ,
    TITLE = 'chtt' ,
    TITLE_FORMAT = 'chts' ,
    TYPE = 'cht' ,
    X_AXIS_STYLE = 'chx' ,
    X_LABELS = 'chl' ,
  }
}
declare module 'goog:goog.ui.ServerChart.UriParam' {
  import UriParam = ಠ_ಠ.clutz.goog.ui.ServerChart.UriParam;
  export default UriParam;
}
// Generated from ui/serverchart.js
declare namespace ಠ_ಠ.clutz.goog.ui.ServerChart {
  /**
   * Class for the event dispatched on the ServerChart when the resulting URI
   * exceeds the URI length limit.
   */
  class UriTooLongEvent extends ಠ_ಠ.clutz.goog.events.Event {
    private noStructuralTyping_goog_ui_ServerChart_UriTooLongEvent : any;
    /**
     * Class for the event dispatched on the ServerChart when the resulting URI
     * exceeds the URI length limit.
     * @param uri The overly-long URI string.
     */
    constructor (uri : string ) ;
    /**
     * The overly-long URI string.
     */
    uri : string ;
  }
}
declare module 'goog:goog.ui.ServerChart.UriTooLongEvent' {
  import UriTooLongEvent = ಠ_ಠ.clutz.goog.ui.ServerChart.UriTooLongEvent;
  export default UriTooLongEvent;
}
