//!! generated by clutz.
// Generated from ui/control.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for UI controls.  Extends {@link goog.ui.Component} by adding
   * the following:
   * <ul>
   * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
   * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
   * simple controls without the need to subclass this class,
   * <li>the notion of component <em>content</em>, like a text caption or DOM
   * structure displayed in the component (e.g. a button label),
   * <li>getter and setter for component content, as well as a getter and
   * setter specifically for caption text (for convenience),
   * <li>support for hiding/showing the component,
   * <li>fine-grained control over supported states and state transition
   * events, and
   * <li>default mouse and keyboard event handling.
   * </ul>
   * This class has sufficient built-in functionality for most simple UI controls.
   * All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION events on show,
   * hide, mouseover, mouseout, and user action, respectively.  Additional states
   * are also supported.  See closure/demos/control.html
   * for example usage.
   */
  class Control extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_Control : any;
    /**
     * Base class for UI controls.  Extends {@link goog.ui.Component} by adding
     * the following:
     * <ul>
     * <li>a {@link goog.events.KeyHandler}, to simplify keyboard handling,
     * <li>a pluggable <em>renderer</em> framework, to simplify the creation of
     * simple controls without the need to subclass this class,
     * <li>the notion of component <em>content</em>, like a text caption or DOM
     * structure displayed in the component (e.g. a button label),
     * <li>getter and setter for component content, as well as a getter and
     * setter specifically for caption text (for convenience),
     * <li>support for hiding/showing the component,
     * <li>fine-grained control over supported states and state transition
     * events, and
     * <li>default mouse and keyboard event handling.
     * </ul>
     * This class has sufficient built-in functionality for most simple UI controls.
     * All controls dispatch SHOW, HIDE, ENTER, LEAVE, and ACTION events on show,
     * hide, mouseover, mouseout, and user action, respectively.  Additional states
     * are also supported.  See closure/demos/control.html
     * for example usage.
     * @param opt_content Text caption or DOM structure to display as the content of the control (if any).
     * @param opt_renderer Renderer used to render or decorate the component; defaults to {@link goog.ui.ControlRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (opt_content ? : ಠ_ಠ.clutz.goog.ui.ControlContent | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    /**
     * Adds the given class name to the list of classes to be applied to the
     * component's root element.
     * @param className Additional class name to be applied to the component's root element.
     */
    addClassName (className : string ) : void ;
    /**
     * Returns true if the given element can be decorated by this component.
     * Overrides {@link goog.ui.Component#canDecorate}.
     * @param element Element to decorate.
     */
    canDecorate (element : GlobalElement | null ) : boolean ;
    /**
     * Creates the control's DOM.  Overrides {@link goog.ui.Component#createDom} by
     * delegating DOM manipulation to the control's renderer.
     */
    createDom ( ) : void ;
    /**
     * Decorates the given element with this component. Overrides {@link
     * goog.ui.Component#decorateInternal} by delegating DOM manipulation
     * to the control's renderer.
     * @param element Element to decorate.
     */
    protected decorateInternal (element : GlobalElement | null ) : void ;
    disposeInternal ( ) : void ;
    /**
     * Adds or removes the given class name to/from the list of classes to be
     * applied to the component's root element.
     * @param className CSS class name to add or remove.
     * @param enable Whether to add or remove the class name.
     */
    enableClassName (className : string , enable : boolean ) : void ;
    /**
     * Configures the component after its DOM has been rendered, and sets up event
     * handling.  Overrides {@link goog.ui.Component#enterDocument}.
     */
    enterDocument ( ) : void ;
    /**
     * Cleans up the component before its DOM is removed from the document, and
     * removes event handlers.  Overrides {@link goog.ui.Component#exitDocument}
     * by making sure that components that are removed from the document aren't
     * focusable (i.e. have no tab index).
     */
    exitDocument ( ) : void ;
    /**
     * Gets the control's aria label.
     */
    getAriaLabel ( ) : string | null ;
    getCaption ( ) : string ;
    /**
     * Returns the text caption or DOM structure displayed in the component.
     */
    getContent ( ) : ಠ_ಠ.clutz.goog.ui.ControlContent | null ;
    /**
     * Returns the DOM element into which child components are to be rendered,
     * or null if the control itself hasn't been rendered yet.  Overrides
     * {@link goog.ui.Component#getContentElement} by delegating to the renderer.
     */
    getContentElement ( ) : GlobalElement | null ;
    /**
     * Returns any additional class name(s) to be applied to the component's
     * root element, or null if no extra class names are needed.
     */
    getExtraClassNames ( ) : string [] | null ;
    /**
     * Returns the DOM element on which the control is listening for keyboard
     * events (null if none).
     */
    getKeyEventTarget ( ) : GlobalElement | null ;
    /**
     * Returns the keyboard event handler for this component, lazily created the
     * first time this method is called.  Considered protected; should only be
     * used within this package and by subclasses.
     */
    protected getKeyHandler ( ) : ಠ_ಠ.clutz.goog.events.KeyHandler ;
    /**
     * Returns the control's preferred ARIA role. This can be used by a control to
     * override the role that would be assigned by the renderer.  This is useful in
     * cases where a different ARIA role is appropriate for a control because of the
     * context in which it's used.  E.g., a {@link goog.ui.MenuButton} added to a
     * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not MENUITEM.
     */
    getPreferredAriaRole ( ) : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ;
    /**
     * Returns the renderer used by this component to render itself or to decorate
     * an existing element.
     */
    getRenderer ( ) : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null | undefined ;
    /**
     * Returns the component's state as a bit mask of {@link
     * goog.ui.Component.State}s.
     */
    getState ( ) : number ;
    /**
     * Handles blur events on the component's key event target element.  Always
     * deactivates the component.  In addition, if the component is focusable,
     * updates its state and styling to indicate that it no longer has keyboard
     * focus.  Considered protected; should only be used within this package and
     * by subclasses.  <b>Warning:</b> IE dispatches focus and blur events
     * asynchronously!
     * @param e Blur event to handle.
     */
    handleBlur (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles contextmenu events.
     * @param e Event to handle.
     */
    handleContextMenu (a : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : any ;
    /**
     * Handles dblclick events.  Should only be registered if the user agent is
     * IE.  If the component is enabled, performs its associated action by calling
     * {@link performActionInternal}.  This is used to allow more performant
     * buttons in IE.  In IE, no mousedown event is fired when that mousedown will
     * trigger a dblclick event.  Because of this, a user clicking quickly will
     * only cause ACTION events to fire on every other click.  This is a workaround
     * to generate ACTION events for every click.  Unfortunately, this workaround
     * won't ever trigger the ACTIVE state.  This is roughly the same behaviour as
     * if this were a 'button' element with a listener on mouseup.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleDblClick (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles focus events on the component's key event target element.  If the
     * component is focusable, updates its state and styling to indicate that it
     * now has keyboard focus.  Considered protected; should only be used within
     * this package and by subclasses.  <b>Warning:</b> IE dispatches focus and
     * blur events asynchronously!
     * @param e Focus event to handle.
     */
    handleFocus (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Attempts to handle a keyboard event, if the component is enabled and visible,
     * by calling {@link handleKeyEventInternal}.  Considered protected; should only
     * be used within this package and by subclasses.
     * @param e Key event to handle.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Attempts to handle a keyboard event; returns true if the event was handled,
     * false otherwise.  Considered protected; should only be used within this
     * package and by subclasses.
     * @param e Key event to handle.
     */
    protected handleKeyEventInternal (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Handles mousedown events.  If the component is enabled, highlights and
     * activates it.  If the component isn't configured for keyboard access,
     * prevents it from receiving keyboard focus.  Considered protected; should
     * only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseDown (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseout events.  Dispatches a LEAVE event; if the event isn't
     * canceled, and the component supports auto-highlighting, deactivates and
     * un-highlights the component.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseOut (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouseover events.  Dispatches an ENTER event; if the event isn't
     * canceled, the component is enabled, and it supports auto-highlighting,
     * highlights the component.  Considered protected; should only be used
     * within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseOver (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles mouseup events.  If the component is enabled, highlights it.  If
     * the component has previously been activated, performs its associated action
     * by calling {@link performActionInternal}, then deactivates it.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Mouse event to handle.
     */
    handleMouseUp (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Returns true if the component is in the specified state, false otherwise.
     * @param state State to check.
     */
    hasState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null ) : boolean ;
    /**
     * Returns true if the component is active (pressed), false otherwise.
     */
    isActive ( ) : boolean ;
    /**
     * Returns true if the control allows text selection within its DOM, false
     * otherwise.  Controls that disallow text selection have the appropriate
     * unselectable styling applied to their elements.  Note that controls hosted
     * in containers will report that they allow text selection even if their
     * container disallows text selection.
     */
    isAllowTextSelection ( ) : boolean ;
    /**
     * Returns true if the component provides default event handling for the state,
     * false otherwise.
     * @param state State to check.
     */
    isAutoState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null ) : boolean ;
    /**
     * Returns true if the component is checked, false otherwise.
     */
    isChecked ( ) : boolean ;
    /**
     * Returns true if the component is set to dispatch transition events for the
     * given state, false otherwise.
     * @param state State to check.
     */
    isDispatchTransitionEvents (state : ಠ_ಠ.clutz.goog.ui.Component.State | null ) : boolean ;
    /**
     * Returns true if the component is enabled, false otherwise.
     */
    isEnabled ( ) : boolean ;
    /**
     * Returns true if the component is styled to indicate that it has keyboard
     * focus, false otherwise.  Note that `isFocused()` returning true
     * doesn't guarantee that the component's key event target has keyboard focus,
     * only that it is styled as such.
     */
    isFocused ( ) : boolean ;
    /**
     * Returns true if the control is configured to handle its own mouse events,
     * false otherwise.  Controls not hosted in {@link goog.ui.Container}s have
     * to handle their own mouse events, but controls hosted in containers may
     * allow their parent to handle mouse events on their behalf.  Considered
     * protected; should only be used within this package and by subclasses.
     */
    isHandleMouseEvents ( ) : boolean ;
    /**
     * Returns true if the component is currently highlighted, false otherwise.
     */
    isHighlighted ( ) : boolean ;
    /**
     * Returns true if the component is open (expanded), false otherwise.
     */
    isOpen ( ) : boolean ;
    /**
     * Returns true if the component is selected, false otherwise.
     */
    isSelected ( ) : boolean ;
    /**
     * Returns true if the component supports the specified state, false otherwise.
     * @param state State to check.
     */
    isSupportedState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null ) : boolean ;
    /**
     * Returns true if the transition into or out of the given state is allowed to
     * proceed, false otherwise.  A state transition is allowed under the following
     * conditions:
     * <ul>
     * <li>the component supports the state,
     * <li>the component isn't already in the target state,
     * <li>either the component is configured not to dispatch events for this
     * state transition, or a transition event was dispatched and wasn't
     * canceled by any event listener, and
     * <li>the component hasn't been disposed of
     * </ul>
     * Considered protected; should only be used within this package and by
     * subclasses.
     * @param state State to/from which the control is transitioning.
     * @param enable Whether the control is entering or leaving the state.
     */
    protected isTransitionAllowed (state : ಠ_ಠ.clutz.goog.ui.Component.State | null , enable : boolean ) : boolean ;
    /**
     * Returns true if the component's visibility is set to visible, false if
     * it is set to hidden.  A component that is set to hidden is guaranteed
     * to be hidden from the user, but the reverse isn't necessarily true.
     * A component may be set to visible but can otherwise be obscured by another
     * element, rendered off-screen, or hidden using direct CSS manipulation.
     */
    isVisible ( ) : boolean ;
    /**
     * Performs the appropriate action when the control is activated by the user.
     * The default implementation first updates the checked and selected state of
     * controls that support them, then dispatches an ACTION event.  Considered
     * protected; should only be used within this package and by subclasses.
     * @param e Event that triggered the action.
     */
    protected performActionInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    /**
     * Removes the given class name from the list of classes to be applied to
     * the component's root element.
     * @param className Class name to be removed from the component's root element.
     */
    removeClassName (className : string ) : void ;
    /**
     * Activates or deactivates the component.  Does nothing if this state
     * transition is disallowed.
     * @param active Whether to activate or deactivate the component.
     */
    setActive (active : boolean ) : void ;
    /**
     * Allows or disallows text selection within the control's DOM.
     * @param allow Whether the control should allow text selection.
     */
    setAllowTextSelection (allow : boolean ) : void ;
    /**
     * Sets the control's aria label. This can be used to assign aria label to the
     * element after it is rendered.
     * @param label The string to set as the aria label for this control. No escaping is done on this value.
     */
    setAriaLabel (label : string ) : void ;
    /**
     * Enables or disables automatic event handling for the given state(s).
     * @param states Bit mask of {@link goog.ui.Component.State}s for which default event handling is to be enabled or disabled.
     * @param enable Whether the component should provide default event handling for the state(s).
     */
    setAutoStates (states : number , enable : boolean ) : void ;
    /**
     * Sets the text caption of the component.
     * @param caption Text caption of the component.
     */
    setCaption (caption : string ) : void ;
    /**
     * Checks or unchecks the component.  Does nothing if this state transition
     * is disallowed.
     * @param check Whether to check or uncheck the component.
     */
    setChecked (check : boolean ) : void ;
    /**
     * Sets the component's content to the given text caption, element, or array of
     * nodes.  (If the argument is an array of nodes, it must be an actual array,
     * not an array-like object.)
     * @param content Text caption or DOM structure to set as the component's contents.
     */
    setContent (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Sets the component's content to the given text caption, element, or array
     * of nodes.  Unlike {@link #setContent}, doesn't modify the component's DOM.
     * Called by renderers during element decoration.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param content Text caption or DOM structure to set as the component's contents.
     */
    setContentInternal (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    /**
     * Enables or disables transition events for the given state(s).  Controls
     * handle state transitions internally by default, and only dispatch state
     * transition events if explicitly requested to do so by calling this method.
     * @param states Bit mask of {@link goog.ui.Component.State}s for which transition events should be enabled or disabled.
     * @param enable Whether transition events should be enabled.
     */
    setDispatchTransitionEvents (states : number , enable : boolean ) : void ;
    /**
     * Enables or disables the component.  Does nothing if this state transition
     * is disallowed.  If the component is both visible and focusable, updates its
     * focused state and tab index as needed.  If the component is being disabled,
     * ensures that it is also deactivated and un-highlighted first.  Note that the
     * component's enabled/disabled state is "locked" as long as it is hosted in a
     * {@link goog.ui.Container} that is itself disabled; this is to prevent clients
     * from accidentally re-enabling a control that is in a disabled container.
     * @param enable Whether to enable or disable the component.
     */
    setEnabled (enable : boolean ) : void ;
    /**
     * Applies or removes styling indicating that the component has keyboard focus.
     * Note that unlike the other "set" methods, this method is called as a result
     * of the component's element having received or lost keyboard focus, not the
     * other way around, so calling `setFocused(true)` doesn't guarantee that
     * the component's key event target has keyboard focus, only that it is styled
     * as such.
     * @param focused Whether to apply or remove styling to indicate that the component's element has keyboard focus.
     */
    setFocused (focused : boolean ) : void ;
    /**
     * Enables or disables mouse event handling for the control.  Containers may
     * use this method to disable mouse event handling in their child controls.
     * Considered protected; should only be used within this package and by
     * subclasses.
     * @param enable Whether to enable or disable mouse event handling.
     */
    setHandleMouseEvents (enable : boolean ) : void ;
    /**
     * Highlights or unhighlights the component.  Does nothing if this state
     * transition is disallowed.
     * @param highlight Whether to highlight or unhighlight the component.
     */
    setHighlighted (highlight : boolean ) : void ;
    /**
     * Opens (expands) or closes (collapses) the component.  Does nothing if this
     * state transition is disallowed.
     * @param open Whether to open or close the component.
     */
    setOpen (open : boolean ) : void ;
    /**
     * Sets the control's preferred ARIA role. This can be used to override the role
     * that would be assigned by the renderer.  This is useful in cases where a
     * different ARIA role is appropriate for a control because of the
     * context in which it's used.  E.g., a {@link goog.ui.MenuButton} added to a
     * {@link goog.ui.Select} should have an ARIA role of LISTBOX and not MENUITEM.
     * @param role This control's preferred ARIA role.
     */
    setPreferredAriaRole (role : ಠ_ಠ.clutz.goog.a11y.aria.Role | null ) : void ;
    /**
     * Registers the given renderer with the component.  Changing renderers after
     * the component has entered the document is an error.
     * @param renderer Renderer used by the component.
     */
    setRenderer (renderer : ಠ_ಠ.clutz.goog.ui.ControlRenderer | null ) : void ;
    setRightToLeft (rightToLeft ? : any ) : void ;
    /**
     * Selects or unselects the component.  Does nothing if this state transition
     * is disallowed.
     * @param select Whether to select or unselect the component.
     */
    setSelected (select : boolean ) : void ;
    /**
     * Sets or clears the given state on the component, and updates its styling
     * accordingly.  Does nothing if the component is already in the correct state
     * or if it doesn't support the specified state.  Doesn't dispatch any state
     * transition events; use advisedly.
     * @param state State to set or clear.
     * @param enable Whether to set or clear the state (if supported).
     * @param opt_calledFrom Prevents looping with setEnabled.
     */
    setState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null , enable : boolean , opt_calledFrom ? : boolean ) : void ;
    /**
     * Sets the component's state to the state represented by a bit mask of
     * {@link goog.ui.Component.State}s.  Unlike {@link #setState}, doesn't
     * update the component's styling, and doesn't reject unsupported states.
     * Called by renderers during element decoration.  Considered protected;
     * should only be used within this package and by subclasses.
     *
     * This should only be used by subclasses and its associated renderers.
     * @param state Bit mask representing component state.
     */
    setStateInternal (state : number ) : void ;
    /**
     * Enables or disables support for the given state. Disabling support
     * for a state while the component is in that state is an error.
     * @param state State to support or de-support.
     * @param support Whether the component should support the state.
     */
    setSupportedState (state : ಠ_ಠ.clutz.goog.ui.Component.State | null , support : boolean ) : void ;
    /**
     * Shows or hides the component.  Does nothing if the component already has
     * the requested visibility.  Otherwise, dispatches a SHOW or HIDE event as
     * appropriate, giving listeners a chance to prevent the visibility change.
     * When showing a component that is both enabled and focusable, ensures that
     * its key target has a tab index.  When hiding a component that is enabled
     * and focusable, blurs its key target and removes its tab index.
     * @param visible Whether to show or hide the component.
     * @param opt_force If true, doesn't check whether the component already has the requested visibility, and doesn't dispatch any events.
     */
    setVisible (visible : boolean , opt_force ? : boolean ) : boolean ;
    /**
     * Takes an element and returns a new instance of {@link goog.ui.Control}
     * or a subclass, suitable to decorate it (based on the element's CSS class).
     * @param element Element to decorate.
     */
    static getDecorator (a : GlobalElement | null ) : ಠ_ಠ.clutz.goog.ui.Control | null ;
    /**
     * Maps a CSS class name to a function that returns a new instance of
     * {@link goog.ui.Control} or a subclass thereof, suitable to decorate
     * an element that has the specified CSS class.  UI components that extend
     * {@link goog.ui.Control} and want {@link goog.ui.Container}s to be able
     * to discover and decorate elements using them should register a factory
     * function via this API.
     * @param className CSS class name.
     * @param decoratorFunction Function that takes no arguments and returns a new instance of a control to decorate an element with the given class.
     */
    static registerDecorator (a : string , b : Function | null ) : any ;
  }
}
// Generated from ui/control.js
declare namespace ಠ_ಠ.clutz.goog.ui.Control {
  class IeMouseEventSequenceSimulator_ extends ಠ_ಠ.clutz.goog.Disposable {
    private noStructuralTyping_goog_ui_Control_IeMouseEventSequenceSimulator_ : any;
    disposeInternal ( ) : void ;
  }
}
declare module 'goog:goog.ui.Control' {
  import Control = ಠ_ಠ.clutz.goog.ui.Control;
  export default Control;
}
