//!! generated by clutz.
// Generated from ui/modalpopup.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * Base class for modal popup UI components. This can also be used as
   * a standalone component to render a modal popup with an empty div.
   *
   * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is rendered
   * directly in the 'body' element.
   *
   * The Html structure of the modal popup is:
   * <pre>
   * Element         Function              Class-name, goog-modalpopup = default
   * ----------------------------------------------------------------------------
   * - iframe         Iframe mask           goog-modalpopup-bg
   * - div            Background mask       goog-modalpopup-bg
   * - div            Modal popup area      goog-modalpopup
   * - span           Tab catcher
   * </pre>
   */
  class ModalPopup extends ಠ_ಠ.clutz.goog.ui.Component {
    private noStructuralTyping_goog_ui_ModalPopup : any;
    /**
     * Base class for modal popup UI components. This can also be used as
     * a standalone component to render a modal popup with an empty div.
     *
     * WARNING: goog.ui.ModalPopup is only guaranteed to work when it is rendered
     * directly in the 'body' element.
     *
     * The Html structure of the modal popup is:
     * <pre>
     * Element         Function              Class-name, goog-modalpopup = default
     * ----------------------------------------------------------------------------
     * - iframe         Iframe mask           goog-modalpopup-bg
     * - div            Background mask       goog-modalpopup-bg
     * - div            Modal popup area      goog-modalpopup
     * - span           Tab catcher
     * </pre>
     * @param opt_useIframeMask Work around windowed controls z-index issue by using an iframe instead of a div for bg element.
     * @param opt_domHelper Optional DOM helper; see {@link goog.ui.Component} for semantics.
     */
    constructor (opt_useIframeMask ? : boolean , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    canDecorate (element ? : any ) : any ;
    /**
     * Creates the initial DOM representation for the modal popup.
     */
    createDom ( ) : void ;
    decorateInternal (element ? : any ) : void ;
    disposeInternal ( ) : void ;
    enterDocument ( ) : void ;
    exitDocument ( ) : void ;
    focus ( ) : void ;
    /**
     * Returns the background mask element.
     */
    getBackgroundElement ( ) : GlobalElement | null ;
    /**
     * Returns the background iframe mask element, if any.
     */
    getBackgroundIframe ( ) : GlobalElement | null ;
    protected getCssClass ( ) : string ;
    /**
     * Returns the magic tab catcher element used to detect when the user has
     * rolled focus off of the popup content.  It is automatically created during
     * the createDom method() and can be used by subclasses to implement custom
     * tab-loop behavior.
     */
    protected getTabCatcherElement ( ) : GlobalElement | null ;
    isVisible ( ) : boolean ;
    /**
     * Handles focus events.  Makes sure that if the user tabs past the
     * elements in the modal popup, the focus wraps back to the beginning, and that
     * if the user shift-tabs past the front of the modal popup, focus wraps around
     * to the end.
     * @param e Browser's event object.
     */
    protected onFocus (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Called after the popup is hidden. If there is a transition, this
     * will be called after the transition completed or stopped.
     */
    protected onHide ( ) : void ;
    /**
     * Called after the popup is shown. If there is a transition, this
     * will be called after the transition completed or stopped.
     */
    protected onShow ( ) : void ;
    reposition ( ) : void ;
    /**
     * Sets aria-hidden on the rest of the page to restrict screen reader focus.
     * Top-level elements with an explicit aria-hidden state are not altered.
     * @param hide Whether to hide or show the rest of the page.
     */
    protected setA11YDetectBackground (hide : boolean ) : void ;
    /**
     * Sets the parent element to center the popup and the background inside the
     * parent element.
     */
    setCenterInsideParentElement (centerInsideParent : boolean ) : void ;
    /**
     * Sets the transitions to show and hide the popup and background.
     * @param popupShowTransition Transition to show the popup.
     * @param popupHideTransition Transition to hide the popup.
     * @param bgShowTransition Transition to show the background.
     * @param bgHideTransition Transition to hide the background.
     */
    setTransition (popupShowTransition : ಠ_ಠ.clutz.goog.fx.Transition , popupHideTransition : ಠ_ಠ.clutz.goog.fx.Transition , bgShowTransition : ಠ_ಠ.clutz.goog.fx.Transition , bgHideTransition : ಠ_ಠ.clutz.goog.fx.Transition ) : void ;
    /**
     * Sets the visibility of the modal popup box and focus to the popup.
     * @param visible Whether the modal popup should be visible.
     */
    setVisible (visible : boolean ) : void ;
    /**
     * Allow a shift-tab from the top of the modal popup to the last tabbable
     * element by moving focus to the tab catcher. This should be called after
     * catching a wrapping shift-tab event and before allowing it to propagate, so
     * that focus will land on the last tabbable element before the tab catcher.
     */
    protected setupBackwardTabWrap ( ) : void ;
  }
}
declare module 'goog:goog.ui.ModalPopup' {
  import ModalPopup = ಠ_ಠ.clutz.goog.ui.ModalPopup;
  export default ModalPopup;
}
