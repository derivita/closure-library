//!! generated by clutz.
// Generated from ui/palette.js
declare namespace ಠ_ಠ.clutz.goog.ui {
  /**
   * A palette is a grid of DOM nodes that the user can highlight or select via
   * the keyboard or the mouse.  The selection state of the palette is controlled
   * an ACTION event.  Event listeners may retrieve the selected item using the
   * {@link #getSelectedItem} or {@link #getSelectedIndex} method.
   *
   * Use this class as the base for components like color palettes or emoticon
   * pickers.  Use {@link #setContent} to set/change the items in the palette
   * after construction.  See palette.html demo for example usage.
   */
  class Palette extends ಠ_ಠ.clutz.goog.ui.Control {
    private noStructuralTyping_goog_ui_Palette : any;
    /**
     * A palette is a grid of DOM nodes that the user can highlight or select via
     * the keyboard or the mouse.  The selection state of the palette is controlled
     * an ACTION event.  Event listeners may retrieve the selected item using the
     * {@link #getSelectedItem} or {@link #getSelectedIndex} method.
     *
     * Use this class as the base for components like color palettes or emoticon
     * pickers.  Use {@link #setContent} to set/change the items in the palette
     * after construction.  See palette.html demo for example usage.
     * @param items Array of DOM nodes to be displayed as items in the palette grid (limited to one per cell).
     * @param opt_renderer Renderer used to render or decorate the palette; defaults to {@link goog.ui.PaletteRenderer}.
     * @param opt_domHelper Optional DOM helper, used for document interaction.
     */
    constructor (items : ( Node | null ) [] | null , opt_renderer ? : ಠ_ಠ.clutz.goog.ui.PaletteRenderer | null , opt_domHelper ? : ಠ_ಠ.clutz.goog.dom.DomHelper | null ) ;
    disposeInternal ( ) : void ;
    /**
     * Overrides {@link goog.ui.Control#getCaption} to return the empty string,
     * since palettes don't have text captions.
     */
    getCaption ( ) : string ;
    /**
     * Returns the 0-based index of the currently highlighted palette item, or -1
     * if no item is highlighted.
     */
    getHighlightedIndex ( ) : number ;
    /**
     * Returns the currently highlighted palette item, or null if no item is
     * highlighted.
     */
    getHighlightedItem ( ) : Node | null ;
    /**
     * Returns the 0-based index of the currently selected palette item, or -1
     * if no item is selected.
     */
    getSelectedIndex ( ) : number ;
    /**
     * Returns the currently selected palette item, or null if no item is selected.
     */
    getSelectedItem ( ) : Node | null ;
    /**
     * Returns the size of the palette grid.
     */
    getSize ( ) : ಠ_ಠ.clutz.goog.math.Size | null ;
    /**
     * Handles keyboard events dispatched while the palette has focus.  Moves the
     * highlight on arrow keys, and selects the highlighted item on Enter or Space.
     * Returns true if the event was handled, false otherwise.  In particular, if
     * the user attempts to navigate out of the grid, the highlight isn't changed,
     * and this method returns false; it is then up to the parent component to
     * handle the event (e.g. by wrapping the highlight around).  Overrides {@link
     * goog.ui.Control#handleKeyEvent}.
     * @param e Key event to handle.
     */
    handleKeyEvent (e : ಠ_ಠ.clutz.goog.events.KeyEvent | null ) : boolean ;
    /**
     * Handles mousedown events.  Overrides {@link goog.ui.Control#handleMouseDown}
     * by ensuring that the item on which the user moused down is highlighted.
     * @param e Mouse event to handle.
     */
    handleMouseDown (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Handles mouseover events.  Overrides {@link goog.ui.Control#handleMouseOver}
     * by determining which palette item (if any) was moused over, highlighting it,
     * and un-highlighting any previously-highlighted item.
     * @param e Mouse event to handle.
     */
    handleMouseOver (e : ಠ_ಠ.clutz.goog.events.BrowserEvent | null ) : void ;
    /**
     * Handles selection change events dispatched by the selection model.
     * @param e Selection event to handle.
     */
    handleSelectionChange (e : ಠ_ಠ.clutz.goog.events.Event | null ) : void ;
    /**
     * Selects the currently highlighted palette item (triggered by mouseup or by
     * keyboard action).  Overrides {@link goog.ui.Control#performActionInternal}
     * by selecting the highlighted item and dispatching an ACTION event.
     * @param e Mouse or key event that triggered the action.
     */
    performActionInternal (e : ಠ_ಠ.clutz.goog.events.Event | null ) : boolean ;
    /**
     * Overrides {@link goog.ui.Control#setCaption} to be a no-op, since palettes
     * don't have text captions.
     * @param caption Ignored.
     */
    setCaption (caption : string ) : void ;
    /**
     * Overrides {@link goog.ui.Control#setContentInternal} by also updating the
     * grid size and the selection model.  Considered protected.
     * @param content Array of DOM nodes to be displayed as items in the palette grid (one item per cell).
     */
    protected setContentInternal (content : ಠ_ಠ.clutz.goog.ui.ControlContent | null ) : void ;
    setHighlighted (highlight ? : any ) : void ;
    /**
     * Highlights the item at the given 0-based index, or removes the highlight
     * if the argument is -1 or out of range.  Any previously-highlighted item
     * will be un-highlighted.
     * @param index 0-based index of the item to highlight.
     */
    setHighlightedIndex (index : number ) : void ;
    /**
     * Highlights the given item, or removes the highlight if the argument is null
     * or invalid.  Any previously-highlighted item will be un-highlighted.
     * @param item Item to highlight.
     */
    setHighlightedItem (item : Node | null | undefined ) : void ;
    /**
     * Selects the item at the given 0-based index, or clears the selection
     * if the argument is -1 or out of range.  Any previously-selected item
     * will be deselected.
     * @param index 0-based index of the item to select.
     */
    setSelectedIndex (index : number ) : void ;
    /**
     * Selects the given item, or clears the selection if the argument is null or
     * invalid.  Any previously-selected item will be deselected.
     * @param item Item to select.
     */
    setSelectedItem (item : Node | null ) : void ;
    /**
     * Sets the size of the palette grid to the given size.  Callers can either
     * pass a single {@link goog.math.Size} or a pair of numbers (first the number
     * of columns, then the number of rows) to this method.  In both cases, the
     * number of rows is optional and will be calculated automatically if needed.
     * It is an error to attempt to change the size of the palette after it has
     * been rendered.
     * @param size Either a size object or the number of columns.
     * @param opt_rows The number of rows (optional).
     */
    setSize (size : ಠ_ಠ.clutz.goog.math.Size | null | number , opt_rows ? : number ) : void ;
  }
}
// Generated from ui/palette.js
declare namespace ಠ_ಠ.clutz.goog.ui.Palette {
  class CurrentCell_ extends ಠ_ಠ.clutz.goog.ui.Control {
    private noStructuralTyping_goog_ui_Palette_CurrentCell_ : any;
    tryHighlight (highlight : boolean ) : boolean ;
  }
  type EventType = string &{clutzEnumBrand: never} ;
  let EventType : {
    AFTER_HIGHLIGHT : EventType ,
  };
}
declare module 'goog:goog.ui.Palette' {
  import Palette = ಠ_ಠ.clutz.goog.ui.Palette;
  export default Palette;
}
