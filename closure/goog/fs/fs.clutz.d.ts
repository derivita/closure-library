//!! generated by clutz.
// Generated from fs/fs.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * Returns a persistent FileSystem object. A persistent filesystem will never be
   * deleted without the user's or application's authorization.
   * @param size The size requested for the filesystem, in bytes.
   */
  function getPersistent (size : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  /**
   * Returns a temporary FileSystem object. A temporary filesystem may be deleted
   * by the user agent at its discretion.
   * @param size The size requested for the filesystem, in bytes.
   */
  function getTemporary (size : number ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  /**
   * Slices the blob. The returned blob contains data from the start byte
   * (inclusive) till the end byte (exclusive). Negative indices can be used
   * to count bytes from the end of the blob (-1 == blob.size - 1). Indices
   * are always clamped to blob range. If end is omitted, all the data till
   * the end of the blob is taken.
   * @param blob The blob to be sliced.
   * @param start Index of the starting byte.
   * @param opt_end Index of the ending byte.
   */
  function sliceBlob (blob : Blob , start : number , opt_end ? : number ) : Blob | null ;
}
declare module 'goog:goog.fs' {
  import fs = ಠ_ಠ.clutz.goog.fs;
  export = fs;
}
