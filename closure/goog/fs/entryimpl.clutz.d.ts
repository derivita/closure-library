//!! generated by clutz.
// Generated from fs/entryimpl.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A directory in a local FileSystem.
   *
   * This should not be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.FileSystem#getRoot} or
   * {@link goog.fs.DirectoryEntry#getDirectoryEntry}.
   */
  class DirectoryEntryImpl extends ಠ_ಠ.clutz.goog.fs.EntryImpl implements ಠ_ಠ.clutz.goog.fs.DirectoryEntry {
    private noStructuralTyping_goog_fs_DirectoryEntryImpl : any;
    /**
     * A directory in a local FileSystem.
     *
     * This should not be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.FileSystem#getRoot} or
     * {@link goog.fs.DirectoryEntry#getDirectoryEntry}.
     * @param fs The wrapped filesystem.
     * @param dir The underlying DirectoryEntry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , dir : ಠ_ಠ.clutz.DirectoryEntry ) ;
    createPath (path ? : any ) : any ;
    getDirectory (path ? : any , opt_behavior ? : any ) : any ;
    getFile (path ? : any , opt_behavior ? : any ) : any ;
    listDirectory ( ) : any ;
    removeRecursively ( ) : any ;
  }
}
declare module 'goog:goog.fs.DirectoryEntryImpl' {
  import DirectoryEntryImpl = ಠ_ಠ.clutz.goog.fs.DirectoryEntryImpl;
  export default DirectoryEntryImpl;
}
// Generated from fs/entryimpl.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * Base class for concrete implementations of goog.fs.Entry.
   */
  class EntryImpl implements ಠ_ಠ.clutz.goog.fs.Entry {
    private noStructuralTyping_goog_fs_EntryImpl : any;
    /**
     * Base class for concrete implementations of goog.fs.Entry.
     * @param fs The wrapped filesystem.
     * @param entry The underlying Entry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , entry : ಠ_ಠ.clutz.Entry ) ;
    copyTo (parent ? : any , opt_newName ? : any ) : any ;
    getFileSystem ( ) : any ;
    getFullPath ( ) : any ;
    getLastModified ( ) : any ;
    getMetadata ( ) : any ;
    getName ( ) : any ;
    getParent ( ) : any ;
    isDirectory ( ) : any ;
    isFile ( ) : any ;
    moveTo (parent ? : any , opt_newName ? : any ) : any ;
    remove ( ) : any ;
    toUri (opt_mimeType ? : any ) : any ;
    toUrl (opt_mimeType ? : any ) : any ;
    wrapEntry (entry ? : any ) : any ;
  }
}
declare module 'goog:goog.fs.EntryImpl' {
  import EntryImpl = ಠ_ಠ.clutz.goog.fs.EntryImpl;
  export default EntryImpl;
}
// Generated from fs/entryimpl.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A file in a local filesystem.
   *
   * This should not be instantiated directly. Instead, it should be accessed via
   * {@link goog.fs.DirectoryEntry#getFile}.
   */
  class FileEntryImpl extends ಠ_ಠ.clutz.goog.fs.EntryImpl implements ಠ_ಠ.clutz.goog.fs.FileEntry {
    private noStructuralTyping_goog_fs_FileEntryImpl : any;
    /**
     * A file in a local filesystem.
     *
     * This should not be instantiated directly. Instead, it should be accessed via
     * {@link goog.fs.DirectoryEntry#getFile}.
     * @param fs The wrapped filesystem.
     * @param file The underlying FileEntry object.
     */
    constructor (fs : ಠ_ಠ.clutz.goog.fs.FileSystem , file : ಠ_ಠ.clutz.FileEntry ) ;
    createWriter ( ) : any ;
    file ( ) : any ;
  }
}
declare module 'goog:goog.fs.FileEntryImpl' {
  import FileEntryImpl = ಠ_ಠ.clutz.goog.fs.FileEntryImpl;
  export default FileEntryImpl;
}
