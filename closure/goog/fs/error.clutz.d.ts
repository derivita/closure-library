//!! generated by clutz.
// Generated from fs/error.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  interface DOMErrorLike {
    code ? : ಠ_ಠ.clutz.goog.fs.Error.ErrorCode ;
    name ? : string ;
  }
}
declare module 'goog:goog.fs.DOMErrorLike' {
  import DOMErrorLike = ಠ_ಠ.clutz.goog.fs.DOMErrorLike;
  export default DOMErrorLike;
}
// Generated from fs/error.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A filesystem error. Since the filesystem API is asynchronous, stack traces
   * are less useful for identifying where errors come from, so this includes a
   * large amount of metadata in the message.
   */
  class Error extends ಠ_ಠ.clutz.goog.debug.Error {
    private noStructuralTyping_goog_fs_Error : any;
    /**
     * A filesystem error. Since the filesystem API is asynchronous, stack traces
     * are less useful for identifying where errors come from, so this includes a
     * large amount of metadata in the message.
     * @param action The action being undertaken when the error was raised.
     */
    constructor (error : DOMError | ಠ_ಠ.clutz.goog.fs.DOMErrorLike , action : string ) ;
    code : ಠ_ಠ.clutz.goog.fs.Error.ErrorCode ;
    name : string ;
  }
}
// Generated from fs/error.js
declare namespace ಠ_ಠ.clutz.goog.fs.Error {
  /**
   * Names of errors that may be thrown by the File API, the File System API, or
   * the File Writer API.
   */
  enum ErrorName {
    ABORT = 'AbortError' ,
    ENCODING = 'EncodingError' ,
    INVALID_MODIFICATION = 'InvalidModificationError' ,
    INVALID_STATE = 'InvalidStateError' ,
    NOT_FOUND = 'NotFoundError' ,
    NOT_READABLE = 'NotReadableError' ,
    NO_MODIFICATION_ALLOWED = 'NoModificationAllowedError' ,
    PATH_EXISTS = 'PathExistsError' ,
    QUOTA_EXCEEDED = 'QuotaExceededError' ,
    SECURITY = 'SecurityError' ,
    SYNTAX = 'SyntaxError' ,
    TYPE_MISMATCH = 'TypeMismatchError' ,
  }
}
declare module 'goog:goog.fs.Error' {
  import Error = ಠ_ಠ.clutz.goog.fs.Error;
  export default Error;
}
// Generated from fs/error.js
declare namespace ಠ_ಠ.clutz.goog.fs.Error {
  /**
   * Error codes for file errors.
   */
  /**
   * Error codes for file errors.
   */
  enum ErrorCode {
    ABORT = 3.0 ,
    ENCODING = 5.0 ,
    INVALID_MODIFICATION = 9.0 ,
    INVALID_STATE = 7.0 ,
    NOT_FOUND = 1.0 ,
    NOT_READABLE = 4.0 ,
    NO_MODIFICATION_ALLOWED = 6.0 ,
    PATH_EXISTS = 12.0 ,
    QUOTA_EXCEEDED = 10.0 ,
    SECURITY = 2.0 ,
    SYNTAX = 8.0 ,
    TYPE_MISMATCH = 11.0 ,
  }
}
declare module 'goog:goog.fs.Error.ErrorCode' {
  import ErrorCode = ಠ_ಠ.clutz.goog.fs.Error.ErrorCode;
  export default ErrorCode;
}
