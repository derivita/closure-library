//!! generated by clutz.
// Generated from fs/filereader.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * An object for monitoring the reading of files. This emits ProgressEvents of
   * the types listed in {@link goog.fs.FileReader.EventType}.
   */
  class FileReader extends ಠ_ಠ.clutz.goog.events.EventTarget {
    private noStructuralTyping_goog_fs_FileReader : any;
    /**
     * An object for monitoring the reading of files. This emits ProgressEvents of
     * the types listed in {@link goog.fs.FileReader.EventType}.
     */
    constructor ( ) ;
    abort ( ) : void ;
    disposeInternal ( ) : void ;
    getError ( ) : ಠ_ಠ.clutz.goog.fs.Error | null ;
    getReadyState ( ) : ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState ;
    getResult ( ) : any ;
    /**
     * Starts reading a blob as an array buffer.
     * @param blob The blob to read.
     */
    readAsArrayBuffer (blob : Blob ) : void ;
    /**
     * Starts reading a blob as a binary string.
     * @param blob The blob to read.
     */
    readAsBinaryString (blob : Blob ) : void ;
    /**
     * Starts reading a blob as a data URL.
     * @param blob The blob to read.
     */
    readAsDataUrl (blob : Blob ) : void ;
    /**
     * Starts reading a blob as text.
     * @param blob The blob to read.
     * @param opt_encoding The name of the encoding to use.
     */
    readAsText (blob : Blob , opt_encoding ? : string ) : void ;
    /**
     * Reads a blob as an array buffer.
     * @param blob The blob to read.
     */
    static readAsArrayBuffer (blob : Blob ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Reads a blob as a binary string.
     * @param blob The blob to read.
     */
    static readAsBinaryString (blob : Blob ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Reads a blob as a data URL.
     * @param blob The blob to read.
     */
    static readAsDataUrl (blob : Blob ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Reads a blob as text.
     * @param blob The blob to read.
     * @param opt_encoding The name of the encoding to use.
     */
    static readAsText (blob : Blob , opt_encoding ? : string ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  }
}
declare module 'goog:goog.fs.FileReader' {
  import FileReader = ಠ_ಠ.clutz.goog.fs.FileReader;
  export default FileReader;
}
// Generated from fs/filereader.js
declare namespace ಠ_ಠ.clutz.goog.fs.FileReader {
  /**
   * Events emitted by a FileReader.
   */
  /**
   * Events emitted by a FileReader.
   */
  enum EventType {
    ABORT = 'abort' ,
    ERROR = 'error' ,
    LOAD = 'load' ,
    LOAD_END = 'loadend' ,
    LOAD_START = 'loadstart' ,
    PROGRESS = 'progress' ,
  }
}
declare module 'goog:goog.fs.FileReader.EventType' {
  import EventType = ಠ_ಠ.clutz.goog.fs.FileReader.EventType;
  export default EventType;
}
// Generated from fs/filereader.js
declare namespace ಠ_ಠ.clutz.goog.fs.FileReader {
  /**
   * Possible states for a FileReader.
   */
  /**
   * Possible states for a FileReader.
   */
  enum ReadyState {
    DONE = 2.0 ,
    INIT = 0.0 ,
    LOADING = 1.0 ,
  }
}
declare module 'goog:goog.fs.FileReader.ReadyState' {
  import ReadyState = ಠ_ಠ.clutz.goog.fs.FileReader.ReadyState;
  export default ReadyState;
}
