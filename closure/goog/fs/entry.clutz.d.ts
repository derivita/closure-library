//!! generated by clutz.
// Generated from fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A directory in a local FileSystem.
   */
  interface DirectoryEntry extends ಠ_ಠ.clutz.goog.fs.Entry {
    /**
     * Opens the directory for the specified path, creating the directory and any
     * intermediate directories as necessary.
     * @param path The directory path to create. May be absolute or relative to the current directory. The parent directory ".." and current directory "." are supported.
     */
    createPath (path : string ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Get a directory within this directory.
     * @param path The path to the directory, relative to this directory.
     * @param opt_behavior The behavior for handling an existing directory, or the lack thereof.
     */
    getDirectory (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Get a file in the directory.
     * @param path The path to the file, relative to this directory.
     * @param opt_behavior The behavior for handling an existing file, or the lack thereof.
     */
    getFile (path : string , opt_behavior ? : ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Gets a list of all entries in this directory.
     */
    listDirectory ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Removes this directory and all its contents.
     */
    removeRecursively ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
  }
}
declare module 'goog:goog.fs.DirectoryEntry' {
  import DirectoryEntry = ಠ_ಠ.clutz.goog.fs.DirectoryEntry;
  export default DirectoryEntry;
}
// Generated from fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.fs.DirectoryEntry {
  /**
   * Behaviors for getting files and directories.
   */
  /**
   * Behaviors for getting files and directories.
   */
  enum Behavior {
    CREATE = 2.0 ,
    CREATE_EXCLUSIVE = 3.0 ,
    DEFAULT = 1.0 ,
  }
}
declare module 'goog:goog.fs.DirectoryEntry.Behavior' {
  import Behavior = ಠ_ಠ.clutz.goog.fs.DirectoryEntry.Behavior;
  export default Behavior;
}
// Generated from fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * The interface for entries in the filesystem.
   */
  interface Entry {
    /**
     * Copy this entry to a new location.
     * @param parent The new parent directory.
     * @param opt_newName The name of the new entry. If omitted, the new entry has the same name as the original.
     */
    copyTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    getFileSystem ( ) : ಠ_ಠ.clutz.goog.fs.FileSystem ;
    getFullPath ( ) : string ;
    /**
     * Retrieves the last modified date for this entry.
     */
    getLastModified ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Retrieves the metadata for this entry.
     */
    getMetadata ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    getName ( ) : string ;
    /**
     * Gets the parent directory.
     */
    getParent ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    isDirectory ( ) : boolean ;
    isFile ( ) : boolean ;
    /**
     * Move this entry to a new location.
     * @param parent The new parent directory.
     * @param opt_newName The new name of the entry. If omitted, the entry retains its original name.
     */
    moveTo (parent : ಠ_ಠ.clutz.goog.fs.DirectoryEntry , opt_newName ? : string ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Remove this entry.
     */
    remove ( ) : ಠ_ಠ.clutz.goog.async.Deferred ;
    /**
     * Get the URI for this file.
     * @param opt_mimeType The MIME type that will be served for the URI.
     */
    toUri (opt_mimeType ? : string ) : string ;
    /**
     * Get the URL for this file.
     * @param opt_mimeType The MIME type that will be served for the URL.
     */
    toUrl (opt_mimeType ? : string ) : string ;
    /**
     * Wrap an HTML5 entry object in an appropriate subclass instance.
     * @param entry The underlying Entry object.
     */
    protected wrapEntry (entry : ಠ_ಠ.clutz.Entry ) : ಠ_ಠ.clutz.goog.fs.Entry ;
  }
}
declare module 'goog:goog.fs.Entry' {
  import Entry = ಠ_ಠ.clutz.goog.fs.Entry;
  export default Entry;
}
// Generated from fs/entry.js
declare namespace ಠ_ಠ.clutz.goog.fs {
  /**
   * A file in a local filesystem.
   */
  interface FileEntry extends ಠ_ಠ.clutz.goog.fs.Entry {
    /**
     * Create a writer for writing to the file.
     */
    createWriter ( ) : ಠ_ಠ.clutz.goog.async.Deferred < ಠ_ಠ.clutz.goog.fs.FileWriter > ;
    /**
     * Get the file contents as a File blob.
     */
    file ( ) : ಠ_ಠ.clutz.goog.async.Deferred < File > ;
  }
}
declare module 'goog:goog.fs.FileEntry' {
  import FileEntry = ಠ_ಠ.clutz.goog.fs.FileEntry;
  export default FileEntry;
}
